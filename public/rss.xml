<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>杜明清的个人博客</title>
        <subtitle>👻欢迎一起交流学习👻</subtitle>
        <icon>https://dmqweb.cn/images/favicon.ico</icon>
        <link>https://dmqweb.cn</link>
        <author>
          <name>dmq</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 27 May 2024 18:16:27 +0800</pubDate>
        <lastBuildDate>Mon, 27 May 2024 18:16:27 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid>
            <title>OSI七层网络模型</title>
            <link>https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link>
            <category term="OSI七层网络模型" scheme="https://dmqweb.cn/categories/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" />
            <category term="OSI七层网络模型" scheme="https://dmqweb.cn/tags/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" />
            <pubDate>Mon, 27 May 2024 18:16:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;OSI七层网络模型&#34;&gt;&lt;a href=&#34;#OSI七层网络模型&#34; class=&#34;headerlink&#34; title=&#34;OSI七层网络模型&#34;&gt;&lt;/a&gt;OSI七层网络模型&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/images/e3cc1860482648d5a2b2f6bac23280d3~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;七、应用层（应用）&#34;&gt;&lt;a href=&#34;#七、应用层（应用）&#34; class=&#34;headerlink&#34; title=&#34;七、应用层（应用）&#34;&gt;&lt;/a&gt;七、应用层（应用）&lt;/h1&gt;&lt;p&gt;应用层就是我们最接近我们、最常用的一层，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ajax调用接口发送&lt;strong&gt;http请求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;DNS域名查询&lt;/strong&gt;系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邮件协议SMTP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;websock长连接&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;六、表示层（安全、压缩、翻译）&#34;&gt;&lt;a href=&#34;#六、表示层（安全、压缩、翻译）&#34; class=&#34;headerlink&#34; title=&#34;六、表示层（安全、压缩、翻译）&#34;&gt;&lt;/a&gt;六、表示层（安全、压缩、翻译）&lt;/h1&gt;&lt;p&gt;表示层做了几件重要的事情如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩&lt;/li&gt;
&lt;li&gt;安全（数据发送前进行加密，在接受者的表示层进行解密）&lt;/li&gt;
&lt;li&gt;程序在网络中的翻译官（对图片文件等格式进行解码和编码）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;五、会话层（检查点机制）&#34;&gt;&lt;a href=&#34;#五、会话层（检查点机制）&#34; class=&#34;headerlink&#34; title=&#34;五、会话层（检查点机制）&#34;&gt;&lt;/a&gt;五、会话层（检查点机制）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;会话层是在发送方和接收方之间进行通信时创建、维持、之后终止或断开连接的地方&lt;/li&gt;
&lt;li&gt;会话层定义了一种机制，允许发送方和接收方启动或停止请求会话，当及当双方发生拥塞时仍然能保持对话&lt;/li&gt;
&lt;li&gt;会话层包含了一种&lt;strong&gt;检查点的机制&lt;/strong&gt;来维持可靠会话，检查点定义了一个最接近成功通信的点，并且定义了当发生内容丢失或者损坏时需要回滚以便回复丢失或损坏数据的点，即断点下载的原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四、传输层（TCP、UDP连接）&#34;&gt;&lt;a href=&#34;#四、传输层（TCP、UDP连接）&#34; class=&#34;headerlink&#34; title=&#34;四、传输层（TCP、UDP连接）&#34;&gt;&lt;/a&gt;四、传输层（TCP、UDP连接）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;传输层主要就是定义端口号，以及控流和校验&lt;/li&gt;
&lt;li&gt;TCP（面向连接的协议并且TCP是可靠的），因为TCP会进行三报文握手和四报文挥手，所以是可靠的，但是这样会降低速度&lt;/li&gt;
&lt;li&gt;UDP（UDP没有三报文握手和四报文挥手，因此不够稳定，但是速度快，常用于直播和游戏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三、网络层（IP地址）&#34;&gt;&lt;a href=&#34;#三、网络层（IP地址）&#34; class=&#34;headerlink&#34; title=&#34;三、网络层（IP地址）&#34;&gt;&lt;/a&gt;三、网络层（IP地址）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;网络层是最复杂的一层，在网络层定义了IP&lt;/li&gt;
&lt;li&gt;网络层控制数据链路层与传输层之间的信息转发，建立，维持和终止网络的连接。&lt;/li&gt;
&lt;li&gt;数据链路层的数据在网络层被转换为数据包，然后通过路径选择、分段组合、顺序、进&amp;#x2F;出路由等控制，将信息从一个网络设备传送到另一个网络设备&lt;/li&gt;
&lt;li&gt;寻址：对网络层而言使用IP地址来唯一标识互联网上的设备，网络层依靠IP地址进行相互通信（类似于数据链路层的MAC地址）&lt;/li&gt;
&lt;li&gt;路由：在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。&lt;/li&gt;
&lt;li&gt;如果所有的使用互联网的用户在同一个网段中，&lt;strong&gt;会产生广播风暴，所以要将用户进行划分&lt;/strong&gt;，让他们在不同的网段中，自己在自己的小网段中广播。而&lt;strong&gt;互联网就是这无数的子网络构成的一个巨型网络&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在网络层中引入了一套新的地址，让我们能够区分不同的网段。这套地址就叫做“网络地址”，简称“网址”。于是，&lt;strong&gt;”网络层”出现以后，每台计算机有了两种地址&lt;/strong&gt;，&lt;strong&gt;一种是MAC地址，另一种是网络地址&lt;/strong&gt;。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。&lt;strong&gt;网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。&lt;/strong&gt;因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。&lt;/li&gt;
&lt;li&gt;这一层中有一个&lt;strong&gt;规定网络地址的协议，叫做IP协议&lt;/strong&gt;，它所定义的地址，就被称为IP地址。&lt;/li&gt;
&lt;li&gt;目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。因为IPv4的地址已经不够用了，所以现在推广IPv6，&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二、数据链路层（MAC地址）&#34;&gt;&lt;a href=&#34;#二、数据链路层（MAC地址）&#34; class=&#34;headerlink&#34; title=&#34;二、数据链路层（MAC地址）&#34;&gt;&lt;/a&gt;二、数据链路层（MAC地址）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;建立逻辑连接、进行硬件地址寻址、差错校验等功能（底层网络定义协议）&lt;/li&gt;
&lt;li&gt;及比特组合成字节进而组合成帧，用MAC地址访问介质，此时可以发现错误但不能纠正。&lt;/li&gt;
&lt;li&gt;MAC地址是每个网卡的唯一标识，有了MAC地址就能知道谁是接收者，谁是发送者，并且知道了数据的内容，并且进行分组。&lt;/li&gt;
&lt;li&gt;传播数据是通过广播的方式进行传输，在局域网中的所有计算机都能接收到消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一、物理层（物理信道）&#34;&gt;&lt;a href=&#34;#一、物理层（物理信道）&#34; class=&#34;headerlink&#34; title=&#34;一、物理层（物理信道）&#34;&gt;&lt;/a&gt;一、物理层（物理信道）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;物理层是直接和物理介质打交道的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;物理层的设备 网卡，网线，集线器，中继器，调制解调器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;物理层信道：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有线信道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明线（平行架设在电线杆上的架空线路）&lt;/li&gt;
&lt;li&gt;对称电缆（对多双绞线组成）&lt;/li&gt;
&lt;li&gt;同轴电缆（具有外层屏蔽层）&lt;/li&gt;
&lt;li&gt;光纤（利用光在纤维中的反射原理进行传输）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无线信道&lt;/p&gt;
&lt;p&gt;以辐射无线电波为传输方式无线信道主要有地波传输，天波传输和视距传输 例如：卫星通讯，电台广播&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物理层通过以上的方式，会获取他们对应的传送信号，电压，转换成010101010101但是数据还未组织，仅作为原始的电气电压处理&lt;code&gt;单位为bit&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/24/node/</guid>
            <title>Node学习笔记</title>
            <link>https://dmqweb.cn/2024/05/24/node/</link>
            <category term="Node.js" scheme="https://dmqweb.cn/categories/Node-js/" />
            <category term="node.js" scheme="https://dmqweb.cn/tags/node-js/" />
            <pubDate>Fri, 24 May 2024 17:02:28 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Node-js&#34;&gt;&lt;a href=&#34;#Node-js&#34; class=&#34;headerlink&#34; title=&#34;Node.js&#34;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js并不是JavaScript应用，也不是编程语言，而是JavaScript的运行时。&lt;/li&gt;
&lt;li&gt;Node.js是构建在V8引擎之上的，V8引擎由C &amp;#x2F; C++编写，因此JavaScript语言需要编译为C &amp;#x2F; C++代码之后才能执行。&lt;/li&gt;
&lt;li&gt;Node.js采用异步IO和事件驱动的设计理念，可以高效的处理大量并发请求，提供了非阻塞IO接口和事件循环机制，使其可以编写出高性能、高扩展的应用程序。（异步IO通过libuv库来实现）&lt;/li&gt;
&lt;li&gt;Node.js使用npm作为包管理工具&lt;/li&gt;
&lt;li&gt;Node.js适合做一些IO密集型应用，不适合做一些CPU密集型应用（事件循环机制和异步IO使得Node.js有很强的处理能力，但是因为Node.js单线程的原因，容易造成CPU占用率过高）&lt;/li&gt;
&lt;li&gt;如果非要用Node.js做CPU密集型应用，需要编写C++插件，或者Node提供的cluster模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;npm&#34;&gt;&lt;a href=&#34;#npm&#34; class=&#34;headerlink&#34; title=&#34;npm&#34;&gt;&lt;/a&gt;npm&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;npm是Node.js的包管理工具，它基于命令行，用于帮助开发者在自己的项目中安装、升级、移除和管理依赖项。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qaWF4aWFveGlhby5uZXRsaWZ5LmFwcC8yMDE5LzA3LzMwL25vZGUvbm9kZS1ucG0v&#34;&gt;npm命令大全&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTQ1NzU5ODY4MDEwMzY0OTU5&#34;&gt;package.json配置详解&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-install&#34;&gt;&lt;a href=&#34;#npm-install&#34; class=&#34;headerlink&#34; title=&#34;npm install&#34;&gt;&lt;/a&gt;npm install&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;npm install&lt;/code&gt;时，npm会通过广度优先遍历算法遍历依赖树，npm会首先处理项目根目录下的依赖，然后逐层处理每个依赖包的依赖，直到所有的依赖被处理完成。在处理每个依赖时，npm会检查该依赖的版本号是否符合依赖树中其他依赖的版本要求，如果不符合，则会尝试安装适合的版本。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-28_18-35-31.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;npmrc文件&#34;&gt;&lt;a href=&#34;#npmrc文件&#34; class=&#34;headerlink&#34; title=&#34;.npmrc文件&#34;&gt;&lt;/a&gt;.npmrc文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;registry=http://registry.npmjs.org/
# 定义npm的registry，即npm的包下载源
proxy=http://proxy.example.com:8080/
# 定义npm的代理服务器，用于访问网络
https-proxy=http://proxy.example.com:8080/
# 定义npm的https代理服务器，用于访问网络
strict-ssl=true
# 是否在SSL证书验证错误时退出
cafile=/path/to/cafile.pem
# 定义自定义CA证书文件的路径
user-agent=npm/&amp;#123;npm-version&amp;#125; node/&amp;#123;node-version&amp;#125; &amp;#123;platform&amp;#125;
# 自定义请求头中的User-Agent
save=true
# 安装包时是否自动保存到package.json的dependencies中
save-dev=true
# 安装包时是否自动保存到package.json的devDependencies中
save-exact=true
# 安装包时是否精确保存版本号
engine-strict=true
# 是否在安装时检查依赖的node和npm版本是否符合要求
scripts-prepend-node-path=true
# 是否在运行脚本时自动将node的路径添加到PATH环境变量中
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;package-lock-json&#34;&gt;&lt;a href=&#34;#package-lock-json&#34; class=&#34;headerlink&#34; title=&#34;package-lock.json&#34;&gt;&lt;/a&gt;package-lock.json&lt;/h4&gt;&lt;p&gt;文件的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;锁定版本号、记录依赖树详细信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package-lock.json帮我们做了缓存，他会通过 &lt;code&gt;name + version + integrity&lt;/code&gt; 信息生成一个唯一的key，这个key能找到对应的index-v5 下的缓存记录 （npm cache 文件夹下），如果发现有缓存记录，就会找到tar包的hash值，然后将对应的二进制文件解压到node_modeules&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-run&#34;&gt;&lt;a href=&#34;#npm-run&#34; class=&#34;headerlink&#34; title=&#34;npm run&#34;&gt;&lt;/a&gt;npm run&lt;/h4&gt;&lt;p&gt;读取package.json的scripts对应的脚本命令，查找的规则是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前项目node_modules&amp;#x2F;.bin查找&lt;/li&gt;
&lt;li&gt;全局node_modules&amp;#x2F;.bin查找&lt;/li&gt;
&lt;li&gt;环境变量查找&lt;/li&gt;
&lt;li&gt;找不到，报错&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;node_modules&amp;#x2F;.bin中有三个文件（Node作为跨平台工具，需要处理平台兼容性）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sh文件是给Linux unix Macos 使用&lt;/li&gt;
&lt;li&gt;.cmd 给windows的cmd使用&lt;/li&gt;
&lt;li&gt;.ps1 给windows的powerShell 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-生命周期&#34;&gt;&lt;a href=&#34;#npm-生命周期&#34; class=&#34;headerlink&#34; title=&#34;npm 生命周期&#34;&gt;&lt;/a&gt;npm 生命周期&lt;/h4&gt;&lt;p&gt;在package.json中的scripts字段中，我们可以利用npm脚本命名规范使用npm的生命周期特性，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;    &amp;quot;pretest&amp;quot;: &amp;quot;node prev.js&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;node index.js&amp;quot;,
    &amp;quot;posttest&amp;quot;: &amp;quot;node post.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则执行：npm run test时，会最先执行pretest，最后执行posttest。&lt;/p&gt;
&lt;h4 id=&#34;npx&#34;&gt;&lt;a href=&#34;#npx&#34; class=&#34;headerlink&#34; title=&#34;npx&#34;&gt;&lt;/a&gt;npx&lt;/h4&gt;&lt;p&gt;npx是一个命令行工具，它是npm 5.2.0版本中新增的功能。它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。&lt;/p&gt;
&lt;p&gt;npx的作用是在命令行中运行node包中的可执行文件，而不需要全局安装这些包。这可以使开发人员更轻松地管理包的依赖关系，并且可以避免全局污染的问题。它还可以帮助开发人员在项目中使用不同版本的包，而不会出现版本冲突的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npx 的优势&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免全局安装：&lt;code&gt;npx&lt;/code&gt;允许你执行npm package，而不需要你先全局安装它。&lt;/li&gt;
&lt;li&gt;总是使用最新版本：如果你没有在本地安装相应的npm package，&lt;code&gt;npx&lt;/code&gt;会从npm的package仓库中下载并使用最新版。&lt;/li&gt;
&lt;li&gt;执行任意npm包：&lt;code&gt;npx&lt;/code&gt;不仅可以执行在&lt;code&gt;package.json&lt;/code&gt;的&lt;code&gt;scripts&lt;/code&gt;部分定义的命令，还可以执行任何npm package。&lt;/li&gt;
&lt;li&gt;执行GitHub gist：&lt;code&gt;npx&lt;/code&gt;甚至可以执行GitHub gist或者其他公开的JavaScript文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;npm 和 npx 区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npx&lt;/code&gt;侧重于执行命令的，执行某个模块命令。虽然会自动安装模块，但是重在执行某个命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;侧重于安装或者卸载某个模块的。重在安装，并不具备执行某个模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm私服&#34;&gt;&lt;a href=&#34;#npm私服&#34; class=&#34;headerlink&#34; title=&#34;npm私服&#34;&gt;&lt;/a&gt;npm私服&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以离线使用&lt;/strong&gt;，你可以将npm私服部署到内网集群，这样离线也可以访问私有的包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高包的安全性&lt;/strong&gt;，使用私有的npm仓库可以更好的管理你的包，避免在使用公共的npm包的时候出现漏洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高包的下载速度&lt;/strong&gt;，使用私有 npm 仓库，你可以将经常使用的 npm 包缓存到本地，从而显著提高包的下载速度，减少依赖包的下载时间。这对于团队内部开发和持续集成、部署等场景非常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;搭建：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以克隆npm或cnpm仓库，更改yaml配置文件为自己想要的设置即可&lt;/li&gt;
&lt;li&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92ZXJkYWNjaW8ub3JnL3poLWNuLw==&#34;&gt;verdaccio工具&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install verdaccio -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verdaccio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问localhost:4873&lt;/li&gt;
&lt;li&gt;使用npm操作时，加上&lt;code&gt;--registry http://localhost:4873&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Node模块化&#34;&gt;&lt;a href=&#34;#Node模块化&#34; class=&#34;headerlink&#34; title=&#34;Node模块化&#34;&gt;&lt;/a&gt;Node模块化&lt;/h2&gt;&lt;h4 id=&#34;CommonJS&#34;&gt;&lt;a href=&#34;#CommonJS&#34; class=&#34;headerlink&#34; title=&#34;CommonJS&#34;&gt;&lt;/a&gt;CommonJS&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持引入内置模块例如 &lt;code&gt;http&lt;/code&gt; &lt;code&gt;os&lt;/code&gt; &lt;code&gt;fs&lt;/code&gt; &lt;code&gt;child_process&lt;/code&gt; 等nodejs内置模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入第三方模块&lt;code&gt;express&lt;/code&gt; &lt;code&gt;md5&lt;/code&gt; &lt;code&gt;koa&lt;/code&gt; 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入自己编写的模块 .&amp;#x2F; ..&amp;#x2F; 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入addon C++扩展模块 .node文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ESM&#34;&gt;&lt;a href=&#34;#ESM&#34; class=&#34;headerlink&#34; title=&#34;ESM&#34;&gt;&lt;/a&gt;ESM&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;import静态导入需要在顶层调用&lt;/li&gt;
&lt;li&gt;import导入json文件需要添加断言（低版本node不可用）&lt;/li&gt;
&lt;li&gt;支持函数式动态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对比&#34;&gt;&lt;a href=&#34;#对比&#34; class=&#34;headerlink&#34; title=&#34;对比&#34;&gt;&lt;/a&gt;对比&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;CommonJS基于运行时的同步加载，ESM基于编译时的异步加载&lt;/li&gt;
&lt;li&gt;CommonJS是可以修改值的，ESM值并且不可修改（可读的）&lt;/li&gt;
&lt;li&gt;CommonJS不可以tree shaking，ESM支持tree shaking&lt;/li&gt;
&lt;li&gt;CommonJS中顶层的this指向这个模块本身，而ESM中顶层this指向undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;require执行顺序&#34;&gt;&lt;a href=&#34;#require执行顺序&#34; class=&#34;headerlink&#34; title=&#34;require执行顺序&#34;&gt;&lt;/a&gt;require执行顺序&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;.js文件，调用compile函数进行执行。&lt;/li&gt;
&lt;li&gt;.json文件，读取文件内容，调用JSON.parse方法处理。&lt;/li&gt;
&lt;li&gt;.node文件，通过process.dlopen方法进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;全局变量&#34;&gt;&lt;a href=&#34;#全局变量&#34; class=&#34;headerlink&#34; title=&#34;全局变量&#34;&gt;&lt;/a&gt;全局变量&lt;/h2&gt;&lt;h4 id=&#34;global&#34;&gt;&lt;a href=&#34;#global&#34; class=&#34;headerlink&#34; title=&#34;global&#34;&gt;&lt;/a&gt;global&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;浏览器端的全局对象是window&lt;/li&gt;
&lt;li&gt;Node环境的全局对象是global&lt;/li&gt;
&lt;li&gt;global上定义的变量在当前环境执行任何文件时都可以访问到&lt;/li&gt;
&lt;li&gt;ES2020推出globalThis用于兼容window和global（自动切换）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dirname&#34;&gt;&lt;a href=&#34;#dirname&#34; class=&#34;headerlink&#34; title=&#34;__dirname&#34;&gt;&lt;/a&gt;__dirname&lt;/h4&gt;&lt;p&gt;当前模块所在目录的绝对路径&lt;/p&gt;
&lt;h4 id=&#34;filename&#34;&gt;&lt;a href=&#34;#filename&#34; class=&#34;headerlink&#34; title=&#34;__filename&#34;&gt;&lt;/a&gt;__filename&lt;/h4&gt;&lt;p&gt;当前模块文件所在的绝对路径，包括文件名和文件扩展名&lt;/p&gt;
&lt;h4 id=&#34;require&#34;&gt;&lt;a href=&#34;#require&#34; class=&#34;headerlink&#34; title=&#34;require&#34;&gt;&lt;/a&gt;require&lt;/h4&gt;&lt;h4 id=&#34;module&#34;&gt;&lt;a href=&#34;#module&#34; class=&#34;headerlink&#34; title=&#34;module&#34;&gt;&lt;/a&gt;module&lt;/h4&gt;&lt;h4 id=&#34;process&#34;&gt;&lt;a href=&#34;#process&#34; class=&#34;headerlink&#34; title=&#34;process&#34;&gt;&lt;/a&gt;process&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是当前执行环境的路径&lt;/li&gt;
&lt;li&gt;第二个参数是当前执行的文件的路径&lt;/li&gt;
&lt;li&gt;剩余的参数是传递给脚本文件的命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.env&lt;/code&gt;环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.cwd()&lt;/code&gt;返回当前工作目录路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.on(event,listener)&lt;/code&gt;，监听进程变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.exit([code])&lt;/code&gt;，退出Node进程，提供退出码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.pid&lt;/code&gt;返回进程id&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Buffer类&#34;&gt;&lt;a href=&#34;#Buffer类&#34; class=&#34;headerlink&#34; title=&#34;Buffer类&#34;&gt;&lt;/a&gt;Buffer类&lt;/h4&gt;&lt;p&gt;Node.js 6.0版本开始，&lt;code&gt;Buffer&lt;/code&gt;构造函数的使用已被弃用，推荐使用&lt;code&gt;Buffer.alloc()&lt;/code&gt;、&lt;code&gt;Buffer.from()&lt;/code&gt;等方法来创建&lt;code&gt;Buffer&lt;/code&gt;实例。&lt;/p&gt;
&lt;h4 id=&#34;DOM、BOM&#34;&gt;&lt;a href=&#34;#DOM、BOM&#34; class=&#34;headerlink&#34; title=&#34;DOM、BOM&#34;&gt;&lt;/a&gt;DOM、BOM&lt;/h4&gt;&lt;p&gt;Node环境中无法操作DOM和BOM，不过可以借助一些工具进行模拟，例如：&lt;code&gt;jsdom&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const fs = require(&amp;#39;node:fs&amp;#39;)
const &amp;#123; JSDOM &amp;#125; = require(&amp;#39;jsdom&amp;#39;) // jsdom模拟浏览器环境
const dom = new JSDOM(`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;div id=&amp;#39;app&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;`)
const document = dom.window.document
const window = dom.window
fetch(&amp;#39;https://api.thecatapi.com/v1/images/search?limit=10&amp;amp;page=1&amp;#39;).then(res =&amp;gt; res.json()).then(data =&amp;gt; &amp;#123;
    const app = document.getElementById(&amp;#39;app&amp;#39;)
    data.forEach(item=&amp;gt;&amp;#123;
       const img =  document.createElement(&amp;#39;img&amp;#39;)
       img.src = item.url
       img.style.width = &amp;#39;200px&amp;#39;
       img.style.height = &amp;#39;200px&amp;#39;
       app.appendChild(img)
    &amp;#125;)
    fs.writeFileSync(&amp;#39;./index.html&amp;#39;, dom.serialize())
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;path模块&#34;&gt;&lt;a href=&#34;#path模块&#34; class=&#34;headerlink&#34; title=&#34;path模块&#34;&gt;&lt;/a&gt;path模块&lt;/h2&gt;&lt;p&gt;path模块在windows和posix系统中是有差异的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;posix表示可移植操作系统接口，也就是定义了一套标准，遵守这套标准的操作系统有(unix,like unix,linux,macOs,windows wsl)，用于多个平台间相互兼容&lt;/li&gt;
&lt;li&gt;Windows 并没有完全遵循 POSIX 标准，在 Windows 系统中，路径使用反斜杠（&lt;code&gt;\&lt;/code&gt;）作为路径分隔符。这与 POSIX 系统使用的正斜杠（&lt;code&gt;/&lt;/code&gt;）是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;差异举例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path.basename(&amp;#39;C:\temp\myfile.html&amp;#39;); 
// 在posix中 返回: &amp;#39;C:\temp\myfile.html&amp;#39;
// 在windows中 返回 empmyfile.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;path.basename返回文件名（包括后缀）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;path.basename(&amp;#39;C:/fs/dmq/MI/index.html&amp;#39;) //返回index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path.extname&lt;/code&gt;返回扩展名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.join&lt;/code&gt;路径拼接（路径拼接）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.resolve&lt;/code&gt;解析绝对路径并且返回绝对路径（路径解析）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.parse&lt;/code&gt;将路径解析为对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.format&lt;/code&gt;将对象解析为路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;os模块&#34;&gt;&lt;a href=&#34;#os模块&#34; class=&#34;headerlink&#34; title=&#34;os模块&#34;&gt;&lt;/a&gt;os模块&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.type()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;它在 Linux 上返回 &lt;code&gt;&amp;#39;Linux&amp;#39;&lt;/code&gt;，在 macOS 上返回 &lt;code&gt;&amp;#39;Darwin&amp;#39;&lt;/code&gt;，在 Windows 上返回 &lt;code&gt;&amp;#39;Windows_NT&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.platform()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回标识为其编译 Node.js 二进制文件的操作系统平台的字符串。 该值在编译时设置。 可能的值为 &lt;code&gt;&amp;#39;aix&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;darwin&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;freebsd&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;linux&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;openbsd&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;sunos&amp;#39;&lt;/code&gt;、以及 &lt;code&gt;&amp;#39;win32&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.release()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回操作系统的版本例如10.xxxx win10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.homedir()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回用户目录 例如c:\user\xiaoman 原理就是 windows &lt;code&gt;echo %USERPROFILE% &lt;/code&gt;posix $HOME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.arch()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回cpu的架构  可能的值为 &lt;code&gt;&amp;#39;arm&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;arm64&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ia32&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;mips&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;mipsel&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ppc&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ppc64&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;s390&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;s390x&amp;#39;&lt;/code&gt;、以及 &lt;code&gt;&amp;#39;x64&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.cups()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取&lt;code&gt;cpu线程&lt;/code&gt;和cpu详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.networkInterfaces()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取&lt;code&gt;网络信息&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;process模块&#34;&gt;&lt;a href=&#34;#process模块&#34; class=&#34;headerlink&#34; title=&#34;process模块&#34;&gt;&lt;/a&gt;process模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是当前执行环境的路径&lt;/li&gt;
&lt;li&gt;第二个参数是当前执行的文件的路径&lt;/li&gt;
&lt;li&gt;剩余的参数是传递给脚本文件的命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.env&lt;/code&gt;环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.cwd()&lt;/code&gt;返回当前工作目录路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.on(event,listener)&lt;/code&gt;，监听进程变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.exit([code])&lt;/code&gt;，退出Node进程，提供退出码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.pid&lt;/code&gt;返回进程id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.arch&lt;/code&gt;返回操作系统CPU架构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.memoryUsage&lt;/code&gt;获取当前进程内存使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.kill(process.pid)&lt;/code&gt;用于杀死一个进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;child-process模块&#34;&gt;&lt;a href=&#34;#child-process模块&#34; class=&#34;headerlink&#34; title=&#34;child_process模块&#34;&gt;&lt;/a&gt;child_process模块&lt;/h2&gt;&lt;p&gt;子进程是Nodejs核心API，如果你会shell命令，他会有非常大的帮助，或者你喜欢编写前端工程化工具之类的，他也有很大的用处，以及处理CPU密集型应用。&lt;/p&gt;
&lt;h4 id=&#34;创建子进程&#34;&gt;&lt;a href=&#34;#创建子进程&#34; class=&#34;headerlink&#34; title=&#34;创建子进程&#34;&gt;&lt;/a&gt;创建子进程&lt;/h4&gt;&lt;p&gt;Nodejs创建子进程共有&lt;code&gt;7个&lt;/code&gt;API Sync同步API ，不加是异步API&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;spawn  执行命令&lt;/li&gt;
&lt;li&gt;exec   执行命令&lt;/li&gt;
&lt;li&gt;execFile   执行可执行文件&lt;/li&gt;
&lt;li&gt;fork   创建node子进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execSync&lt;/code&gt; 执行命令 同步执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execFileSync&lt;/code&gt; 执行可执行文件 同步执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawnSync&lt;/code&gt; 执行命令 同步执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ffmpeg工具&#34;&gt;&lt;a href=&#34;#ffmpeg工具&#34; class=&#34;headerlink&#34; title=&#34;ffmpeg工具&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mZm1wZWcucDJocC5jb20vZG93bmxvYWQuaHRtbA==&#34;&gt;ffmpeg工具&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;FFmpeg 是一个开源的跨平台多媒体处理工具，可以用于处理音频、视频和多媒体流。它提供了一组强大的命令行工具和库，可以进行视频转码、视频剪辑、音频提取、音视频合并、流媒体传输等操作。&lt;/p&gt;
&lt;h2 id=&#34;events模块&#34;&gt;&lt;a href=&#34;#events模块&#34; class=&#34;headerlink&#34; title=&#34;events模块&#34;&gt;&lt;/a&gt;events模块&lt;/h2&gt;&lt;p&gt;Node.js的事件模型采用发布订阅的设计思想，将发布者和订阅者之间解耦合，使得双方能够独立地扩展自己。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const EventEmitter = require(&amp;#39;events&amp;#39;);
const event = new EventEmitter()
//监听test
event.on(&amp;#39;test&amp;#39;,(data)=&amp;gt;&amp;#123;
    console.log(data)
&amp;#125;)
event.emit(&amp;#39;test&amp;#39;,&amp;#39;data数据&amp;#39;) //派发事件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;event实例默认监听10个为上限，可以通过&lt;code&gt;setMaxListeners()&lt;/code&gt;方法来设置监听上限。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;event.setMaxListeners(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;event.once方法&lt;/code&gt;可以只订阅一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;event.once(&amp;#39;test&amp;#39;,(data)=&amp;gt;&amp;#123;
    console.log(&amp;#39;once取代on，只监听一次&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;event.off&lt;/code&gt;方法取消订阅&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;JS&#34;&gt;event.on(&amp;#39;test&amp;#39;, fn) // 订阅事件
event.off(&amp;#39;test&amp;#39;, fn) // 取消事件订阅
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;SSE&#34;&gt;&lt;a href=&#34;#SSE&#34; class=&#34;headerlink&#34; title=&#34;SSE&#34;&gt;&lt;/a&gt;SSE&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSE（server send events）服务端推送事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是一种实现服务端向客户端推送数据的技术，也被称为事件流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它是基于HTTP协议，利用HTTP协议长连接的优势，实现服务端向客户端推送实时数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器端需要使用&lt;code&gt;EventSource&lt;/code&gt;注册api地址，服务端需要对该地址的响应头中设置Content-Type为 &lt;code&gt;text/event-stream &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;node后端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import express from &amp;#39;express&amp;#39;;
const app = express();
app.get(&amp;#39;/api/sse&amp;#39;, (req, res) =&amp;gt; &amp;#123;
    res.writeHead(200, &amp;#123;
        &amp;#39;Content-Type&amp;#39;: &amp;#39;text/event-stream&amp;#39;, //核心返回数据流
        &amp;#39;Connection&amp;#39;: &amp;#39;close&amp;#39;
    &amp;#125;)
    const data = fs.readFileSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;utf8&amp;#39;)
    const total = data.length;
    let current = 0;
    //mock sse 数据
    let time = setInterval(() =&amp;gt; &amp;#123;
        console.log(current, total)
        if (current &amp;gt;= total) &amp;#123;
            console.log(&amp;#39;end&amp;#39;)
            clearInterval(time)
            return
        &amp;#125;
        //返回自定义事件名
        res.write(`event:name\n`)
        //返回数据
        res.write(`data:$&amp;#123;data.split(&amp;#39;&amp;#39;)[current]&amp;#125;\n\n`)
        current++
    &amp;#125;, 300)
&amp;#125;)
app.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Listening on port 3000&amp;#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;客户端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const sse = new EventSource(&amp;#39;http://localhost:3000/api/sse&amp;#39; )
if (sse.readyState === EventSource.CONNECTING) &amp;#123;
  console.log(&amp;#39;正在连接服务器...&amp;#39;);
&amp;#125; else if (sse.readyState === EventSource.OPEN) &amp;#123;
  console.log(&amp;#39;已经连接上服务器！&amp;#39;);
&amp;#125; else if (sse.readyState === EventSource.CLOSED) &amp;#123;
  console.log(&amp;#39;连接已经关闭。&amp;#39;);
&amp;#125;
sse.onmessage = (data)=&amp;gt;&amp;#123;
    console.log(data);
&amp;#125;
sse.onerror = (e)=&amp;gt;&amp;#123;
    sse.close(); //关闭连接
    console.error(e);
&amp;#125;
sse.addEventListener(&amp;#39;open&amp;#39;, (e) =&amp;gt; &amp;#123;
    console.log(&amp;#39;连接成功&amp;#39;);
&amp;#125;)
//对应后端nodejs自定义的事件名lol
sse.addEventListener(&amp;#39;name&amp;#39;, (e) =&amp;gt; &amp;#123;
    console.log(e.data)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;util模块&#34;&gt;&lt;a href=&#34;#util模块&#34; class=&#34;headerlink&#34; title=&#34;util模块&#34;&gt;&lt;/a&gt;util模块&lt;/h2&gt;&lt;p&gt;Node.js内部提供的工具集模块，方便快速开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.promisify&lt;/code&gt;将函数改为promise类型的形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.callbackify&lt;/code&gt;将promise类型的api改为函数形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.format&lt;/code&gt;用于格式化文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: &lt;code&gt;String&lt;/code&gt; 将用于转换除 &lt;code&gt;BigInt&lt;/code&gt;、&lt;code&gt;Object&lt;/code&gt; 和 &lt;code&gt;-0&lt;/code&gt; 之外的所有值。 &lt;code&gt;BigInt&lt;/code&gt; 值将用 &lt;code&gt;n&lt;/code&gt; 表示，没有用户定义的 &lt;code&gt;toString&lt;/code&gt; 函数的对象使用具有选项 &lt;code&gt;&amp;#123; depth: 0, colors: false, compact: 3 &amp;#125;&lt;/code&gt; 的 &lt;code&gt;util.inspect()&lt;/code&gt; 进行检查。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;: &lt;code&gt;Number&lt;/code&gt; 将用于转换除 &lt;code&gt;BigInt&lt;/code&gt; 和 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%i&lt;/code&gt;: &lt;code&gt;parseInt(value, 10)&lt;/code&gt; 用于除 &lt;code&gt;BigInt&lt;/code&gt; 和 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt;: &lt;code&gt;parseFloat(value)&lt;/code&gt; 用于除 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%j&lt;/code&gt;: JSON。 如果参数包含循环引用，则替换为字符串 &lt;code&gt;&amp;#39;[Circular]&amp;#39;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%o&lt;/code&gt;: &lt;code&gt;Object&lt;/code&gt;. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于具有选项 &lt;code&gt;&amp;#123; showHidden: true, showProxy: true &amp;#125;&lt;/code&gt; 的 &lt;code&gt;util.inspect()&lt;/code&gt;。 这将显示完整的对象，包括不可枚举的属性和代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%O&lt;/code&gt;: &lt;code&gt;Object&lt;/code&gt;. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于没有选项的 &lt;code&gt;util.inspect()&lt;/code&gt;。 这将显示完整的对象，但不包括不可枚举的属性和代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt;: &lt;code&gt;CSS&lt;/code&gt;. 此说明符被忽略，将跳过任何传入的 CSS。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%&lt;/code&gt;: 单个百分号 (&lt;code&gt;&amp;#39;%&amp;#39;&lt;/code&gt;)。 这不消费参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他工具函数省略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pngquant工具&#34;&gt;&lt;a href=&#34;#pngquant工具&#34; class=&#34;headerlink&#34; title=&#34;pngquant工具&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbmdxdWFudC5vcmcv&#34;&gt;pngquant工具&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pngquant&lt;/code&gt; 是一个用于压缩 PNG 图像文件的工具。它可以显著减小 PNG 文件的大小，同时保持图像质量和透明度。通过减小文件大小，可以提高网页加载速度，并节省存储空间。&lt;code&gt;pngquant&lt;/code&gt; 提供命令行接口和库，可轻松集成到各种应用程序和脚本中。&lt;/p&gt;
&lt;h2 id=&#34;fs模块&#34;&gt;&lt;a href=&#34;#fs模块&#34; class=&#34;headerlink&#34; title=&#34;fs模块&#34;&gt;&lt;/a&gt;fs模块&lt;/h2&gt;&lt;p&gt;在 Node.js 中，&lt;code&gt;fs&lt;/code&gt; 模块是文件系统模块（File System module）的缩写，它提供了与文件系统进行交互的各种功能。通过 &lt;code&gt;fs&lt;/code&gt; 模块，你可以执行诸如读取文件、写入文件、更改文件权限、创建目录等操作，&lt;code&gt;Node.js 核心API之一&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;同步与异步&#34;&gt;&lt;a href=&#34;#同步与异步&#34; class=&#34;headerlink&#34; title=&#34;同步与异步&#34;&gt;&lt;/a&gt;同步与异步&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fs支持同步和异步两种模式 增加了&lt;code&gt;Sync&lt;/code&gt; fs 就会采用同步的方式运行代码，会阻塞下面的代码，不加Sync就是异步的模式不会阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fs新增了promise版本，只需要在引入包后面增加&amp;#x2F;promise即可，fs便可支持promise回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fs返回的是一个buffer二进制数据 每两个十六进制数字表示一个字节&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;api&#34;&gt;&lt;a href=&#34;#api&#34; class=&#34;headerlink&#34; title=&#34;api&#34;&gt;&lt;/a&gt;api&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.readFile&lt;/code&gt;异步读取文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.writeFile&lt;/code&gt;异步写入文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.appendFile&lt;/code&gt;文件异步追加写入内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.copyFile&lt;/code&gt;文件异步拷贝写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.open&lt;/code&gt;异步打开文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.close&lt;/code&gt;异步关闭文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.read&lt;/code&gt;异步读取文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.write&lt;/code&gt;异步将Buffer中的数据写入文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.access&lt;/code&gt;异步检查文件是否可读可写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.stat&lt;/code&gt;异步获取文件目录的stats对象（文件夹信息）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.mkdir&lt;/code&gt;异步创建文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.readdir&lt;/code&gt;异步读取文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.rmdir&lt;/code&gt;异步删除目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.unlink&lt;/code&gt;异步删除文件&lt;/li&gt;
&lt;li&gt;以上方法都有对应的同步执行的方法，在方法名后面加上Sync后缀即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fs-x2F-promises&#34;&gt;&lt;a href=&#34;#fs-x2F-promises&#34; class=&#34;headerlink&#34; title=&#34;fs&amp;#x2F;promises&#34;&gt;&lt;/a&gt;fs&amp;#x2F;promises&lt;/h4&gt;&lt;p&gt;node中fs模块的方法提供了Promise版本的调用形式，导入即可使用promise的使用方式调用api&lt;/p&gt;
&lt;h4 id=&#34;源码&#34;&gt;&lt;a href=&#34;#源码&#34; class=&#34;headerlink&#34; title=&#34;源码&#34;&gt;&lt;/a&gt;源码&lt;/h4&gt;&lt;p&gt;Node.js中fs模块是由libuv来进行调度的，文件读取完成之后libuv才会将fs的结果推入V8的队列。&lt;/p&gt;
&lt;h4 id=&#34;writeFileSync&#34;&gt;&lt;a href=&#34;#writeFileSync&#34; class=&#34;headerlink&#34; title=&#34;writeFileSync&#34;&gt;&lt;/a&gt;writeFileSync&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一个参数是要写入的文件&lt;/li&gt;
&lt;li&gt;第二个参数是写入的内容&lt;/li&gt;
&lt;li&gt;第三个参数是写入方式配置项，其flag有以下配置：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt;: 打开文件进行追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;ax&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;a+&amp;#39;&lt;/code&gt;: 打开文件进行读取和追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;ax+&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;a+&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;as&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;as+&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行读取和追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;r&amp;#39;&lt;/code&gt;: 打开文件进行读取。 如果文件不存在，则会发生异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;r+&amp;#39;&lt;/code&gt;: 打开文件进行读写。 如果文件不存在，则会发生异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;rs+&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行读写。 指示操作系统绕过本地文件系统缓存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;w&amp;#39;&lt;/code&gt;: 打开文件进行写入。 创建（如果它不存在）或截断（如果它存在）该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;wx&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;w&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;w+&amp;#39;&lt;/code&gt;: 打开文件进行读写。 创建（如果它不存在）或截断（如果它存在）该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;wx+&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;w+&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如追加文件内容除了可以使用&lt;code&gt;appendFileSync&lt;/code&gt;之外，还可以：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;fs.writeFileSync(&amp;#39;index.txt&amp;#39;, &amp;#39;追加的内容&amp;#39;,&amp;#123;
    flag: &amp;#39;a&amp;#39; //配置options中的flag
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;可写流&#34;&gt;&lt;a href=&#34;#可写流&#34; class=&#34;headerlink&#34; title=&#34;可写流&#34;&gt;&lt;/a&gt;可写流&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const fs = require(&amp;#39;node:fs&amp;#39;)
let verse = [
    &amp;#39;待到秋来九月八&amp;#39;,
    &amp;#39;我花开后百花杀&amp;#39;,
    &amp;#39;冲天香阵透长安&amp;#39;,
    &amp;#39;满城尽带黄金甲&amp;#39;
]
let writeStream = fs.createWriteStream(&amp;#39;index.txt&amp;#39;) //创建写入流
verse.forEach(item =&amp;gt; &amp;#123;
    writeStream.write(item + &amp;#39;\n&amp;#39;) //写入内容
&amp;#125;)
writeStream.end()
writeStream.on(&amp;#39;finish&amp;#39;,()=&amp;gt;&amp;#123; //监听写入完成事件
    console.log(&amp;#39;写入完成&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以创建一个可写流 打开一个通道，可以一直写入数据，用于处理大量的数据写入，写入完成之后调用end 关闭可写流，监听finish 事件 写入完成&lt;/p&gt;
&lt;h4 id=&#34;硬链接、软连接&#34;&gt;&lt;a href=&#34;#硬链接、软连接&#34; class=&#34;headerlink&#34; title=&#34;硬链接、软连接&#34;&gt;&lt;/a&gt;硬链接、软连接&lt;/h4&gt;&lt;h6 id=&#34;inode&#34;&gt;&lt;a href=&#34;#inode&#34; class=&#34;headerlink&#34; title=&#34;inode&#34;&gt;&lt;/a&gt;inode&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;文件存储在磁盘上，磁盘的最小存储单位叫做&lt;code&gt;扇区&lt;/code&gt;，每个扇区存储512字节&lt;/li&gt;
&lt;li&gt;操作系统读取磁盘时，不会一个扇区一个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，多个扇区称之为&lt;code&gt;块&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;块&lt;/code&gt;是文件读取的最小单位&lt;/li&gt;
&lt;li&gt;文件数据都存储在&lt;code&gt;块&lt;/code&gt;中，因此需要一个地方存储文件的元信息，这中存储文件元信息的区域就叫做&lt;code&gt;inode&lt;/code&gt;，索引节点&lt;/li&gt;
&lt;li&gt;创建软链接时生成了新的&lt;code&gt;inode&lt;/code&gt;，创建硬链接时没有。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-07-39.png&#34; alt=&#34;扇区、块和inode&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inode中包含信息：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件的字节数&lt;/li&gt;
&lt;li&gt;文件拥有者ID&lt;/li&gt;
&lt;li&gt;文件的Group ID&lt;/li&gt;
&lt;li&gt;文件读、写、执行权限&lt;/li&gt;
&lt;li&gt;文件的时间戳&lt;/li&gt;
&lt;li&gt;链接数&lt;/li&gt;
&lt;li&gt;文件数据block的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个 &lt;code&gt;inode&lt;/code&gt; 都有一个唯一的标识码 ，上面的输出信息中 &lt;code&gt;ino&lt;/code&gt; 就是 &lt;code&gt;inode&lt;/code&gt; 的唯一标识码，在 &lt;code&gt;linux&lt;/code&gt; 系统内部使用 &lt;code&gt;inode&lt;/code&gt; 的标识码来识别文件，并不使用文件名。之前系的&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 系统中，目录也是一种文件。目录文件包含一系列目录项，每一个目录项由两部分组成：所包含文件的文件名，以及文件名对应的 &lt;code&gt;inode&lt;/code&gt; 标识码。我们可以使用 &lt;code&gt;ls -i&lt;/code&gt; 来列出目录中的文件以及所有的 &lt;code&gt;inde&lt;/code&gt; 标识码。这里也可以解释可能小伙伴们觉得说不通的问题，仅修改目录的读权限，并不能实现读取目录下所有文件内容的原因，最后需要通过递归目录下的文件来进行修改。&lt;/p&gt;
&lt;h6 id=&#34;软链接&#34;&gt;&lt;a href=&#34;#软链接&#34; class=&#34;headerlink&#34; title=&#34;软链接&#34;&gt;&lt;/a&gt;软链接&lt;/h6&gt;&lt;p&gt;软链接类似于 &lt;code&gt;Window&lt;/code&gt; 中的 “快捷方式” 。创建软链接会创建一个新的 &lt;code&gt;inode&lt;/code&gt;，比如为文件 &lt;code&gt;a&lt;/code&gt; 创建了软链接文件 b，文件 &lt;code&gt;b&lt;/code&gt; 内部会指向 &lt;code&gt;a&lt;/code&gt; 的 &lt;code&gt;inode&lt;/code&gt;。当我们读取文件&lt;code&gt;b&lt;/code&gt;的时候，系统会自动导向文件 &lt;code&gt;a&lt;/code&gt; ，文件 &lt;code&gt;b&lt;/code&gt; 就是文件 &lt;code&gt;a&lt;/code&gt; 软连接(或者叫符号链接)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问：创建了软链接后我们就可以使用不同的文件名访问相同的内容，&lt;/li&gt;
&lt;li&gt;修改：修改文件 &lt;code&gt;a&lt;/code&gt; 的内容，文件 &lt;code&gt;b&lt;/code&gt; 的内容也会发生改变，对文件内容的修改向放映到所有文件。&lt;/li&gt;
&lt;li&gt;删除：当我们删除源文件 &lt;code&gt;a&lt;/code&gt; 时，在访问软连接文件 b 是，会报错 &lt;code&gt;&amp;quot;No such file or directory&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以直接使用 &lt;code&gt;linux&lt;/code&gt; 命令 &lt;code&gt;ln -s source target&lt;/code&gt; 来创建软链接(注意：表示 &lt;code&gt;target&lt;/code&gt; “指向” &lt;code&gt;source&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-12-05.png&#34; alt=&#34;软链接&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;硬链接&#34;&gt;&lt;a href=&#34;#硬链接&#34; class=&#34;headerlink&#34; title=&#34;硬链接&#34;&gt;&lt;/a&gt;硬链接&lt;/h6&gt;&lt;p&gt;一般情况，一个文件名”唯一”对应一个 &lt;code&gt;inode&lt;/code&gt;。但是 &lt;code&gt;linux&lt;/code&gt; 允许多个文件名都指向同一个 &lt;code&gt;inode&lt;/code&gt;。表示我们可以使用不同对文件名访问同样的内容；对文件内容进行修改将放映到所有文件；删除一个文件不影响另一个文件对访问。这种机制就被称为”硬链接”&lt;/p&gt;
&lt;p&gt;硬链接的创建 可以直接使用 &lt;code&gt;linux&lt;/code&gt; 命令 &lt;code&gt;ln source target&lt;/code&gt; 来创建硬链接（注意：&lt;code&gt;source&lt;/code&gt; 已存在的文件，target 是将要建立的链接）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-14-11.png&#34; alt=&#34;硬链接&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;创建链接&#34;&gt;&lt;a href=&#34;#创建链接&#34; class=&#34;headerlink&#34; title=&#34;创建链接&#34;&gt;&lt;/a&gt;创建链接&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;fs.linkSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;./index2.txt&amp;#39;) //硬链接
fs.symlinkSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;./index3.txt&amp;#39; ,&amp;quot;file&amp;quot;) //软连接
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;用途&#34;&gt;&lt;a href=&#34;#用途&#34; class=&#34;headerlink&#34; title=&#34;用途&#34;&gt;&lt;/a&gt;用途&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;硬链接的作用和用途如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件共享：硬链接允许多个文件名指向同一个文件，这样可以在不同的位置使用不同的文件名引用相同的内容。这样的共享文件可以节省存储空间，并且在多个位置对文件的修改会反映在所有引用文件上。&lt;/li&gt;
&lt;li&gt;文件备份：通过创建硬链接，可以在不复制文件的情况下创建文件的备份。如果原始文件发生更改，备份文件也会自动更新。这样可以节省磁盘空间，并确保备份文件与原始文件保持同步。&lt;/li&gt;
&lt;li&gt;文件重命名：通过创建硬链接，可以为文件创建一个新的文件名，而无需复制或移动文件。这对于需要更改文件名但保持相同内容和属性的场景非常有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;软链接的一些特点和用途如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软链接可以创建指向文件或目录的引用。这使得你可以在不复制或移动文件的情况下引用它们，并在不同位置使用不同的文件名访问相同的内容。&lt;/li&gt;
&lt;li&gt;软链接可以用于创建快捷方式或别名，使得你可以通过一个简短或易记的路径来访问复杂或深层次的目录结构。&lt;/li&gt;
&lt;li&gt;软链接可以用于解决文件或目录的位置变化问题。如果目标文件或目录被移动或重命名，只需更新软链接的目标路径即可，而不需要修改引用该文件或目录的其他代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;crypto模块&#34;&gt;&lt;a href=&#34;#crypto模块&#34; class=&#34;headerlink&#34; title=&#34;crypto模块&#34;&gt;&lt;/a&gt;crypto模块&lt;/h2&gt;&lt;p&gt;crypto模块的目的是为了提供通用的&lt;code&gt;加密和哈希算法&lt;/code&gt;。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。nodejs用C&amp;#x2F;C++实现这些算法后，通过crypto这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。&lt;/p&gt;
&lt;p&gt;密码学是计算机科学中的一个重要领域，它涉及到加密、解密、哈希函数和数字签名等技术。Node.js是一个流行的服务器端JavaScript运行环境，它提供了强大的密码学模块，使开发人员能够轻松地在其应用程序中实现各种密码学功能。本文将介绍密码学的基本概念，并探讨Node.js中常用的密码学API。&lt;/p&gt;
&lt;h4 id=&#34;对称加密&#34;&gt;&lt;a href=&#34;#对称加密&#34; class=&#34;headerlink&#34; title=&#34;对称加密&#34;&gt;&lt;/a&gt;对称加密&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;js复制代码const crypto = require(&amp;#39;node:crypto&amp;#39;);

// 生成一个随机的 16 字节的初始化向量 (IV)
const iv = Buffer.from(crypto.randomBytes(16));

// 生成一个随机的 32 字节的密钥
const key = crypto.randomBytes(32);

// 创建加密实例，使用 AES-256-CBC 算法，提供密钥和初始化向量
const cipher = crypto.createCipheriv(&amp;quot;aes-256-cbc&amp;quot;, key, iv);

// 对输入数据进行加密，并输出加密结果的十六进制表示
cipher.update(&amp;quot;小满zs&amp;quot;, &amp;quot;utf-8&amp;quot;, &amp;quot;hex&amp;quot;);
const result = cipher.final(&amp;quot;hex&amp;quot;);

// 解密
const de = crypto.createDecipheriv(&amp;quot;aes-256-cbc&amp;quot;, key, iv);
de.update(result, &amp;quot;hex&amp;quot;);
const decrypted = de.final(&amp;quot;utf-8&amp;quot;);

console.log(&amp;quot;Decrypted:&amp;quot;, decrypted);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对称加密是一种简单而快速的加密方式，它使用相同的密钥（称为对称密钥）来进行加密和解密。这意味着发送者和接收者在加密和解密过程中都使用相同的密钥。对称加密算法的加密速度很快，适合对大量数据进行加密和解密操作。然而，对称密钥的安全性是一个挑战，因为需要确保发送者和接收者都安全地共享密钥，否则有风险被未授权的人获取密钥并解密数据。&lt;/p&gt;
&lt;h4 id=&#34;非对称加密&#34;&gt;&lt;a href=&#34;#非对称加密&#34; class=&#34;headerlink&#34; title=&#34;非对称加密&#34;&gt;&lt;/a&gt;非对称加密&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;js复制代码const crypto = require(&amp;#39;node:crypto&amp;#39;)
// 生成 RSA 密钥对
const &amp;#123; privateKey, publicKey &amp;#125; = crypto.generateKeyPairSync(&amp;#39;rsa&amp;#39;, &amp;#123;
  modulusLength: 2048,
&amp;#125;);

// 要加密的数据
const text = &amp;#39;小满zs&amp;#39;;

// 使用公钥进行加密
const encrypted = crypto.publicEncrypt(publicKey, Buffer.from(text, &amp;#39;utf-8&amp;#39;));

// 使用私钥进行解密
const decrypted = crypto.privateDecrypt(privateKey, encrypted);

console.log(decrypted.toString());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非对称加密使用一对密钥，分别是公钥和私钥。发送者使用接收者的公钥进行加密，而接收者使用自己的私钥进行解密。公钥可以自由分享给任何人，而私钥必须保密。非对称加密算法提供了更高的安全性，因为即使公钥泄露，只有持有私钥的接收者才能解密数据。然而，非对称加密算法的加密速度相对较慢，不适合加密大量数据。因此，在实际应用中，通常使用非对称加密来交换对称密钥，然后使用对称加密算法来加密实际的数据。&lt;/p&gt;
&lt;h4 id=&#34;哈希函数&#34;&gt;&lt;a href=&#34;#哈希函数&#34; class=&#34;headerlink&#34; title=&#34;哈希函数&#34;&gt;&lt;/a&gt;哈希函数&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const crypto = require(&amp;#39;node:crypto&amp;#39;);
// 要计算哈希的数据
let text = &amp;#39;123456&amp;#39;;
// 创建哈希对象，并使用 MD5 算法
const hash = crypto.createHash(&amp;#39;md5&amp;#39;);
// 更新哈希对象的数据
hash.update(text);
// 计算哈希值，并以十六进制字符串形式输出
const hashValue = hash.digest(&amp;#39;hex&amp;#39;);
console.log(&amp;#39;Text:&amp;#39;, text);
console.log(&amp;#39;Hash:&amp;#39;, hashValue);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;哈希函数具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定长度输出：不论输入数据的大小，哈希函数的输出长度是固定的。例如，常见的哈希函数如 MD5 和 SHA-256 生成的哈希值长度分别为 128 位和 256 位。&lt;/li&gt;
&lt;li&gt;不可逆性：哈希函数是单向的，意味着从哈希值推导出原始输入数据是非常困难的，几乎不可能。即使输入数据发生微小的变化，其哈希值也会完全不同。&lt;/li&gt;
&lt;li&gt;唯一性：哈希函数应该具有较低的碰撞概率，即不同的输入数据生成相同的哈希值的可能性应该非常小。这有助于确保哈希值能够唯一地标识输入数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们可以避免密码明文传输 使用md5加密或者sha256&lt;/li&gt;
&lt;li&gt;验证文件完整性，读取文件内容生成md5 如果前端上传的md5和后端的读取文件内部的md5匹配说明文件是完整的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;md转html&#34;&gt;&lt;a href=&#34;#md转html&#34; class=&#34;headerlink&#34; title=&#34;md转html&#34;&gt;&lt;/a&gt;md转html&lt;/h2&gt;&lt;h4 id=&#34;工具&#34;&gt;&lt;a href=&#34;#工具&#34; class=&#34;headerlink&#34; title=&#34;工具&#34;&gt;&lt;/a&gt;工具&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ejs：模板渲染库，使用特定语法填充内容，进行模板渲染&lt;/li&gt;
&lt;li&gt;marked：用于将Markdown语法转为HTML&lt;/li&gt;
&lt;li&gt;browserSync：用于在浏览器实时预览和同步刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;index.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const ejs = require(&amp;#39;ejs&amp;#39;); // 导入ejs库，用于渲染模板
const fs = require(&amp;#39;node:fs&amp;#39;); // 导入fs模块，用于文件系统操作
const marked = require(&amp;#39;marked&amp;#39;); // 导入marked库，用于将Markdown转换为HTML
const readme = fs.readFileSync(&amp;#39;README.md&amp;#39;); // 读取README.md文件的内容,直接read的结果是buffer中的数据，通过toString方法变为原始内容
const browserSync = require(&amp;#39;browser-sync&amp;#39;); // 导入browser-sync库，用于实时预览和同步浏览器
const openBrowser =  () =&amp;gt; &amp;#123;
    // 创建浏览器服务
    const browser = browserSync.create()
    // 初始化浏览器服务 ，传入目录和主页
    browser.init(&amp;#123;
        server: &amp;#123;
            baseDir: &amp;#39;./&amp;#39;,
            index: &amp;#39;index.html&amp;#39;,
        &amp;#125;
    &amp;#125;)
    return browser
&amp;#125;
// ejs模板进行渲染，传入变量
ejs.renderFile(&amp;#39;template.ejs&amp;#39;, &amp;#123;
    content: marked.parse(readme.toString()),
    title:&amp;#39;markdown to html&amp;#39;
&amp;#125;,(err,data)=&amp;gt;&amp;#123;
    if(err)&amp;#123;
        console.log(err)
    &amp;#125;
    // 将文件内容写入到index.html
    let writeStream = fs.createWriteStream(&amp;#39;index.html&amp;#39;)
    writeStream.write(data)
    writeStream.close()
    writeStream.on(&amp;#39;finish&amp;#39;,()=&amp;gt;&amp;#123;
        // index.html写入完毕之后，打开浏览器实时预览
        openBrowser()
    &amp;#125;)
&amp;#125;)     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template.ejs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./index.css&amp;quot;&amp;gt;  &amp;lt;!-- 引入css样式 --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;%- content %&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.css&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;/* Markdown通用样式 */
/* 设置全局字体样式 */
body &amp;#123;
    font-family: Arial, sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: #333;
  &amp;#125;
  /* 设置标题样式 */
  h1,h2,h3,h4,h5,h6 &amp;#123;
    margin-top: 1.3em;
    margin-bottom: 0.6em;
    font-weight: bold;
  &amp;#125;
  h1 &amp;#123;
    font-size: 2.2em;
  &amp;#125;
  h2 &amp;#123;
    font-size: 1.8em;
  &amp;#125;
  h3 &amp;#123;
    font-size: 1.6em;
  &amp;#125;
  h4 &amp;#123;
    font-size: 1.4em;
  &amp;#125;
  h5 &amp;#123;
    font-size: 1.2em;
  &amp;#125;
  h6 &amp;#123;
    font-size: 1em;
  &amp;#125;
  /* 设置段落样式 */
  p &amp;#123;
    margin-bottom: 1.3em;
  &amp;#125;
  /* 设置链接样式 */
  a &amp;#123;
    color: #337ab7;
    text-decoration: none;
  &amp;#125;
  a:hover &amp;#123;
    text-decoration: underline;
  &amp;#125;
  /* 设置列表样式 */
  ul,
  ol &amp;#123;
    margin-top: 0;
    margin-bottom: 1.3em;
    padding-left: 2em;
  &amp;#125;
  /* 设置代码块样式 */
  pre &amp;#123;
    background-color: #f7f7f7;
    padding: 1em;
    border-radius: 4px;
    overflow: auto;
  &amp;#125;
  code &amp;#123;
    font-family: Consolas, Monaco, Courier, monospace;
    font-size: 0.9em;
    background-color: #f7f7f7;
    padding: 0.2em 0.4em;
    border-radius: 4px;
  &amp;#125;
  /* 设置引用样式 */
  blockquote &amp;#123;
    margin: 0;
    padding-left: 1em;
    border-left: 4px solid #ddd;
    color: #777;
  &amp;#125;
  /* 设置表格样式 */
  table &amp;#123;
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1.3em;
  &amp;#125;
  table th,
  table td &amp;#123;
    padding: 0.5em;
    border: 1px solid #ccc;
  &amp;#125;
  /* 添加一些额外的样式，如图片居中显示 */
  img &amp;#123;
    display: block;
    margin: 0 auto;
    max-width: 100%;
    height: auto;
  &amp;#125;
  /* 设置代码行号样式 */
  pre code .line-numbers &amp;#123;
    display: inline-block;
    width: 2em;
    padding-right: 1em;
    color: #999;
    text-align: right;
    user-select: none;
    pointer-events: none;
    border-right: 1px solid #ddd;
    margin-right: 0.5em;
  &amp;#125;
  /* 设置代码行样式 */
  pre code .line &amp;#123;
    display: block;
    padding-left: 1.5em;
  &amp;#125;
  /* 设置代码高亮样式 */
  pre code .line.highlighted &amp;#123;
    background-color: #f7f7f7;
  &amp;#125;
  /* 添加一些响应式样式，适应移动设备 */
  @media only screen and (max-width: 768px) &amp;#123;
    body &amp;#123;
      font-size: 14px;
      line-height: 1.5;
    &amp;#125;
    h1 &amp;#123;
      font-size: 1.8em;
    &amp;#125;
    h2 &amp;#123;
      font-size: 1.5em;
    &amp;#125;
    h3 &amp;#123;
      font-size: 1.3em;
    &amp;#125;
    h4 &amp;#123;
      font-size: 1.1em;
    &amp;#125;
    h5 &amp;#123;
      font-size: 1em;
    &amp;#125;
    h6 &amp;#123;
      font-size: 0.9em;
    &amp;#125;
    table &amp;#123;
      font-size: 14px;
    &amp;#125;
  &amp;#125;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;zlib模块&#34;&gt;&lt;a href=&#34;#zlib模块&#34; class=&#34;headerlink&#34; title=&#34;zlib模块&#34;&gt;&lt;/a&gt;zlib模块&lt;/h2&gt;&lt;h4 id=&#34;介绍-1&#34;&gt;&lt;a href=&#34;#介绍-1&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Node.js中zlib模块用于对数据提供压缩和解压缩的功能，以便在应用程序中减少数据的传输大小、节省带宽和提高性能&lt;/li&gt;
&lt;li&gt;该模块包含各种压缩算法，包含Deflate、Gzip和Raw Deflate等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据压缩，减少数据的大小，这在网络传输和磁盘存储中很有用，可以节省带宽和存储空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据解压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流压缩，zlib模块支持流式的方式进行数据的压缩和解压缩，使得可以对大型文件或者网络数据流进行逐步处理，而不需要将整个数据加载到内存中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// 压缩文件（以Gzip为例）
const zlib = require(&amp;#39;zlib&amp;#39;)
const fs = require(&amp;#39;node:fs&amp;#39;)
const readStream = fs.createReadStream(&amp;#39;./test.txt&amp;#39;);
const writeStream = fs.createWriteStream(&amp;#39;./test.txt.gz&amp;#39;);
// 将readStream利用zlib进行压缩,pipe到下一个管道，最后pipe到写入流
readStream.pipe(zlib.createGzip()).pipe(writeStream)
// 解压缩文件
const reStr = fs.createReadStream(&amp;#39;./test.txt.gz&amp;#39;);
const wrStr = fs.createWriteStream(&amp;#39;./t.txt&amp;#39;);
const gunzip = zlib.createGunzip();
reStr.pipe(gunzip).pipe(wrStr);
gunzip.on(&amp;#39;error&amp;#39;, (err) =&amp;gt; &amp;#123;
    console.error(&amp;#39;Gunzip error:&amp;#39;, err);
&amp;#125;);
  reStr.on(&amp;#39;end&amp;#39;, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Input file has been read.&amp;#39;);
&amp;#125;);
  wrStr.on(&amp;#39;finish&amp;#39;, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Output file has been written.&amp;#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;对比-1&#34;&gt;&lt;a href=&#34;#对比-1&#34; class=&#34;headerlink&#34; title=&#34;对比&#34;&gt;&lt;/a&gt;对比&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;压缩算法：Gzip 使用的是 Deflate 压缩算法，该算法结合了 LZ77 算法和哈夫曼编码。LZ77 算法用于数据的重复字符串的替换和引用，而哈夫曼编码用于进一步压缩数据。&lt;/li&gt;
&lt;li&gt;压缩效率：Gzip 压缩通常具有更高的压缩率，因为它使用了哈夫曼编码来进一步压缩数据。哈夫曼编码根据字符的出现频率，将较常见的字符用较短的编码表示，从而减小数据的大小。&lt;/li&gt;
&lt;li&gt;压缩速度：相比于仅使用 Deflate 的方式，Gzip 压缩需要更多的计算和处理时间，因为它还要进行哈夫曼编码的步骤。因此，在压缩速度方面，Deflate 可能比 Gzip 更快。&lt;/li&gt;
&lt;li&gt;应用场景：Gzip 压缩常用于文件压缩、网络传输和 HTTP 响应的内容编码。它广泛应用于 Web 服务器和浏览器之间的数据传输，以减小文件大小和提高网络传输效率。&lt;/li&gt;
&lt;li&gt;deflate是一种过时的压缩方式，现代浏览器对其支持并不友好&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;zlib模块可以用于对发送网络请求返回的数据进行压缩，节省带宽和传输速率。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;brotli&#34;&gt;&lt;a href=&#34;#brotli&#34; class=&#34;headerlink&#34; title=&#34;brotli&#34;&gt;&lt;/a&gt;brotli&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;针对常见的 Web 资源内容，Brotli 的性能比 Gzip 提高了 17-25%；&lt;/li&gt;
&lt;li&gt;当 Brotli 压缩级别为 1 时，压缩率比 Gzip 的最高级别 9 还要高；&lt;/li&gt;
&lt;li&gt;在处理不同的 HTML 文档时，Brotli 依然能提供非常高的压缩率。&lt;/li&gt;
&lt;li&gt;除了 IE 和 Opera Mini 之外，几乎所有主流浏览器都已支持 Brotli 算法。&lt;/li&gt;
&lt;li&gt;尽管 Brotli 在压缩方面表现出色，但随着压缩级别的提高，Brotli 压缩所需的时间也会相应增加。换句话说，Brotli 需要更多的计算能力，这可能意味着更高的设备和软件成本。&lt;/li&gt;
&lt;li&gt;Brotli 要求浏览器必须支持 HTTPS 才能使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http模块&#34;&gt;&lt;a href=&#34;#http模块&#34; class=&#34;headerlink&#34; title=&#34;http模块&#34;&gt;&lt;/a&gt;http模块&lt;/h2&gt;&lt;h4 id=&#34;介绍-2&#34;&gt;&lt;a href=&#34;#介绍-2&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;http模块是Node.js中用于创建和处理HTTP服务器和客户端的核心模块&lt;/li&gt;
&lt;li&gt;http模块使得基于HTTP协议的应用程序更加简单和灵活&lt;/li&gt;
&lt;li&gt;http模块也可以用于创建代理服务器，用于转发客户端的请求到其他服务器，代理服务器可以用于负载均衡、缓存、安全过滤或跨域请求等场景。通过在代理服务器上添加逻辑，可以对请求和响应进行修改、记录或过滤。&lt;/li&gt;
&lt;li&gt;http模块也可以创建文件服务器，用于提供静态文件，通过读取文件并将其作为响应发送给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用-1&#34;&gt;&lt;a href=&#34;#使用-1&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const http = require(&amp;#39;http&amp;#39;)
const httpServer = http.createServer((req,res)=&amp;gt;&amp;#123;
    if(req.method === &amp;#39;POST&amp;#39;)&amp;#123;&amp;#125;
    else if(req.method === &amp;#39;GET&amp;#39;)&amp;#123;&amp;#125;
&amp;#125;)
httpServer.listen(98,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;服务器启动，端口：98&amp;#39;);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;url模块&#34;&gt;&lt;a href=&#34;#url模块&#34; class=&#34;headerlink&#34; title=&#34;url模块&#34;&gt;&lt;/a&gt;url模块&lt;/h4&gt;&lt;p&gt;可以通过url模块来解析req的请求路径，来进一步精细化响应内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const http = require(&amp;#39;node:http&amp;#39;); // 引入 http 模块
const url = require(&amp;#39;node:url&amp;#39;); // 引入 url 模块
// 创建 HTTP 服务器，并传入回调函数用于处理请求和生成响应
http.createServer((req, res) =&amp;gt; &amp;#123;
  const &amp;#123; pathname, query &amp;#125; = url.parse(req.url, true); // 解析请求的 URL，获取路径和查询参数
  if (req.method === &amp;#39;POST&amp;#39;) &amp;#123; // 检查请求方法是否为 POST
    if (pathname === &amp;#39;/post&amp;#39;) &amp;#123; // 检查路径是否为 &amp;#39;/post&amp;#39;
      let data = &amp;#39;&amp;#39;;
      req.on(&amp;#39;data&amp;#39;, (chunk) =&amp;gt; &amp;#123;
        data += chunk; // 获取 POST 请求的数据
        console.log(data);
      &amp;#125;);
      req.on(&amp;#39;end&amp;#39;, () =&amp;gt; &amp;#123;
        res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;); // 设置响应头的 Content-Type 为 &amp;#39;application/json&amp;#39;
        res.statusCode = 200; // 设置响应状态码为 200
        res.end(data); // 将获取到的数据作为响应体返回
      &amp;#125;);
    &amp;#125; else &amp;#123;
      res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;); // 设置响应头的 Content-Type 为 &amp;#39;application/json&amp;#39;
      res.statusCode = 404; // 设置响应状态码为 404
      res.end(&amp;#39;Not Found&amp;#39;); // 返回 &amp;#39;Not Found&amp;#39; 作为响应体
    &amp;#125;
  &amp;#125; else if (req.method === &amp;#39;GET&amp;#39;) &amp;#123; // 检查请求方法是否为 GET
    if (pathname === &amp;#39;/get&amp;#39;) &amp;#123; // 检查路径是否为 &amp;#39;/get&amp;#39;
      console.log(query.a); // 打印查询参数中的键名为 &amp;#39;a&amp;#39; 的值
      res.end(&amp;#39;get success&amp;#39;); // 返回 &amp;#39;get success&amp;#39; 作为响应体
    &amp;#125;
  &amp;#125;
&amp;#125;).listen(98, () =&amp;gt; &amp;#123;
  console.log(&amp;#39;server is running on port 98&amp;#39;); // 打印服务器启动的信息
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;动静分离&#34;&gt;&lt;a href=&#34;#动静分离&#34; class=&#34;headerlink&#34; title=&#34;动静分离&#34;&gt;&lt;/a&gt;动静分离&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;动静分离是Web服务器架构中常用的优化技术，用于提高网站的性能和可伸缩性&lt;/li&gt;
&lt;li&gt;原理就是将静态资源的请求和动态内容分开处理（通过url，例如加上static后缀表示静态）&lt;/li&gt;
&lt;li&gt;好处在于：&lt;ul&gt;
&lt;li&gt;性能优化（静态资源内容不变，可以利用缓存）&lt;/li&gt;
&lt;li&gt;负载均衡（动态内容请求分发到不同的服务器或服务上，平衡服务器的负载）&lt;/li&gt;
&lt;li&gt;安全性（动态内容往往涉及敏感信息，动静分离可以更好地管理访问控制和安全策略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import http from &amp;#39;node:http&amp;#39; // 导入http模块
import fs from &amp;#39;node:fs&amp;#39; // 导入文件系统模块
import path from &amp;#39;node:path&amp;#39; // 导入路径处理模块
import mime from &amp;#39;mime&amp;#39; // 导入mime模块
const server = http.createServer((req, res) =&amp;gt; &amp;#123;
    const &amp;#123; url, method &amp;#125; = req
    // 处理静态资源
    if (method === &amp;#39;GET&amp;#39; &amp;amp;&amp;amp; url.startsWith(&amp;#39;/static&amp;#39;)) &amp;#123;
        const filePath = path.join(process.cwd(), url) // 获取文件路径
        const mimeType = mime.getType(filePath) // 获取文件的MIME类型
        console.log(mimeType) // 打印MIME类型
        fs.readFile(filePath, (err, data) =&amp;gt; &amp;#123; // 读取文件内容
            if (err) &amp;#123;
                res.writeHead(404, &amp;#123;
                    &amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot; // 设置响应头为纯文本类型
                &amp;#125;)
                res.end(&amp;#39;not found&amp;#39;) // 返回404 Not Found
            &amp;#125; else &amp;#123;
                res.writeHead(200, &amp;#123;
                    &amp;quot;Content-Type&amp;quot;: mimeType, // 设置响应头为对应的MIME类型
                    &amp;quot;Cache-Control&amp;quot;: &amp;quot;public, max-age=3600&amp;quot; // 设置缓存控制头
                &amp;#125;)
                res.end(data) // 返回文件内容
            &amp;#125;
        &amp;#125;)
    &amp;#125;
    // 处理动态资源
    if (url.startsWith(&amp;#39;/api&amp;#39;)) &amp;#123;
        // ...处理动态资源的逻辑
    &amp;#125;
&amp;#125;)
server.listen(80) // 监听端口80
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;邮件服务&#34;&gt;&lt;a href=&#34;#邮件服务&#34; class=&#34;headerlink&#34; title=&#34;邮件服务&#34;&gt;&lt;/a&gt;邮件服务&lt;/h2&gt;&lt;p&gt;邮件服务可以用于给成员发送邮件、通知成员信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工具：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js-yaml：用于将yaml转为js对象&lt;/li&gt;
&lt;li&gt;nodemailer：用于创建邮件服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// node.js发送邮件
const yamlTrans = require(&amp;#39;js-yaml&amp;#39;);
const fs = require(&amp;#39;fs&amp;#39;);
const nodemailer = require(&amp;#39;nodemailer&amp;#39;)
const yamlCode = fs.readFileSync(&amp;#39;./data.yaml&amp;#39;,&amp;#39;utf-8&amp;#39;);
const dataObj = yamlTrans.load(yamlCode);
//nodemailer.createTransport创建transPort服务,传入auth信息和配置项
//授权码需要到对应官网生成
const transPort = nodemailer.createTransport(&amp;#123;
    serviece:&amp;#39;qq&amp;#39;,
    port:587,
    host:&amp;#39;smtp.qq.cmo&amp;#39;,
    secure:true,
    auth:&amp;#123;
        pass:dataObj.pass, //授权码需要去官网申请生成
        user:dataObj.user
    &amp;#125;
&amp;#125;)
// sendMail方法发送邮件，传入接收方信息
transPort.sendMail(&amp;#123;
    to: send.qq.com,
    from: dataObj.user,
    subject: &amp;#39;邮件标题&amp;#39;,
    text: &amp;#39;邮件内容&amp;#39;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/</guid>
            <title>微前端</title>
            <link>https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/</link>
            <category term="微前端" scheme="https://dmqweb.cn/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/" />
            <category term="微前端" scheme="https://dmqweb.cn/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/" />
            <pubDate>Fri, 24 May 2024 14:26:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;微前端介绍&#34;&gt;&lt;a href=&#34;#微前端介绍&#34; class=&#34;headerlink&#34; title=&#34;微前端介绍&#34;&gt;&lt;/a&gt;微前端介绍&lt;/h1&gt;&lt;p&gt;微前端按业务功能将一整块前端应用分解成一系列更小的、更内聚的微前端应用，同时通过明确的交互协议来管理这些应用间的依赖关系，实现不同业务的解耦合。并将每个前端应用交给独立团队负责，各自独立开发、独立部署、充分利用并行性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微前端是一种架构风格，monorepo是一种开发策略，模块联邦是一种打包和部署方式&lt;ul&gt;
&lt;li&gt;微前端将大型的前端应用分解成一组小的、独立的前端服务，每一个小的前端服务可以由不同的团队独立开发、部署和维护。微前端的目标是提高大型前端项目的可维护性、可扩展性和灵活性&lt;/li&gt;
&lt;li&gt;monorepo是一种开发策略（技巧），它将多个项目或服务的代码放在一个单一的版本控制系统仓库中，有助于简化依赖管理、代码共享和团队协作。对于工具库能更好的暴露单独模块。&lt;/li&gt;
&lt;li&gt;模块联邦是Webpack5引入的一个特性，允许将多个Webpack项目远程接入、联合起来，形成一个单一的应用，每个模块可以独立开发和部署，同时共享彼此的代码，模块联邦是一种新的打包和部署前端应用的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;微前端应用&#34;&gt;&lt;a href=&#34;#微前端应用&#34; class=&#34;headerlink&#34; title=&#34;微前端应用&#34;&gt;&lt;/a&gt;微前端应用&lt;/h1&gt;&lt;h2 id=&#34;EMP&#34;&gt;&lt;a href=&#34;#EMP&#34; class=&#34;headerlink&#34; title=&#34;EMP&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbXAyLm5ldGxpZnkuYXBwLw==&#34;&gt;EMP&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;模块联邦技术，微前端构建方案，是基于 webpack 5 module federation 的微前端方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack 联邦编译可以保证所有子应用依赖解耦；&lt;/li&gt;
&lt;li&gt;应用间去中心化的调用、共享模块；&lt;/li&gt;
&lt;li&gt;模块远程 ts 支持；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对 webpack 强依赖，老旧项目不友好；&lt;/li&gt;
&lt;li&gt;没有有效的 css 沙箱和 js 沙箱，需要靠用户自觉；&lt;/li&gt;
&lt;li&gt;子应用保活、多应用激活无法实现；&lt;/li&gt;
&lt;li&gt;主、子应用的路由可能发生冲突；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 这个东西有点类似于拆包，也可以叫模块共享，例如React有个模块可以共享给Vue项目用Vue2的组件可以共享给Vue3用。&lt;/p&gt;
&lt;h2 id=&#34;single-spa&#34;&gt;&lt;a href=&#34;#single-spa&#34; class=&#34;headerlink&#34; title=&#34;single-spa&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC1oYW5zLnNpbmdsZS1zcGEuanMub3JnL2RvY3MvZ2V0dGluZy1zdGFydGVkLW92ZXJ2aWV3&#34;&gt;single-spa&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;single-spa是微前端的基础框架，乾坤框架就是基于single-spa来实现的，在single-spa的基础上做了一层封装，也解决了single-spa的一些缺陷。&lt;/p&gt;
&lt;h2 id=&#34;乾坤&#34;&gt;&lt;a href=&#34;#乾坤&#34; class=&#34;headerlink&#34; title=&#34;乾坤&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcWlhbmt1bi51bWlqcy5vcmcvemgv&#34;&gt;乾坤&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html entry 的方式引入子应用，相比 js entry 极大的降低了应用改造的成本；&lt;/li&gt;
&lt;li&gt;完备的沙箱方案，js 沙箱做了 SnapshotSandbox、LegacySandbox、ProxySandbox 三套渐进增强方案，css 沙箱做了 strictStyleIsolation、experimentalStyleIsolation 两套适用不同场景的方案；&lt;/li&gt;
&lt;li&gt;做了静态资源预加载能力；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;适配成本比较高，工程化、生命周期、静态资源路径、路由等都要做一系列的适配工作；&lt;/li&gt;
&lt;li&gt;css 沙箱采用严格隔离会有各种问题，js 沙箱在某些场景下执行性能下降严重；&lt;/li&gt;
&lt;li&gt;无法同时激活多个子应用，也不支持子应用保活；&lt;/li&gt;
&lt;li&gt;无法支持 vite 等 esmodule 脚本运行；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;无界&#34;&gt;&lt;a href=&#34;#无界&#34; class=&#34;headerlink&#34; title=&#34;无界&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vd3VqaWUtbWljcm8uZ2l0aHViLmlvL2RvYy9hcGkvYnVzLmh0bWw=&#34;&gt;无界&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接入简单只需要四五行代码&lt;/li&gt;
&lt;li&gt;不需要针对vite额外处理&lt;/li&gt;
&lt;li&gt;预加载&lt;/li&gt;
&lt;li&gt;应用保活机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隔离js使用一个空的iframe进行隔离&lt;/li&gt;
&lt;li&gt;子应用axios需要自行适配&lt;/li&gt;
&lt;li&gt;iframe沙箱的src设置了主应用的host，初始化iframe的时候需要等待iframe的location.orign从’about:blank’初始化为主应用的host，这个采用的计时器去等待的不是很悠亚。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 使用shadowDom 隔离css，js使用空的iframe隔离，通讯使用的是proxy&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;无界的原理就是使用开启影子dom来进行样式的隔离，通过使用attachShadow方法开启影子dom（继承HTMLElement），获得的shadow影子dom添加template（无界的初始模板）为子元素，这样就进行了样式隔离，最后通过window.customElement.define注册dom元素wu-jie，使用标签即可。&lt;/p&gt;
&lt;p&gt;index.js：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;window.onload = () =&amp;gt; &amp;#123;
    class WuJie extends HTMLElement &amp;#123;
        constructor() &amp;#123;
            super()
            this.init()
            this.getAttr(&amp;#39;url&amp;#39;)
        &amp;#125;
        init() &amp;#123;
          const shadow =  this.attachShadow(&amp;#123; mode: &amp;quot;open&amp;quot; &amp;#125;) //开启影子dom 也就是样式隔离
          const template = document.querySelector(&amp;#39;#wu-jie&amp;#39;) as HTMLTemplateElement
          console.log(template);
          shadow.appendChild(template.content.cloneNode(true))
        &amp;#125;
        getAttr (str:string) &amp;#123;
           console.log(&amp;#39;获取参数&amp;#39;,this.getAttribute(str));
        &amp;#125;
        //生命周期自动触发有东西插入
        connectedCallback () &amp;#123;
           console.log(&amp;#39;类似于vue 的mounted&amp;#39;);
        &amp;#125;
        //生命周期卸载
        disconnectedCallback () &amp;#123;
              console.log(&amp;#39;类似于vue 的destory&amp;#39;);
        &amp;#125;
        //跟watch类似
        attributeChangedCallback (name:any, oldVal:any, newVal:any) &amp;#123;
            console.log(&amp;#39;跟vue 的watch 类似 有属性发生变化自动触发&amp;#39;);
        &amp;#125;
    &amp;#125;
    window.customElements.define(&amp;#39;wu-jie&amp;#39;, WuJie)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.html：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;./index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!--外层写一个div测试隔离--&amp;gt;
    &amp;lt;div&amp;gt;我是div&amp;lt;/div&amp;gt;
    &amp;lt;wu-jie url=&amp;quot;xxxxxx&amp;quot;&amp;gt;&amp;lt;/wu-jie&amp;gt;
    &amp;lt;template id=&amp;quot;wu-jie&amp;quot;&amp;gt;
       &amp;lt;!--div的样式是作用于全局的--&amp;gt;
        &amp;lt;style&amp;gt;
            div &amp;#123;
                background: red;
            &amp;#125;
        &amp;lt;/style&amp;gt;
         &amp;lt;div&amp;gt;
            样式隔离的
         &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;预加载&#34;&gt;&lt;a href=&#34;#预加载&#34; class=&#34;headerlink&#34; title=&#34;预加载&#34;&gt;&lt;/a&gt;预加载&lt;/h4&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;需要从wujie的实例导出&lt;code&gt;preloadApp&lt;/code&gt;,参数跟&lt;code&gt;startApp&lt;/code&gt; 一致，预加载必须开启exec选项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;preloadApp(&amp;#123; name: &amp;quot;vue3&amp;quot;, url: &amp;quot;http://127.0.0.1:5174/&amp;quot;, exec: true &amp;#125;)
preloadApp(&amp;#123; name: &amp;quot;react&amp;quot;, url: &amp;quot;http://127.0.0.1:5175/&amp;quot;, exec: true &amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;exec代表是否进行预加载，默认值是true&lt;/li&gt;
&lt;li&gt;js的执行模式，由于子应用的执行会阻塞主应用的渲染线程，当设置为true时js采取类似于react fiber的模式方式间断执行，每个js文件的执行都包裹在&lt;code&gt;requestidlecallback&lt;/code&gt;中，每执行一个js文件后就可以返回去响应外部的输入，不会造成浏览器渲染和加载之间的冲突从而造成卡顿，但是这个颗粒度是js文件，所以应该保证js文件不应过大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器一帧之内要做的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理用于输入（事件）&lt;/li&gt;
&lt;li&gt;执行定时任务&lt;/li&gt;
&lt;li&gt;执行requestAnimationFrame&lt;/li&gt;
&lt;li&gt;执行dom的回流和重绘&lt;/li&gt;
&lt;li&gt;计算更新涂层的更新指令&lt;/li&gt;
&lt;li&gt;绘制指令合并主线程，如果有空余时间执行requestidlecallbask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;react也有该机制 但是react并没有用 &lt;code&gt;requestidlecallback&lt;/code&gt;，说是这个东西经过测试可能会超过16ms，超过16ms绘制就会看起来很卡 所以react16是用的 &lt;code&gt;requestAnimationFrame + postMessage&lt;/code&gt; 实现的那为什么不用&lt;code&gt;setTimeOut&lt;/code&gt; setTimeOut 及时为0 也会有一个最小毫秒延迟4ms，所以是用了postMessage，react18又换成了&lt;code&gt;MessageChannel&lt;/code&gt; 实现了队列方式去执行任务。&lt;/p&gt;
&lt;h2 id=&#34;micro-app&#34;&gt;&lt;a href=&#34;#micro-app&#34; class=&#34;headerlink&#34; title=&#34;micro-app&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vemVyb2luZy5qZC5jb20vbWljcm8tYXBwL2RvY3MuaHRtbCUyMy8=&#34;&gt;micro-app&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;micro-app 是基于 webcomponent + qiankun sandbox 的微前端方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 webcomponet 加载子应用相比 single-spa 这种注册监听方案更加优雅；&lt;/li&gt;
&lt;li&gt;复用经过大量项目验证过 qiankun 的沙箱机制也使得框架更加可靠；&lt;/li&gt;
&lt;li&gt;组件式的 api 更加符合使用习惯，支持子应用保活；&lt;/li&gt;
&lt;li&gt;降低子应用改造的成本，提供静态资源预加载能力；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;css 沙箱依然无法绝对的隔离，js 沙箱做全局变量查找缓存，性能有所优化；&lt;/li&gt;
&lt;li&gt;支持 vite 运行，但必须使用 plugin 改造子应用，且 js 代码没办法做沙箱隔离；&lt;/li&gt;
&lt;li&gt;对于不支持 webcompnent 的浏览器没有做降级处理；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 js隔离跟qiankun类似也是使用proxy + with，css隔离自定义前缀类似于scoped&lt;/p&gt;
&lt;h1 id=&#34;模块联邦&#34;&gt;&lt;a href=&#34;#模块联邦&#34; class=&#34;headerlink&#34; title=&#34;模块联邦&#34;&gt;&lt;/a&gt;模块联邦&lt;/h1&gt;&lt;p&gt;模块联邦是跟&lt;code&gt;webpack5&lt;/code&gt;强耦合的，是基于webpack5内置插件的 无须安装&lt;/p&gt;
&lt;p&gt;它相当于是一个去中心化技术，它可以让多个独立构建的应用之间，动态的调用彼此的模块。这种运行机制，可以让我们轻松的拆分应用，真正做到跨应用的模块共享。&lt;/p&gt;
&lt;p&gt;配置过程就是在webpack.config.js中配置ModuleFederationPlugin插件，打完包之后观察会发现其实就是import函数动态加载，使用模块联邦的好处就在于之前当多个项目共有的模块改变时，每一个项目都需要重新install一下，而使用模块联邦之后，就相当于动态导入，免去了重新install的过程（由项目的克隆转为类似软链接的过程）。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</guid>
            <title>网络安全</title>
            <link>https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link>
            <category term="网络安全" scheme="https://dmqweb.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
            <category term="网络安全" scheme="https://dmqweb.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
            <pubDate>Thu, 23 May 2024 16:47:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端网络安全&#34;&gt;&lt;a href=&#34;#前端网络安全&#34; class=&#34;headerlink&#34; title=&#34;前端网络安全&#34;&gt;&lt;/a&gt;前端网络安全&lt;/h1&gt;&lt;h2 id=&#34;1-XSS-跨站脚本攻击&#34;&gt;&lt;a href=&#34;#1-XSS-跨站脚本攻击&#34; class=&#34;headerlink&#34; title=&#34;#1. XSS 跨站脚本攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzEteHNzLSVFOCVCNyVBOCVFNyVBQiU5OSVFOCU4NCU5QSVFNiU5QyVBQyVFNiU5NCVCQiVFNSU4NyVCQg==&#34;&gt;#&lt;/span&gt;1. XSS 跨站脚本攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XSS 是常见的 Web 攻击技术之一.所谓的跨站脚本攻击指得是:恶意攻击者往 Web 页面里注入恶意 Script 代码，用户浏览这些网页时，就会执行其中的恶意代码，可对用户进行盗取 cookie 信息、会话劫持等各种攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;危害&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;盗取各类用户帐号&lt;/strong&gt;，如机器登录帐号、用户网银帐号、各类管理员帐号&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;控制企业数据&lt;/strong&gt;，包括读取、篡改、添加、删除企业敏感数据的能力&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;盗窃企业重要的具有商业价值的资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;strong&gt;非法转账&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;strong&gt;强制发送电子邮件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;strong&gt;网站挂马&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;strong&gt;控制受害者机器向其它网站发起攻击&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤用户的输入信息，禁止用户在输入的过程中输入 “&amp;lt;”, “&amp;gt;”, “引号”, “$”, “_”&lt;/li&gt;
&lt;li&gt;核心的用户身份标示或 token 保存在 Cookie 中,Cookie 中一定要加 “HTTPOnly” 在结尾，保证只有在 html 操作时才能将 cookie 中的内容发送出去，在 JS 中无法获得用户的 Cookie 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-CSRF-网络攻击&#34;&gt;&lt;a href=&#34;#2-CSRF-网络攻击&#34; class=&#34;headerlink&#34; title=&#34;#2. CSRF 网络攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzItY3NyZi0lRTclQkQlOTElRTclQkIlOUMlRTYlOTQlQkIlRTUlODclQkI=&#34;&gt;#&lt;/span&gt;2. CSRF 网络攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSRF（Cross-site request forgery）跨站请求伪造，也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少在 cookie 中存储客户核心内容比如用户的 token、ID、access_token 等&lt;/li&gt;
&lt;li&gt;GET 请求不对数据进行修改&lt;/li&gt;
&lt;li&gt;不让第三方网站访问到 Cookie&lt;/li&gt;
&lt;li&gt;阻止第三方网站请求接口&lt;/li&gt;
&lt;li&gt;请求时附带验证信息，比如验证码或者 Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-DDOS-攻击&#34;&gt;&lt;a href=&#34;#3-DDOS-攻击&#34; class=&#34;headerlink&#34; title=&#34;#3. DDOS 攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzMtZGRvcy0lRTYlOTQlQkIlRTUlODclQkI=&#34;&gt;#&lt;/span&gt;3. DDOS 攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDOS 攻击，它在短时间内发起大量请求，耗尽服务器的资源，无法响应正常的访问，造成网站实质下线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防范 DDOS 的第一步，就是你要有一个备份网站，或者最低限度有一个临时主页。生产服务器万一下线了，可以立刻切换到备份网站，不至于毫无办法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;后端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 请求的拦截，恶意请求都是从某个 IP 段发出的，那么把这个 IP 段封掉就行了。或者，它们的 User Agent 字段有特征（包含某个特定的词语），那就把带有这个词语的请求拦截。&lt;/li&gt;
&lt;li&gt;带宽扩容，或者使用 CDN&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/21/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/</guid>
            <title>桌面端开发</title>
            <link>https://dmqweb.cn/2024/05/21/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
            <category term="桌面端开发" scheme="https://dmqweb.cn/categories/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/" />
            <category term="桌面端开发" scheme="https://dmqweb.cn/tags/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/" />
            <category term="electron" scheme="https://dmqweb.cn/tags/electron/" />
            <category term="tauri" scheme="https://dmqweb.cn/tags/tauri/" />
            <pubDate>Tue, 21 May 2024 19:35:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;对比&#34;&gt;&lt;a href=&#34;#对比&#34; class=&#34;headerlink&#34; title=&#34;对比&#34;&gt;&lt;/a&gt;对比&lt;/h1&gt;&lt;p&gt;Electron和Tauri两种桌面端优势对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生态：Electron &amp;gt; Tauri&lt;/li&gt;
&lt;li&gt;性能：Electron &amp;gt; Tauri （Tauri底层基于Tust，并不具备Electron的多进程模型）&lt;/li&gt;
&lt;li&gt;扩展性：Electron &amp;gt; Tauri（Tauri基于Web技术栈，会受到浏览器的限制，而Electron可以直接访问操作系统的API）&lt;/li&gt;
&lt;li&gt;打包：Tauri &amp;gt; Electron（Tauri基于Rust实现，打包产物更小）&lt;/li&gt;
&lt;li&gt;安全性：Tauri &amp;gt; Electron（Tauri打包生成二进制文件，而Electron会将node_modules打包进去，并且没有加密）&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
            <title>v8引擎编译原理</title>
            <link>https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
            <category term="v8引擎编译原理" scheme="https://dmqweb.cn/categories/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
            <category term="v8引擎" scheme="https://dmqweb.cn/tags/v8%E5%BC%95%E6%93%8E/" />
            <category term="底层原理" scheme="https://dmqweb.cn/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/" />
            <pubDate>Tue, 21 May 2024 18:36:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;v8引擎介绍&#34;&gt;&lt;a href=&#34;#v8引擎介绍&#34; class=&#34;headerlink&#34; title=&#34;v8引擎介绍&#34;&gt;&lt;/a&gt;v8引擎介绍&lt;/h1&gt;&lt;p&gt;Blink内核用于解析HTML、DOM、CSS渲染、嵌入了v8引擎用于解析Javascript&lt;/p&gt;
&lt;p&gt;V8是谷歌的开源高性能JavaScript和WebAssembly引擎，用C++编写。它被用于Chrome和Node.js等。&lt;strong&gt;用于解析并执行JavaScript代码。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;执行过程&#34;&gt;&lt;a href=&#34;#执行过程&#34; class=&#34;headerlink&#34; title=&#34;执行过程&#34;&gt;&lt;/a&gt;执行过程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;初始化运行环境&lt;ul&gt;
&lt;li&gt;堆栈空间&lt;/li&gt;
&lt;li&gt;全局执行上下文&lt;/li&gt;
&lt;li&gt;全局作用域&lt;/li&gt;
&lt;li&gt;事件循环系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用Scanner扫描器将输入的代码词法分析成tokens&lt;ul&gt;
&lt;li&gt;分析的结果就是一个个的tokens对象组成的数组&lt;/li&gt;
&lt;li&gt;分析的过程利用了有限自动状态机的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用parser解析器将tokens转化为抽象语法树&lt;ul&gt;
&lt;li&gt;根据分析tokens构造出一种树形关系结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预解析&lt;/strong&gt;：在JS代码执行之前对代码进行可选的预处理，用于提高执行效率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟解析&lt;/strong&gt;：只有代码执行到的部分才会去解析，节省了不必要的时间和开销，提高了JavaScript的执行效率，其中vite脚手架就是利用了这个优点（还有esbuild打包快的优势），提高了效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用ignition解释器将AST（抽象语法树）转为字节码（不直接转为机器码？）&lt;ul&gt;
&lt;li&gt;字节码跨平台能力强&lt;/li&gt;
&lt;li&gt;字节码更快的加载和解析执行&lt;/li&gt;
&lt;li&gt;动态优化易操作&lt;/li&gt;
&lt;li&gt;代码安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用TurboFan编译器将字节码转为CPU和ARM识别的机器码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v8中的对象结构&#34;&gt;&lt;a href=&#34;#v8中的对象结构&#34; class=&#34;headerlink&#34; title=&#34;v8中的对象结构&#34;&gt;&lt;/a&gt;v8中的对象结构&lt;/h1&gt;&lt;h3 id=&#34;常规属性和排序属性&#34;&gt;&lt;a href=&#34;#常规属性和排序属性&#34; class=&#34;headerlink&#34; title=&#34;常规属性和排序属性&#34;&gt;&lt;/a&gt;常规属性和排序属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;v8中的对象主要分为三个指针构成的，分别是：隐藏类、常规属性和排序属性。&lt;/li&gt;
&lt;li&gt;对象的属性数字会从小到大排列，字符串会按照原创建顺序&lt;/li&gt;
&lt;li&gt;对象中数字属性被称为排序属性，字符串属性被称为常规属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快属性和慢属性&#34;&gt;&lt;a href=&#34;#快属性和慢属性&#34; class=&#34;headerlink&#34; title=&#34;快属性和慢属性&#34;&gt;&lt;/a&gt;快属性和慢属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JS对象很多属性是在原型链上进行查找，这样就会很慢，v8将部分常规属性（10个）直接存储到对象本身（对象内属性），以提高属性的查询效率。&lt;/li&gt;
&lt;li&gt;快属性容量是10个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装、继承、多态&#34;&gt;&lt;a href=&#34;#封装、继承、多态&#34; class=&#34;headerlink&#34; title=&#34;封装、继承、多态&#34;&gt;&lt;/a&gt;封装、继承、多态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;封装就是将抽象出来的数据和对数据的操作封装在一起，数据在内部被保护，程序其他部分只有通过成员才能对数据进行操作&lt;/li&gt;
&lt;li&gt;继承：有原型链继承、寄生继承和call、apply借用法继承。&lt;/li&gt;
&lt;li&gt;多态就是函数重载：同一个函数可以根据调用的情况（参数类型和数量等）来进行不同的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;隐藏类&#34;&gt;&lt;a href=&#34;#隐藏类&#34; class=&#34;headerlink&#34; title=&#34;隐藏类&#34;&gt;&lt;/a&gt;隐藏类&lt;/h1&gt;&lt;p&gt;JavaScript是一门动态语言，其各种不确定性导致JavaScript的执行效率要远低于静态语言，V8为了提升JavaScript的执行效率，借鉴了很多静态语言的特性，比如：JIT机制，为了加速运算而引入了内联缓存，为了提升对象的属性访问速度而引入了隐藏类。&lt;/p&gt;
&lt;p&gt;隐藏类是V8引擎在运行时自动生成和管理的数据结构，用于跟踪对象的属性和方法，相当于提前定义好对象的形状，以便于提高操作对象的效率。&lt;/p&gt;
&lt;h3 id=&#34;原因&#34;&gt;&lt;a href=&#34;#原因&#34; class=&#34;headerlink&#34; title=&#34;原因&#34;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当JavaScript运行时，例如查找对象上的某一个属性，V8引擎会通过快慢属性去查找，整个过程非常耗时，因为V8在使用一个对象时，并不知道对象的具体形状（属性方法等）&lt;/li&gt;
&lt;li&gt;而C++在声明一个对象前就需要定义该对象的结构，C++代码执行前是需要被编译的，编译时对象的结构就已经固定，也就是当代码执行时，对象的形状是无法改变&lt;/li&gt;
&lt;li&gt;所以V8引入了隐藏类的概念，用于跟踪对象的属性和方法以此在内存中快速查找对象属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;隐藏类就是把JavaScript的对象也进行静态化，&lt;code&gt;我们假设这个对象不会删除和新增&lt;/code&gt;，这样形状就固定了&lt;/p&gt;
&lt;p&gt;满足条件之后V8就会创建隐藏类，在这个隐藏类会创建对象的基础属性&lt;/p&gt;
&lt;p&gt;在V8引擎中，每个隐藏类都有一个编号（&lt;code&gt;map id&lt;/code&gt;），用于唯一标识该隐藏类&lt;/p&gt;
&lt;p&gt;举个例子，假设我们有以下两个对象：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javaScript&#34;&gt;let obj1 = &amp;#123; name: 1, age: 2 &amp;#125;; 
let obj2 = &amp;#123; name: 1, age: 2, address: 3 &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这两个对象具有相同的形状，即都有属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，但&lt;code&gt;obj2&lt;/code&gt;还额外有一个属性&lt;code&gt;address&lt;/code&gt;。V8会为它们生成两个不同的隐藏类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;// 隐藏类1：包含属性name和age
HiddenClass_1
├── map_id: 1
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]
├── transitions: &amp;#123;&amp;#125;
└── prototype: Object.prototype

// 隐藏类2：包含属性name、age和address
HiddenClass_2
├── map_id: 2
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;address&amp;#39;]
├── transitions:
│   ├── a: HiddenClass_1
│   ├── b: HiddenClass_1
│   └── c: null
└── prototype: Object.prototype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，隐藏类1包含属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，没有过渡表；而隐藏类2包含属性&lt;code&gt;name&lt;/code&gt;、&lt;code&gt;age&lt;/code&gt;和&lt;code&gt;address&lt;/code&gt;，其中属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;的过渡表指向隐藏类1，属性&lt;code&gt;address&lt;/code&gt;没有过渡表，表示该属性是新添加的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果两个对象属性一样呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果两个对象具有相同的属性，它们将共享同一个隐藏类。具体来说，当两个对象的属性顺序和类型都相同时，V8会为它们生成一个共享的隐藏类。&lt;/p&gt;
&lt;p&gt;举个例子，假设我们有以下两个对象：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;let obj1 = &amp;#123; name: 1, age: 2 &amp;#125;;
let obj2 = &amp;#123; name: 1, age: 2 &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这两个对象具有相同的形状，即都有属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，且属性的顺序和类型完全一致。V8会为它们生成一个共享的隐藏类，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;HiddenClass_1
├── map_id: 1
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]
├── transitions: &amp;#123;&amp;#125;
└── prototype: Object.prototype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，隐藏类1包含属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，没有过渡表，而且两个对象都&lt;code&gt;共享&lt;/code&gt;这个隐藏类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种共享隐藏类的机制可以节省内存空间，因为不同的对象可以共享相同的隐藏类结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-28_21-49-19.png&#34; alt=&#34;JavaScript隐藏类机制&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/</guid>
            <title>Blob、File和FileReader</title>
            <link>https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/</link>
            <category term="Blob" scheme="https://dmqweb.cn/categories/Blob/" />
            <category term="Blob" scheme="https://dmqweb.cn/tags/Blob/" />
            <category term="FileReader" scheme="https://dmqweb.cn/tags/FileReader/" />
            <pubDate>Fri, 17 May 2024 10:22:13 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Blob&#34;&gt;&lt;a href=&#34;#Blob&#34; class=&#34;headerlink&#34; title=&#34;Blob&#34;&gt;&lt;/a&gt;Blob&lt;/h1&gt;&lt;p&gt;Blob的全称为：binary larget object（二进制大对象），blob的本质是一个js对象，里面可以存储大量的二进制编码的数据。&lt;/p&gt;
&lt;h3 id=&#34;特点：&#34;&gt;&lt;a href=&#34;#特点：&#34; class=&#34;headerlink&#34; title=&#34;特点：&#34;&gt;&lt;/a&gt;特点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不可修改&lt;/li&gt;
&lt;li&gt;只能使用FileReader读取内容&lt;/li&gt;
&lt;li&gt;存储大量二进制数据的 js 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用：&#34;&gt;&lt;a href=&#34;#使用：&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;new Blob(array,options)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;array是由ArrayBuffer、ArrayBufferView、Blob和DOMString对象构成的，将对被放进blob中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;options配置项有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type：默认值为：” “，表示将会被放入到blob中的数组内容的MIME类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;endings：默认值为：”transparent“，用于指定包含行结束符\n的字符串如何被写入，不常用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MIME类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;plain&lt;/td&gt;
&lt;td&gt;纯文本文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;html&lt;/td&gt;
&lt;td&gt;HTML文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;javascript&lt;/td&gt;
&lt;td&gt;JavaScript文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;css&lt;/td&gt;
&lt;td&gt;CSS文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;json&lt;/td&gt;
&lt;td&gt;JSON文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;pdf&lt;/td&gt;
&lt;td&gt;pdf文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;xml&lt;/td&gt;
&lt;td&gt;XML文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;jpeg&lt;/td&gt;
&lt;td&gt;JPEG文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;png&lt;/td&gt;
&lt;td&gt;PNG文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;gif&lt;/td&gt;
&lt;td&gt;GIF文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;svg+xml&lt;/td&gt;
&lt;td&gt;SVG+XML文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio&amp;#x2F;mpeg&lt;/td&gt;
&lt;td&gt;MP3文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video&amp;#x2F;mpeg&lt;/td&gt;
&lt;td&gt;MP4文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分片：&#34;&gt;&lt;a href=&#34;#分片：&#34; class=&#34;headerlink&#34; title=&#34;分片：&#34;&gt;&lt;/a&gt;分片：&lt;/h3&gt;&lt;p&gt;Blob 对象内置了 slice() 方法用来将 blob 对象分片&lt;/p&gt;
&lt;p&gt;其有三个参数：&lt;/p&gt;
&lt;p&gt;start：设置切片的起点，即切片开始位置。默认值为 0，这意味着切片应该从第一个字节开始；&lt;/p&gt;
&lt;p&gt;end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为blob.size；&lt;/p&gt;
&lt;p&gt;contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
let blob1 = blob.slice(0,2,&amp;quot;text/plain&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;读取：&#34;&gt;&lt;a href=&#34;#读取：&#34; class=&#34;headerlink&#34; title=&#34;读取：&#34;&gt;&lt;/a&gt;读取：&lt;/h3&gt;&lt;p&gt;blob对象只能通过FileReader读取内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
let reader = new fileReader();
reader.readAsText(blob);
console.log(reader.result);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;File&#34;&gt;&lt;a href=&#34;#File&#34; class=&#34;headerlink&#34; title=&#34;File&#34;&gt;&lt;/a&gt;File&lt;/h1&gt;&lt;h3 id=&#34;介绍：&#34;&gt;&lt;a href=&#34;#介绍：&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;File对象是特殊的Blob对象。是基于Blob对象的进一步封装，js中主要有两种方式获得FIle对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;input元素选择后返回的FileList对象（通过change事件的event.target.files获取）&lt;/li&gt;
&lt;li&gt;文件拖放操作生成的DataTransfer对象（通过ondrop事件的event.dataTransfer.files获取）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FileReader&#34;&gt;&lt;a href=&#34;#FileReader&#34; class=&#34;headerlink&#34; title=&#34;FileReader&#34;&gt;&lt;/a&gt;FileReader&lt;/h1&gt;&lt;h3 id=&#34;介绍：-1&#34;&gt;&lt;a href=&#34;#介绍：-1&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;FileReader用于读取Blob对象（包含File对象）内容的方法，通过result属性获取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;readAsArrayBuffer方法：读取为ArrayBuffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsDataURL方法：读取为data:URL的Base64字符串表示文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsText方法：读取为原始text文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsBinaryString方法：读取为原始二进制数据&lt;/p&gt;
&lt;p&gt;但是直接使用此方法还是会得到原始的文本内容，因为二进制数据需要使用ArrayBuffer对象来进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ArrayBuffer&#34;&gt;&lt;a href=&#34;#ArrayBuffer&#34; class=&#34;headerlink&#34; title=&#34;ArrayBuffer&#34;&gt;&lt;/a&gt;ArrayBuffer&lt;/h1&gt;&lt;h3 id=&#34;介绍：-2&#34;&gt;&lt;a href=&#34;#介绍：-2&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;ArrayBuffer可以理解为一个特殊的数组，其本身是一个黑盒，不能直接读写所存储的数据，需要借助视图对象来读写。它只是一个用于存储二进制数据的缓冲区，创建时只能传一个空间大小biteLength。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读写ArrayBuffer的方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TypedArray&lt;/li&gt;
&lt;li&gt;DataView&lt;/li&gt;
&lt;li&gt;TextDecoder&lt;/li&gt;
&lt;li&gt;用Blob存储，然后用FileReader读写&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法：&#34;&gt;&lt;a href=&#34;#方法：&#34; class=&#34;headerlink&#34; title=&#34;方法：&#34;&gt;&lt;/a&gt;方法：&lt;/h3&gt;&lt;p&gt;ArrayBuffer提供了一个slice方法用于切片。参数为：开始位置，结束位置和解析类型。&lt;/p&gt;
&lt;h3 id=&#34;使用：-1&#34;&gt;&lt;a href=&#34;#使用：-1&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const buffer = new ArrayBuffer(32);
buffer.slice(0,4,&amp;#39;text/plain&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;TypedArray&#34;&gt;&lt;a href=&#34;#TypedArray&#34; class=&#34;headerlink&#34; title=&#34;TypedArray&#34;&gt;&lt;/a&gt;TypedArray&lt;/h1&gt;&lt;p&gt;TypedArray只是一个概念，提供了一种机制来解读ArrayBuffer中的数据（相当于一个视图，将ArrayBuffer中的数据进行展示和操作），实际上是那九个类型对象（每个类型对应一个特定的数据类型和大小）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int8Array&lt;/code&gt;：8位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint8Array&lt;/code&gt;：8位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int16Array&lt;/code&gt;：16位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint16Array&lt;/code&gt;：16位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int32Array&lt;/code&gt;：32位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint32Array&lt;/code&gt;：32位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float32Array&lt;/code&gt;：32位浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float64Array&lt;/code&gt;：64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用：-2&#34;&gt;&lt;a href=&#34;#使用：-2&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const buffer = new ArrayBuffer(32);
const slice = buffer.slice(0,4,&amp;#39;text/plain&amp;#39;);
const sliceView = new Int8Array(slice);
sliceView.set([10,20,30]);
sliceView.forEach((value,index)=&amp;gt;&amp;#123;
    console.log(value,index);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;DataView&#34;&gt;&lt;a href=&#34;#DataView&#34; class=&#34;headerlink&#34; title=&#34;DataView&#34;&gt;&lt;/a&gt;DataView&lt;/h1&gt;&lt;h3 id=&#34;读取：-1&#34;&gt;&lt;a href=&#34;#读取：-1&#34; class=&#34;headerlink&#34; title=&#34;读取：&#34;&gt;&lt;/a&gt;读取：&lt;/h3&gt;&lt;p&gt;DataView数据视图可以用于读写buffer,DataView实例提供了许多方法来读取内存，他们呢的参数都是一个字节序号。表示开始读取的字节位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getInt8：读取1个字节，返回一个8位整数&lt;/li&gt;
&lt;li&gt;getUint8：读取1个字节，返回一个无符号8位整数&lt;/li&gt;
&lt;li&gt;getInt16：读取2个字节，返回一个16位整数&lt;/li&gt;
&lt;li&gt;getUnit16：读取2个字节，返回一个无符号16位整数&lt;/li&gt;
&lt;li&gt;getInt32：读取4个字节，返回一个32位整数&lt;/li&gt;
&lt;li&gt;getUnit32：读取4个字节，返回一个无符号32位整数&lt;/li&gt;
&lt;li&gt;getFloat32：读取4个字节，返回一个32位浮点数&lt;/li&gt;
&lt;li&gt;getUnit64：读取8个字节，返回一个64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写入：&#34;&gt;&lt;a href=&#34;#写入：&#34; class=&#34;headerlink&#34; title=&#34;写入：&#34;&gt;&lt;/a&gt;写入：&lt;/h3&gt;&lt;p&gt;DataView实例提供以下方法写入内存，他们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setInt8：写入1个字节的8位整数&lt;/li&gt;
&lt;li&gt;setUint8：写入1个字节的8位无符号整数&lt;/li&gt;
&lt;li&gt;setInt16：写入2个字节的16位整数&lt;/li&gt;
&lt;li&gt;setUint16：写入2个字节的16位无符号整数&lt;/li&gt;
&lt;li&gt;setInt32：写入4个字节的32位整数&lt;/li&gt;
&lt;li&gt;setUnit32：写入4个字节的32位无符号整数&lt;/li&gt;
&lt;li&gt;setFloat32：写入4个字节的32位浮点数&lt;/li&gt;
&lt;li&gt;setFloat64：写入8个自己的64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Object-URL&#34;&gt;&lt;a href=&#34;#Object-URL&#34; class=&#34;headerlink&#34; title=&#34;Object URL&#34;&gt;&lt;/a&gt;Object URL&lt;/h1&gt;&lt;p&gt;Object URL是一个用于表示File Object或者Blob Object的URL，可以将&lt;strong&gt;Blob对象（包括File对象）&lt;/strong&gt;变为一个URL地址。&lt;/p&gt;
&lt;h3 id=&#34;使用：-3&#34;&gt;&lt;a href=&#34;#使用：-3&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;使用URL.createObjectURL来创建。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const blob = new Blob([&amp;#39;你好世界&amp;#39;],&amp;#123;type:&amp;#39;text/plain&amp;#39;&amp;#125;);
const newUrl = URL.createObjectURL(blob);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;base64编码&#34;&gt;&lt;a href=&#34;#base64编码&#34; class=&#34;headerlink&#34; title=&#34;base64编码&#34;&gt;&lt;/a&gt;base64编码&lt;/h1&gt;&lt;h3 id=&#34;介绍：-3&#34;&gt;&lt;a href=&#34;#介绍：-3&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;base64是一个保存二进制数据的工具，将多种形式的二进制数据或其构成的文件&lt;strong&gt;以ASCII的形式保存&lt;/strong&gt;，因为很多地方不支持直接的二进制文件保存或呈现，比如可以将图片直接转换成base64码嵌入HTML文档中，而避免使用网络http加载图片。另外，将数据编码为 base64 进行传输，然后解码获得数据，可以一定程度上保证数据的完整并且不用在传输过程中修改这些数据，避免在传输过程中可能出现的问题；&lt;/p&gt;
&lt;h3 id=&#34;组成：&#34;&gt;&lt;a href=&#34;#组成：&#34; class=&#34;headerlink&#34; title=&#34;组成：&#34;&gt;&lt;/a&gt;组成：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;A-Z a-z 0-9 + /&lt;/code&gt; 共64个字符组成;&lt;/p&gt;
&lt;h3 id=&#34;使用：-4&#34;&gt;&lt;a href=&#34;#使用：-4&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;JS中有两个函数用于base64格式（ASCII码）的转换:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;btoa()：编码（Binary To ASCII  二进制转ASCII）&lt;/p&gt;
&lt;p&gt;该函数用于将二进制转为Base64字符串（ASCII码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;atob()：解码（ASCII To Binary  ASCII码转二进制）&lt;/p&gt;
&lt;p&gt;该函数用于将Base64字符串（ASCII码）解码为二进制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意：&#34;&gt;&lt;a href=&#34;#注意：&#34; class=&#34;headerlink&#34; title=&#34;注意：&#34;&gt;&lt;/a&gt;注意：&lt;/h3&gt;&lt;p&gt;btoa和atob方法有个弊端就是只能处理拉丁字符集内的字符，其不包括中文或非西欧语言的字符（&lt;strong&gt;只能处理单字节字符&lt;/strong&gt;）。要处理多字节字符需要使用TextEncoder API将字符串转为Uint8Array，然后手动将这些字节转为一个字符串（String.fromCharCode）。&lt;/p&gt;
&lt;h1 id=&#34;TextEncoder&#34;&gt;&lt;a href=&#34;#TextEncoder&#34; class=&#34;headerlink&#34; title=&#34;TextEncoder&#34;&gt;&lt;/a&gt;TextEncoder&lt;/h1&gt;&lt;h3 id=&#34;介绍：-4&#34;&gt;&lt;a href=&#34;#介绍：-4&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;TextEncoder构造函数创建一个编码器，encode方法用于将字符串编码为一个UTF-8编码文本的Uint8Array视图。&lt;/p&gt;
&lt;h3 id=&#34;使用：-5&#34;&gt;&lt;a href=&#34;#使用：-5&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const encoder = new TextEncoder();
const view = encoder.encode(&amp;quot;$&amp;quot;);
console.log(view)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/17/esbuild/</guid>
            <title>esbuild</title>
            <link>https://dmqweb.cn/2024/05/17/esbuild/</link>
            <category term="esbuild" scheme="https://dmqweb.cn/categories/esbuild/" />
            <category term="esbuild" scheme="https://dmqweb.cn/tags/esbuild/" />
            <category term="打包工具" scheme="https://dmqweb.cn/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/" />
            <pubDate>Fri, 17 May 2024 09:14:12 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;关于打包工具：esbuild、webpack和rollup三者的介绍推荐&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI0MDk4NDIyOTM5MjU0ODIx&#34;&gt;这里&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;简单来说就是esbuild打包更快；rollup打包产物更纯净、体积更小，但不支持热更新；webpack功能更全，生态更完善，支持文件类型更多。&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Esbuild是一个类webpack的打包工具，速度是webpack的几十倍。其底层基于go语言进行编写，不使用AST，优化了构建流程。js是单线程串行，esbuild是新开了一个进程，使用多线程并行，充分发挥了多核的优势。&lt;/p&gt;
&lt;h1 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;esbuild最显著的作用就是：快。它也是vite和snowpack底层的打包工具。同时也可以将esbuild打包工具集成到webpack中（使用plugin）。之所以esbuild没有流行起来是因为它绕过了AST，而直接进行构建，使没有很好的过渡到基于babel-loader这样通过AST进行打包的上层工具中。&lt;/p&gt;
&lt;h1 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const esbuild = require(&amp;#39;esbuild&amp;#39;);
/**
 * 利用esbuild生成文件
 */
esbuild.buildSync(&amp;#123;
    entryPoints:[&amp;#39;vite.config.js&amp;#39;],
    outfile: &amp;#39;out.js&amp;#39;
&amp;#125;)
/**
 * 利用esbuild处理jsx语法
 */
console.log(
    esbuild.transformSync(&amp;#39;&amp;lt;div&amp;gt;利用esbuild处理jsx语法&amp;lt;/div&amp;gt;&amp;#39;,&amp;#123;
        jsxFragment:&amp;#39;Fragment&amp;#39;,
        loader:&amp;#39;jsx&amp;#39;
    &amp;#125;)
);
/**
 * 利用esbuld压缩代码体积
 */
console.log(
    esbuild.transformSync(&amp;#39;const a = &amp;quot;你好世界&amp;quot;&amp;#39;,&amp;#123;
        minify: true
    &amp;#125;)
);
/**
 * esbuild内置了一些loader，使用时会根据文件后缀自动执行loader，也可以手动确定loader
 * 支持：js,jsx,ts,tsx,css,text,binary,dataurl,file
 */
console.log(
    esbuild.buildSync(&amp;#123;
        entryPoints: [&amp;#39;vite.config.js&amp;#39;],
        bundle:true,
        loader: &amp;#123;&amp;#39;.js&amp;#39;:&amp;#39;jsx&amp;#39;&amp;#125;, //默认使用js loader，手动改为jsx-loader
        outfile: &amp;#39;out.js&amp;#39;,
    &amp;#125;)
);
/**
 * 使用esbuild启动一个web server用于调试（热更新）
 */
esbuild.serve(&amp;#123;&amp;#125;,&amp;#123;
    entryPoints: [&amp;#39;vite.config.js&amp;#39;],
    bundle: true,
    outfile: &amp;#39;bundle.js&amp;#39;,
&amp;#125;).then(serve=&amp;gt;&amp;#123;
    serve.stop();
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
            <title>eslint源码</title>
            <link>https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
            <category term="eslint" scheme="https://dmqweb.cn/categories/eslint/" />
            <category term="eslint" scheme="https://dmqweb.cn/tags/eslint/" />
            <category term="源码" scheme="https://dmqweb.cn/tags/%E6%BA%90%E7%A0%81/" />
            <pubDate>Fri, 17 May 2024 09:14:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;eslint知识点&#34;&gt;&lt;a href=&#34;#eslint知识点&#34; class=&#34;headerlink&#34; title=&#34;eslint知识点&#34;&gt;&lt;/a&gt;eslint知识点&lt;/h1&gt;&lt;h3 id=&#34;extends与plugins&#34;&gt;&lt;a href=&#34;#extends与plugins&#34; class=&#34;headerlink&#34; title=&#34;extends与plugins&#34;&gt;&lt;/a&gt;extends与plugins&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;plugins本质是为了加强eslint的扩展性，使我们可以直接使用别人写好的eslint规则，方便快速用于项目中。&lt;/li&gt;
&lt;li&gt;官方规定npm包的扩展必须以eslint-config-开头，插件以eslint-plugin-开头，在使用过程中可以省略这个开头。&lt;/li&gt;
&lt;li&gt;eslint-config-文件是我们共享的一些配置文件，里面就是一个JS对象，其中包含一些配置信息，而eslint-plugin-文件是我们自定义的集合规则，可以导入和使用。&lt;/li&gt;
&lt;li&gt;一个插件能带来：&lt;ul&gt;
&lt;li&gt;额外的规则，如&lt;code&gt;&amp;#123;&amp;quot;rules&amp;quot;: &amp;#123;&amp;quot;react/boolean-prop-naming&amp;quot;: &amp;quot;warning&amp;quot;&amp;#125;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;环境，如&lt;code&gt;&amp;#123;&amp;quot;env&amp;quot;: &amp;#123;&amp;quot;jest/global&amp;quot;: true&amp;#125;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;配置，如&lt;code&gt;&amp;#123;&amp;quot;extends&amp;quot;: [&amp;quot;plugin:react/recommended&amp;quot;]&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;预处理器，如&lt;code&gt;&amp;#123;&amp;quot;process&amp;quot;: &amp;quot;a-plugin/a-processor&amp;quot;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;eslint配置大全&#34;&gt;&lt;a href=&#34;#eslint配置大全&#34; class=&#34;headerlink&#34; title=&#34;eslint配置大全&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODU5NDg4MjkyODcx&#34;&gt;eslint配置大全&lt;/span&gt;&lt;/h1&gt;&lt;h1 id=&#34;eslint源码分析&#34;&gt;&lt;a href=&#34;#eslint源码分析&#34; class=&#34;headerlink&#34; title=&#34;eslint源码分析&#34;&gt;&lt;/a&gt;eslint源码分析&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/</guid>
            <title>whistle抓包</title>
            <link>https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/</link>
            <category term="whistle" scheme="https://dmqweb.cn/categories/whistle/" />
            <category term="whistle" scheme="https://dmqweb.cn/tags/whistle/" />
            <category term="抓包工具" scheme="https://dmqweb.cn/tags/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/" />
            <pubDate>Fri, 17 May 2024 09:14:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;whistle简单使用&#34;&gt;&lt;a href=&#34;#whistle简单使用&#34; class=&#34;headerlink&#34; title=&#34;whistle简单使用&#34;&gt;&lt;/a&gt;whistle简单使用&lt;/h1&gt;&lt;h3 id=&#34;whistle安装启动&#34;&gt;&lt;a href=&#34;#whistle安装启动&#34; class=&#34;headerlink&#34; title=&#34;whistle安装启动&#34;&gt;&lt;/a&gt;whistle安装启动&lt;/h3&gt;&lt;p&gt;安装：npm i -g whistle&lt;/p&gt;
&lt;p&gt;使用：w2 start&lt;/p&gt;
&lt;p&gt;访问：访问对应的页面&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何的链接都会经过工具转发一下，并记录下来&lt;/li&gt;
&lt;li&gt;使用前需要配置代理到whistle服务的地址和端口上（设置代理如下）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用步骤&#34;&gt;&lt;a href=&#34;#使用步骤&#34; class=&#34;headerlink&#34; title=&#34;使用步骤&#34;&gt;&lt;/a&gt;使用步骤&lt;/h3&gt;&lt;p&gt;设置代理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机端省略&lt;/li&gt;
&lt;li&gt;电脑端：&lt;ul&gt;
&lt;li&gt;网络偏好设置—高级—代理—网页代理、安全网页代理&lt;/li&gt;
&lt;li&gt;配置代理的ip地址和端口号（8899）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确认证书：&lt;/p&gt;
&lt;p&gt;一般会自动下载，也可以打开8899端口找到证书下载并确认信任&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看抓包情况和设置代理转发：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开127.0.0.1:8899端口进行设置&lt;/p&gt;
&lt;h1 id=&#34;whistle高级&#34;&gt;&lt;a href=&#34;#whistle高级&#34; class=&#34;headerlink&#34; title=&#34;whistle高级&#34;&gt;&lt;/a&gt;whistle高级&lt;/h1&gt;&lt;h3 id=&#34;mock数据&#34;&gt;&lt;a href=&#34;#mock数据&#34; class=&#34;headerlink&#34; title=&#34;mock数据&#34;&gt;&lt;/a&gt;mock数据&lt;/h3&gt;&lt;p&gt;设置线上地址转发到本地json文件（使用file路径），模拟请求数据。&lt;/p&gt;
&lt;h3 id=&#34;部分文件请求转发（重要）&#34;&gt;&lt;a href=&#34;#部分文件请求转发（重要）&#34; class=&#34;headerlink&#34; title=&#34;部分文件请求转发（重要）&#34;&gt;&lt;/a&gt;部分文件请求转发（重要）&lt;/h3&gt;&lt;p&gt;例如线上环境有某个文件报错，生产环境无法复现，可以将该文件地址转发到本地的js文件（使用file路径），方便进行调试，提高调试效率。&lt;/p&gt;
&lt;h3 id=&#34;请求转发&#34;&gt;&lt;a href=&#34;#请求转发&#34; class=&#34;headerlink&#34; title=&#34;请求转发&#34;&gt;&lt;/a&gt;请求转发&lt;/h3&gt;&lt;p&gt;可以作为跨域的一种方案，将本地的请求转发到线上的路径，这样就不会发生跨域问题&lt;/p&gt;
&lt;h3 id=&#34;注入html、css和-js&#34;&gt;&lt;a href=&#34;#注入html、css和-js&#34; class=&#34;headerlink&#34; title=&#34;注入html、css和 js&#34;&gt;&lt;/a&gt;注入html、css和 js&lt;/h3&gt;&lt;p&gt;whistle会自动根据响应内容的类型，判断是否注入相应的文本以及如何注入（是否用标签包裹）&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://www.baidu.com  css:///Users/dmq/Desktop/test.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这将会在百度的官网注入自定义的css样式。&lt;/p&gt;
&lt;h6 id=&#34;举例：&#34;&gt;&lt;a href=&#34;#举例：&#34; class=&#34;headerlink&#34; title=&#34;举例：&#34;&gt;&lt;/a&gt;举例：&lt;/h6&gt;&lt;p&gt;向百度网站注入vconsole.js源码，方便调试打印日志。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载vconsole到本地或者直接复制源码到whistle中的values中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地js文件创建VConsole实例，或者直接在whistle的values中创建js文件，文件中创建vconsole实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在rules中向百度网站注入两个js文件（以whistle中配置values为示例）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;www.baidu.com  jsPrepend://&amp;#123;vConsole.min.js&amp;#125;  #引入源码
www.baidu.com  jsPrepend://&amp;#123;vconsole.js&amp;#125;  #引入实例化js
www.baidu.com  log://  #在whistle中也打印log
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;同步抓包日志&#34;&gt;&lt;a href=&#34;#同步抓包日志&#34; class=&#34;headerlink&#34; title=&#34;同步抓包日志&#34;&gt;&lt;/a&gt;同步抓包日志&lt;/h3&gt;&lt;p&gt;在rules中配置网站的输出，可以将抓包的log日志同步到whistle中的log面板，配置例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;www.baidu.com   log:// #同步日志
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;解决跨域问题&#34;&gt;&lt;a href=&#34;#解决跨域问题&#34; class=&#34;headerlink&#34; title=&#34;解决跨域问题&#34;&gt;&lt;/a&gt;解决跨域问题&lt;/h3&gt;&lt;p&gt;可以单独设置网站允许跨域访问，例如在rules中配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://localhost:5500/list   resCors://*  #表示该网站允许跨域访问
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者使用前端转发代理来处理跨域：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://localhost:8080/list   https://localhost:5500/list  
#将请求的网址代理到同域名同端口的网址，就不会发生跨域。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NTc3NjU1L2FydGljbGUvZGV0YWlscy8xMTkyODMwMjg=&#34;&gt;本文学习自b站，原文档地址&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</guid>
            <title>性能指标</title>
            <link>https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</link>
            <category term="性能优化" scheme="https://dmqweb.cn/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
            <category term="性能指标" scheme="https://dmqweb.cn/tags/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/" />
            <pubDate>Sat, 11 May 2024 09:14:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常见浏览器性能指标&#34;&gt;&lt;a href=&#34;#常见浏览器性能指标&#34; class=&#34;headerlink&#34; title=&#34;常见浏览器性能指标&#34;&gt;&lt;/a&gt;常见浏览器性能指标&lt;/h1&gt;&lt;h1 id=&#34;TTFB-Time-To-First-Byte&#34;&gt;&lt;a href=&#34;#TTFB-Time-To-First-Byte&#34; class=&#34;headerlink&#34; title=&#34;TTFB(Time To First Byte)&#34;&gt;&lt;/a&gt;TTFB(Time To First Byte)&lt;/h1&gt;&lt;p&gt;发出页面请求到接收到应答数据第一个字节的时间总和，包含了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS解析时间&lt;/li&gt;
&lt;li&gt;TCP链接时间&lt;/li&gt;
&lt;li&gt;发送HTTP请求时间&lt;/li&gt;
&lt;li&gt;获得响应消息第一个字节的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FP（First-Paint）&#34;&gt;&lt;a href=&#34;#FP（First-Paint）&#34; class=&#34;headerlink&#34; title=&#34;FP（First Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FP&lt;/strong&gt;（First Paint）&lt;/h1&gt;&lt;p&gt;首次绘制时间，这个指标用于记录页面第一次绘制像素的时间。&lt;/p&gt;
&lt;h1 id=&#34;FCP（First-Contentful-Paint）&#34;&gt;&lt;a href=&#34;#FCP（First-Contentful-Paint）&#34; class=&#34;headerlink&#34; title=&#34;FCP（First Contentful Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FCP&lt;/strong&gt;（First Contentful Paint）&lt;/h1&gt;&lt;p&gt;首次内容绘制时间，这个指标用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。&lt;/p&gt;
&lt;h1 id=&#34;LCP（Largest-Contentful-Paint）&#34;&gt;&lt;a href=&#34;#LCP（Largest-Contentful-Paint）&#34; class=&#34;headerlink&#34; title=&#34;LCP（Largest Contentful Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;LCP&lt;/strong&gt;（Largest Contentful Paint）&lt;/h1&gt;&lt;p&gt;最大内容绘制时间，用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。&lt;/p&gt;
&lt;h1 id=&#34;CLS（Cumulative-Layout-Shift）&#34;&gt;&lt;a href=&#34;#CLS（Cumulative-Layout-Shift）&#34; class=&#34;headerlink&#34; title=&#34;CLS（Cumulative Layout Shift）&#34;&gt;&lt;/a&gt;&lt;strong&gt;CLS&lt;/strong&gt;（Cumulative Layout Shift）&lt;/h1&gt;&lt;p&gt;累计位移偏移，记录了页面上非预期的位移波动。计算方式为：位移影响的面积 * 位移距离。&lt;/p&gt;
&lt;h1 id=&#34;TTI（Time-to-Interactive）&#34;&gt;&lt;a href=&#34;#TTI（Time-to-Interactive）&#34; class=&#34;headerlink&#34; title=&#34;TTI（Time to Interactive）&#34;&gt;&lt;/a&gt;&lt;strong&gt;TTI&lt;/strong&gt;（Time to Interactive）&lt;/h1&gt;&lt;p&gt;首次可交互时间。这个指标计算过程略微复杂，它需要满足以下几个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 FCP 指标后开始计算；&lt;/li&gt;
&lt;li&gt;持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求；&lt;/li&gt;
&lt;li&gt;往前回溯至 5 秒前的最后一个长任务结束的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FID（First-Input-Delay）&#34;&gt;&lt;a href=&#34;#FID（First-Input-Delay）&#34; class=&#34;headerlink&#34; title=&#34;FID（First Input Delay）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FID&lt;/strong&gt;（First Input Delay）&lt;/h1&gt;&lt;p&gt;首次输入延迟时间，记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。&lt;/p&gt;
&lt;h1 id=&#34;TBT（Total-Blocking-Time）&#34;&gt;&lt;a href=&#34;#TBT（Total-Blocking-Time）&#34; class=&#34;headerlink&#34; title=&#34;TBT（Total Blocking Time）&#34;&gt;&lt;/a&gt;&lt;strong&gt;TBT&lt;/strong&gt;（Total Blocking Time）&lt;/h1&gt;&lt;p&gt;阻塞总时间，记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</guid>
            <title>函数重载</title>
            <link>https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</link>
            <category term="JS" scheme="https://dmqweb.cn/categories/JS/" />
            <category term="JS,函数重载" scheme="https://dmqweb.cn/tags/JS-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/" />
            <pubDate>Wed, 08 May 2024 22:35:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;概念&#34;&gt;&lt;a href=&#34;#概念&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;函数重载是指在编程语言中允许定义多个同名函数，但是他们的参数类型、参数个数或者返回类型不同，编译器或解析器会根据调用时提供的参数类型和个数来确定使用哪个函数&lt;/p&gt;
&lt;h1 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;函数重载的主要目的就是提高代码的可读性和灵活性，同时避免了为不同功能编写不同的函数名导致的变量命名冲突和混乱。&lt;/p&gt;
&lt;h1 id=&#34;实现函数重载&#34;&gt;&lt;a href=&#34;#实现函数重载&#34; class=&#34;headerlink&#34; title=&#34;实现函数重载&#34;&gt;&lt;/a&gt;实现函数重载&lt;/h1&gt;&lt;h2 id=&#34;ts&#34;&gt;&lt;a href=&#34;#ts&#34; class=&#34;headerlink&#34; title=&#34;ts&#34;&gt;&lt;/a&gt;ts&lt;/h2&gt;&lt;p&gt;ts中进行函数重载其实就是根据型参数组的个数和对变量进行typeof检测，然后根据不同的情况进行分支处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ts&#34;&gt;// 函数重载的声明
function average(numbers: number[]): number; // 函数签名1：接受数字数组并返回数字
function average(...numbers: number[]): number; // 函数签名2：接受可变数量的数字参数并返回数字
// 函数实现
function average(...args: any[]): number &amp;#123; // 实际函数实现
    let sum = 0;
    if (args.length === 1 &amp;amp;&amp;amp; Array.isArray(args[0])) &amp;#123; // 如果传入的是数组
        const numbers = args[0] as number[]; // 类型断言为数字数组
        for (const num of numbers) &amp;#123;
            sum += num;
        &amp;#125;
        return sum / numbers.length;
    &amp;#125; else if (args.length &amp;gt; 1) &amp;#123; // 如果传入的是多个数字
        for (const num of args) &amp;#123;
            sum += num;
        &amp;#125;
        return sum / args.length;
    &amp;#125; else &amp;#123;
        throw new Error(&amp;#39;Invalid arguments&amp;#39;); // 抛出错误，不支持的参数类型
    &amp;#125;
&amp;#125;

// 调用函数重载
console.log(average([1, 2, 3, 4, 5])); // 输出: 3
console.log(average(1, 2, 3, 4, 5)); // 输出: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;js&#34;&gt;&lt;a href=&#34;#js&#34; class=&#34;headerlink&#34; title=&#34;js&#34;&gt;&lt;/a&gt;js&lt;/h2&gt;&lt;p&gt;js中也可以通过typeof和形参数组进行函数重载，不过当然还有更好的做法，jQuery作者常用如下实现函数重载（进行重载之前要调用一次函数）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function addMethod(object,name,fn)&amp;#123;
    const old = object[name];
    object[name] = function (...args)&amp;#123;
        if(args.length === fn.length)&amp;#123;
            return fn.apply(this,args);
        &amp;#125;else if(typeof old === &amp;#39;function&amp;#39;)&amp;#123;
            return old.apply(this,args);
        &amp;#125;
    &amp;#125;
&amp;#125;;
const searcher = &amp;#123;&amp;#125;; //将对象中对应属性的重载方法全部存储起来
addMethod(searcher,&amp;#39;getUsers&amp;#39;,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;查询所有用户&amp;#39;);
&amp;#125;);
addMethod(searcher,&amp;#39;getUsers&amp;#39;,(name=&amp;#39;a&amp;#39;)=&amp;gt;&amp;#123; //注意默认参数的形参数量不与计数
    console.log(&amp;#39;按照姓名查询用户&amp;#39;);
&amp;#125;);

searcher.getUsers();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一种实现方法就是使用映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function createOverload()&amp;#123;
    const fnMap = new Map();
    function overload(...args)&amp;#123;
        const key = args.map((it) =&amp;gt; typeof it).join(&amp;#39;,&amp;#39;);
        const fn = fnMap.get(key);
        if(!fn)&amp;#123;
            throw new TypeError(&amp;#39;没有找到对应的实现&amp;#39;);
        &amp;#125;
        return fn.apply(this,args);
    &amp;#125;
    overload.addImpl = function(...args)&amp;#123;
        const fn = args.pop();
        if(typeof fn !== &amp;#39;function&amp;#39;)&amp;#123;
            throw new TypeError(&amp;#39;最后一个参数必须是函数&amp;#39;)
        &amp;#125;
        const key = args.join(&amp;#39;,&amp;#39;);
        fnMap.set(key,fn);
    &amp;#125;;
    return overload;
&amp;#125;
const getUsers = createOverload();
getUsers.addImpl(()=&amp;gt;&amp;#123;
    console.log(&amp;#39;查询所有用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;number&amp;#39;,(page,size=10)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照页码和数量查询用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;number&amp;#39;,&amp;#39;number&amp;#39;,(page,size=10)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照页码和数量查询用户&amp;#39;);
&amp;#125;)
getUsers.addImpl(&amp;#39;string&amp;#39;,(name)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照姓名查询用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;string&amp;#39;,&amp;#39;string&amp;#39;,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照性别查询用户&amp;#39;);
&amp;#125;);
getUsers(&amp;#39;asfsdf&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结一下实现思路，通过createOverload函数调用可以返回一个重载后的函数，createOverload函数中创建了一个map，map中将参数类型和个数与对应的函数相匹配，返回的重载函数在调用时会根据参数的类型去map中寻找对应的函数，通过apply绑定this作用域和参数执行即可。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
            <title>深拷贝</title>
            <link>https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
            <category term="面试题" scheme="https://dmqweb.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/" />
            <category term="深拷贝,面试题" scheme="https://dmqweb.cn/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E9%9D%A2%E8%AF%95%E9%A2%98/" />
            <pubDate>Tue, 30 Apr 2024 17:34:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;深拷贝&#34;&gt;&lt;a href=&#34;#深拷贝&#34; class=&#34;headerlink&#34; title=&#34;深拷贝&#34;&gt;&lt;/a&gt;深拷贝&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我们知道在javascript中有八种数据类型：其中number，string，undefined，null，boolean，symbol和bigint为基本数据类型，而object为复杂数据类型&lt;/p&gt;
&lt;h2 id=&#34;存储&#34;&gt;&lt;a href=&#34;#存储&#34; class=&#34;headerlink&#34; title=&#34;存储&#34;&gt;&lt;/a&gt;存储&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于基本数据类型，其值直接存储于栈中。&lt;/li&gt;
&lt;li&gt;对于复杂数据类型，其值存储于堆中，而栈中只存储堆中的地址。这样做的好处有：&lt;ul&gt;
&lt;li&gt;节省内存空间：存储在堆中的对象可以通过栈内的引用被访问和操作，意味着对象可以在不同的上下文中被共享和引用，从而节省内存。&lt;/li&gt;
&lt;li&gt;垃圾回收：堆内存中的对象不再被引用时，垃圾回收机制就会自动进行回收，从而避免了内存泄漏和资源浪费。&lt;/li&gt;
&lt;li&gt;动态分配内存：堆内存允许对象动态的增长和缩小，因此可以根据需要灵活地修改对象的结构和内容，使得js对象可以轻松地扩展以适应不同的应用需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深拷贝-1&#34;&gt;&lt;a href=&#34;#深拷贝-1&#34; class=&#34;headerlink&#34; title=&#34;深拷贝&#34;&gt;&lt;/a&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;而深拷贝和浅拷贝就是对于复杂数据类型object来说的，当拷贝了对象的一层（即堆的引用）时，就称之为浅拷贝，当拷贝了对象的两层（堆中创建新的对象）时，就称之为深拷贝。&lt;/p&gt;
&lt;h2 id=&#34;实现方案&#34;&gt;&lt;a href=&#34;#实现方案&#34; class=&#34;headerlink&#34; title=&#34;实现方案&#34;&gt;&lt;/a&gt;实现方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt;，第一种方法是使用JSON方法，但是这个方法有一些限制：JSON序列化时函数会被转为null，正则表达式会被转为空对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递归实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;

```js
function deepCopy(obj, parent = null) &amp;#123;
    // 创建一个新对象
    let result = &amp;#123;&amp;#125;;
    let keys = Object.keys(obj),
        key = null,
        temp = null,
        _parent = parent;
    // 该字段有父级则需要追溯该字段的父级
    while (_parent) &amp;#123;
        // 如果该字段引用了它的父级则为循环引用
        if (_parent.originalParent === obj) &amp;#123;
            // 循环引用直接返回同级的新对象
            return _parent.currentParent;
        &amp;#125;
        _parent = _parent.parent;
    &amp;#125;
    for (let i = 0; i &amp;lt; keys.length; i++) &amp;#123;
        key = keys[i];
        temp = obj[key];
        // 如果字段的值也是一个对象
        if (temp &amp;amp;&amp;amp; typeof temp === &amp;#39;object&amp;#39;) &amp;#123;
            // 递归执行深拷贝 将同级的待拷贝对象与新对象传递给 parent 方便追溯循环引用
            result[key] = DeepCopy(temp, &amp;#123;
                originalParent: obj,
                currentParent: result,
                parent: parent
            &amp;#125;);

        &amp;#125; else &amp;#123;
            result[key] = temp;
        &amp;#125;
    &amp;#125;
    return result;
&amp;#125;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MessageChannel实现深克隆：由于浏览器不能将一个函数正确的复制到另一个线程中，所以不能支持函数的深克隆。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function deepCopy(obj) &amp;#123;
  return new Promise((resolve) =&amp;gt; &amp;#123;
    const &amp;#123;port1, port2&amp;#125; = new MessageChannel();
    port2.onmessage = ev =&amp;gt; resolve(ev.data);
    port1.postMessage(obj);
  &amp;#125;);
&amp;#125;

deepCopy(obj).then((copy) =&amp;gt; &amp;#123;// 异步的
    let copyObj = copy;
    console.log(copyObj, obj)
    console.log(copyObj == obj)
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H5新增structuredClone&lt;br&gt;结构化克隆解决了该JSON.stringify()技术的许多（尽管不是全部）缺点。结构化克隆可以处理循环依赖，支持许多内置数据类型，并且更健壮且速度更快。&lt;br&gt;但是，它仍然有一些限制：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原型：如果你使用structuredClone()类实例，你将获得一个普通对象作为返回值，因为结构化克隆会丢弃对象的原型链。&lt;br&gt;函数：如果你的对象包含函数，它们将被悄悄丢弃。&lt;br&gt;不可克隆：有些值不是结构化可克隆的，尤其是Error、 DOM 节点 和 Function。尝试这样做将引发 DataCloneError 异常。&lt;br&gt;属性描述符：setter和getter(以及类似元数据的功能)不会被复制。例如，如果使用属性描述符将对象标记为只读，则复制后的对象中是可读写(默认配置)。&lt;br&gt;RegExp：RegExp对象的lastIndex字段不会保留。&lt;/p&gt;
&lt;h1 id=&#34;浅拷贝实现方案&#34;&gt;&lt;a href=&#34;#浅拷贝实现方案&#34; class=&#34;headerlink&#34; title=&#34;浅拷贝实现方案&#34;&gt;&lt;/a&gt;浅拷贝实现方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.assign(&amp;#123;&amp;#125;,obj)&lt;/code&gt;，第二方法是使用Object.assign()&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const obj1 = &amp;#123;...obj2&amp;#125;&lt;/code&gt;，使用扩展运算符&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</guid>
            <title>前端监控</title>
            <link>https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</link>
            <category term="前端监控" scheme="https://dmqweb.cn/categories/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
            <category term="前端监控" scheme="https://dmqweb.cn/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
            <pubDate>Mon, 29 Apr 2024 08:36:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端监控&#34;&gt;&lt;a href=&#34;#前端监控&#34; class=&#34;headerlink&#34; title=&#34;前端监控&#34;&gt;&lt;/a&gt;前端监控&lt;/h1&gt;&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;为什么要进行前端监控：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面的访问行为，PV、UV、IP、PV点击率、UV点击率、停留时长&lt;/li&gt;
&lt;li&gt;用户的操作行为，模块曝光、&lt;/li&gt;
&lt;li&gt;模块点击&lt;/li&gt;
&lt;li&gt;页面的性能，首屏渲染时间、API请求时间&lt;/li&gt;
&lt;li&gt;异常的监控，JS Error、API异常、业务异常&lt;/li&gt;
&lt;li&gt;业务的监控，成交金额、每日消息数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见的应用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见的前端监控平台：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百度统计&lt;/li&gt;
&lt;li&gt;阿里云ARMS&lt;/li&gt;
&lt;li&gt;友盟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前端监控的数据有什么作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量数据监控，如：PV、UV、点击率、页面停留时长等&lt;/li&gt;
&lt;li&gt;自定义事件监控，如：曝光事件、滑动事件、请求事件等&lt;/li&gt;
&lt;li&gt;交易指标监控，如：成交额、转化率等&lt;/li&gt;
&lt;li&gt;其他综合分析，如：用户画像分析、流量漏斗、销量预测等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前端监控的三个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初阶：使用第三方平台，百度、友盟、阿里云ARMS等&lt;/li&gt;
&lt;li&gt;中阶：自研前端监控库，缺乏完整的监控体系&lt;/li&gt;
&lt;li&gt;高阶：自研前端监控平台，具备完整的监控体系&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;百度统计接入&#34;&gt;&lt;a href=&#34;#百度统计接入&#34; class=&#34;headerlink&#34; title=&#34;百度统计接入&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==&#34;&gt;百度统计接入&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;流量分析免费，行为分析需要付费。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;官网创建网站，设置域名和首页&lt;/li&gt;
&lt;li&gt;保证域名公共可读&lt;/li&gt;
&lt;li&gt;复制统计代码，添加到要跟踪的网页中（加入到head标签之前）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;阿里云ARM和友盟分析方案较全，接入方案大致相同，但是当数据量较大时，有一定的成本，所以考虑自建前端统计系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候需要考虑自建前端监控系统？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不仅仅需要流量分析，还需要做行为分析&lt;/li&gt;
&lt;li&gt;自建成本小于或等于平台付费&lt;/li&gt;
&lt;li&gt;希望网站监控数据能存到自己数据库中，并且数据隐私化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;监控平台架构&#34;&gt;&lt;a href=&#34;#监控平台架构&#34; class=&#34;headerlink&#34; title=&#34;监控平台架构&#34;&gt;&lt;/a&gt;监控平台架构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前端监控平台的分层：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端监控JSSDK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集&lt;/li&gt;
&lt;li&gt;上报&lt;ul&gt;
&lt;li&gt;默认上报：页面PV、性能等&lt;/li&gt;
&lt;li&gt;手动上报：页面操作行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端监控API和大数据仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收上报的数据&lt;/li&gt;
&lt;li&gt;数据仓库：MaxCompute&lt;ul&gt;
&lt;li&gt;数据查询&lt;/li&gt;
&lt;li&gt;数据存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端监控数据可视化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志大数据清洗&lt;/li&gt;
&lt;li&gt;大数据回流RDS（非结构化数据 &amp;#x3D;&amp;gt; 结构化数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;监控平台架构说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-29_08-11-46.jpg&#34; alt=&#34;监控平台架构&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;JS库的开发&#34;&gt;&lt;a href=&#34;#JS库的开发&#34; class=&#34;headerlink&#34; title=&#34;JS库的开发&#34;&gt;&lt;/a&gt;JS库的开发&lt;/h2&gt;&lt;h4 id=&#34;JS-SDK&#34;&gt;&lt;a href=&#34;#JS-SDK&#34; class=&#34;headerlink&#34; title=&#34;JS  SDK&#34;&gt;&lt;/a&gt;JS  SDK&lt;/h4&gt;&lt;p&gt;monitor.js：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function collect()&amp;#123;
    console.log(&amp;#39;collect&amp;#39;);
&amp;#125;
function upload()&amp;#123;
    console.log(&amp;#39;upload&amp;#39;);
&amp;#125;
window.testMonitor = &amp;#123;
    collect,
    upload,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上传到服务器，在需要监控的页面引入脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、直接引入脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接使用script标签引入在线地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、异步加载（确保脚本加载完成后再使用api）：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;script&amp;gt;
(function()
    const script = document.createElement(&amp;#39;script&amp;#39;);
    script.src = &amp;#39;https://imooc.youbaobao.xyz/imooc-cli-monitor.js&amp;#39;
    const body = document.body;
    body.insertBefore(script,body.firstChild);
    script.onload = function()&amp;#123;
    var event = new CustomEvent(&amp;#39;onMonitorScriptLoad&amp;#39;);
    window.dispatchEvent(event);
)()
&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
    window.addEventListener(&amp;#39;onMonitorScriptLoad&amp;#39;,function()&amp;#123;
    window.testMonitor.collect();
    window.testMonitor.upload();
&amp;#125;):
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;PV埋点&#34;&gt;&lt;a href=&#34;#PV埋点&#34; class=&#34;headerlink&#34; title=&#34;PV埋点&#34;&gt;&lt;/a&gt;PV埋点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一、分包便于代码书写和维护&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设将项目分为：index.js、collect.js和upload.js三个js文件，分别用于整合、收集和上报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、设置页面基本信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在meta标签中设置变量，假设为：test-app-id，在body标签中设置test-page-id，此变量用于区分不同的站点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、collect.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; upload &amp;#125; from &amp;#39;./upload&amp;#39;;
//自定义一些钩子函数
let beforeCreateParams;
let beforeUpload;
let afterUpload;
let onError=(err)=&amp;gt;&amp;#123;
    console.error(err);
&amp;#125;;

export function collect()&amp;#123;
    console.log(&amp;#39;收集开始...&amp;#39;);
&amp;#125;
// 采集信息
function collection(customData,eventType)&amp;#123;
    let appId , pageId , timeStamp , ua;
    beforeCreateParams &amp;amp;&amp;amp; beforeCreateParams();
    const metaList = document.getElementsByTagName(&amp;#39;meta&amp;#39;)
    for (let i=0;i&amp;lt; metaList.length;i++)&amp;#123;
        const meta = metaList[i];
        console.log(meta.getAttribute(&amp;#39;test-app-id&amp;#39;));
        if (meta.getAttribute(&amp;#39;test-app-id&amp;#39;))&amp;#123;
            appId = meta.getAttribute(&amp;#39;test-app-id&amp;#39;);
         &amp;#125;
       &amp;#125;
    const body = document.body;
    pageId = body.getAttribute(&amp;#39;test-page-id&amp;#39;);
    if (!appId || !pageId) return;
    timeStamp = new Date().getTime();
    ua = window.navigator.userAgent;
    console.log(appId,pageId,timeStamp,ua);
    let data = `appId=$&amp;#123;appId&amp;#125;&amp;amp;pageId=$&amp;#123;pageId&amp;#125;&amp;amp;timeStamp=$&amp;#123;timeStamp&amp;#125;&amp;amp;ua=$&amp;#123;ua&amp;#125;`;
    if(beforeUpload)&amp;#123;
        data = beforeUpload(data); //允许定制数据
    &amp;#125;
    //日志上报
    // upload(&amp;#123; appId,pageId,timeStamp,ua &amp;#125;)  不常用
    let url , uploadData;
    try&amp;#123;
        data = &amp;#123;...customData,...data&amp;#125;
        const ret = upload(data,&amp;#123;eventType&amp;#125;)
        url = ret.url;
        uploadData = ret.data;
    &amp;#125;catch(e)&amp;#123;
        onError(e);
    &amp;#125;finally&amp;#123;
        afterUpload &amp;amp;&amp;amp; afterUpload(url,uploadData);
    &amp;#125;
    
&amp;#125;
//发送PV日志
export function sendPV()&amp;#123;
    collection(&amp;#123;&amp;#125;,&amp;#39;PV&amp;#39;)
&amp;#125;
// 上报曝光埋点
export function sendExp(data=&amp;#123;&amp;#125;)&amp;#123;
    collection(data,&amp;#39;EXP&amp;#39;)
&amp;#125;
//注册钩子函数
export function registerBeforeCreateParams(fn)&amp;#123;
    beforeCreateParams = fn;
&amp;#125;
export function registerBeforeUpload(fn)&amp;#123;
    beforeUpload = fn;
&amp;#125;
export function registerAfterUpload(fn)&amp;#123;
    afterUpload = fn;
&amp;#125;
export function registerOnError(fn)&amp;#123;
    onError = fn;
&amp;#125;
export default &amp;#123; &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;四、upload.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;export function upload(data) &amp;#123;
    const img = new Image(); //利用image标签跨域特性
    const &amp;#123; eventType = &amp;quot;PV&amp;quot; &amp;#125; = options;
    const params = encodeURIComponent(data) + &amp;#39;&amp;amp;eventType=&amp;#39; + eventType;
    const src = &amp;#39;http://dmqtest.com?data=&amp;#39; + params ;
    console.log(params,src,eventType);
    img.src = src;
    img = null; //注意内存释放
    return &amp;#123;
        url: src,
        data: &amp;#123;
            params,
        &amp;#125;
    &amp;#125;
&amp;#125;
export default upload;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;五、index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; sendPV , registerBeforeCreateParams,registerBeforeUpload,registerAfterUpload &amp;#125; from &amp;#39;./collect&amp;#39;;
import &amp;#123; upload &amp;#125; from &amp;#39;./upload&amp;#39;;
window.testMonitor = &amp;#123;
    upload,
    sendPV,
    registerBeforeCreateParams,
    registerBeforeUpload,
    registerAfterUpload,
    registerOnError
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;六、index.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; test-app-id=&amp;quot;app123456&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
    &amp;lt;script src=&amp;#39;https://dmqtest.com/index.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body test-page-id=&amp;quot;page123456&amp;quot;&amp;gt;
    &amp;lt;script&amp;gt;
        window.onload = function()&amp;#123;
            window.testMonitor.registerBeforeCreateParams(()=&amp;gt;&amp;#123;
                console.log(&amp;#39;创建之前&amp;#39;)
            &amp;#125;);
            window.testMonitor.registerBrforeUpload((params)=&amp;gt;&amp;#123;
                return params + &amp;#39;&amp;amp;custom=1&amp;#39;; //添加自定义数据
            &amp;#125;)
            window.testMonitor.registerAfterUpload((url,data)=&amp;gt;&amp;#123;
                
            &amp;#125;)
            window.testMonitor.sendPV();
        &amp;#125;
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;曝光埋点&#34;&gt;&lt;a href=&#34;#曝光埋点&#34; class=&#34;headerlink&#34; title=&#34;曝光埋点&#34;&gt;&lt;/a&gt;曝光埋点&lt;/h4&gt;&lt;p&gt;曝光埋点记录元素由不可变到可变的过程，需要浏览器IntersectionObserver这个API的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浏览器5种Observer：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MutationObserver（用于监听DOM树的变化，一般为属性、子节点的增删改）&lt;/li&gt;
&lt;li&gt;IntersectionObserver（用于监听一个元素和可视区域相交部分的比列，然后在可视比列到达某一阈值的时候触发回调）&lt;/li&gt;
&lt;li&gt;PerformanceObserver（用于检测性能度量事件，在浏览器的性能事件轴记录下一个新的performance entries的时候将会被通知）&lt;/li&gt;
&lt;li&gt;ResizeObserver（用于监听DOM的变化，一般为节点的出现和隐藏，节点大小的变化）&lt;/li&gt;
&lt;li&gt;ReportingObserver（用于监听过时的api、浏览器的一些干预行为的预告）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IntersectionObserver：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;observe：开始监听一个目标元素&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.disconnect();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;disconnect：停止监听&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.observe(targetElement);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;takeRecords:返回所有观察目标的IntersectionObserverEntry对象数组。&lt;/p&gt;
&lt;p&gt;语法：intersectionObserverEntries &amp;#x3D; intersectionObserver.takeRecords();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unobserve:使IntersectionObserver停止监听特定目标元素&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.unobserve(targetElement);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;配置项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;targetElement：目标DOM&lt;/li&gt;
&lt;li&gt;root：指定根目录，也就就是当目标元素显示在这个元素中时会触发监控回调&lt;/li&gt;
&lt;li&gt;rootMargin：类似于css的margin，设定root元素的边框区域。&lt;/li&gt;
&lt;li&gt;threhold：阈值，决定了什么时候触发回调函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;返回参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tIme:可见性发生变化的时间，是一个高精度时间戳，单位为毫秒&lt;/li&gt;
&lt;li&gt;rootBounds:是在根元素矩形区域的信息&lt;/li&gt;
&lt;li&gt;intersectionRatio:目标元素的可见比例&lt;/li&gt;
&lt;li&gt;intersectionRect:目标元素与根元素交叉区域的信息&lt;/li&gt;
&lt;li&gt;isIntersecting:判断元素是否符合options中的可见条件&lt;/li&gt;
&lt;li&gt;boundingClientRect:目标元素的矩形区域的信息&lt;/li&gt;
&lt;li&gt;target:被观察的目标元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;upload.js文件中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// ....省略
// 上报曝光埋点
export function sendExp(data=&amp;#123;&amp;#125;)&amp;#123;
    collection(data,&amp;#39;EXP&amp;#39;)
&amp;#125;
// 最后在index.js中暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;collect.js文件中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//....省略
export function collectAppear()&amp;#123;
    const appearEvent = new CustomEvent(&amp;#39;onAppear&amp;#39;);
    const disappearEvent = new CustomEvent(&amp;#39;onDisappear&amp;#39;);
    let ob;
    if(window.testMonitorObserver)&amp;#123;
        ob = window.testMonitorObserver;
    &amp;#125;else&amp;#123;
        ob = new IntersectionObserver(function(e)&amp;#123;
        e.forEach(item=&amp;gt;&amp;#123;
            if(item.intersectionRatio &amp;gt; 0)&amp;#123;
                console.log(item.target.className + &amp;#39;appear&amp;#39;);
                item.target.dispatchEvent(appearEvent);
            &amp;#125;else&amp;#123;
                console.log(item.target.className + &amp;#39;disappear&amp;#39;);
                item.target.dispatchEvent(disappearEvent);
            &amp;#125;
        &amp;#125;)
    &amp;#125;);
    &amp;#125;
    let obList = [];
    const appear = document.querySelectorAll(&amp;#39;[appear]&amp;#39;);
    for(let i=0;i&amp;lt;appear.length;i++)&amp;#123;
        if(obList.includes(appear[i]))&amp;#123;
            ob.observe(appear[i]);
            obList.push(appear[i]);
        &amp;#125;
    &amp;#125;
    window.testMonitorObserver = ob; //存起来防止重复
    window.monitorObserverList = obList;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js中使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//...省略
// import引入collectAppear函数。
window.onload = function()&amp;#123;
    collectAppear();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;点击埋点&#34;&gt;&lt;a href=&#34;#点击埋点&#34; class=&#34;headerlink&#34; title=&#34;点击埋点&#34;&gt;&lt;/a&gt;&lt;strong&gt;点击埋点&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;collect.js中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//...省略
//上报点击埋点
export function sendClick(data=&amp;#123;&amp;#125;)&amp;#123;
    collection(data,&amp;#39;CLICK&amp;#39;)
&amp;#125;
//暴露出去，index.js导入该方法并暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义埋点&#34;&gt;&lt;a href=&#34;#自定义埋点&#34; class=&#34;headerlink&#34; title=&#34;自定义埋点&#34;&gt;&lt;/a&gt;自定义埋点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;collect.js中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自定义埋点行为就直接在内部添加CUSTOM对应的处理逻辑，可以使用其他的Observer实现更多功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//...省略
//上报自定义埋点
export function sendCustom(data=&amp;#123;&amp;#125;)&amp;#123;
    collection(data,&amp;#39;CUSTOM&amp;#39;)
&amp;#125;
//暴露出去，index.js导入该方法并暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;大数据平台开发&#34;&gt;&lt;a href=&#34;#大数据平台开发&#34; class=&#34;headerlink&#34; title=&#34;大数据平台开发&#34;&gt;&lt;/a&gt;大数据平台开发&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vemgvbWF4Y29tcHV0ZS8jOn46dGV4dD0lRTQlQkElOTElRTUlOEUlOUYlRTclOTQlOUYlRTUlQTQlQTclRTYlOTUlQjAlRTYlOEQlQUUlRTglQUUlQTElRTclQUUlOTclRTYlOUMlOEQlRTUlOEElQTEsJTI4TWF4Q29tcHV0ZSUyOSVFNiU5OCVBRiVFNCVCOCU4MCVFNyVBNyU4RCVFNSVCRiVBQiVFOSU4MCU5RiVFMyU4MCU4MSVFNSVBRSU4QyVFNSU4NSVBOCVFNiU4OSU5OCVFNyVBRSVBMSVFNyU5QSU4NFRCJTJGUEIlRTclQkElQTclRTYlOTUlQjAlRTYlOEQlQUUlRTQlQkIlOTMlRTUlQkElOTMlRTglQTclQTMlRTUlODYlQjMlRTYlOTYlQjklRTYlQTElODglRTMlODAlODIlMjBNYXhDb21wdXRlJUU1JTkwJTkxJUU3JTk0JUE4JUU2JTg4JUI3JUU2JThGJTkwJUU0JUJFJTlCJUU0JUJBJTg2JUU1JUFFJThDJUU1JTk2JTg0JUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU1JUFGJUJDJUU1JTg1JUE1JUU2JTk2JUI5JUU2JUExJTg4JUU0JUJCJUE1JUU1JThGJThBJUU1JUE0JTlBJUU3JUE3JThEJUU3JUJCJThGJUU1JTg1JUI4JUU3JTlBJTg0JUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU4JUFFJUExJUU3JUFFJTk3JUU2JUE4JUExJUU1JTlFJThCJUVGJUJDJThDJUU4JTgzJUJEJUU1JUE0JTlGJUU2JTlCJUI0JUU1JUJGJUFCJUU5JTgwJTlGJUU3JTlBJTg0JUU4JUE3JUEzJUU1JTg2JUIzJUU3JTk0JUE4JUU2JTg4JUI3JUU2JUI1JUI3JUU5JTg3JThGJUU2JTk1JUIwJUU2JThEJUFFJUU4JUFFJUExJUU3JUFFJTk3JUU5JTk3JUFFJUU5JUEyJTk4JUVGJUJDJThDJUU2JTlDJTg5JUU2JTk1JTg4JUU5JTk5JThEJUU0JUJEJThFJUU0JUJDJTgxJUU0JUI4JTlBJUU2JTg4JTkwJUU2JTlDJUFDJUVGJUJDJThDJUU1JUI5JUI2JUU0JUJGJTlEJUU5JTlBJTlDJUU2JTk1JUIwJUU2JThEJUFFJUU1JUFFJTg5JUU1JTg1JUE4JUUzJTgwJTgy&#34;&gt;MaxCompute阿里云原生大数据计算服务&lt;/span&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MaxCompute是基于数据分析场景的企业级SaaS模式云数据仓库，以Serverless架构提供快速、全托管的在线数据仓库服务，消除了传统数据平台在资源扩展性和弹性方面的限制，最小化用户运维投入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用MaxCompute创建数据库，在数据开发页面创建表进行记录前端监控数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用py脚本对接（暂时没有js包），需要安装python和pip（包管理工具）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装pyodps：&lt;code&gt;pip install pyodps&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;connect.py文件中写入示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from odps import ODPS;

odps = ODPS(&amp;#39;LTAI5tBDj3HajwRVhc6me5KR&amp;#39;,&amp;#39;DJqWAI1IWUBZnZGE#FKDSFJDEJLet&amp;#39;,&amp;#39;test_monitor&amp;#39;,endpoint=&amp;#39;https://service-cn-hangzhou.odps.aliyun-inc.com&amp;#39;)

result = odps.executexecute_sql(&amp;#39;select * from test_monitor where datetime=&amp;quot;20240325&amp;quot;&amp;#39;)

with result.open_reader() as reader:
    for record in reader:
        print(record[0],record[1])
# 打印表名
for table in odps.list_tables():
    print(table)
data = [
    [&amp;#39;appid123&amp;#39;,&amp;#39;pageid123&amp;#39;,&amp;#39;123456&amp;#39;,&amp;#39;ua123&amp;#39;,&amp;#39;http://www.baidu.com&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;202403&amp;#39;]
]
# 写入数据
odps.write_table(&amp;#39;test_table&amp;#39;, data)
# ....等等后续操作
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;前端监控平台可视化架构图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-30_15-14-09.jpg&#34; alt=&#34;前端监控流程架构&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/</guid>
            <title>三方库</title>
            <link>https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/</link>
            <category term="三方库" scheme="https://dmqweb.cn/categories/%E4%B8%89%E6%96%B9%E5%BA%93/" />
            <category term="三方库" scheme="https://dmqweb.cn/tags/%E4%B8%89%E6%96%B9%E5%BA%93/" />
            <pubDate>Tue, 16 Apr 2024 16:33:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;脚手架开发&#34;&gt;&lt;a href=&#34;#脚手架开发&#34; class=&#34;headerlink&#34; title=&#34;脚手架开发&#34;&gt;&lt;/a&gt;&lt;strong&gt;脚手架开发&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;常见工具包&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29tbWFuZGVy&#34;&gt;Commander&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;提供一个连贯的 &lt;code&gt;API&lt;/code&gt;，用于定义 &lt;code&gt;CLI&lt;/code&gt; 应用程序的各个方面，如命令、选项、别名和帮助。简化了命令行应用程序的创建。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveWFyZ3M=&#34;&gt;yargs&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;脚手架开发框架，通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGVybmE=&#34;&gt;lerna&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;多package管理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW5xdWlyZXI=&#34;&gt;Inquirer&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一个易于嵌入且美观的 &lt;code&gt;Node.js&lt;/code&gt; 命令行界面。 提供了很棒的查询会话流程。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hhbGs=&#34;&gt;Chalk&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Chalk&lt;/code&gt; 是一个非常简单的库，创建它的目的很简单——给你的终端字符串添加样式。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29sb3Jz&#34;&gt;colors&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;打印&lt;code&gt;不同颜色的log信息&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb3Jh&#34;&gt;ora&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;命令行&lt;code&gt;中高级的&lt;/code&gt;、&lt;code&gt;功能丰富的高可定制化加载动画&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xpLXNwaW5uZXI=&#34;&gt;cli-spinner&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;命令行中&lt;code&gt;轻量的符号加载动画&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtbG9n&#34;&gt;npmlog&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;执行 npm 的日志记录。它支持&lt;code&gt;自定义级别和彩色输出&lt;/code&gt;。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1wb3J0LWxvY2Fs&#34;&gt;import-local&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;当与全局冲突的时候，比如全局和本地都有这个脚手架时可以使用，&lt;code&gt;判断使用的是否是本地版本&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmluZHVw&#34;&gt;findup&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;向上查找指定文件&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGF0aC1leGlzdHM=&#34;&gt;path-exists&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;判断文件是否存在&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVidWc=&#34;&gt;Debug&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一个很小的 &lt;code&gt;JavaScript&lt;/code&gt; 调试实用程序。 只需将一个函数的名称传递给模块，它就会返回一个经过修饰的 &lt;code&gt;console.error&lt;/code&gt; 版本，以便你将调试语句传递给该模块&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=&#34;&gt;fs-extra&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;fs模块的扩展，支持更多文件操作功能&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VtdmVy&#34;&gt;semver&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;版本比对工具&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmlnbGV0&#34;&gt;figlet&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;输出一些独特的大型&lt;code&gt;ASCII文本横幅&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXNlci1ob21l&#34;&gt;user-home&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;获取&lt;code&gt;用户主目录&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG90ZW52&#34;&gt;dotenv&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;获取&lt;code&gt;环境变量&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcm9vdC1jaGVjaw==&#34;&gt;root-check&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;检查是否是&lt;code&gt;管理员权限启动并自动降级&lt;/code&gt;，防止后续因普通权限导致无法使用。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGtnLWRpcg==&#34;&gt;pkg-dir&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;从某个目录开始向上查找，直到找到存在&lt;code&gt;package.json&lt;/code&gt;的目录，并返回该目录。如果未找到则返回null&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWluaW1pc3Q=&#34;&gt;minimist&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用来&lt;code&gt;解析命令行参数和选项的库&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtaW5zdGFsbA==&#34;&gt;npminstall&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;安装npm上的包&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG93bmxvYWQtZ2l0LXJlcG8=&#34;&gt;download-git-repo&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;安装git仓库中的包&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz&#34;&gt;ejs&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;xml模板数据动态渲染&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2xvYg==&#34;&gt;glob&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;根据&lt;code&gt;文件路径进行遍历和匹配文件&lt;/code&gt;，拿到文件的内容。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;底层原理包&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;readline（node内置库）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;命令行的输入输出&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;events（node内置库）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3RyZWFt&#34;&gt;stream&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;输入输出流&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW5zaS1lc2NhcGVz&#34;&gt;ansi-escapes&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;自定义&lt;code&gt;命令行文字样式&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcnhqcw==&#34;&gt;rxjs&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;处理异步事件流&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYnVzYm95&#34;&gt;busboy&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;多文件上传底层库&lt;/code&gt;，尤其用于流式文件上传。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=&#34;&gt;styled-components&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js理论工具，在&lt;code&gt;js中书写css样式&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWpzeA==&#34;&gt;styled-jsx&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js理论工具，在&lt;code&gt;js中书写css样式&lt;/code&gt;（ts支持不友好）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZW1vdGlvbg==&#34;&gt;emotion&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js理论工具，在&lt;code&gt;js中书写css样式&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3Qtcm91dGVyLWRvbQ==&#34;&gt;react-router-dom&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;react在dom环境下的&lt;code&gt;路由工具&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;lt-lt-lt-lt-lt-lt-lt-HEAD&#34;&gt;&lt;a href=&#34;#lt-lt-lt-lt-lt-lt-lt-HEAD&#34; class=&#34;headerlink&#34; title=&#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD****&#34;&gt;&lt;/a&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;br&gt;****&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;f7aca9360f75177151ab5ca62022d8f31332eea4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Vue&#34;&gt;&lt;a href=&#34;#Vue&#34; class=&#34;headerlink&#34; title=&#34;Vue&#34;&gt;&lt;/a&gt;&lt;strong&gt;Vue&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQG53c2VlL2NvcmU=&#34;&gt;https://www.npmjs.com/package/@nwsee/core&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;vue项目插件，用于页面性能监控&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;React&#34;&gt;&lt;a href=&#34;#React&#34; class=&#34;headerlink&#34; title=&#34;React&#34;&gt;&lt;/a&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGV4Y2FsaWRyYXcvZXhjYWxpZHJhdw==&#34;&gt;excalidraw&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;画板、流程图和思维导图&lt;/code&gt;等&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZDM=&#34;&gt;d3&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;可视化数据图表库&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1tZXI=&#34;&gt;immer&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;改变了react&lt;code&gt;设置state状态的方式&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xhc3NuYW1lcw==&#34;&gt;classnames&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有条件地将 &lt;code&gt;classNames 连接&lt;/code&gt;在一起&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWhvb2tz&#34;&gt;ahooks&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;国内常用的&lt;code&gt;react-hooks函数集&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JhY28=&#34;&gt;craco&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于&lt;code&gt;create-react-app项目中的各种配置和重写&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9ieA==&#34;&gt;mobx&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;react声明式状态管理工具&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVkdXg=&#34;&gt;redux&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;react最常用的状态管理工具&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdG9yeWJvb2suanMub3JnLw==&#34;&gt;StoryBook&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;可视化测试工具&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;f7aca9360f75177151ab5ca62022d8f31332eea4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Node-js&#34;&gt;&lt;a href=&#34;#Node-js&#34; class=&#34;headerlink&#34; title=&#34;Node.js&#34;&gt;&lt;/a&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcw==&#34;&gt;Express&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;轻量级web框架&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGhhcGkvaGFwaQ==&#34;&gt;Hapi&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;以最小的开销和完全开箱急用的功能构建强大的、拓展性强的应用程序&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2FpbHM=&#34;&gt;Sails&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;最流行的Node.js的MVC框架&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cua29hanMubmV0Lw==&#34;&gt;Koa&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;下一代web开发框架&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=&#34;&gt;Fs-extra&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;fs -extra&lt;code&gt;包含了&lt;/code&gt;Node.js&lt;code&gt; &lt;/code&gt;fs&lt;code&gt;包中没有包含的方法，比如&lt;/code&gt;copy()&lt;code&gt;, &lt;/code&gt;remove()&lt;code&gt;, &lt;/code&gt;mkdirs()&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1jYWNoZQ==&#34;&gt;Node-cache&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;一个简单的缓存模块，具有设置，获取和删除方法的功能，类似于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZW1jYWNoZWQub3JnLw==&#34;&gt;memcached&lt;/span&gt;。 key 值可以具有一个超时设置（ttl），在此时间之后它们将过期并从缓存中删除。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2hhcnA=&#34;&gt;sharp&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;node图片处理&lt;/code&gt;解决方案&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9hZHRlc3Q=&#34;&gt;Loadtest&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;node.js&lt;code&gt;压力测试工具&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;Vite&#34;&gt;&lt;a href=&#34;#Vite&#34; class=&#34;headerlink&#34; title=&#34;Vite&#34;&gt;&lt;/a&gt;&lt;strong&gt;Vite&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cC1wcm94eQ==&#34;&gt;http-proxy&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;vite代理服务器的底层，用于转发http请求到响应给客户端&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;css&#34;&gt;&lt;a href=&#34;#css&#34; class=&#34;headerlink&#34; title=&#34;css&#34;&gt;&lt;/a&gt;&lt;strong&gt;css&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGFpbHdpbmRjc3M=&#34;&gt;Tailwind&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;原子化css&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=&#34;&gt;Styled-components&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js，js中书写css&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWpzeA==&#34;&gt;Styled-jsx&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js，js中书写css&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZW1vdGlvbg==&#34;&gt;emotion&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;css-in-js，js中书写css&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;日志&#34;&gt;&lt;a href=&#34;#日志&#34; class=&#34;headerlink&#34; title=&#34;日志&#34;&gt;&lt;/a&gt;&lt;strong&gt;日志&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9yZ2Fu&#34;&gt;Morgan&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;具体来说，它是一个 &lt;code&gt;HTTP&lt;/code&gt; 请求记录器，存储 &lt;code&gt;HTTP&lt;/code&gt; 请求，并为你提供有关应用程序如何使用以及可能存在潜在错误的简要信息。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2luc3Rvbg==&#34;&gt;Winston&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一个几乎所有内容的日志记录器，支持多种传输方式。它存储的时间比 &lt;code&gt;Morgan&lt;/code&gt; 长，它也有一个更大的维护者社区和更多的下载。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9nNGpz&#34;&gt;log4js&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于在js中生成日志信息，可以输出到终端，也可以生成日志文件&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;数据库&#34;&gt;&lt;a href=&#34;#数据库&#34; class=&#34;headerlink&#34; title=&#34;数据库&#34;&gt;&lt;/a&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2U=&#34;&gt;Mongoose&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;Mongoose&lt;/code&gt; 是一个 &lt;code&gt;MongoDB&lt;/code&gt; 对象建模工具，设计用于在异步环境中工作。&lt;code&gt;Mongoose&lt;/code&gt; 支持 &lt;code&gt;Promise&lt;/code&gt; 和回调。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VxdWVsaXpl&#34;&gt;Sequelize&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Sequelize&lt;/code&gt; 是一个基于 &lt;code&gt;Promise&lt;/code&gt; 的 &lt;code&gt;Node.js&lt;/code&gt; &lt;code&gt;ORM&lt;/code&gt; 工具，适用于 &lt;code&gt;Postgres&lt;/code&gt;、MySQL、MariaDB、SQLite 和 Microsoft SQL Server。它具有可靠的事务支持、关系、即时和延迟加载、读取复制等特性。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYnJvd3Nlci1zeW5j&#34;&gt;browser-sync&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;开启浏览器服务&lt;/code&gt;，打开文件（html）,当执行文件改变时，自动刷新浏览器&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;浏览器&#34;&gt;&lt;a href=&#34;#浏览器&#34; class=&#34;headerlink&#34; title=&#34;浏览器&#34;&gt;&lt;/a&gt;&lt;strong&gt;浏览器&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcHRyLmRldi8=&#34;&gt;Puppeteer&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;通过DevTools协议控制浏览器，默认以无头模式运行（Chrome的无头版本）&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNkb20=&#34;&gt;jsdom&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;许多Web标准的纯JavaScript实现，用于&lt;code&gt;node.js中模拟浏览器环境&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;授权&#34;&gt;&lt;a href=&#34;#授权&#34; class=&#34;headerlink&#34; title=&#34;授权&#34;&gt;&lt;/a&gt;&lt;strong&gt;授权&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGFzc3BvcnQ=&#34;&gt;Passport&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;Passport&lt;/code&gt; 的目的是通过一组可扩展的插件(称为策略)对请求进行身份验证。向&lt;code&gt;Passport&lt;/code&gt; 提供一个身份验证请求，&lt;code&gt;Passport&lt;/code&gt; 提供钩子来控制身份验证成功或失败时发生的操作。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmNyeXB0&#34;&gt;Bcrypt&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;它是可以帮助你生成哈希密码的库。&lt;code&gt;Bcrypt&lt;/code&gt; 是由 &lt;code&gt;Niels Provos&lt;/code&gt; 和 &lt;code&gt;David Mazieres&lt;/code&gt; 基于 &lt;code&gt;Blowfish cipher&lt;/code&gt; 设计的密码哈希函数，并于 1999 年在 USENIX 上展出。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbndlYnRva2Vu&#34;&gt;JSONWebToken&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;JSON Web&lt;/code&gt; 令牌(JWT)是一种开放的、行业标准的 &lt;code&gt;RFC 7519&lt;/code&gt; 方法，用于在双方之间安全地表示声明。这个包允许你解码、验证和生成 JWT。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;静态网站生成&#34;&gt;&lt;a href=&#34;#静态网站生成&#34; class=&#34;headerlink&#34; title=&#34;静态网站生成&#34;&gt;&lt;/a&gt;&lt;strong&gt;静态网站生成&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2F0c2J5&#34;&gt;Gatsby&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;一个现代的网站生成器，可以创建快速，高质量，动态的 &lt;code&gt;React&lt;/code&gt; 应用程序，从博客到电子商务网站再到用户仪表板。具有很棒的插件生态系统和模板。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmV4dA==&#34;&gt;NextJS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;NextJS&lt;/code&gt; 首先支持服务器渲染以及静态生成的内容。 你还可以将 &lt;code&gt;serverless&lt;/code&gt; 功能定义为 &lt;code&gt;API&lt;/code&gt; 端点。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnV4dA==&#34;&gt;NuxtJS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在 &lt;code&gt;Vue&lt;/code&gt; 的生态系统中，&lt;code&gt;NuxtJS&lt;/code&gt; 基本上是 &lt;code&gt;NextJS&lt;/code&gt; 的替代品。&lt;code&gt;NuxtJS&lt;/code&gt; 的目标是让 &lt;code&gt;web&lt;/code&gt; 开发功能强大，并且让开发者具有良好的开发意识。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;模板语法&#34;&gt;&lt;a href=&#34;#模板语法&#34; class=&#34;headerlink&#34; title=&#34;模板语法&#34;&gt;&lt;/a&gt;&lt;strong&gt;模板语法&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVzdGFjaGU=&#34;&gt;Mustache&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;Mustache&lt;/code&gt; 是一种无逻辑的模板语法。它可以用于 &lt;code&gt;HTML&lt;/code&gt;，配置文件，源代码等任何东西。它的工作原理是使用 hash 或对象中提供的值在模板中展开标记。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGFuZGxlYmFycw==&#34;&gt;Handlebars&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;使用模板和输入对象生成 &lt;code&gt;HTML&lt;/code&gt; 或其他文本格式。&lt;code&gt;Handlebars&lt;/code&gt; 模板看起来像一个嵌入了把手表达式的正则文本。&lt;code&gt;Handlebars&lt;/code&gt; 很大程度上与 &lt;code&gt;Mustache&lt;/code&gt; 模板兼容。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz&#34;&gt;EJS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;EJS&lt;/code&gt; 是一种简单的模板语言，可让你使用简单的语法，快速的执行和简单的调试 &lt;code&gt;JavaScript&lt;/code&gt; 来生成 &lt;code&gt;HTML&lt;/code&gt; 标记。 &lt;code&gt;EJS&lt;/code&gt; 拥有大量的活跃用户社区，并且该库正在积极开发中。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;mock数据&#34;&gt;&lt;a href=&#34;#mock数据&#34; class=&#34;headerlink&#34; title=&#34;mock数据&#34;&gt;&lt;/a&gt;&lt;strong&gt;mock数据&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXVpZA==&#34;&gt;Uuid&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;方便而且体积小的包，可以快速、轻松地生成更复杂的通用惟一标识符(UUIDs)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFrZXI=&#34;&gt;Faker&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;实用的 &lt;code&gt;npm&lt;/code&gt; 包，用于在浏览器和 &lt;code&gt;Node.js&lt;/code&gt; 中制造大量假数据。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbi1zZXJ2ZXI=&#34;&gt;jsonServer&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mock开发服务器数据&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmFub2lk&#34;&gt;nanoid&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;字符串 ID 生成器&lt;/code&gt; ,没有其余依赖。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;表单和邮件&#34;&gt;&lt;a href=&#34;#表单和邮件&#34; class=&#34;headerlink&#34; title=&#34;表单和邮件&#34;&gt;&lt;/a&gt;&lt;strong&gt;表单和邮件&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdmFsaWRhdG9y&#34;&gt;Validator&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;便捷的字符串验证器，使程序更加健壮的库。许多有用方法，例如 &lt;code&gt;isEmail()&lt;/code&gt;， &lt;code&gt;isCreditCard()&lt;/code&gt;，&lt;code&gt;isDate()&lt;/code&gt; 和 &lt;code&gt;isURL()&lt;/code&gt;。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybWlr&#34;&gt;Formik&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Formik&lt;/code&gt; 是 &lt;code&gt;React&lt;/code&gt; 和 &lt;code&gt;React Native&lt;/code&gt; 的一个流行开源表单库。它具有易于使用、声明性和适应性的特点。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVsdGVy&#34;&gt;Multer&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Multer&lt;/code&gt; 是用于 &lt;code&gt;multipart/form-data&lt;/code&gt; 数据格式的 &lt;code&gt;Node.js&lt;/code&gt; 中间件，主要用于上传文件。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1haWxlcg==&#34;&gt;Nodemailer&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Nodemailer&lt;/code&gt; 是 &lt;code&gt;Node.js&lt;/code&gt; 应用程序的一个模块，允许轻松发送电子邮件。这个项目从 2010 年就开始了，现在它是大多数 &lt;code&gt;Node.js&lt;/code&gt; 用户默认使用的解决方案。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;pdf&#34;&gt;&lt;a href=&#34;#pdf&#34; class=&#34;headerlink&#34; title=&#34;pdf&#34;&gt;&lt;/a&gt;&lt;strong&gt;pdf&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGRma2l0&#34;&gt;pdfkit&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;适用于node和浏览器的&lt;code&gt;pdf生成库&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGRmLWxpYg==&#34;&gt;pdf-lib&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;任何JavaScript环境中&lt;code&gt;创建和修改pdf&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNwZGY=&#34;&gt;jspdf&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用&lt;code&gt;JavaScript生成pdf&lt;/code&gt;的库&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;富文本编辑器&#34;&gt;&lt;a href=&#34;#富文本编辑器&#34; class=&#34;headerlink&#34; title=&#34;富文本编辑器&#34;&gt;&lt;/a&gt;&lt;strong&gt;富文本编辑器&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ucG1kb2Mub3JnL3RpbnltY2V6aG9uZ3dlbndlbmRhbmd0aW55bWNlLWpzemhvbmd3ZW5qaWFvY2hlbmdqaWV4aS5odG1s&#34;&gt;tinymce&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;富文本编辑，可商用，具有美感&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h1 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvamVzdA==&#34;&gt;Jest&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;Jest&lt;/code&gt; 是一个令人愉快的 &lt;code&gt;JavaScript&lt;/code&gt; 测试框架，专注于简洁明快。它允许你使用易于使用、熟悉且功能丰富的 &lt;code&gt;API&lt;/code&gt; 编写测试，从而快速获得结果。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9jaGE=&#34;&gt;Mocha&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Mocha&lt;/code&gt; 是一个 &lt;code&gt;JavaScript&lt;/code&gt; 测试框架，使得异步测试简单而有趣。&lt;code&gt;Mocha&lt;/code&gt; 测试是串行运行的，在将未捕获的异常映射到正确的测试用例的同时，允许进行灵活和准确的报告。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;代码规范&#34;&gt;&lt;a href=&#34;#代码规范&#34; class=&#34;headerlink&#34; title=&#34;代码规范&#34;&gt;&lt;/a&gt;&lt;strong&gt;代码规范&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50&#34;&gt;ESLint&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;code&gt;ESLint&lt;/code&gt; 是用于识别和报告 &lt;code&gt;ECMAScript / JavaScript&lt;/code&gt; 代码中的书写方式的工具。 &lt;code&gt;ESLint&lt;/code&gt; 是完全插件化的，每个规则都是一个插件，你可以在运行时添加更多内容。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJldHRpZXI=&#34;&gt;Prettier&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Prettier&lt;/code&gt; 是一种固执己见的代码格式化程序。它通过解析代码并使用自己的规则(考虑到最大行的长度)重新打印代码，以及在必要时包装代码，来强制执行一致的样式。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;打包和压缩&#34;&gt;&lt;a href=&#34;#打包和压缩&#34; class=&#34;headerlink&#34; title=&#34;打包和压缩&#34;&gt;&lt;/a&gt;&lt;strong&gt;打包和压缩&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2VicGFjaw==&#34;&gt;Webpack&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;一个著名的功能强大的模块打包器。它的主要目的是将 &lt;code&gt;JavaScript&lt;/code&gt; 文件打包以便在浏览器中使用，但它也能够转换、捆绑或打包任何资源。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHRtbC1taW5pZmllcg==&#34;&gt;HTML-Minifier&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;轻巧，高度可配置且经过良好测试的基于 &lt;code&gt;Javascript&lt;/code&gt; 的 &lt;code&gt;HTML&lt;/code&gt; 压缩器&amp;#x2F;压缩器（支持 &lt;code&gt;Node.js&lt;/code&gt;）。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xlYW4tY3Nz&#34;&gt;Clean-CSS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;适用于 &lt;code&gt;Node.js&lt;/code&gt; 平台和任何现代浏览器的快速高效的 &lt;code&gt;CSS&lt;/code&gt; 优化器。 具有高度可配置和多种兼容模式。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdWdsaWZ5LWpz&#34;&gt;UglifyJS2&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;JavaScript&lt;/code&gt; 解析器，压缩程序和美化工具包。 它可以使用多个输入文件，并支持许多配置选项。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;进程管理&#34;&gt;&lt;a href=&#34;#进程管理&#34; class=&#34;headerlink&#34; title=&#34;进程管理&#34;&gt;&lt;/a&gt;&lt;strong&gt;进程管理&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1vbg==&#34;&gt;Nodemon&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;在 &lt;code&gt;Node.js&lt;/code&gt; 应用程序的开发过程中使用的简单的监控脚本。对于开发非常有用，因为它非常容易重启，并且默认启用了文件监听&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG0y&#34;&gt;PM2&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;带有内置负载均衡的 &lt;code&gt;Node.JS&lt;/code&gt; 应用程序的生产进程管理器。 更全面，更适合生产，给你很多参数以进行调整功能&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29uY3VycmVudGx5&#34;&gt;Concurrently&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;简单而直接——这是同时运行多个命令的有用工具。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;桌面端&#34;&gt;&lt;a href=&#34;#桌面端&#34; class=&#34;headerlink&#34; title=&#34;桌面端&#34;&gt;&lt;/a&gt;&lt;strong&gt;桌面端&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JlYXRlLXRhdXJpLWFwcA==&#34;&gt;create-tauri-app&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;创建&lt;code&gt;桌面端应用程序&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;跨语言通信&#34;&gt;&lt;a href=&#34;#跨语言通信&#34; class=&#34;headerlink&#34; title=&#34;跨语言通信&#34;&gt;&lt;/a&gt;&lt;strong&gt;跨语言通信&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ncnBjLmlvLw==&#34;&gt;grpc&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;跨语言通信库&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;ORM&#34;&gt;&lt;a href=&#34;#ORM&#34; class=&#34;headerlink&#34; title=&#34;ORM&#34;&gt;&lt;/a&gt;&lt;strong&gt;ORM&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvZ2V0dGluZy1zdGFydGVk&#34;&gt;Prisma ORM&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;下一代Node.js 和 TypeScript ORM（对象关系映射）&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb25nb29zZS5ub2RlanMuY24v&#34;&gt;Mongoose&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mongodb数据库ODM（对象文档映射）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;解析和语法转换&#34;&gt;&lt;a href=&#34;#解析和语法转换&#34; class=&#34;headerlink&#34; title=&#34;解析和语法转换&#34;&gt;&lt;/a&gt;&lt;strong&gt;解析和语法转换&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteWFtbA==&#34;&gt;js-yaml&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;用于将JavaScript语言解析为&lt;code&gt;yaml&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL3BhcnNlcg==&#34;&gt;@babel&amp;#x2F;parser&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;将&lt;code&gt;JavaScript代码转换为抽象语法树&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL3RyYXZlcnNl&#34;&gt;@babel&amp;#x2F;traverse&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于遍历和&lt;code&gt;操作抽象语法树&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL2NvcmU=&#34;&gt;@babel&amp;#x2F;core&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;babel核心功能集，例如将抽象语法树转为JavaScript代码。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tbm9kZS1yZXNvbHZl&#34;&gt;@rollup&amp;#x2F;plugin-node-resolve&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;rollup插件，用于告诉&lt;code&gt;rollup如何处理导入导出语句（路径补全）&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tY29tbW9uanM=&#34;&gt;@rollup&amp;#x2F;plugin-commonjs&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;rollup插件，用于&lt;code&gt;允许rollup将CommonJS模块&lt;/code&gt;打包为ES语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tdHlwZXNjcmlwdA==&#34;&gt;@rollup&amp;#x2F;plugin-typescript&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;rollup插件，用于&lt;code&gt;rollup处理TypeScript文件&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXhpb3M=&#34;&gt;Axios&lt;/span&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;基于 &lt;code&gt;Promise&lt;/code&gt; 的 &lt;code&gt;HTTP&lt;/code&gt; 客户端，用于浏览器和 &lt;code&gt;Node.js&lt;/code&gt;。 与 &lt;code&gt;JS&lt;/code&gt; 内置 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSQ==&#34;&gt;Fetch API&lt;/span&gt; 相比，它易于设置，直观且简化了很多工作。&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https//www.npmjs.com/package/socket.io&#34;&gt;Socket.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Socket.IO&lt;/code&gt; 支持实时，双向和基于事件的通信。 它可以在每个平台，浏览器或其他设备上运行，并同时关注可靠性和速度。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd3M=&#34;&gt;WS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;简单易用，快速且经过全面测试的 &lt;code&gt;WebSocket&lt;/code&gt; 客户端和服务器实现。 一个很好的，不太抽象的，&lt;code&gt;Socket.io&lt;/code&gt; 的替代方案&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGF5anM=&#34;&gt;DayJS&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;DayJS&lt;/code&gt; 是 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9tZW50&#34;&gt;MomentJS&lt;/span&gt; （自2020年9月起处于维护模式）的一种快速、轻巧的替代方案。它们的 &lt;code&gt;API&lt;/code&gt; 使用类似，如果你使用过&lt;code&gt;MomentJS&lt;/code&gt;，则已经知道如何使用大多数 &lt;code&gt;DayJS&lt;/code&gt;。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9kYXNo&#34;&gt;Lodash&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;现代化的 &lt;code&gt;JavaScript&lt;/code&gt; 实用程序库，提供模块化，高性能以及其他功能。 公开关于 &lt;code&gt;JavaScript&lt;/code&gt; 数组，对象和其他数据结构的许多有用方法。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdW5kZXJzY29yZQ==&#34;&gt;Underscore&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Underscore&lt;/code&gt; 提供了许多常用的功能工具以及更专业的工具：函数绑定，&lt;code&gt;javascript&lt;/code&gt; 模板，创建快速索引，深度相等测试等。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXN5bmM=&#34;&gt;Async&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Async&lt;/code&gt; 是一个实用模块，它为异步 &lt;code&gt;JavaScript&lt;/code&gt; 提供了直接、强大的功能。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWFya2Vk&#34;&gt;Marked&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于解析 &lt;code&gt;markdown&lt;/code&gt; 而不需要缓存或长时间阻塞的低级编译器。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmFuZG9tY29sb3I=&#34;&gt;Randomcolor&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;一个用于生成有吸引力的随机颜色的小脚本。 你可以传递选项对象从而决定其产生的颜色类型。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGx1cmFsaXpl&#34;&gt;Pluralize&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;该模块使用预先定义的规则列表，按顺序应用这些规则给指定单词单数或复数。 在许多情况下这很有用，例如基于用户输入的任何自动化。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVkZW50&#34;&gt;dedent&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;从多行字符串中去除缩进（空格）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXM=&#34;&gt;ms&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;将易理解的时间转换为毫秒数。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaG90a2V5cy1qcw==&#34;&gt;hotkeys-js&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;键盘事件&lt;/code&gt;使用库。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXM=&#34;&gt;qs&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;查询字符串解析和字符串化库&lt;/code&gt;，具有一些附加的安全性&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFjZS1hcGk=&#34;&gt;face-api&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于&lt;code&gt;人脸识别&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXJjb2RlanM=&#34;&gt;qrcode&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于将&lt;code&gt;文本转二维码&lt;/code&gt;，并用canvas绘制出来&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGxxcmNvZGU=&#34;&gt;llqrcode&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;将扫描二维码，将二维码转为文本&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mZm1wZWcucDJocC5jb20vZG93bmxvYWQuaHRtbA==&#34;&gt;FFmpeg&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;跨平台多媒体处理工具&lt;/code&gt;，可以采用命令行的方式&lt;code&gt;解码、编码转码复用、流式、过滤&lt;/code&gt;和播放几乎任何机器创建的东西（如视频转码、剪辑、提取、合并）等。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbmdxdWFudC5vcmcv&#34;&gt;pngquant&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;压缩 PNG 图像文件的工具,同时保持图像质量和透明度。&lt;code&gt;pngquant&lt;/code&gt; 提供命令行接口和库，可轻松集成到各种应用程序和脚本中。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cC1wcm94eS1taWRkbGV3YXJl&#34;&gt;http-proxy-middleware&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;代理中间件，&lt;code&gt;用于将特定的请求进行转发&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWltZQ==&#34;&gt;mime&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;用于根据文件或路径后缀，&lt;code&gt;得到对应的mime类型&lt;/code&gt;。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2ViLXZpdGFscw==&#34;&gt;web-vitals&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;性能检测&lt;/code&gt;工具&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFjZS1hcGk=&#34;&gt;face-api&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于&lt;code&gt;人脸识别&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXJjb2RlanM=&#34;&gt;qrcode&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于将&lt;code&gt;文本转二维码&lt;/code&gt;，并用canvas绘制出来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGxxcmNvZGU=&#34;&gt;llqrcode&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将扫描二维码，将二维码转为文本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;37e1bb0043140141ede69a340096e04fd5a1e194&lt;br&gt;f7aca9360f75177151ab5ca62022d8f31332eea4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/12/vue-router/</guid>
            <title>vue-router</title>
            <link>https://dmqweb.cn/2024/04/12/vue-router/</link>
            <category term="vue-router原理" scheme="https://dmqweb.cn/categories/vue-router%E5%8E%9F%E7%90%86/" />
            <category term="vue-router原理" scheme="https://dmqweb.cn/tags/vue-router%E5%8E%9F%E7%90%86/" />
            <pubDate>Fri, 12 Apr 2024 15:01:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;vue-router源码&#34;&gt;&lt;a href=&#34;#vue-router源码&#34; class=&#34;headerlink&#34; title=&#34;vue-router源码&#34;&gt;&lt;/a&gt;vue-router源码&lt;/h1&gt;&lt;h3 id=&#34;vue-router路由模式&#34;&gt;&lt;a href=&#34;#vue-router路由模式&#34; class=&#34;headerlink&#34; title=&#34;vue-router路由模式&#34;&gt;&lt;/a&gt;vue-router路由模式&lt;/h3&gt;&lt;h4 id=&#34;hash模式（-）&#34;&gt;&lt;a href=&#34;#hash模式（-）&#34; class=&#34;headerlink&#34; title=&#34;hash模式（#）&#34;&gt;&lt;/a&gt;hash模式（#）&lt;/h4&gt;&lt;p&gt;SEO不友好，资源不变，不会刷新。&lt;/p&gt;
&lt;h4 id=&#34;history模式（-x2F-）&#34;&gt;&lt;a href=&#34;#history模式（-x2F-）&#34; class=&#34;headerlink&#34; title=&#34;history模式（&amp;#x2F;）&#34;&gt;&lt;/a&gt;history模式（&amp;#x2F;）&lt;/h4&gt;&lt;p&gt;SEO友好，重新请求资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;history模式发布时出现的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发布到服务器上时，点击路由跳转正常但是刷新后路由跳转404，出现的原因刷新后跳转的根路径并不是当前项目的index.html导致资源路径不匹配单页面应用路由，采取的方法是&lt;strong&gt;每次请求资源都fallback到index.html文件&lt;/strong&gt;，可以使用静态资源服务器的支持。（例如在nginx中location字段添加：&lt;strong&gt;try_files字段&lt;/strong&gt;）&lt;/p&gt;
&lt;h3 id=&#34;vue-router内部处理&#34;&gt;&lt;a href=&#34;#vue-router内部处理&#34; class=&#34;headerlink&#34; title=&#34;vue-router内部处理&#34;&gt;&lt;/a&gt;vue-router内部处理&lt;/h3&gt;&lt;h6 id=&#34;vue-router主体架构：&#34;&gt;&lt;a href=&#34;#vue-router主体架构：&#34; class=&#34;headerlink&#34; title=&#34;vue-router主体架构：&#34;&gt;&lt;/a&gt;vue-router主体架构：&lt;/h6&gt;&lt;p&gt;当使用vue.use(vue-router)时，会执行vue-router导出的实例中的install方法，将app作为参数传入，内部会用app.component注册两个全局组件RouterLink和RouterView，接着在app.config.globalProperties上设置$route和$router属性，通过app.provide将router和currentRoute传递下去。&lt;/p&gt;
&lt;h6 id=&#34;路由变化但不跳转原理：&#34;&gt;&lt;a href=&#34;#路由变化但不跳转原理：&#34; class=&#34;headerlink&#34; title=&#34;路由变化但不跳转原理：&#34;&gt;&lt;/a&gt;路由变化但不跳转原理：&lt;/h6&gt;&lt;p&gt;history.pushState和history.replaceState方法，会改变地址栏的但不进行跳转。&lt;/p&gt;
&lt;h6 id=&#34;history模式实现路由匹配：&#34;&gt;&lt;a href=&#34;#history模式实现路由匹配：&#34; class=&#34;headerlink&#34; title=&#34;history模式实现路由匹配：&#34;&gt;&lt;/a&gt;history模式实现路由匹配：&lt;/h6&gt;&lt;p&gt;内部的mather函数会将routes中的path路径转为正则表达式，与当前的路由进行匹配，匹配成功就将对应的组件添加到router-view中。&lt;/p&gt;
&lt;h6 id=&#34;router-view实现路由展示：&#34;&gt;&lt;a href=&#34;#router-view实现路由展示：&#34; class=&#34;headerlink&#34; title=&#34;router-view实现路由展示：&#34;&gt;&lt;/a&gt;router-view实现路由展示：&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; defineComponent &amp;#125; from vue;
import Home from &amp;#39;../views/Home&amp;#39;;  //导入默认的全部组件
const routerView =  defineComponent(&amp;#123;
    name:&amp;quot;routerView&amp;quot;,
    props:&amp;#123;&amp;#125;,
    setup(props , &amp;#123; slots &amp;#125;)&amp;#123;
        return ()=&amp;gt;&amp;#123;
            // return h(&amp;#39;div&amp;#39;,&amp;#123;        //不使用组件默认的方式
            //     class:&amp;#39;routerViewClass&amp;#39;,
            //     onClick()&amp;#123;
            //         //处理点击 逻辑
            //     &amp;#125;,
            // &amp;#125;,slots.default())
            return h(Home,&amp;#123;
                onClick()&amp;#123;
                    //处理对应的逻辑
                &amp;#125;
            &amp;#125;)
        &amp;#125;
    &amp;#125;,
&amp;#125;)
export default routerView;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;路由provide一个currentRoute（shallowRef对象）将当前的路由路径捆绑在一起，传递下去，当currentRoute发生变化的时候就会改变相应的router-view。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/12/%E8%84%9A%E6%89%8B%E6%9E%B6/</guid>
            <title>脚手架开发</title>
            <link>https://dmqweb.cn/2024/04/12/%E8%84%9A%E6%89%8B%E6%9E%B6/</link>
            <category term="脚手架开发" scheme="https://dmqweb.cn/categories/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/" />
            <category term="脚手架开发" scheme="https://dmqweb.cn/tags/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/" />
            <pubDate>Fri, 12 Apr 2024 08:36:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;需求分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;为什么需要优化研发流程？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目量级增加：几干行代码 -&amp;gt; 几万行代码&lt;/li&gt;
&lt;li&gt;项目数量扩大：几个项目 -&amp;gt; 几干个项目&lt;/li&gt;
&lt;li&gt;项目复杂度高：Wb 项目 -&amp;gt;H5/PC/ 小程序 / 后端 / 脚手架&lt;/li&gt;
&lt;li&gt;团队人数增长：几个人 -&amp;gt; 几百人&lt;/li&gt;
&lt;li&gt;传统的项目研发流程已经无法满足业务需求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git开发流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git开发流程&#34;&gt;#&lt;/a&gt; git 开发流程&lt;/h1&gt;
&lt;p&gt;单人 git 项目开发流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-27_13-57-14.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多人 git 项目开发流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-27_14-05-13.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;浏览器获取资源步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器获取资源步骤&#34;&gt;#&lt;/a&gt; 浏览器获取资源步骤&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-27_14-34-47.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目创建流程思考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当团队较大时，让每一个团队成员开发创建项目体验趋于一致就非常重要。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目创建流程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目代码&lt;/li&gt;
&lt;li&gt;抽象出项目模板&lt;/li&gt;
&lt;li&gt;存储到数据库&lt;/li&gt;
&lt;li&gt;脚手架读取数据库&lt;/li&gt;
&lt;li&gt;根据脚手架创建新的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;提升前端研发效率的手段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物料和模板&lt;/li&gt;
&lt;li&gt;低代码搭建&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从使用角度理解什么是脚手架？&lt;/p&gt;
&lt;h1 id=&#34;脚手架简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚手架简介&#34;&gt;#&lt;/a&gt; 脚手架简介&lt;/h1&gt;
&lt;p&gt;脚手架本质是一个操作系统的客户端，它通过命令行执行，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vue create vue-test-app&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面这条命令由 3 个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主命令：vue&lt;/li&gt;
&lt;li&gt;command:create&lt;/li&gt;
&lt;li&gt;command 的 param:vue-test-app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它表示创建一个 vue 项目，项目的名称为 vue-test-app, 以上是最一个较为简单的脚手架命令，但实际场易&lt;br /&gt;
往更加复杂，比如：&lt;br /&gt;
当前目录已经有文件了，我们需要覆盖当前目录下的文件，强制进行安装 ue 项目，此时我们就可以输入：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vue create vue-test-app &lt;span class=&#34;token parameter variable&#34;&gt;--force&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里的 - force 叫做 option, 用来辅助脚手架确认在特定场景下用户的选择（可以理解为配置）。还有一种场景&lt;br /&gt;
通过 vue create&lt;br /&gt;
 创建项目时，会自动执行 npm install 帮用户安装依赖，如果我们希望使用淘宝源来安装，&lt;br /&gt;
可以输入命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vue create vue-test-app &lt;span class=&#34;token parameter variable&#34;&gt;--force&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; https://registry.npm.taobao.org&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里的 - x 也叫做 option, 它与 --force 不同的是它使用 -，并且使用简写，这里的 - x 也可以替换成 --registry, 有的同学可能要问，为什么老师知道这个命令，其实我们输入下面的命令就可以看到 vue create 支持的所有 options:&lt;br /&gt;
vue create  --help&lt;/p&gt;
&lt;p&gt;-r  https:/registry.npm.taobao.org 后面的 https://registry.npm.taobao.org 成为 option 的 param, 其实任 - force 可以理解为：-force true,f 简写为：--force 或 - f&lt;/p&gt;
&lt;h1 id=&#34;脚手架原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚手架原理&#34;&gt;#&lt;/a&gt; 脚手架原理&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;脚手架的执行原理如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在终端输入 vue create vue-test-app&lt;/li&gt;
&lt;li&gt;终端解析出 vue 命令&lt;/li&gt;
&lt;li&gt;终端在环境变量中找到 ue 命令&lt;/li&gt;
&lt;li&gt;终端根据 vue 命令链接到实际文件 vue.js&lt;/li&gt;
&lt;li&gt;终端利用 node 执行 `ue.js&lt;/li&gt;
&lt;li&gt;vue.js 解析 command/options&lt;/li&gt;
&lt;li&gt;vue.js 执行 command&lt;/li&gt;
&lt;li&gt;执行完毕，退出执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;从应用的角度看如何开发一个脚手架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里以 vue-cli 为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发 npm 项目，该项目中应包含一个 bin/vue.js 文件，并将这个项目发布到 npm&lt;/li&gt;
&lt;li&gt;将 npm 项目安装到 node 的 lib/node_modules&lt;/li&gt;
&lt;li&gt;在 node 的 bin 目录下配置 vue 软链接指向 lib/node modules/Qvue/cli/bin/vue.js&lt;/li&gt;
&lt;li&gt;这样我们在执行 vue 命令的时候就可以找到 vue.js 进行执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;还有很多疑问需要解答&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么全局安装 vue/cli 后会添加的命令为 vue?  （npm install -g @vue/cli）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;答：vue/cli 项目的 package.json 中的 bin 字段配置的名称为 vue。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局安装 vue/c1i 时发生了什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;答：全局 node_modules 中下载项目文件，并根据项目 package.json 中的 bin 字段配置可执行文件软链接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么 vue 指向一个 js 文件，我们却可以直接通过 vue 命令直接去执行它？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;答：js 文件配置了蛇棒（操作系统的接口），例如：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token hashbang comment&#34;&gt;#!/usr/bin/env node&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通常使用环境变量中找 node 命令，因为每个电脑上的 node 文件位置不同，但是环境变量中都会有 node 软连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;脚手架的开发流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚手架的开发流程&#34;&gt;#&lt;/a&gt; 脚手架的开发流程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;脚手架开发流程详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 npm 项目&lt;/li&gt;
&lt;li&gt;创建脚手架入口文件，最上方添加 #!/usr/bin/env node&lt;/li&gt;
&lt;li&gt;配置 package.json, 添加 bin 属性&lt;/li&gt;
&lt;li&gt;编写脚手架代码&lt;/li&gt;
&lt;li&gt;将脚手架发布到 npm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用流程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装脚手架&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt; your-own-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用脚手架&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;your-own-cli-binName&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;脚手架开发难点解析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分包：将复杂的系统拆分成若干个模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令注册：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- vue create&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- vue &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- vue invoke&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vue &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;options &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;params&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;options: 全称：--version、--help。简写为：-v   -h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帮助文档：global help&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志打印&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行文字变色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;开发细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发细节&#34;&gt;#&lt;/a&gt; 开发细节&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;两种链接本地文件的方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm  link 命令会将命令执行的当前文件夹根据 bin 字段软连接到全局的 node_moduls。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm link 包名称 ，这个命令会将全局包添加软连接到当前项目的 node_modules 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm unlink 包名称 ，这个命令用于移除全局 node_modules 中指定的软连接。（不过这个命令不好用，建议使用 &lt;code&gt;npm uninstall -g &lt;/code&gt; 包名称、或者 &lt;code&gt;npm remove -g &lt;/code&gt; 包名称  代替）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调试过程中，当本地包相互依赖时，可以使用 File: 路径进行指向。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种方式的区别&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;npm  link 的方式创建的软连接可以实时同步更改的文件，但是项目文件多了就不方便管理、很复杂，File 路径不能实时同步文件修改，需要执行 npm install，但是管理方便。&lt;/p&gt;
&lt;h1 id=&#34;脚手架发布体系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚手架发布体系&#34;&gt;#&lt;/a&gt; 脚手架发布体系&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;利用脚手架统一管理发布阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用脚手架做发布的优势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规范：利用统一发布规范，如 commiti 记录、分支名称、代码规范等&lt;/li&gt;
&lt;li&gt;效率：避免大量重复操作，浪费开发时间&lt;/li&gt;
&lt;li&gt;安全：构建和发布全部在云端操作，避免个人发布时带来的安全隐患&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;脚手架发布的流程？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitF1low 自动化代码提交&lt;/li&gt;
&lt;li&gt;远程代码自动检查&lt;/li&gt;
&lt;li&gt;云端完成构建与发布操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;脚手架发布流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚手架发布流程&#34;&gt;#&lt;/a&gt; 脚手架发布流程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;检查 package.json 中 name 和 bin 字段，name 字段不能和已存在的线上包名重复，&lt;/li&gt;
&lt;li&gt;检查版本号，是否需要更新&lt;/li&gt;
&lt;li&gt;npm login&lt;/li&gt;
&lt;li&gt;npm publish&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;npm新特性workspace&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm新特性workspace&#34;&gt;#&lt;/a&gt; npm 新特性：workspace&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地调试时，需要多次执行 npm  link，node15 版本推出 workspace，workspace 新特性可以帮助我们进行多 package 包管理，可以让多个 npm 包在同一个项目中进行开发和管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将子包中所有的依赖包都提升到根目录进行安装，提升包的安装速度&lt;/li&gt;
&lt;li&gt;初始化 (npm install) 后自动将子包之间的依赖进行关联&lt;/li&gt;
&lt;li&gt;各个子包共享一些流程（eslint、githook、publish flow 等等）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;lerna多package管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lerna多package管理&#34;&gt;#&lt;/a&gt; Lerna 多 package 管理&lt;/h1&gt;
&lt;h3 id=&#34;lerna简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lerna简介&#34;&gt;#&lt;/a&gt; Lerna 简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原生脚手架开发痛点分析&lt;/strong&gt;（Lerna 解决了哪些问题： ）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;痛点一：重复操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多 Package 本地 link&lt;/li&gt;
&lt;li&gt;多 Package 依赖安装&lt;/li&gt;
&lt;li&gt;多 Package. 单元测试&lt;/li&gt;
&lt;li&gt;多 Package 代码提交&lt;/li&gt;
&lt;li&gt;多 Package 代码发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;痛点二：版本一致性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布时版本一致性&lt;/li&gt;
&lt;li&gt;发布后相互依赖板本升级&lt;/li&gt;
&lt;li&gt;package 越多，管理复杂度越高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lerna 是一个优化基于 git+npm 的多 package 项目的管理工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大幅减少重复操作&lt;/li&gt;
&lt;li&gt;提升操作的标准化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lera 是架构优化的产物，它揭示了一个架构真理：项目复杂度提升后，就需要对项目进行架构优化。优化的主要目标往往都是以效能为核心。&lt;/p&gt;
&lt;h3 id=&#34;lerna使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lerna使用&#34;&gt;#&lt;/a&gt; Lerna 使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Lerna 开发脚手架流程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm 上创建 group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 npm 项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 lerna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package.json 中配置 workspaces&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;workspaces&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;packages/*&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//workspaces 字段允许指定一个或多个目录作为工作区。一、可以在父级目录的 package.json 中管理他们的依赖，从而较少体积。二、工作区每个包之间直接相互引用，有助于提高开发效率。三、工作区所有包共享版本控制历史。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna init 初始化项目（创建了 git）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 gitignore 排除不需要提交的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--------------------------- 初始化完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna create 创建 package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna add 安装依赖（最新版废弃），使用 npm install &amp;lt;dependency&amp;gt; --workspace  &amp;lt;workspace &amp;gt; 代替。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna link 链接依赖（最新版废弃），workspace 自动链接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;---------------------------- 项目创建完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna exec 执行 shell 脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna run 执行 npm 命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna clean 清空依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna bootstrap 重装依赖（最新版废弃），使用 npm install 代替&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;---------------------------- 项目开发完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git push 提交到远程仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna version 升级版本号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna changed 查看上版本以来全部的变更。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git add . 添加到 git 工作区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna diff 查看 diff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lerna publish 进行项目发布&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 默认是私有仓库，需要在 package.json 中进行配置：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;publishConfig&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token property&#34;&gt;&#34;access&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;public&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;---------------------------- 项目发布完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里注意 npm 最新版 workspace 特性的推广导致 lerna 许多命令在最新版被废弃。&lt;/p&gt;
&lt;h3 id=&#34;lerna学习收获&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lerna学习收获&#34;&gt;#&lt;/a&gt; Lerna 学习收获&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;熟悉 Yargs 脚手架开发框架&lt;/li&gt;
&lt;li&gt;熟悉多 Package 管理工具 Lerna 的使用方法和实现原理&lt;/li&gt;
&lt;li&gt;深入理解 Node.js 模块路径解析流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一-yargs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-yargs&#34;&gt;#&lt;/a&gt; &lt;strong&gt;一、yargs&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;脚手架构成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bin:package,json 中配置 bin 属性，npm link 本地安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;command: 命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;options: 参数 (boolean/string/number)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件顶部增加  #！/usr/bin/env node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;脚手架初始化流程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造函数：Yargs (0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用方法：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Yargs.options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.demandCommand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.recommendCommands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.strict&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.fail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.alias&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.wrap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yargs.epilogue&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;脚手架参数解析&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;hideBin(process.argv)/Yargs.argv&lt;/li&gt;
&lt;li&gt;Yargs.parse(argv,options)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;命令注册方法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Yargs.command(command,describe,builder,handler)&lt;/li&gt;
&lt;li&gt;Yargs.command({command,describe,builder,handler )&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二-lerna实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-lerna实现原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;二、Lerna 实现原理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Lerna 是基于 git+npm 的多 package 项目管理工具&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 import-local 优先调用本地 lerna 命令&lt;/li&gt;
&lt;li&gt;通过 Yargs 生成脚手架，先注册全局属性，再注册命令，最后通过 parse 方法解析参数&lt;/li&gt;
&lt;li&gt;lerna 命令注册时需要传入 builder 和 handler 两个方法，builder 方法用于注册命令专属的 options&lt;/li&gt;
&lt;li&gt;handler 用来处理命令的业务逻辑&lt;/li&gt;
&lt;li&gt;lerna 通过配置 npm 本地依赖的方式来进行本地开发，具体写法是在 package.json 的依赖中写入：file:your-local--module-path, 在 lerna publish 时会自动将该路径替换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三-nodejs模块路径解析流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-nodejs模块路径解析流程&#34;&gt;#&lt;/a&gt; 三、Node.js 模块路径解析流程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Node.js 项目模块路径解析是通过 require.resolve 方法来实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;require,resolve 就是通过 Module.reso1 veFileName 方法实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;require,resolve 实现原理：&lt;strong&gt;Module,resolveFileName 方法核心流程有 3 点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;判断是否为内置模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 Module,resolveLookupPaths 方法生成 node_modules 可能存在的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 Module,findPath 查询模块的真实路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Module,findPath 核心流程有 4 点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查询缓存（将 request 和 paths 通过 \xoo 合并成 cacheKey)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遍历 paths, 将 path 与 request 组成文件路径 basePath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 basePath 存在则调用 fs,realPathSync 获取文件真实路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将文件真实路径缓存到 Module.pathCache (key 就是前面生成的 cacheKey)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;fs.realPathSync 核心流程有 3 点：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查询缓存（缓存的 key 为 p, 即 Module.findPath 中生成的文件路径）】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左往右遍历路径字符串，查询到 / 时，拆分路径，判断该路径是否为软链接，如果是软链接则查询真实链接，并生成新路径 P, 然后继续往后遍历，这里有 1 个细节需要特别注意：&lt;/p&gt;
&lt;p&gt;遍历过程中生成的子路径 base 会缓存在 knownHard 和 cache 中，避免重复查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遍历完成得到模块对应的真实路径，此时会将原始路径 original 作为 key, 真实路径作为 value, 保存到缓存中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;require.resolve,paths 等价于 Module.resolveLookupPaths，, 该方法用于获取所有 node_modules 可能存在的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;require.resolve,paths 实现原理：&lt;br /&gt;
如果路径为 /（根目录），直接返回【&#39;/node modules&#39;】否则，将路径字符串从后往前遍历，查询到 / 时，拆分路径，在后面加上 node_modules, 并传入一个 paths 数组，直至查询不到 / 后返回 paths 数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;yargs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yargs&#34;&gt;#&lt;/a&gt; yargs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;yargs 使用简要介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token hashbang comment&#34;&gt;#! /usr/bin/env node&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 获得 yargs 构造实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; yargs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yargs/yargs&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 参数解析函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; hideBin &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yargs/helpers&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; arg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hideBin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; cli &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yargs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 配置命令：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;usage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Usage: $0 [command] &amp;lt;options&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 使用说明，$0 表示命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;demandCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A command is required,pass --help to see info&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 最少一个次命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 对于未知的命令行参数进行提示输出。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;recommendCommands&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 查找提示近似命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;help&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//options 别名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;v&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;version&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wrap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cli&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;terminalWidth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 命令行输出宽度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;epilog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;welcomn use cli-core&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 结语&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 注册多个 options 选项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;boolean&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bootstrap debug mode&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;d&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 添加别名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;registry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 添加单个选项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 不对外暴露命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;string&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;define global registry&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Dev Options&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 对 Options 选项进行分类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;registry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Extra Options&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;init [name]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;init a project&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;yargs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 注册次命令，制定对应 options&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    yargs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Name of a project&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;n&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 第二种注册命令的方法（更加精细）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;list&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;aliases&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;la&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ll&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;List local packages&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;yargs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//.... 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 使用参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;commander&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commander&#34;&gt;#&lt;/a&gt; commander&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;commander 简单单例模式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token hashbang comment&#34;&gt;#! /usr/bin/env node&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; commander &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;commander&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; pkg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../package.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; program &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commander&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//commander 单例，包含已注册好的基础命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pkg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;commander 强大功能&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token hashbang comment&#34;&gt;#! /usr/bin/env node&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; commander &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;commander&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; pkg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../package.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; program &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;commander&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 手动实例化一个 commander 实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pkg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;usage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;command&gt; [options]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 使用说明&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pkg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-d,--debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;是否开启调试模式&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 配置 option 选项：选项，帮助信息，默认值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-e,--envName &amp;lt;envName&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;获取变量名称&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//option 获得传参&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 解析参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 command 注册命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; clone &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;clone &amp;lt;source&gt; [destination]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//&amp;lt; 必选项 &gt;，[可选项]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;clone&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;clone a repository&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-f,--force&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;是否强制克隆&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;source&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;destination&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;cmdObj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;do clone&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;destination&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;cmdObj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;force&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 addCommand 注册子命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; service &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;commander&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;service&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;start [port]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;start service at port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;do service start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stop&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stop service&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stop service&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;service&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 参数解释和自动匹配功能&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;cmd&gt; [options]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 强制传入命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test command&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 描述&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;命令&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;参数&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 匹配全部命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 默认命令与命令转向功能&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;install [name]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;install package&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;executableFile&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;imooc-cli&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将 install [name] 命令转向 imooc-cli&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;isDefault&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置为默认命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 命令不可见&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 高级定制 1：自定义 help 信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;helpInformation&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;--help&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;my help information&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 高级定制 2：监听 debug&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;option:debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;debug&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;LOG_LEVEL&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;verbose&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;LOG_LEVEL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 高级定制 3：监听未知命令（与默认命令冲突）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;command:*&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;未知命令:&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; avaliableCommands &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;可用命令：&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;avaliableCommands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 最后要进行参数解析！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 内置属性和方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;debug&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;envName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;outputHelp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 内置方法，弹出帮助信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;program&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 内置方法，返回 options 信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;require加载机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#require加载机制&#34;&gt;#&lt;/a&gt; require 加载机制&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;require 直接加载.js、.json 和.node 文件，其余文件按照 js 语法进行加载&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载 js 文件，require 加载的 js 文件需要进行导出&lt;/li&gt;
&lt;li&gt;加载 json 文件，通过 JSON.parse 进行文件解析&lt;/li&gt;
&lt;li&gt;加载 node 文件，通过 process.dlopen 方法加载（node 文件是 C++ 语法）&lt;/li&gt;
&lt;li&gt;其余文件，使用 js 语法加载，此时语法错误的会报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;node多进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node多进程&#34;&gt;#&lt;/a&gt; node 多进程&lt;/h1&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程是资源分配的最小单位，线程是 CPU 调度的最小单位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是进程&lt;/p&gt;
&lt;p&gt;进程 (Process) 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单&lt;/p&gt;
&lt;p&gt;位，是操作系统结构的基础。&lt;/p&gt;
&lt;p&gt;进程的概念主要有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，进程是一个实体。每一个进程都有它自己的地址空间。&lt;/li&gt;
&lt;li&gt;第二，进程是一个 “执行中的程序”，存在嵌套关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;node 多进程官方文档：&lt;/p&gt;
&lt;p&gt;中文版：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25vZGVpcy5jbi9hcGkvY2hpbGRfcHJvY2VzcyxodG1s&#34;&gt;http://nodeis.cn/api/child_process,html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统会使用时会开辟一个 node 进程，每个 node 文件在运行时都会创建一个 child_process 进行，也就是 node.js 的子进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;child_precess用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#child_precess用法&#34;&gt;#&lt;/a&gt; child_precess 用法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一、执行可执行文件。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; cp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;child_process&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 默认内置库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//exec 方法，可以传执行命令，也可以传文件路径，但不支持给文件传参。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls -al|grep node_modules&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stderr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//execFile 方法，传文件路径，并且支持给文件传参数。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;execFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-al&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stderr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//spawn 方法，传入文件路径，以流式的方式输出，是 exec 和 execFile 的底层原理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;npm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;install&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/User/dmq/Desktop/test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stdout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;chunk&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stderr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stderr&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;chunk&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;exec 和 spawn 使用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当文件操作过程复杂，并且需要频繁输出日志时，使用 spawn 进行流式操作。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;npm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;install&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/User/dmq/Desktop/test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;stdio&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;inherit&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将输出传给父进程。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 监听错误事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 监听退出事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;exit&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;命令执行成功&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stdout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;chunk&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stderr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stderr&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;chunk&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当文件操作过程简单，需要直接输出时，使用 exec 方法&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;npm install&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/User/dmq/Desktop/test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stderr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;二、执行指定 JS 文件（不支持回调）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fork 方法类似于 require 函数，但是区别在于 fork 方法会创建一个 node 子进程执行 JS 文件，使用独立的 v8 引擎去解析代码。&lt;/p&gt;
&lt;p&gt;index.js 文件：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__dirname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;child.js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello child process!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 及时断开连接，防止主进程和子进程长期处于等待状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;main pid:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;child.js 文件：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;child process pid:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello main process&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;child_process源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#child_process源码&#34;&gt;#&lt;/a&gt; child_process 源码&lt;/h3&gt;
&lt;p&gt;疑问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec、execFile、spanwn 和 fork 区别：
&lt;ul&gt;
&lt;li&gt;exec: 原理是调用 /bin/sh-c 执行我们传入的 shell 脚本，底层调用了 execFile&lt;/li&gt;
&lt;li&gt;execFile: 原理是直接执行我们传入的 file 和 args, 底层调用 spawn 创建和执行子进程，并建立了回调，一次性将所有的 stdout 和 stderr 结果返回&lt;/li&gt;
&lt;li&gt;spawn: 原理是调用了 internal/child_.process, 实例化了 ChildProcess 子进程对象，再调用 child.spawn 创建子进程并执行命令，底层是调用了 child._handle.spawn 执行 process_wrap 中的 spwn 方法，执行过程是异步的，执行完毕后通过 PIPE 进行单向数据通信，通信结束后会子进程发起 onexit 回调，同时 Socket 会执行 close 回调&lt;/li&gt;
&lt;li&gt;fork: 原理是通过 spawn 创建子进程和执行命令，通过 setupchannel 创建 IPC 用于子进程和父进程之&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;eggjsmongodb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eggjsmongodb&#34;&gt;#&lt;/a&gt; egg.js+mongodb&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1、egg.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于快速生成后端 api 的框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、npm init egg 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当执行 &lt;code&gt;npm init egg&lt;/code&gt;  命令时，npm 会自动找到 create-egg 这个包（其他包同理，找到 create - 包名），进行执行。&lt;strong&gt;当不想将脚手架安装到本地，而是在线上直接使用时，这个机制就显得十分重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、mongodb 数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非关系型数据库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云 mongodb&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;云 mongodb 开通&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址：https:/mongodb.console.aliyun.comL, 创建实例并付款即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地 mongodb&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址：https:/www.runoob.com/mongodb/mongodb-tutorial.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mongodb 使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItZGF0YWJhc2VzLWRvY3VtZW50cy1jb2xsZWN0aW9ucy5odG1s&#34;&gt;https://www.runoob.com/mongodb/mongodb-databases-documents-collections.html&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、egg.js 链接 mongodb 数据库&lt;/p&gt;
&lt;p&gt;utils/mongo.js&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; logger &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;npmlog&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;LOG_LEVEL&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;LOG_LEVEL&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heading &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pick&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 自定义头部&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addLevel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;success&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;fg&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;bold&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 自定义 success 日志&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addLevel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;notice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;fg&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;bg&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;black&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 自定义 notice 日志&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; MongoClient &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;mongodb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;MongoClient&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Mongo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dbName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dbName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dbName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      MongoClient&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token literal-property property&#34;&gt;useNewUrlParser&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token literal-property property&#34;&gt;useUnifiedTopology&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dbName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;connectAction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; collection &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;collection&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;verbose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;result&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;docName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connectAction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;collection&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onSuccess&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      collection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;projection&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;_id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; docs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;docs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connectAction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;collection&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onSuccess&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      collection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;insertMany&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connectAction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;docName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;collection&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onSuccess&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      collection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;deleteOne&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   update(collection, data) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Mongo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;db.js&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; mongo &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Mongodb&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;mongodb://dmq:dmq0216@127.0.0.1:27017/dbName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;dbName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mongo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;project&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;inquirer源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inquirer源码&#34;&gt;#&lt;/a&gt; inquirer 源码&lt;/h1&gt;
&lt;h2 id=&#34;学习路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习路径&#34;&gt;#&lt;/a&gt; 学习路径&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;掌握一些库：readline（命令行读取）/events（事件驱动）/stream（输入输出流）/ansi-escapes（命令行文字样式）/rxjs（处理异步事件）&lt;/li&gt;
&lt;li&gt;掌握命令行交互的实现原理，并实现一个可交互的列表&lt;/li&gt;
&lt;li&gt;分析 inquirer 源码掌握其中的关键实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ejsglob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ejsglob&#34;&gt;#&lt;/a&gt; ejs+glob&lt;/h1&gt;
&lt;p&gt;ejs 三方库用于 xml 动态模板渲染，glob 三方库用于根据 &lt;code&gt;文件路径进行遍历和匹配文件&lt;/code&gt; ，拿到文件的内容。&lt;/p&gt;
&lt;h1 id=&#34;ejs源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ejs源码&#34;&gt;#&lt;/a&gt; ejs 源码&lt;/h1&gt;
&lt;p&gt;省略，详见官网&lt;/p&gt;
&lt;h1 id=&#34;require源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#require源码&#34;&gt;#&lt;/a&gt; require 源码&lt;/h1&gt;
&lt;p&gt;省略，详见官网&lt;/p&gt;
&lt;h1 id=&#34;代码复用实践&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码复用实践&#34;&gt;#&lt;/a&gt; 代码复用实践&lt;/h1&gt;
&lt;p&gt;** 代码复用目的：** 提高人效，降低开发成本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式&lt;/strong&gt;为：&lt;strong&gt;节约工时 = 服用代码节约时间  *  代码复用系数  *  复用次数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背后思考：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同开发者、团队之间会产生了大量重复、通用的代码&lt;/li&gt;
&lt;li&gt;这些代码散落在各自团队的项目代码里&lt;/li&gt;
&lt;li&gt;复用的时候大家习惯于直接拷贝这些代码到项目中，因为这样做对个人成本最低（开发者往往更熟悉自己写的代码)，但是这种做法不利于团队之间代码共享，因为每个人开发不同的业务，对不同页面的熟悉程度不一样，而代码复用的宗旨就是要尽可能将团队中的开发着的整体水平拉齐&lt;/li&gt;
&lt;li&gt;所以需要通过工具化的方式降低代码复用的成本&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/04/12/%E5%A4%8D%E6%9D%82%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</guid>
            <title>复杂业务部署与优化</title>
            <link>https://dmqweb.cn/2024/04/12/%E5%A4%8D%E6%9D%82%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</link>
            <category term="复杂业务部署与优化" scheme="https://dmqweb.cn/categories/%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BC%98%E5%8C%96/" />
            <category term="复杂业务部署与优化" scheme="https://dmqweb.cn/tags/%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BC%98%E5%8C%96/" />
            <pubDate>Fri, 12 Apr 2024 08:33:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;软件生命周期：&#34;&gt;&lt;a href=&#34;#软件生命周期：&#34; class=&#34;headerlink&#34; title=&#34;软件生命周期：&#34;&gt;&lt;/a&gt;软件生命周期：&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-16_12-54-33.jpg&#34; alt=&#34;/images/Snipaste_2024-04-16_12-54-33.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;架构流程图&#34;&gt;&lt;a href=&#34;#架构流程图&#34; class=&#34;headerlink&#34; title=&#34;架构流程图&#34;&gt;&lt;/a&gt;架构流程图&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-17_12-16-04.jpg&#34; alt=&#34;/images/Snipaste_2024-04-17_12-16-04.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;复杂项目通用方案&#34;&gt;&lt;a href=&#34;#复杂项目通用方案&#34; class=&#34;headerlink&#34; title=&#34;复杂项目通用方案&#34;&gt;&lt;/a&gt;复杂项目通用方案&lt;/h1&gt;&lt;h4 id=&#34;业务的复杂度&#34;&gt;&lt;a href=&#34;#业务的复杂度&#34; class=&#34;headerlink&#34; title=&#34;业务的复杂度&#34;&gt;&lt;/a&gt;业务的复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;交互的复杂性&lt;/li&gt;
&lt;li&gt;数据结构和状态的复杂性&lt;/li&gt;
&lt;li&gt;多项目互相依赖的复杂性&lt;/li&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;li&gt;第三方库的使用和调研以及二次开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;流程的复杂度&#34;&gt;&lt;a href=&#34;#流程的复杂度&#34; class=&#34;headerlink&#34; title=&#34;流程的复杂度&#34;&gt;&lt;/a&gt;流程的复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;git flow&lt;/li&gt;
&lt;li&gt;lint工具&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;commit信息&lt;/li&gt;
&lt;li&gt;PR revirew&lt;/li&gt;
&lt;li&gt;CI &amp;#x2F; CD&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;CI-x2F-CD的概念&#34;&gt;&lt;a href=&#34;#CI-x2F-CD的概念&#34; class=&#34;headerlink&#34; title=&#34;CI &amp;#x2F; CD的概念&#34;&gt;&lt;/a&gt;CI &amp;#x2F; CD的概念&lt;/h1&gt;&lt;p&gt;业务组件库的开发和发布是随着一些列任务进化的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地commit钩子函数完成commit验证&lt;/li&gt;
&lt;li&gt;代码push到远端之后&lt;/li&gt;
&lt;li&gt;跑特定的test（不仅仅是本机的unit test，也可能有时间很长的E2E test）&lt;/li&gt;
&lt;li&gt;test通过之后检查是否有新的tag，如果有就自动publish一个新的版本&lt;/li&gt;
&lt;li&gt;甚至还有更多，自动部署文档站点等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些任务如果手动操作，就费时费力，所以需要自动化进行。&lt;/p&gt;
&lt;h4 id=&#34;CI（Continuous-integration）持续集成&#34;&gt;&lt;a href=&#34;#CI（Continuous-integration）持续集成&#34; class=&#34;headerlink&#34; title=&#34;CI（Continuous integration）持续集成&#34;&gt;&lt;/a&gt;CI（Continuous integration）持续集成&lt;/h4&gt;&lt;p&gt;持续集成是指频繁地将代码集成到主干，一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。&lt;/p&gt;
&lt;p&gt;作用有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速发现错误&lt;/li&gt;
&lt;li&gt;防止分支大幅偏离主干&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;持续集成的目的就是让产品可以快速迭代，同时保持高质量。&lt;/p&gt;
&lt;h4 id=&#34;CD（Continuous-Delivery）持续交付&#34;&gt;&lt;a href=&#34;#CD（Continuous-Delivery）持续交付&#34; class=&#34;headerlink&#34; title=&#34;CD（Continuous Delivery）持续交付&#34;&gt;&lt;/a&gt;CD（Continuous Delivery）持续交付&lt;/h4&gt;&lt;p&gt;持续交付是指频繁地将软件的新版本，交付给质量团队或者用户，以供评审。&lt;/p&gt;
&lt;h4 id=&#34;CD（Continuous-Deployment）持续部署&#34;&gt;&lt;a href=&#34;#CD（Continuous-Deployment）持续部署&#34; class=&#34;headerlink&#34; title=&#34;CD（Continuous Deployment）持续部署&#34;&gt;&lt;/a&gt;CD（Continuous Deployment）持续部署&lt;/h4&gt;&lt;p&gt;持续部署是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。&lt;/p&gt;
&lt;h4 id=&#34;CI-x2F-CD两大服务：&#34;&gt;&lt;a href=&#34;#CI-x2F-CD两大服务：&#34; class=&#34;headerlink&#34; title=&#34;CI &amp;#x2F; CD两大服务：&#34;&gt;&lt;/a&gt;CI &amp;#x2F; CD两大服务：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;github actions&lt;/li&gt;
&lt;li&gt;travis-ci&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;列表排序解决方案&#34;&gt;&lt;a href=&#34;#列表排序解决方案&#34; class=&#34;headerlink&#34; title=&#34;列表排序解决方案&#34;&gt;&lt;/a&gt;列表排序解决方案&lt;/h1&gt;&lt;p&gt;列表排序原理：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;ul class=&amp;quot;ul&amp;quot; @drop=&amp;quot;onDrop&amp;quot;&amp;gt;
        &amp;lt;li 
            v-for=&amp;quot;(item,index) in list&amp;quot; 
            :data-index=&amp;quot;index&amp;quot; 
            :key=&amp;quot;item.id&amp;quot; 
            @dragover=&amp;quot;onDragover($event,index)&amp;quot; 
            @dragstartart=&amp;quot;dragstart($event,index)&amp;quot; 
            @dragenter=&amp;quot;dragenter($event,index)&amp;quot; 
            draggable=&amp;quot;true&amp;quot; 
            :class=&amp;quot;[item.id==currentLi?&amp;#39;glost&amp;#39;:&amp;#39;&amp;#39;]&amp;quot;
        &amp;gt;&amp;#123;&amp;#123; item.name &amp;#125;&amp;#125;&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup&amp;gt;
/*eslint-disable*/
import &amp;#123; ref &amp;#125; from &amp;quot;vue&amp;quot;;
import &amp;#123;arrayMoveImmutable&amp;#125; from &amp;#39;array-move&amp;#39;;
let currentLi = ref(1);
let index = ref(1);
const list = ref(
  [
  &amp;#123;id:1,name:&amp;#39;列表1&amp;#39;&amp;#125;,
  &amp;#123;id:2,name:&amp;#39;列表2&amp;#39;&amp;#125;,
  &amp;#123;id:3,name:&amp;#39;列表3&amp;#39;&amp;#125;,
  &amp;#123;id:4,name:&amp;#39;列表4&amp;#39;&amp;#125;,
  &amp;#123;id:5,name:&amp;#39;列表5&amp;#39;&amp;#125;,
]
)
const dragstart = (e,inde)=&amp;gt;&amp;#123;
  currentLi.value = inde;
&amp;#125;
const dragenter = (e,ind)=&amp;gt;&amp;#123;
  if(ind != currentLi.value)&amp;#123;
      list.value = arrayMoveImmutable(list.value,ind,currentLi.value)
      currentLi.value = ind;
  &amp;#125;
&amp;#125;
const onDrop = (e)=&amp;gt;&amp;#123;
  console.log(e.target.dataset.index,&amp;#39;drop&amp;#39;);
  list.value = arrayMoveImmutable(list.value,index.value,currentLi.value)
  console.log(list.value);
&amp;#125;
const onDragover = (e,inde)=&amp;gt;&amp;#123;
  e.preventDefault();
  index.value = inde;
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style  scoped&amp;gt;
.ul&amp;gt;li&amp;#123;
  width: 100%;
  height: 50px;
  border: 1px solid red;
&amp;#125;
.glost&amp;#123;
  box-shadow: 10px 10px 3px 3px gray;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列表排序常用工具包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vue-draggable&lt;/li&gt;
&lt;li&gt;sortable.js&lt;/li&gt;
&lt;li&gt;array-move.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;拖动改变位置原理&#34;&gt;&lt;a href=&#34;#拖动改变位置原理&#34; class=&#34;headerlink&#34; title=&#34;拖动改变位置原理&#34;&gt;&lt;/a&gt;拖动改变位置原理&lt;/h1&gt;&lt;p&gt;通过监听mousedown和mousemove事件，用element.getBoundingClientRect方法获得x和y，left和top等属性，改变对应元素的top和left属性。&lt;/p&gt;
&lt;h1 id=&#34;拖动改变大小原理&#34;&gt;&lt;a href=&#34;#拖动改变大小原理&#34; class=&#34;headerlink&#34; title=&#34;拖动改变大小原理&#34;&gt;&lt;/a&gt;拖动改变大小原理&lt;/h1&gt;&lt;p&gt; 设置边框元素，边框元素的四个角添加圆点元素，监听mousedown事件和mousemove事件，并将最新的坐标赋值给元素的尺寸大小。&lt;/p&gt;
&lt;h1 id=&#34;快捷键实现原理&#34;&gt;&lt;a href=&#34;#快捷键实现原理&#34; class=&#34;headerlink&#34; title=&#34;快捷键实现原理&#34;&gt;&lt;/a&gt;快捷键实现原理&lt;/h1&gt;&lt;p&gt;好用的快捷键第三方库：Hotkeys.js&lt;/p&gt;
&lt;p&gt;事件原理：keydown事件的监听，通过event.key判断是那个快捷键，从而执行对应的操作。&lt;/p&gt;
&lt;h1 id=&#34;撤销重做原理&#34;&gt;&lt;a href=&#34;#撤销重做原理&#34; class=&#34;headerlink&#34; title=&#34;撤销重做原理&#34;&gt;&lt;/a&gt;撤销重做原理&lt;/h1&gt;&lt;p&gt;维护一个固定长度的histories数组和historyIndex指针，每次修改的时候添加一条记录（标识操作类型和数据）。回滚时改变historyIndex指针。&lt;/p&gt;
&lt;h1 id=&#34;右键菜单原理&#34;&gt;&lt;a href=&#34;#右键菜单原理&#34; class=&#34;headerlink&#34; title=&#34;右键菜单原理&#34;&gt;&lt;/a&gt;右键菜单原理&lt;/h1&gt;&lt;p&gt;在需要显示的区域拦截默认的右键点击事件，判断是否点击在组件元素上（通过event.target），显示一个自定义菜单，其中包括操作项，显示在鼠标的位置（event.clientX和event.clientY），点击完成操作，通过display:none隐藏。&lt;/p&gt;
&lt;h1 id=&#34;自动保存实现方案&#34;&gt;&lt;a href=&#34;#自动保存实现方案&#34; class=&#34;headerlink&#34; title=&#34;自动保存实现方案&#34;&gt;&lt;/a&gt;自动保存实现方案&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定时保存（语雀）&lt;/li&gt;
&lt;li&gt;实时保存（石墨）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理：添加isDrity字段标记数据是否有修改，当修改时将isDirty设置为true，根据isDIrty的值设置定时器，定时触发保存逻辑。&lt;/p&gt;
&lt;h1 id=&#34;DOM元素截图实现方案&#34;&gt;&lt;a href=&#34;#DOM元素截图实现方案&#34; class=&#34;headerlink&#34; title=&#34;DOM元素截图实现方案&#34;&gt;&lt;/a&gt;DOM元素截图实现方案&lt;/h1&gt;&lt;p&gt;工具包：html2canvas&lt;/p&gt;
&lt;p&gt;实现原理：&lt;/p&gt;
&lt;p&gt;根据DOM元素的styles样式，通过svg的foreignObject元素引入XML命名空间的元素，然后创建一个image标签，将svg通过url.createObjectURL方法创建一个路径赋值给一个image标签的src属性，通过canvas画笔 的drawImage方法将image图片绘制到canvas画布上。&lt;/p&gt;
&lt;p&gt;实现流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;style设置DOM样式&lt;/li&gt;
&lt;li&gt;svg引入DOM&lt;/li&gt;
&lt;li&gt;createObjectURL创建url路径&lt;/li&gt;
&lt;li&gt;将url复制到image标签的src&lt;/li&gt;
&lt;li&gt;canvas的drawImage将image图片绘制到canvas画布上&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const data =
&amp;quot;&amp;lt;svg xmlns=&amp;#39;http://www.w3.org/2000/svg&amp;#39;width=&amp;#39;400px&amp;#39;height=&amp;#39;40
&amp;quot;&amp;lt;foreignabject width=&amp;#39;100%&amp;#39;height=&amp;#39;100%&amp;#39;&amp;gt;&amp;quot;+
&amp;quot;&amp;lt;div xmlns=&amp;#39;http://ww.w3.org/1999/xhtml&amp;#39;&amp;gt;&amp;quot;
element.innerHTML+
&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;+
&amp;quot;&amp;lt;/foreignobject&amp;gt;&amp;quot; +
&amp;quot;&amp;lt;/svg&amp;gt;&amp;quot;

const svg = new Blob([data],&amp;#123;type:&amp;quot;image/svg+xml;charset=utf-8&amp;quot;&amp;#125;);
const url = URL.createobjectURL(svg)
const image = new Image()
image.src = url
image.addEventListener(&amp;#39;load&amp;#39;,()=&amp;gt;&amp;#123;
    const ctx =anvas.getContext(&amp;#39;2d&amp;#39;);
    if (ctx)&amp;#123;
    ctx.drawImage(image,0,0)
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二维码生成方案&#34;&gt;&lt;a href=&#34;#二维码生成方案&#34; class=&#34;headerlink&#34; title=&#34;二维码生成方案&#34;&gt;&lt;/a&gt;二维码生成方案&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;工具包：node-qrcode&lt;/li&gt;
&lt;li&gt;ts项目中需要安装额外的定义文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单原理：将数据变为二进制，然后通过canvas将二进制变为图像。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;canvas id=&amp;quot;qrcode&amp;quot; width=&amp;quot;128&amp;quot; height=&amp;quot;128&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;script&amp;gt;
    //将字符串转为二进制形式
    function toBianary(str)&amp;#123;
        let res = &amp;#39;&amp;#39;;
        for(let i=0;i&amp;lt;str.length;i++)&amp;#123;
            let charCode = str.charCodeAt(i);
            let binaryCharCode = charCode.toString(2);
            res += binaryCharCode.padStart(8,&amp;#39;0&amp;#39;);
        &amp;#125;
        return res;
    &amp;#125;
    //绘制
    function drawQRCode(text, canvas) &amp;#123;
      var context = canvas.getContext(&amp;quot;2d&amp;quot;);
      // 绘制黑白像素点
      for (var i = 0; i &amp;lt; text.length; i++) &amp;#123;
        var row = Math.floor(i / canvas.width);
        var col = i % canvas.width;
        var color = text.charAt(i) === &amp;quot;1&amp;quot; ? &amp;quot;#000000&amp;quot; : &amp;quot;#FFFFFF&amp;quot;;
        context.fillStyle = color; 
        context.fillRect(col, row, 1, 1);
      &amp;#125;
    &amp;#125;
    var qrcodeCanvas = document.getElementById(&amp;quot;qrcode&amp;quot;);
    drawQRCode(toBianary(&amp;#39;https://dmqweb.cn&amp;#39;), qrcodeCanvas); // 示例：绘制一个简单的二维码
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;复制功能实现原理&#34;&gt;&lt;a href=&#34;#复制功能实现原理&#34; class=&#34;headerlink&#34; title=&#34;复制功能实现原理&#34;&gt;&lt;/a&gt;复制功能实现原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;工具包：clipboard.js&lt;/li&gt;
&lt;li&gt;自带type定义文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理：&lt;/p&gt;
&lt;p&gt;方案一：document.execCommand()方法。内置一系列功能，包括复制文本（但&lt;strong&gt;前提是需要选中文本&lt;/strong&gt;），可以使用不可见元素迂回。&lt;/p&gt;
&lt;p&gt;方案二：Clipboard API（ navigator.clipboard ），但是对于&lt;strong&gt;浏览器兼容性有待加强。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载文件原理&#34;&gt;&lt;a href=&#34;#下载文件原理&#34; class=&#34;headerlink&#34; title=&#34;下载文件原理&#34;&gt;&lt;/a&gt;下载文件原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;工具包：FileSaver.js（小文件）&lt;/li&gt;
&lt;li&gt;StreamSaver.js（大文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方案一：超链接a标签添加download属性，属性值为文件名，rel属性设置打开页面的具体实现细节。（但前提是&lt;strong&gt;href属性为当前同源情况下&lt;/strong&gt;。）&lt;/p&gt;
&lt;p&gt;方案二：通过axios请求到图片地址，通过URL.createObjectURL创建为一个与document相绑定的地址，赋值给a标签即可。（不要忘记使用URL.revokeObjectURL将创建的地址移除。）&lt;/p&gt;
&lt;p&gt;方案三：通过FileReader.readAsDataURL，创建一个FileReader实例，使用readAsDataURL读取对象返回一段base64格式的字符串，监听reader实例的onload事件，创建a标签将reader.result赋值给a标签的href属性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;downloadFile:function(data,fileName)&amp;#123;
   const reader = new FileReader()
   // 传入被读取的blob对象
   reader.readAsDataURL(data)
   // 读取完成的回调事件
   reader.onload = (e) =&amp;gt; &amp;#123;
       let a = document.createElement(&amp;#39;a&amp;#39;)
       a.download = fileName
       a.style.display = &amp;#39;none&amp;#39;
       // 生成的base64编码
       let url = reader.result
       a.href = url
       document.body.appendChild(a)
       a.click()
       document.body.removeChild(a)
   &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;终极解决方案：由于通过URL.createObjectURL和FileReader都会先将数据保存到内存中，业务中经常需要后端验证token之后才能拿到文件，不能直接使用a标签。因此实际中可以先发送ajax请求验证token，验证之后颁发一个过期时间短的cookie，之后使用a标签进行下载即可。但是同样会受到a标签download属性跨域请求的限制。&lt;/p&gt;
&lt;h1 id=&#34;应用部署的流程&#34;&gt;&lt;a href=&#34;#应用部署的流程&#34; class=&#34;headerlink&#34; title=&#34;应用部署的流程&#34;&gt;&lt;/a&gt;应用部署的流程&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;构建&lt;/strong&gt;&lt;br&gt;Javascript语言本身是不需要编译的。&lt;br&gt;但是现代的前端项目使用的语言和或者的模块系统都无法在浏览器中使用，都需要使用特定的&lt;br&gt;bundler将源代码最终转换为浏览器支持的」avascript代码。&lt;br&gt;&lt;strong&gt;不同的环境:&lt;/strong&gt;&lt;br&gt;开发环境(development) ：本地的测试环境&lt;br&gt;测试环境(test或者staging）：线上的测试环境&lt;/p&gt;
&lt;p&gt;生产环境（production)：线上的生产环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产和开发环境的区别&lt;/strong&gt;&lt;br&gt;*开发环境&lt;br&gt;*会添加丰富的错误提示&lt;br&gt;可以使用mock server或者本地后端环境&lt;br&gt;添加各种便利的功能-比如hot reload,自动刷新&lt;br&gt;*不太关心静态资源的大小，最好提供最丰富的调试信息(sourcemap)等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产环境&lt;/strong&gt;&lt;br&gt;稳定是最重要的原则&lt;br&gt;速度是第一要务&lt;br&gt;&lt;strong&gt;生产环境和测试环境的区别&lt;/strong&gt;&lt;br&gt;高度相似&lt;br&gt;使用的后端服务不一样&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境变量设置（按优先级）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨平台设置环境变量工具包：cross-env&lt;/li&gt;
&lt;li&gt;命令中添加环境变量（平台限制）&lt;/li&gt;
&lt;li&gt;环境变量文件中配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在项目根目录中放置下列文件来指定环境变量&lt;/strong&gt;&lt;br&gt;.env                                        #在所有的环境中被载入&lt;br&gt;.env.local                             #在所有的环境中被载入，但会被git忽略&lt;br&gt;env.[mode]                         #只在指定的模式中被载入&lt;br&gt;env.[mode].local             #只在指定的模式中被载入，但会被git忽略&lt;/p&gt;
&lt;h1 id=&#34;webpack构建优化&#34;&gt;&lt;a href=&#34;#webpack构建优化&#34; class=&#34;headerlink&#34; title=&#34;webpack构建优化&#34;&gt;&lt;/a&gt;webpack构建优化&lt;/h1&gt;&lt;h3 id=&#34;Bundler：&#34;&gt;&lt;a href=&#34;#Bundler：&#34; class=&#34;headerlink&#34; title=&#34;Bundler：&#34;&gt;&lt;/a&gt;Bundler：&lt;/h3&gt;&lt;p&gt;将浏览器不支持的模块进行编译，转换，&lt;br&gt;合并最后生成的代码可以在浏览器端良好的运行的工具。&lt;/p&gt;
&lt;h3 id=&#34;Loaders：&#34;&gt;&lt;a href=&#34;#Loaders：&#34; class=&#34;headerlink&#34; title=&#34;Loaders：&#34;&gt;&lt;/a&gt;&lt;strong&gt;Loaders：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvbG9hZGVycy8=&#34;&gt;https://webpack.docschina.org/concepts/loaders/&lt;/span&gt;&lt;br&gt;loader用于对模块的源代码进行转换。loader可以使你在import或”Ioad(加载)”模块时预处理文件。&lt;br&gt;&lt;strong&gt;多个Loader&lt;/strong&gt;&lt;br&gt;module.rules允许你在webpack配置中指定多个loader。这种方式是展示loader的一种简明方式，并且有助于使代码变得简洁和易于维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack中loader配置：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;const path = require(&amp;#39;path&amp;#39;)
module.exports = &amp;#123;
    entry:&amp;#39;./main.js&amp;#39;,
    output:&amp;#123;
        path:path.resolve(dirname,&amp;#39;dist&amp;#39;),
        filename:bundle.js&amp;#39;,
    &amp;#125;
&amp;#125;,
module:&amp;#123;
    rules:[
    &amp;#123;
        test:/八.css$/,
        use: [
            loader:&amp;#39;style-loader&amp;#39;&amp;#125;,   //先写的loader后执行。
            loader:&amp;#39;css-loader&amp;#39;&amp;#125;
        ]
    &amp;#125;]
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;webpack中loader原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在webpack.config.js的module字段的rules数组中进行配置：添加一个对象标识一个独立的匹配项，test字段使用正则表示匹配的文件名，use数组表示对应文件需要执行的loader，webpack在打包时会&lt;strong&gt;将文件内容传入并执行对应的loader&lt;/strong&gt;（是一个函数），&lt;strong&gt;执行loader函数后会将函数返回值包装成一个新的函数&lt;/strong&gt;，因此webpack中的loader通常需要进行两次module.exports。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//手写一个md文件的loader
const marked = require(&amp;#39;marked&amp;#39;);  //第三方库，用于将md转为html
const utils = require(&amp;#39;loader-utils&amp;#39;)  //官方库，用于获取用户配置loader时传入的参数
const markdownLoader = (source) =&amp;gt; &amp;#123;
    const options = utils.getOptions(this);
    const html = marked(source , options);
    return  `module.exports = $&amp;#123;JSON.stringify(html)&amp;#125;`;
&amp;#125;
module.exports = markdownLoader;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const path = require(&amp;#39;path&amp;#39;)
module.exports = &amp;#123;
    entry:&amp;#39;./main.js&amp;#39;,
    output:&amp;#123;
        path:path.resolve(dirname,&amp;#39;dist&amp;#39;),
        filename:bundle.js&amp;#39;,
    &amp;#125;
&amp;#125;,
module:&amp;#123;
    rules:[
    &amp;#123;
        test:/\.css$/,
        use: [
            &amp;#123; loader:&amp;#39;style-loader&amp;#39; &amp;#125;,   //先写的loader后执行。
            &amp;#123; loader:&amp;#39;css-loader&amp;#39; &amp;#125;
        ]
    &amp;#125;,
    &amp;#123;
        test:/\.md$/,
        use: [
            &amp;#123; loader: &amp;#39;./markdonwn-loader&amp;#39;,options:&amp;#123; headerIds:false &amp;#125; &amp;#125; //其中options是给loader函数传入的第二个参数，loader中可以使用loader-utils官方三方库进行接受
        ]
    &amp;#125;]
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;多个Loader串联&lt;/strong&gt;&lt;br&gt;最后的loader最早调用，将会传入原始资源内容。&lt;br&gt;第一个loader最后调用，期望值是传出JavaScript和source map(可选)。&lt;br&gt;中间的loader执行时，会传入前一个loader传出的结果。&lt;br&gt;&lt;strong&gt;将markdown转换为html:turndown&lt;/strong&gt;&lt;br&gt;地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIub20vZG9tY2hyaXN0aWUvdHVybmRvd24=&#34;&gt;https://github.om/domchristie/turndown&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;plugins&#34;&gt;&lt;a href=&#34;#plugins&#34; class=&#34;headerlink&#34; title=&#34;plugins:&#34;&gt;&lt;/a&gt;&lt;strong&gt;plugins:&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvcGx1Z2lucy8=&#34;&gt;https://webpack.docschina.org/concepts/plugins/&lt;/span&gt;&lt;br&gt;插件是webpack的支柱功能。webpack自身也是构建开你在webpack配置中用到的相同的插件系统之上！插件目的在于解决loader无法实现的其他事。(我自己的理解，loader解决的是各种不同资源的问题，plugins更多解决的是项目整体的事情)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;const path = require(&amp;#39;path&amp;#39;);
const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;);
module.exports = &amp;#123;
    entry:&amp;#39;./main.js&amp;#39;,
    output:&amp;#123;
        path:path.resolve(dirname,&amp;#39;dist&amp;#39;),
        filename:bundle.js&amp;#39;,
    &amp;#125;
&amp;#125;,
module:&amp;#123;
    rules:[
    &amp;#123;
        test:/八.css$/,
        use: [
            loader:&amp;#39;style-loader&amp;#39;&amp;#125;,   //先写的loader后执行。
            loader:&amp;#39;css-loader&amp;#39;&amp;#125;
        ]
    &amp;#125;]
  &amp;#125;,
plugins:[
    new BundlesizeWebpackPlugin( &amp;#123; sizeLimit:3 &amp;#125; )  //自己手写的插件（如下）
    new webpack.ProgressPlugin(), //显示打包过程（webpack内置插件）
    new HtmlwebpackPlugin(),
]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;原理-1&#34;&gt;&lt;a href=&#34;#原理-1&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;webpack中plugins原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webpack执行时会将plugins字段中的插件实例取出并将webpack实例传入并执行其&lt;strong&gt;apply方法&lt;/strong&gt;，通过webpack实例的hooks中的方法我们可以操控对应的钩子函数。&lt;/p&gt;
&lt;p&gt;官方的教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb250cmlidXRlL3dyaXRpbmctYS1wbHVnaW4v&#34;&gt;https://webpack.js.org/contribute/writing-a-plugin/&lt;/span&gt;&lt;br&gt;&lt;strong&gt;插件的格式&lt;/strong&gt;&lt;br&gt;一个JavaScript函数或JavaScript类&lt;br&gt;在它原型上定义的apply方法，会在安装插件时被调用，并被webpack compiler调用一次&lt;br&gt;指定一个触及到webpack本身的事件钩子，即hooks,用于特定时机处理额外的逻辑&lt;br&gt;Compiler Hooks列表&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJwYWNrLmlzLm9yZy9hcGkvY29tcGlsZXItaG9va3Mv&#34;&gt;https://webpack.is.org/api/compiler-hooks/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//手写一个webpack插件，打包文件超出限制时，报错。
const &amp;#123; resolve &amp;#125; = require(&amp;#39;path&amp;#39;);
const &amp;#123; statSync &amp;#125; = require(&amp;#39;fs&amp;#39;); //fs模块中同步读取文件信息
class BundlesizeWebpackPlugin &amp;#123;
    constructor(options) &amp;#123;
        this.options = options;
    &amp;#125;
    apply(compiler) &amp;#123;
        //获取到传入的参数
        const &amp;#123; sizeLimit &amp;#125; = this.options;
        compiler.hooks.compile.tap(&amp;#39;BundleSizePlugin&amp;#39;,(compilationParams)=&amp;gt;&amp;#123; //编译时钩子,参数是参数
            console.log(&amp;#39;compile阶段&amp;#39;,compilationParams);
        &amp;#125;)
        compiler.hooks.done.tap(&amp;#39;BundleSizePlugin&amp;#39;,(stats)=&amp;gt;&amp;#123; //结束时钩子，参数是打包后的信息。
            console.log(&amp;#39;done&amp;#39;,stats); 
            //拿到打包后文件的路径和文件名
            const &amp;#123; path , filename &amp;#125; = stats.compilation.outputOptions;
            //拼接成文件路径
            const bundlePath = resolve(path,filename);
            //获取到文件size
            const &amp;#123; size &amp;#125; = statSync(bundlePath);
            const bundleSize = size / 1024;
            if(bundleSize &amp;lt; sizeLimit) &amp;#123;
                console.log(&amp;#39;Safe:Bundle-Size&amp;#39;,bundleSize,&amp;#39;\n Size Limit:&amp;#39;,sizeLimit);
            &amp;#125;else&amp;#123;
                console.error(&amp;#39;Unsafe:Bundle-Size&amp;#39;,bundleSize,&amp;#39;\n Size Limit:&amp;#39;,sizeLimit);
            &amp;#125;
        &amp;#125;) 
    &amp;#125;
&amp;#125;
module.exports = BundlesizeWebpackPlugin;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Loaders关注代码中的单个资源，Plugins关注整体流程，可以接触到webpack构建流程中的&lt;br&gt;各个阶段并劫持做一些代码处理。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;node后端框架&#34;&gt;&lt;a href=&#34;#node后端框架&#34; class=&#34;headerlink&#34; title=&#34;node后端框架&#34;&gt;&lt;/a&gt;node后端框架&lt;/h1&gt;&lt;h2 id=&#34;Node-js后端框架调研&#34;&gt;&lt;a href=&#34;#Node-js后端框架调研&#34; class=&#34;headerlink&#34; title=&#34;Node.js后端框架调研&#34;&gt;&lt;/a&gt;Node.js后端框架调研&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;后端框架应该注意的三大问题&lt;/strong&gt;&lt;br&gt;路由Routes&lt;br&gt;请求Request&lt;br&gt;响应Response&lt;/p&gt;
&lt;h4 id=&#34;Express&#34;&gt;&lt;a href=&#34;#Express&#34; class=&#34;headerlink&#34; title=&#34;Express&#34;&gt;&lt;/a&gt;Express&lt;/h4&gt;&lt;p&gt;官方网址：[https:l&amp;#x2F;expressis.com(https:expressis.com)&lt;br&gt;**安装**&lt;br&gt;官方网址：[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9leHByZXNzaXMuY29tL3poLWNuL3N0YXJ0ZXIvaW5zdGFsbGluZy5odG1sXQ==&#34;&gt;https://expressis.com/zh-cn/starter/installing.html]&lt;/span&gt;(https:l&amp;#x2F;expressjs.com&amp;#x2F;zh-&lt;br&gt;cn&amp;#x2F;starter&amp;#x2F;installing.html)&lt;br&gt;使用生成器安装，可以自动生成一系列的脚手架代码：[https:&amp;#x2F;expressjs.com&amp;#x2F;zh&lt;br&gt;cn&amp;#x2F;starter&amp;#x2F;generator.htmll(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9leHByZXNzaXMuY29tL3poLWNuL3N0YXJ0ZXIvZ2VuZXJhdG9yLmh0bWw=&#34;&gt;https://expressis.com/zh-cn/starter/generator.html&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速简单、易上手&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由响应中，很可能有：从外部请求数据的服务，有验证路由的请求参数，返回特定的格式。&lt;/li&gt;
&lt;li&gt;所有逻辑不分青红皂白的写在一起！很容易产生冗长的难以维护的代码。&lt;/li&gt;
&lt;li&gt;一些大型必备的模块，如第三方服务初始化，安全，日志都没有明确的标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Express中间件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Express是一个基于中间件的框架，其余任务都会在中间件中执行，中间件是一个队列结构，先写入的任务先执行,中间件的写法是：app.use()，当调用中间件时，会向传入的函数中传入req,res和next函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中间件可以完成的任务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行任何代码。&lt;/li&gt;
&lt;li&gt;对请求和响应对象进行更改。&lt;/li&gt;
&lt;li&gt;结束请求&amp;#x2F;响应循环。&lt;/li&gt;
&lt;li&gt;调用堆栈中的下一个中间件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Koa2&#34;&gt;&lt;a href=&#34;#Koa2&#34; class=&#34;headerlink&#34; title=&#34;Koa2&#34;&gt;&lt;/a&gt;Koa2&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;官网地址&lt;/strong&gt;：[https:I&amp;#x2F;koajs.com(https:&amp;#x2F;koajs.com)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Koa2和Express的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Promise(async,await)代替callback (node&amp;gt;v7.6.0)&lt;/li&gt;
&lt;li&gt;使用ctx(上下文对象)封装req(Request)和res(Response),以及一些常用的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完全不同的中间件机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更轻量级，没有捆绑任何中间件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;官方文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL2tvYS9ibG9iL21hc3Rlci9kb2NzL2tvYS12cy1leHByZXNzLm1k&#34;&gt;https://github.com/koajs/koa/blob/naster/docs/koa-vs-express.md&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Koa2中间件：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Koa2中间件，由Express的队列模型（同步）转变为洋葱模型，当程序运行到&lt;code&gt;await next()&lt;/code&gt;的时候就会暂停当前程序，进入下一个中间件，处理完之后才会仔回过头来继续处理。&lt;/li&gt;
&lt;li&gt;Koa2洋葱模型解决的问题就是一个中间件可以调用其他中间件执行后，再继续自己的操作，Express框架中next()执行后就直接到下一个中间件操作，无法退回。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-22_14-30-49.jpg&#34; alt=&#34;Koa2中间件&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const Koa = require(&amp;#39;koa&amp;#39;);
const app = new Koa();
const PORT = 3000;
app.use(async (ctx, next)=&amp;gt;&amp;#123;
    console.log(1)
    await next();
    console.log(1)
&amp;#125;);
app.use(async (ctx, next) =&amp;gt; &amp;#123;
    console.log(2)
    await next();
    console.log(2)
&amp;#125;)
app.use(async (ctx, next) =&amp;gt; &amp;#123;
    console.log(3)
&amp;#125;)
app.listen(PORT);
console.log(`http://localhost:$&amp;#123;PORT&amp;#125;`);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Koa2特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应机制的不同&lt;/li&gt;
&lt;li&gt;Express:我们直接操作的是res对象，直接res.send之后就立即响应了。&lt;/li&gt;
&lt;li&gt;Koa2:数据的响应是通过ctx.body进行设置，注意这里仅是设置并没有立即响应，而是在所有的中间件结束之后做了响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;Koa2在使用上有一定的缺点，因为太过于轻量使得在使用时需要手动处理很多操作，可以使用基于Koa2的上层框架（如：egg.js）&lt;/p&gt;
&lt;h4 id=&#34;egg-js&#34;&gt;&lt;a href=&#34;#egg-js&#34; class=&#34;headerlink&#34; title=&#34;egg.js&#34;&gt;&lt;/a&gt;egg.js&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Express和Koa2的不足&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单而且扩展性强，适合个人的比较小的项目&lt;/li&gt;
&lt;li&gt;没有约定，对于统一维护和开发非常不利&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于后端框架的需求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要有一套优秀的统一的约定或者架构进行开发&lt;/li&gt;
&lt;li&gt;有丰富的扩展机制和可定制性&lt;/li&gt;
&lt;li&gt;Typescript支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;egg.js&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址：[https:l&amp;#x2F;eggis.org&amp;#x2F;zh-cnI(https:l&amp;#x2F;eggjs.org&amp;#x2F;zh-cn) （基于Koa2）&lt;/li&gt;
&lt;li&gt;阿里大厂出品，维护有保障。国内开发者开发，中文文档质量有保证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;约定优于配置，按照一套统一的约定进行应用开发。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个插件只做一件事，高度可扩展的插件机制&lt;/li&gt;
&lt;li&gt;支持Typescript&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;//nodejs版本10以上
npm init egg --type=ts
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;egg.js概念：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Application-全局应用对象，只有一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Context-上下文对象，每次请求生成一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Request-请求对象，来自Koa。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Response-响应对象，来自Koa的一个新的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helper-用来提供一些实用的utility函数。框架内置了几个简单的Helper函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Nest-js&#34;&gt;&lt;a href=&#34;#Nest-js&#34; class=&#34;headerlink&#34; title=&#34;Nest.js&#34;&gt;&lt;/a&gt;Nest.js&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm5lc3Rqcy5jbi8=&#34;&gt;https:&amp;#x2F;docs.nestjs.com&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;内置并且完全支持Typescript&lt;/li&gt;
&lt;li&gt;开箱即用的应用程序架构&lt;/li&gt;
&lt;li&gt;可扩展，松散耦合&lt;/li&gt;
&lt;li&gt;大量采用了装饰器的写法 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm5lc3Rqcy5jbi8xMC9vcGVuYXBpP2lkPSVFOCVBMyU4NSVFOSVBNSVCMCVFNSU5OSVBOA==&#34;&gt;Nest.js装饰器&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vue-config-js&#34;&gt;&lt;a href=&#34;#vue-config-js&#34; class=&#34;headerlink&#34; title=&#34;vue.config.js&#34;&gt;&lt;/a&gt;vue.config.js&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;个性化构建结果-vue.config,js&lt;/strong&gt;&lt;br&gt;在基础的配置上，自定义构建的结果-可以使用vue.config.js&lt;br&gt;文档地址：https:l&amp;#x2F;cli.vuejs.org&amp;#x2F;zh&amp;#x2F;config#vue-config-js&lt;br&gt;简介两个字段&lt;br&gt;*&lt;strong&gt;PublicPath&lt;/strong&gt;-部署应用包时的基本URL,这个配置对应的是webpack的PublicPath属性&lt;br&gt;★&lt;br&gt;默认值为’&amp;#x2F;‘，Vue CLI会假设你的应用是被部署在一个域名的根路径上&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hYmMuY29tLw==&#34;&gt;https://abc.com/&lt;/span&gt;&lt;br&gt;★&lt;br&gt;可以设置为子路径-如果你的应用被部署在https:abc,com&amp;#x2F;sub&amp;#x2F;那么就设置为’&amp;#x2F;sub’&lt;br&gt;*可以设置为CDN路径-在我们的应用中，最后静态资源是要全部上传到CDN的，（脚手&lt;br&gt;架自动完成)，所以这里可以设置为一个cDN域名-‘https:l&amp;#x2F;oss.imooc-Iego.com&amp;#x2F;editor’&lt;br&gt;*还可以设置为绝对路径(‘’或者’.&amp;#x2F;‘)，这样所有的资源都会被链接为相对路径&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;css.loaderOptions&lt;/strong&gt;属性&lt;br&gt;*向CSS相关的loader传递选项&lt;br&gt;*Ant-design-vue的样式变量：https:lww,antd,com docs&amp;#x2F;vue&amp;#x2F;customize-theme-cn&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Z1ZUNvbXBvbmVudC9hbnQtZGVzaWduLQ==&#34;&gt;https://github.com/vueComponent/ant-design-&lt;/span&gt;&lt;br&gt;yue&amp;#x2F;blob&amp;#x2F;master&amp;#x2F;components&amp;#x2F;style&amp;#x2F;themes&amp;#x2F;default.less&lt;br&gt;*添加更多的CSS预处理器：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2Nzcy5odG1sIyVFOSVBMiU4NCVFNSVBNCU4NCVFNyU5MCU4NiVFNSU5OSVBOA==&#34;&gt;https://cli.vuejs.org/zh/guide/css.html#%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8&lt;/span&gt;&lt;br&gt;*特别注意less和Iess-loader的版本问题。不要装最新的，建议选用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//vue.config.js配置：
const isstaging = !process.env.VUE_APP_STAGINE
const isProduction = process.env.NODE_ENV &amp;#39;production&amp;#39;
module.exports = &amp;#123;
    /生产环境要使用0SS地址
    /其他环境都使用绝对路径
    publicPath:(isProduction 6 !isStaging)&amp;#39;https://oss.imooc-lego.com/
    css:&amp;#123;
        loaderOptions:&amp;#123;
        less:&amp;#123;
            lessoptions:&amp;#123;
                modifyVars:&amp;#123;
                   &amp;#39;primary-color&amp;#39;:&amp;#39;#3E7FFF&amp;#39;,
                &amp;#125;，
                javascriptEnabled:true
            &amp;#125;
        &amp;#125;,
    configureWebpack: config =&amp;gt; &amp;#123;
        config.plugins.push(
            new webpack.IgnorePlugin(&amp;#123;        //打包时忽略对应的文件
                resourceRegExp: /^\.\/locale$/,
                contextRegExp: /moment$/,
            &amp;#125;)
        )
        if(isAnalyzeMode)&amp;#123;
            config.plugins.push(
                new BundleAnalyzerPlugin(&amp;#123;    //添加打包后的文件分析工具（BundleAnalyzerPlugin）
                    analyzerMode : &amp;#39;static&amp;#39;,
                &amp;#125;)
            )
        &amp;#125;
    &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;项目构建优化&#34;&gt;&lt;a href=&#34;#项目构建优化&#34; class=&#34;headerlink&#34; title=&#34;项目构建优化&#34;&gt;&lt;/a&gt;项目构建优化&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;好用的webpack插件:webpack-bundle-analyzer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可视化webpack打包后的工具包大小，便于分析依赖和进行项目优化。如上vue.config.js中配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根据图表的优化步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、看看有没有什么重复的模块，或者没有用的模块被打包到了最终的代码中&lt;br&gt;二、看看package.json,对比一下是否有应该在devDeps的模块，被错误的放置到了deps当中&lt;br&gt;三、检查是否有重复加载的模块，或者是功能大体相同的模块。&lt;br&gt;比如：使用&lt;strong&gt;es&lt;/strong&gt;版本的第三方库，享受tree-shaking的红利。&lt;br&gt;四、检查是否有没有用的模块是否打包到了最终的文件中，通过如下插件忽略对应的文件，从而tree-shaking掉忽略的文件（如国际化需要的各种语言包）,详细配置如上vue.config.js中。&lt;/p&gt;
&lt;p&gt;*webpack ignore plugin &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZ2xwbHVnaW5zL2lnbm9yZS1wbHVnaW4vI3Jvb3Q=&#34;&gt;https://webpack.js.orglplugins/ignore-plugin/#root&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将三方库中全部导入更换为按需导入&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123;Input,Dropdown,Slider,Select&amp;#125; from &amp;#39;Antd-vue&amp;#39;;
const components = [Input,Dropdown,Slider,Select];
const install = (app) =&amp;gt; &amp;#123;
    components.forEach(item=&amp;gt;&amp;#123;
        app.component(item.name,item);
    &amp;#125;)
&amp;#125;
export default&amp;#123; install &amp;#125;;
// 在main.js中导入，然后app.use
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;浏览器缓存优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、项目即使是上线之后也会在后续追加或修改代码，如果分包较少重新上线后就不能使用浏览器缓存的文件，当分包数量较多时，就可以充分利用浏览器缓存。&lt;/p&gt;
&lt;p&gt;二、分包较多时可以使用浏览器支持平行加载多个文件的特性。（HTTP1对同一域名并行请求的个数进行了限制，HTTP2完全突破了这个限制）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动分割第三方库为多个文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webpack的config.optimization中自带一些优化的配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimize：压缩&lt;/li&gt;
&lt;li&gt;splitChunks：分包（可以配置minSize等）&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//vue.config.js配置：
module.exports = &amp;#123;
    // ....省略
    configureWebpack: config =&amp;gt; &amp;#123;
        config.optimization.splitChunks = &amp;#123;
            maxInitialRequests: Infinity,
            minSize: 300 * 1024,
            chunks: &amp;#39;all&amp;#39;,
            cacheGroups: &amp;#123;
                antVendor: &amp;#123;
                    name: &amp;#39;ant-design-vue&amp;#39;,
                    test: /[\\/]node_modules[\\/](ant-design-vue)[\\/]/,
                &amp;#125;,
                canvasVendor: &amp;#123;
                    name: &amp;#39;html2canvas,
                    test: /[\\/]node_modules[\\/](html2canvas)[\\/]/,
                &amp;#125;,
                vendor: &amp;#123;
                    name: &amp;#39;vendor&amp;#39;,
                    test: /[\\/]node_modules[\\/](!html2canvas)(!ant-design-vue)[\\/]/
                &amp;#125;,
                all &amp;#123;
                    test: /[\\/]node_modules[\\/]/, //匹配全部的node_modules中的文件
                    name (module) &amp;#123; const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)
                    return `npm.$&amp;#123;packageName.replace(&amp;#39;@&amp;#39;,&amp;#39;&amp;#39;)&amp;#125;`
                &amp;#125;,
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;项目运行优化&#34;&gt;&lt;a href=&#34;#项目运行优化&#34; class=&#34;headerlink&#34; title=&#34;项目运行优化&#34;&gt;&lt;/a&gt;项目运行优化&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;路由懒加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用import函数动态加载，配合魔法注释可以和webpack中的bundler相配合使用，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import(/* webpackChunkName: &amp;quot;my-lodash&amp;quot; */ &amp;#39;lodash&amp;#39;).then(lodash=&amp;gt;&amp;#123;
     // ....
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;改变HTML标题，增强SEO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中动态添加标题的原理：使用HtmlWebpackPlugin插件，插入动态js语句进行占位，然后通过项目中package.json中的name进行替换。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//vue.config.js配置：
module.exports = &amp;#123;
    // ....省略
   chainWebpack: config =&amp;gt; &amp;#123;
       config.plugin(&amp;#39;html&amp;#39;).tap(args=&amp;gt;&amp;#123;
           args[0].title = &amp;#39;网站标题&amp;#39;,
           args[0].desc = &amp;#39;网站详情描述&amp;#39;
           return args;
       &amp;#125;)
   &amp;#125;
&amp;#125;
//记得添加 &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;&amp;lt;%= htmlWebpackPlugin.options.desc %&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;同构渲染方式&lt;/strong&gt;&lt;br&gt;服务端渲染和客户端渲染的区别就在于在哪里完成html完整文件的拼接：&lt;/p&gt;
&lt;h3 id=&#34;客户端渲染&#34;&gt;&lt;a href=&#34;#客户端渲染&#34; class=&#34;headerlink&#34; title=&#34;客户端渲染&#34;&gt;&lt;/a&gt;客户端渲染&lt;/h3&gt;&lt;p&gt;客户端渲染由客户端完成html文件的拼接，服务端只负责提供数据。&lt;br&gt;优势：首屏加载快&lt;br&gt;劣势：不利于SEO&lt;/p&gt;
&lt;h3 id=&#34;服务端渲染&#34;&gt;&lt;a href=&#34;#服务端渲染&#34; class=&#34;headerlink&#34; title=&#34;服务端渲染&#34;&gt;&lt;/a&gt;服务端渲染&lt;/h3&gt;&lt;p&gt;服务端渲染由服务端完成html文件的凭借，客户端直接渲染即可&lt;br&gt;优势：利于SEO，&lt;br&gt;劣势：白屏问题（获取html文件较慢）,服务端压力大，占用CPU资源。&lt;/p&gt;
&lt;h3 id=&#34;同构渲染&#34;&gt;&lt;a href=&#34;#同构渲染&#34; class=&#34;headerlink&#34; title=&#34;同构渲染&#34;&gt;&lt;/a&gt;同构渲染&lt;/h3&gt;&lt;p&gt;服务端先通过服务端渲染，生成html以及初始化数据，客户端拿到代码和初始化数据，在客户端进行激活渲染。&lt;br&gt;优势：兼容了前端渲染的大部分优点（节省服务端资源、多终端适配渲染、局部刷新等），同时也具有服务端渲染首屏加载快，SEO支持好的特点。&lt;br&gt;劣势：服务端必须是要js支持的语言，增加了整个系统的复杂度和维护成本。&lt;/p&gt;
&lt;h3 id=&#34;SSG预渲染&#34;&gt;&lt;a href=&#34;#SSG预渲染&#34; class=&#34;headerlink&#34; title=&#34;SSG预渲染&#34;&gt;&lt;/a&gt;SSG预渲染&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;静态站点生成&lt;/strong&gt; (Static-Site Generation，缩写为 SSG)，也被称为预渲染，是另一种流行的构建快速网站的技术。如果用服务端渲染一个页面所需的数据对每个用户来说都是相同的，那就可以只渲染一次，提前在构建过程中完成，而不是每次请求进来都重新渲染页面。预渲染的页面生成后作为静态 HTML 文件被服务器托管。&lt;/p&gt;
&lt;p&gt;SSG 保留了和 SSR 应用相同的性能表现：它带来了优秀的首屏加载性能。同时，它比 SSR 应用的花销更小，也更容易部署，因为它输出的是静态 HTML 和资源文件。这里的关键词是&lt;strong&gt;静态&lt;/strong&gt;：SSG 仅可以用于消费静态数据的页面，即数据在构建期间就是已知的，并且在多次部署期间不会改变。每当数据变化时，都需要重新部署。&lt;/p&gt;
&lt;p&gt;如果你调研 SSR 只是为了优化为数不多的营销页面的 SEO (例如 &amp;#x2F;、&amp;#x2F;about 和 &amp;#x2F;contact 等)，那么你可能需要 SSG 而不是 SSR。SSG 也非常适合构建基于内容的网站，比如文档站点或者博客。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vdml0ZXByZXNzLmRldi8=&#34;&gt;VitePress&lt;/span&gt; 就是一个由 Vite 和 Vue 驱动的静态站点生成器。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS1wbHVnaW4tdnVlL2Jsb2IvbWFpbi9wbGF5Z3JvdW5kL3Nzci12dWUvcHJlcmVuZGVyLmpz&#34;&gt;Vite脚手架渲染SSG代码示例&lt;/span&gt;。&lt;/p&gt;
&lt;h1 id=&#34;部署与HTTP优化&#34;&gt;&lt;a href=&#34;#部署与HTTP优化&#34; class=&#34;headerlink&#34; title=&#34;部署与HTTP优化&#34;&gt;&lt;/a&gt;部署与HTTP优化&lt;/h1&gt;&lt;h3 id=&#34;部署&#34;&gt;&lt;a href=&#34;#部署&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;&lt;strong&gt;部署&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前端部署：https:llci,uejs,org&amp;#x2F;zh&amp;#x2F;guide&amp;#x2F;deployment.html&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原理就是：将构建生成的产物直接烤贝到任何的静态文件服务器当中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后端部署：https:&amp;#x2F;eggis.org&amp;#x2F;zh-cn&amp;#x2F;core&amp;#x2F;deployment.html&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几乎没有构建过程：除非你用了typescript等需要编译的语言。&lt;/p&gt;
&lt;p&gt;方案一：直接将本地的源代码打个压缩包拷贝到目标服务器，然后启动服务器。&lt;/p&gt;
&lt;p&gt;方案二：在服务器中直接pu川源代码，install,.然后启动服务器。&lt;/p&gt;
&lt;h3 id=&#34;Nginx-反向代理&#34;&gt;&lt;a href=&#34;#Nginx-反向代理&#34; class=&#34;headerlink&#34; title=&#34;Nginx:反向代理&#34;&gt;&lt;/a&gt;&lt;strong&gt;Nginx:反向代理&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;作为服务器软件，它的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特别适合前后端分离的项目&lt;/li&gt;
&lt;li&gt;保证安全&lt;/li&gt;
&lt;li&gt;非常快&lt;/li&gt;
&lt;li&gt;支持负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装nginx&lt;/li&gt;
&lt;li&gt;nginx    命令启动服务器&lt;/li&gt;
&lt;li&gt;nginx -s stop    命令关闭服务器&lt;/li&gt;
&lt;li&gt;nginx -v      命令查看配置信息&lt;/li&gt;
&lt;li&gt;nginx -s reload      命令重启服务&lt;/li&gt;
&lt;li&gt;配置nginx.conf文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;HTTP缓存&#34;&gt;&lt;a href=&#34;#HTTP缓存&#34; class=&#34;headerlink&#34; title=&#34;HTTP缓存&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP缓存&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;（若服务器使用nginx，则在nginx.conf中配置）&lt;/p&gt;
&lt;p&gt;Expires &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0V4cGlyZXM=&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires&lt;/span&gt;&lt;br&gt;&lt;strong&gt;Expires响应头包含日期&amp;#x2F;时间，即在此时候之后，响应过期&lt;/strong&gt;&lt;br&gt;使用nginx添加对应的响应头：expires指令&lt;br&gt;文档地址：http:l&amp;#x2F;nginx.org&amp;#x2F;en&amp;#x2F;docs&amp;#x2F;http&amp;#x2F;ngx http headers module.html&lt;/p&gt;
&lt;p&gt;但是由于客户端时间和用户端时间并不总是相同的，于是有了Cache-Control：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;:通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。&lt;br&gt;文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIv&#34;&gt;https://developer&lt;/span&gt; mozilla.org&amp;#x2F;zh-CN&amp;#x2F;docs&amp;#x2F;Web&amp;#x2F;HTTP&amp;#x2F;Headers&amp;#x2F;Cache-Control&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;Etag&lt;/strong&gt;:ETagHTTP响应头是资源的特定版本的标识符。这可以让缓存更高效，并节省带宽&lt;br&gt;因为如果内容没有改变，Wb服务器不需要发送完整的响应，直接返回304表示可以使用缓存文件。&lt;br&gt;*文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0VUYWc=&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag&lt;/span&gt;&lt;br&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;:是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。&lt;br&gt;文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0xhc3QtTW9kaWZpZWQ=&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified&lt;/span&gt;&lt;br&gt;nginx Etag:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25naW54Lm9yZy9lbi9kb2NzL2h0dHAvbmd4X2h0dHBfY29yZV9tb2R1bGUuaHRtbCNldGFn&#34;&gt;http://nginx.org/en/docs/http/ngx_http_core_module.html#etag&lt;/span&gt;&lt;br&gt;304 Not Modified &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSElUUC9TdGF0dXMvMzA0&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HITP/Status/304&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;浏览器使用缓存：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/image.png&#34; alt=&#34;/images/image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;压缩算法&#34;&gt;&lt;a href=&#34;#压缩算法&#34; class=&#34;headerlink&#34; title=&#34;压缩算法&#34;&gt;&lt;/a&gt;压缩算法&lt;/h3&gt;&lt;p&gt;压缩比对照表&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWl4ZGIuZ2l0aHViLmlvL3NxdWFzaC1iZW5jaG1hcmsvI3JhdGlvLXZzLWNvbXByZXNzaW9u&#34;&gt;https://quixdb.github.io/squash-benchmark/#ratio-vs-compression&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;gzip&#34;&gt;&lt;a href=&#34;#gzip&#34; class=&#34;headerlink&#34; title=&#34;gzip&#34;&gt;&lt;/a&gt;gzip&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一、动态压缩（服务器在返回静态文件之前，由服务器对每个请求压缩后再进行输出）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;nginx中启用gzip：在nginx.conf中配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gzip  on;        开启gzip&lt;/li&gt;
&lt;li&gt;gzip_types     text&amp;#x2F;plain  application&amp;#x2F;javascript              设置那些文件需要压缩&lt;/li&gt;
&lt;li&gt;gzip_min_length   1k;         小于设置值不会压缩&lt;/li&gt;
&lt;li&gt;gzip_comp_level     1;          压缩级别&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;二、静态压缩（服务器直接使用压缩文件进行输出）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成压缩文件（gzip命令或使用webpack插件 compression-webpack-plugin）&lt;/li&gt;
&lt;li&gt;在ngin×开启支持静态压缩的模块（例如gzip_static  :  on）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Brotli&#34;&gt;&lt;a href=&#34;#Brotli&#34; class=&#34;headerlink&#34; title=&#34;Brotli&#34;&gt;&lt;/a&gt;Brotli&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一、动态压缩（服务器在返回静态文件之前，由服务器对每个请求压缩后再进行输出）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用前提&lt;/strong&gt;&lt;br&gt;浏览器支持：https:caniuse.com&amp;#x2F;brotli&lt;br&gt;&lt;strong&gt;HTTPS协议&lt;/strong&gt;&lt;br&gt;NGINX对应的模块：https:&amp;#x2F;github.com&amp;#x2F;google&amp;#x2F;nginx&amp;#x2F;brotli&lt;/p&gt;
&lt;p&gt;nginx中启用Brotli：在nginx.conf中配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brotli  on;        开启Brotli&lt;/li&gt;
&lt;li&gt;brotli_types     text&amp;#x2F;plain  application&amp;#x2F;javascript              设置那些文件需要压缩&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;二、静态压缩（服务器直接使用压缩文件进行输出 ,如上。）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;HTTP优化&#34;&gt;&lt;a href=&#34;#HTTP优化&#34; class=&#34;headerlink&#34; title=&#34;HTTP优化&#34;&gt;&lt;/a&gt;HTTP优化&lt;/h3&gt;&lt;p&gt;HTTP是建立在TCP协议之上，所以&lt;strong&gt;HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性&lt;/strong&gt;，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的延迟时间。所以减少这些重新握手和至关重要。&lt;/p&gt;
&lt;h4 id=&#34;keepAlive属性&#34;&gt;&lt;a href=&#34;#keepAlive属性&#34; class=&#34;headerlink&#34; title=&#34;keepAlive属性&#34;&gt;&lt;/a&gt;keepAlive属性&lt;/h4&gt;&lt;p&gt;keepAlive属性可以保持服务器端和客户端建立的会话连接，开启之后除首次建立连接外的其他请求不会进行&lt;strong&gt;DNS Lookup&lt;/strong&gt;（NDS域名解析）和&lt;strong&gt;Initial connection&lt;/strong&gt;（三报文握手建立连接），可以在服务端文件中进行配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KeepAlive的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP连接更少，I这样就会节约TCP连接在建立、释放过程中，主机和路由器上的CPU和内存开销。&lt;/li&gt;
&lt;li&gt;网络拥塞也减少了，拿到响应的延时也减少了&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;HTTP2&#34;&gt;&lt;a href=&#34;#HTTP2&#34; class=&#34;headerlink&#34; title=&#34;HTTP2&#34;&gt;&lt;/a&gt;HTTP2&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;使用HTTP&amp;#x2F;2提升性能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2010年SPDY &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TUERZJUU2JUJDJTk0JUU1JThDJTk2JUU1JTg4JUIw&#34;&gt;https://baike.baidu.com/item/SPDY演化到&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;2015 HTTP&amp;#x2F;2 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9IVFRQXzI=&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP_2&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要浏览器支持-https:&amp;#x2F;caniuse.com&amp;#x2F;http2&lt;/p&gt;
&lt;p&gt;需要HTTPS协议支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、二进制协议：&lt;/p&gt;
&lt;p&gt;HTTP2由原来的文本请求（报文）转变为二进制请求帧，加快传输&lt;/p&gt;
&lt;p&gt;二、多路复用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP2多路复用解决了浏览器同一域名并行请求数量的限制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在HTTP&amp;#x2F;2中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟开一个TCP连接都需要慢慢提升传输速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同个域名只需要占用一个TCP连接&lt;/strong&gt;，使用一个连接并行发送多个请求和响应，&lt;strong&gt;消除了因多个TCP连接而带来的延时和内存消耗&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;三、Header压缩复用&lt;/p&gt;
&lt;p&gt;TTP&amp;#x2F;2在客户端和服务器端使用“&lt;strong&gt;首部表&lt;/strong&gt;”来跟踪和存储之前发送的键一值对，对于相同的数据，不再通过每次请求和响应发送。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置HTTP2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依nginx为例：在server字段的listen字段添加：listen   443   ssl   http2; &lt;/p&gt;
&lt;h1 id=&#34;Mongodb数据库&#34;&gt;&lt;a href=&#34;#Mongodb数据库&#34; class=&#34;headerlink&#34; title=&#34;Mongodb数据库&#34;&gt;&lt;/a&gt;Mongodb数据库&lt;/h1&gt;&lt;h3 id=&#34;基本操作&#34;&gt;&lt;a href=&#34;#基本操作&#34; class=&#34;headerlink&#34; title=&#34;基本操作&#34;&gt;&lt;/a&gt;&lt;strong&gt;基本操作&lt;/strong&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// 导入Mongodb客户端构造函数
import &amp;#123; MongoClient,ObjectId, &amp;#125; from &amp;quot;mongodb&amp;quot;;
// 创建mongo实例(传入url)
const client = new MongoClient(&amp;#39;mongodb://localhost:27017/&amp;#39;);
// 执行函数，连接mongodb数据库
async function run() &amp;#123;
  try &amp;#123;
    await client.connect(); //等待实例连接
    const db = client.db(&amp;#39;hello&amp;#39;); //创建数据库
    const res = await db.command(&amp;#123; ping: 1 &amp;#125;); //ping命令
    console.log(&amp;#39;connected&amp;#39;, res);
    const userCollection = db.collection(&amp;#39;user&amp;#39;);//创建集合表
// 数据的插入
    // const result = await userCollection.insertOne(&amp;#123;name:&amp;quot;张三&amp;quot;,age:18&amp;#125;)
    // const results = await userCollection.insertMany([&amp;#123;name:&amp;quot;李四&amp;quot;,age:12&amp;#125;,&amp;#123;name:&amp;quot;王五&amp;quot;,age:13&amp;#125;]);
    // console.log(result,results); //返回影响的信息，id等
//数据的查找
    const result = await userCollection.findOne(&amp;#123;name:&amp;#39;张三&amp;#39;&amp;#125;);
    console.log(result);
    const resultCursor =  userCollection.find(); //find返回的是指针对象，不是结果
    //将游标变为数组结果
    const results = await userCollection.find().toArray();
    // console.log(results);
//比较操作符 $lt小于 $gt大于
    const results2 = await userCollection.find(&amp;#123;age:&amp;#123;$lt:16&amp;#125;&amp;#125;).toArray();
    // console.log(results2);
//逻辑操作符 $or
    const results3 = await userCollection.find(&amp;#123;$or:[&amp;#123;age:&amp;#123;$gt:12&amp;#125;&amp;#125;,&amp;#123;name:&amp;quot;王五&amp;quot;&amp;#125;]&amp;#125;).toArray();
    // console.log(results3);
//元素操作符  $exists存在与否  $type指定类型
    const results4 = await userCollection.find(&amp;#123;age:&amp;#123;$type:&amp;#39;number&amp;#39;&amp;#125;&amp;#125;).toArray();
    // console.log(results4);
//limit  第二个参数传入options配置（projection表示包含字段哪些字段）
    const result5 = await userCollection.find(&amp;#123;age:&amp;#123;$type:&amp;#39;number&amp;#39;&amp;#125;&amp;#125;,&amp;#123;limit:2,skip:3,sort:&amp;#123;age:-1&amp;#125;,projection:&amp;#123;name:0&amp;#125;&amp;#125;).toArray();
    // console.log(result5);
//更新替换数据   update更新数据  replaceOne替换数据 ,修改操作要传具体更新操作符：
//普通更新操作符： $set设置值 $inc增加 $rename重命名 $unset删除 
//数组更新操作符： $push数组字段添加 $pop删除 $all包含 $regex正则  .属性符 .$属性占位符
    const result6 = await userCollection.replaceOne(&amp;#123;name:&amp;quot;张三&amp;quot;&amp;#125;,&amp;#123;name:&amp;quot;Lebrown&amp;quot;&amp;#125;);
    const result7 = await userCollection.updateOne(&amp;#123;_id:new ObjectId(&amp;#39;6628b9876bac632e95ead1bb&amp;#39;)&amp;#125;,&amp;#123;$set:&amp;#123;name:&amp;quot;updateOne&amp;quot;&amp;#125;,$inc:&amp;#123;age:10&amp;#125;&amp;#125;);
    const result8 = await userCollection.updateOne(&amp;#123;_id: new ObjectId(&amp;#39;6628b9876bac632e95ead1bb&amp;#39;)&amp;#125;,&amp;#123;$set:&amp;#123;&amp;quot;hobbies.0&amp;quot;:&amp;quot;golf&amp;quot;&amp;#125;&amp;#125;)
    const result9 = await userCollection.updateOne(&amp;#123;_id: new ObjectId(&amp;#39;6628b9876bac632e95ead1bb&amp;#39;),hobbies:&amp;#39;glof&amp;#39;&amp;#125;,&amp;#123;$set:&amp;#123;&amp;quot;hobbies.$&amp;quot;:&amp;quot;golf-new&amp;quot;&amp;#125;&amp;#125;)
    // console.log(result8);//返回影响信息
//删除数据：deleteOne(filter) 和deleteMany
  &amp;#125; catch (e) &amp;#123;
    console.error(e);
  &amp;#125; finally &amp;#123;
    await client.close();
  &amp;#125;
&amp;#125;
run();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mongodb高级&#34;&gt;&lt;a href=&#34;#mongodb高级&#34; class=&#34;headerlink&#34; title=&#34;mongodb高级&#34;&gt;&lt;/a&gt;&lt;strong&gt;mongodb高级&lt;/strong&gt;&lt;/h3&gt;&lt;h5 id=&#34;索引&#34;&gt;&lt;a href=&#34;#索引&#34; class=&#34;headerlink&#34; title=&#34;索引&#34;&gt;&lt;/a&gt;索引&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;MongoDB索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引(Index)&lt;strong&gt;为了提高查询效率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;MongoDB的文件类型：&lt;strong&gt;BSON&lt;/strong&gt;,Binary JSON,主要被用作MongoDB数据库中的数据存储和网络传输格式。&lt;/li&gt;
&lt;li&gt;假如没有索引，必须扫描这个巨大BSON对象集合中的每个文档并选取那些符合查询条件的记录，这样是低效的。&lt;/li&gt;
&lt;li&gt;索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中。&lt;/li&gt;
&lt;li&gt;为某个字段创建索引之后查找速度非常快，ObjectId是自带的索引（ _ id _ ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;创建索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建索引可以直接用Navicate等工具，也可以代码中使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//......省略
//给name字段创建索引之前耗时很大，创建之后耗时很小
const indexResult = await userCollection.find(&amp;#123;name:&amp;quot;James&amp;quot;&amp;#125;).explain();
console.log(indexResult);
//创建索引，属性表示字段，值表示升序降序
const result = await userCollection.createIndex(&amp;#123;name:1&amp;#125;) //1表示升序
//取消索引
const result1 = await userCollection.dropIndex(&amp;quot;name_1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;聚合&#34;&gt;&lt;a href=&#34;#聚合&#34; class=&#34;headerlink&#34; title=&#34;聚合&#34;&gt;&lt;/a&gt;聚合&lt;/h5&gt;&lt;p&gt;聚合操作将来自多个文档的值组合在一起，并且可以对分组数据执行各种操作以返回相应的结果。&lt;br&gt;&lt;strong&gt;linux常用的管道写法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ps aux | grep mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;聚合常用的操作符：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$group将collection中的document:分组，可用于统计结果&lt;/li&gt;
&lt;li&gt;$natch过滤数据，只输出符合结果的文档&lt;/li&gt;
&lt;li&gt;$project修改输入文档的结构（例如重命名，增加、删除字段，创建结算结果等）&lt;/li&gt;
&lt;li&gt;$sot将结果进行排序后输出&lt;/li&gt;
&lt;li&gt;$imit限制管道输出的结果个数&lt;/li&gt;
&lt;li&gt;$skp跳过制定数量的结果，并且返回剩下的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;表达式操作符：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$sum计算总和，{$sum:1}表示返回总和×1的值（即总和的数量），使用{$sum:’$制定字段’}也能直接获取制定字段的值的总和&lt;/li&gt;
&lt;li&gt;$avg求平均值&lt;/li&gt;
&lt;li&gt;$min求min值&lt;/li&gt;
&lt;li&gt;$max求max值&lt;/li&gt;
&lt;li&gt;$push将结果文档中插入值到一个数组中&lt;/li&gt;
&lt;li&gt;$frst根据文档的排序获取第一个文档数据&lt;/li&gt;
&lt;li&gt;$last同理，获取最后一个数据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//.....
const pipeLine = [
    &amp;#123; $match : &amp;#123; age : &amp;#123; $gt : 30 &amp;#125;&amp;#125;&amp;#125;,
    &amp;#123; $group : &amp;#123; _id : &amp;quot;$steam&amp;quot; , total : &amp;#123; $sum : &amp;quot;$age&amp;quot; &amp;#125; , count : &amp;#123; $sum : 1 &amp;#125;&amp;#125;&amp;#125;,
    &amp;#123; $sort : &amp;#123; total : 1 &amp;#125;&amp;#125;
]
cosnt result = await userCollection.aggregate(pipeLine).toArray();
//....
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;多表联查&#34;&gt;&lt;a href=&#34;#多表联查&#34; class=&#34;headerlink&#34; title=&#34;多表联查&#34;&gt;&lt;/a&gt;多表联查&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;普通方式使用多表联查需要两次查询&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// 导入Mongodb客户端构造函数
import &amp;#123; MongoClient,ObjectId, &amp;#125; from &amp;quot;mongodb&amp;quot;;
// 创建mongo实例(传入url)
const client = new MongoClient(&amp;#39;mongodb://localhost:27017/&amp;#39;);
// 执行函数，连接mongodb数据库
async function run() &amp;#123;
  try &amp;#123;
    await client.connect(); //等待实例连接
    const db = client.db(&amp;#39;hello&amp;#39;); //创建数据库
    const res = await db.command(&amp;#123; ping: 1 &amp;#125;); //ping命令
    console.log(&amp;#39;connected&amp;#39;, res);
//获取表
     const teamCollection = db.collection(&amp;#39;team&amp;#39;);
     const playerCollection = db.collection(&amp;#39;player&amp;#39;);
     const netsTeam = await teamCollection.findOne(&amp;#123;team:&amp;quot;NETS&amp;quot;&amp;#125;);
     const netsPlayers = await playerCollection.find(&amp;#123;team:netsTeam._id&amp;#125;).toArray();
  &amp;#125; catch (e) &amp;#123;
    console.error(e);
  &amp;#125; finally &amp;#123;
    await client.close();
  &amp;#125;
&amp;#125;
run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用聚合中$lookup进行多表联查只需要一次查询：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//...
const pipeLine2 = [
    &amp;#123;
        $match : &amp;#123; team : &amp;#123; $exists : true &amp;#125; &amp;#125;
    &amp;#125;,
    &amp;#123;
        $lookup : &amp;#123;
            from : &amp;quot;team&amp;quot;,
            localField : &amp;quot;team&amp;quot;,
            foreignField : &amp;quot;_id&amp;quot;,
            as : &amp;quot;team&amp;quot;
        &amp;#125;
    &amp;#125;
] 
const playerWithTeam = await playerCollection.aggregate(pipeLine2).toArray();
console.log(playerWithTeam);
//...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据库设计&#34;&gt;&lt;a href=&#34;#数据库设计&#34; class=&#34;headerlink&#34; title=&#34;数据库设计&#34;&gt;&lt;/a&gt;数据库设计&lt;/h3&gt;&lt;p&gt;&lt;em&gt;MongoDB最佳设计实践：&lt;/em&gt;[https:l&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tb25nb2RiLmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS9tb25nb2RiLXNjaGVtYS1kZXNpZ24tYmVzdC1wcmFjdGljZXMvXQ==&#34;&gt;www.mongodb.Com/developer/article/mongodb-schema-design-best-practices/]&lt;/span&gt;(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZGV2ZWxvcGVyL2FydGljbGUvbW9uZ29kYi0=&#34;&gt;https://www.mongodb.com/developer/article/mongodb-&lt;/span&gt;&lt;br&gt;schema-design-best-practices&amp;#x2F;)&lt;/p&gt;
&lt;p&gt;  关键问题：数据产生关系的时候，选择内嵌还是引用？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内嵌模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要一次查询就可以查询所有的信息。&lt;/li&gt;
&lt;li&gt;避免多集合查询。&lt;/li&gt;
&lt;li&gt;只需要一个操作就可以更新多个信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;劣势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个文档太大，查询可能更耗时，获得的无关信息概率增大。&lt;/li&gt;
&lt;li&gt;针对每个文档，MongoDB有一个16M的最大限制，内嵌太多，可能超过这个限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;引用模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据分散到不同文档，数据量会变小。&lt;/li&gt;
&lt;li&gt;不太会超过16M最大限制。&lt;/li&gt;
&lt;li&gt;每次查询取得不必要数据的慨率降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;劣势：需要多次查询才能获得最终数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最佳设计实践：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一对几个：推荐使用内嵌形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一对很多：推荐使用引用形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子集合中使用一个字段保存父集合的_id   ； 或者：&lt;/li&gt;
&lt;li&gt;父集合中使用一个数组保存子集合的_id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一对亿万：只能子集合中使用一个字段保存父集合的_id&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问权限管理&#34;&gt;&lt;a href=&#34;#访问权限管理&#34; class=&#34;headerlink&#34; title=&#34;访问权限管理&#34;&gt;&lt;/a&gt;&lt;strong&gt;访问权限管理&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;授权文档&lt;/strong&gt;：https:&amp;#x2F;docs.mongodb.com&amp;#x2F;manual&amp;#x2F;core&amp;#x2F;authentication&amp;#x2F;&lt;br&gt;&lt;strong&gt;内置的Roles&lt;/strong&gt;：https:&amp;#x2F;docs.mongodb.com&amp;#x2F;manual&amp;#x2F;reference&amp;#x2F;built-in-roles&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在mongo命令行中输入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;show dbs
use admin
# mongodb基于RBAC进行权限管理，设置roles可以设置相应的全选，见上。
db.createUser(&amp;#123; user : &amp;#39;root&amp;#39; , pwd : &amp;#39;123456&amp;#39; , roles : [&amp;#39;root&amp;#39;] &amp;#125;) 
db.auth(&amp;#39;root&amp;#39;,&amp;#39;123456&amp;#39;)
# --auth 开启数据库的权限验证，也可以直接在mongo.conf中配置（先终止运行mongod）
mongod --config /usr/local/etc/mongo.conf --auth
# 操作配置了权限管理的数据库
mongo -u &amp;quot;root&amp;quot; -p &amp;quot;123456&amp;quot; --authenticationDatabase &amp;quot;admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;初始化一个新数据库以后期望的步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建admin级谜别的root用户&amp;#x2F;roles:root&lt;/li&gt;
&lt;li&gt;创建对应的数据库lego&lt;/li&gt;
&lt;li&gt;创建该数据库的管理员dmq&amp;#x2F;roles:readWrite&lt;/li&gt;
&lt;li&gt;代码中，使用管理员dmq的用户名密码链接数据库并且完成操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show dbs
use lego
db.createUser(&amp;#123; user : &amp;quot;dmq&amp;quot; , pwd : &amp;#39;123456&amp;#39; , roles : [&amp;#123; role : &amp;quot;readWrite&amp;quot; , db : &amp;quot;lego&amp;quot; &amp;#125;]&amp;#125;)
# 重启服务：mongod --config /usr/local/etc/mongo.conf --auth
# 这样在mongodb的配置文件中设置用户信息，就保证只能读取数据库信息，保证了数据库的安全。（如果用户信息来自admin数据库就需要配置authSource:&amp;#39;admin&amp;#39;。）
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Mongoose&#34;&gt;&lt;a href=&#34;#Mongoose&#34; class=&#34;headerlink&#34; title=&#34;Mongoose&#34;&gt;&lt;/a&gt;Mongoose&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;出现的原因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用原生的mongoDB nodejs driver数据结构及其操作过于灵活，类似于ORM：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongoose：&lt;/strong&gt;（mongoose之于mongodb类似于ts之于js，都是在原有的基础之上加一层抽象层，进行类型定义等操作）&lt;/p&gt;
&lt;p&gt;mongoose：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb25nb29zZWlzLmNvbS8=&#34;&gt;https://mongooseis.com/&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立在native mongoDB nodejs driver之上&lt;/li&gt;
&lt;li&gt;提出Modl,数据模型的概念，用来约束集合中的数据结构&lt;/li&gt;
&lt;li&gt;非常多扩展的内容&lt;/li&gt;
&lt;li&gt;它是一个ODM(Object Document Mapping)工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ORM&#34;&gt;&lt;a href=&#34;#ORM&#34; class=&#34;headerlink&#34; title=&#34;ORM&#34;&gt;&lt;/a&gt;ORM&lt;/h3&gt;&lt;p&gt;ORM指的是&lt;strong&gt;Object Relational Mapping对象关系映射&lt;/strong&gt;，针对于关系型数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单说，ORM就是通过实例对象的语法，完成关系型数据库的操作的技术。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ORM优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要再去写晦涩的SQL语句。&lt;/li&gt;
&lt;li&gt;使用面向对象的方式操作数据，代码量少，语义性好，容易理解。&lt;/li&gt;
&lt;li&gt;Classes类-Tables&lt;/li&gt;
&lt;li&gt;Objects实例-Records(表中的一行数据)&lt;/li&gt;
&lt;li&gt;Attributes属性-Records&lt;/li&gt;
&lt;li&gt;内置很多功能，数据验证，清洗，预处理等等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ODM&#34;&gt;&lt;a href=&#34;#ODM&#34; class=&#34;headerlink&#34; title=&#34;ODM&#34;&gt;&lt;/a&gt;ODM&lt;/h3&gt;&lt;p&gt;ODM指的是&lt;strong&gt;Object Document Mapping对象文档映射&lt;/strong&gt;。ODM针对于noSql数据库，关注文档模型，mongoose是ODM的一种实现，可以用于约束数据类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const User = mongoose.model(&amp;quot;User&amp;quot;,&amp;#123;
    username:&amp;#123; type : string &amp;#125;,
    password:&amp;#123; type : String &amp;#125;
&amp;#125;)
//user object
const newUser new User(&amp;#123;
    username:&amp;quot;john-doe&amp;quot;,
    password:&amp;quot;helloworld&amp;quot;,
&amp;#125;)
await newUser.save()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;egg-mongoose&#34;&gt;&lt;a href=&#34;#egg-mongoose&#34; class=&#34;headerlink&#34; title=&#34;egg-mongoose&#34;&gt;&lt;/a&gt;egg-mongoose&lt;/h1&gt;&lt;p&gt;详见源码，此处省略。&lt;/p&gt;
&lt;h1 id=&#34;Stream&#34;&gt;&lt;a href=&#34;#Stream&#34; class=&#34;headerlink&#34; title=&#34;Stream&#34;&gt;&lt;/a&gt;Stream&lt;/h1&gt;&lt;h3 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Stream的官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbA==&#34;&gt;https://nodejs.org/api/stream.html&lt;/span&gt;&lt;br&gt;&lt;strong&gt;流是Node.js中最好，也是最容易误解的慨念&lt;/strong&gt;&lt;br&gt;流就是数据的合集，数据可以是字符串也可以是数组，流的数据不是一次性全部获得的。&lt;/p&gt;
&lt;p&gt;大文件输出方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接读取&lt;/p&gt;
&lt;p&gt;输入的文件————读取到内存—————-输出文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流式读取&lt;/p&gt;
&lt;p&gt;输入的文件————通过可读流读取到管道—————–通过可写流输出文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Node.js支持流的内置模块：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Readable Streams:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP responses,on the client&lt;/li&gt;
&lt;li&gt;HTTP requests,on the server&lt;/li&gt;
&lt;li&gt;fs read streams&lt;/li&gt;
&lt;li&gt;zlib streams&lt;/li&gt;
&lt;li&gt;crypto streams&lt;/li&gt;
&lt;li&gt;TCP sockets&lt;/li&gt;
&lt;li&gt;child process stdout and stderr&lt;/li&gt;
&lt;li&gt;process.stdin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Writable  Streams:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP requests,on the client&lt;/li&gt;
&lt;li&gt;HTTP responses,on the server&lt;/li&gt;
&lt;li&gt;fs write streams&lt;/li&gt;
&lt;li&gt;zlib streams&lt;/li&gt;
&lt;li&gt;crypto streams&lt;/li&gt;
&lt;li&gt;TCP sockets&lt;/li&gt;
&lt;li&gt;child process stdin&lt;/li&gt;
&lt;li&gt;process.stdout,process.stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;流的类型：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Readable-可读操作。&lt;/li&gt;
&lt;li&gt;Vritable-可写操作。&lt;/li&gt;
&lt;li&gt;Duplex-可读可写操作. &lt;/li&gt;
&lt;li&gt;Transform-操作被写入数据，然后读出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pipe&#34;&gt;&lt;a href=&#34;#pipe&#34; class=&#34;headerlink&#34; title=&#34;pipe&#34;&gt;&lt;/a&gt;pipe&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;流的流动：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可读流Readable（数据源input）———————-pipe管道—————————————-可写流Writable（输出output）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; createReadStream, createWriteStream &amp;#125; from &amp;#39;fs&amp;#39;;
const readStream = createReadStream(&amp;#39;./a.txt&amp;#39;);
readStream.pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可读流Readable（数据源input）————-pipe管道—————转换流Transform—————-pipe管道———–可写流Writable（输出output）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; createReadStream, createWriteStream, write &amp;#125; from &amp;#39;fs&amp;#39;;
const readStream = createReadStream(&amp;#39;./a.txt&amp;#39;);
const writeStream = createWriteStream(&amp;#39;./b.txt&amp;#39;);
readStream.pipe(writeStream);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a href=&#34;#原理-2&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;流是基于EventEmitter（事件），pipe方法是基于事件封装的的语法糖，常见的事件有：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Readable  Streams：可读流事件和函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events&lt;ul&gt;
&lt;li&gt;data–当没有数据时触发&lt;/li&gt;
&lt;li&gt;end–没有更多的数据可读时触发&lt;/li&gt;
&lt;li&gt;error–在接受和写入过程中发生错误时触发&lt;/li&gt;
&lt;li&gt;finish–所有数据已被写入到底层系统时触发&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;readable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions&lt;ul&gt;
&lt;li&gt;pipe() , unpipe()&lt;/li&gt;
&lt;li&gt;read() , unshift() , resume()&lt;/li&gt;
&lt;li&gt;pause() , isPaused()&lt;/li&gt;
&lt;li&gt;setEncoding()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Writable  Streams：写入流事件和函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events&lt;ul&gt;
&lt;li&gt;drain&lt;/li&gt;
&lt;li&gt;finish&lt;/li&gt;
&lt;li&gt;error&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;pipe&amp;#x2F;unpipe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions&lt;ul&gt;
&lt;li&gt;write()&lt;/li&gt;
&lt;li&gt;end()&lt;/li&gt;
&lt;li&gt;cork() , uncork()&lt;/li&gt;
&lt;li&gt;setDefaultEncoding()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pipe方法原理：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; createReadStream , createWriteStream &amp;#125; from &amp;#39;fs&amp;#39;;
const readStream = createReadStream(&amp;#39;./a.txt&amp;#39;);
const writeStream = createWriteStream(&amp;#39;./b.txt&amp;#39;);
readStream.on(&amp;#39;data&amp;#39; , chunk=&amp;gt;&amp;#123;
    writeStream.write(chunk);
&amp;#125;)
readStream.on(&amp;#39;end&amp;#39;,()=&amp;gt;&amp;#123;
    writeStream.end();
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;压缩：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; createReadStream , createWriteStream &amp;#125; from &amp;#39;fs&amp;#39;;
import &amp;#123; createGzip &amp;#125; from &amp;#39;zlib&amp;#39;;
const readStream = createReadStream(&amp;#39;./a.txt&amp;#39;);
const writeStream = createWriteStream(&amp;#39;./b.txt&amp;#39;);
readStream.pipe(createGzip()).pipe(writeStream);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;封装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;cosnt savePromise = (readStream , writeStream = stdout)&amp;#123;
    return new Promise(resolve,reject)&amp;#123;
        readStream
            .pipe(writeStream)
            .on(&amp;#39;finish&amp;#39;,resolve)
            .on(&amp;#39;error&amp;#39;,reject)
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pipeline&#34;&gt;&lt;a href=&#34;#pipeline&#34; class=&#34;headerlink&#34; title=&#34;pipeline&#34;&gt;&lt;/a&gt;pipeline&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用pipe方法有时会存在一个问题：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//....
createReadStream(&amp;#39;./a.txt&amp;#39;)
    .pipe(stdout)
    .on(&amp;#39;finish&amp;#39;,finishFn)
    .on(&amp;#39;error&amp;#39;,errFn);  //这里监听的是pipe后的错误，对于createReadStream的错误则会卡死
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;于是推出了pipeline方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//...
pipeLine(fs.createReadStream(&amp;#39;./a.txt&amp;#39;),zlib.createGzip(),fs.createWriteStream(&amp;#39;./b.txt&amp;#39;),(err)=&amp;gt;&amp;#123;
    if (err) &amp;#123; console.error(&amp;#39;pipeline failed&amp;#39;,error) &amp;#125;;
    else &amp;#123; console.log(&amp;#39;successed&amp;#39;) &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;对象存储服务&#34;&gt;&lt;a href=&#34;#对象存储服务&#34; class=&#34;headerlink&#34; title=&#34;对象存储服务&#34;&gt;&lt;/a&gt;对象存储服务&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;自己完成静态文件存储的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nod.js不擅长处理静态文件的存储和展示，没有未静态文件做特殊的优化&lt;/li&gt;
&lt;li&gt;如果将图片生成多种处理格式要耗费大量的资源和空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;各三方比对&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;阿里云OSS&#34;&gt;&lt;a href=&#34;#阿里云OSS&#34; class=&#34;headerlink&#34; title=&#34;阿里云OSS&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0Li9vc3M=&#34;&gt;阿里云OSS&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持丰富的图片处理&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnQuX2RldGFpbC80NDY4Ni5odG1s&#34;&gt;https://help.aliyun.com/document._detail/44686.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;egg.js有对应的插件：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1vc3M=&#34;&gt;https://github.com/eggjs/egg-oss&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;价格&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下行流量100GB一年352元&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb21tb24tYnV5LmFsaXl1bi5jb20vP3NwbT01MTc2Ljc5MzM2OTEuSl81MjUzNzg1MTYwLjEuMmUzOTRjNTlxM0ZJc0EmY29tbW9kaXR5Q29kZT1vc3NiYWcjL2J1eQ==&#34;&gt;https://common-buy.aliyun.com/?spm=5176.7933691.J_5253785160.1.2e394c59q3FIsA&amp;amp;commodityCode=ossbag#/buy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;基本图片处理：每月0-10TB:免费&amp;gt;10TB:0.025元&amp;#x2F;GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;七牛云KODO&#34;&gt;&lt;a href=&#34;#七牛云KODO&#34; class=&#34;headerlink&#34; title=&#34;七牛云KODO&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucWluaXUuY29tL3ByaWNlcy9rb2Rv&#34;&gt;七牛云KODO&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多媒体处理功能非常丰富&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ2luaXUuY29tL3Byb2R1Y3RzL2RvcmE=&#34;&gt;https://www.giniu.com/products/dora&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;图片视频处理&lt;/li&gt;
&lt;li&gt;审核&lt;/li&gt;
&lt;li&gt;人工智能分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;价格：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外网流出100GB-年278.4元&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xbWFsbC5xaW5pdS5jb20vdGVtcGxhdGUuL01URXk/c3BlY19jb21ibz1NekUwTlE=&#34;&gt;https://qmall.qiniu.com/template./MTEy?spec_combo=MzE0NQ&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;基本图片处理：每月0-20TB:免费20TB以上：0.025元&amp;#x2F;GB https:&amp;#x2F;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5xaW5pdS5jb20vcHJpY2VzL2RvcmE=&#34;&gt;www.qiniu.com/prices/dora&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;腾讯云COS&#34;&gt;&lt;a href=&#34;#腾讯云COS&#34; class=&#34;headerlink&#34; title=&#34;腾讯云COS&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQzNg==&#34;&gt;腾讯云COS&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图像处理有一些新的亮点，比如自研的TPG压缩等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;价格：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外网流出100GB一年396元&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9idXkuY2xvdWQudGVuY2VudC4uY29tL3ByaWNlL2NvcyN0YWIwLWxpc3Qx&#34;&gt;https://buy.cloud.tencent..com/price/cos#tab0-list1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;基本图片处理：每月0-20TB:免费20TB以上：0.025元&amp;#x2F;GB&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzEyNDYvNDUyNzQ=&#34;&gt;https://cloud.tencent.com/document/product/1246/45274&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;图片压缩：1元&amp;#x2F;千次&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;SSR服务端渲染&#34;&gt;&lt;a href=&#34;#SSR服务端渲染&#34; class=&#34;headerlink&#34; title=&#34;SSR服务端渲染&#34;&gt;&lt;/a&gt;SSR服务端渲染&lt;/h1&gt;&lt;h3 id=&#34;介绍-1&#34;&gt;&lt;a href=&#34;#介绍-1&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;SSR-Server Side Rendering&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue关于SSR的介绍：https:&amp;#x2F;sSr.uejs.org&amp;#x2F;zh&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSR的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的SEO&lt;/li&gt;
&lt;li&gt;更快的渲染时间(Time to content)，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SSR的缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开发的限制，浏览器相关的操作只能在特定的钩子函数中使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPA应用完全静态化，而SSR app需要Node.js Server才能运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端负荷更高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SSR的实现：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本原理：@vue&amp;#x2F;server-renderer https:lv3.uejs.org&amp;#x2F;guide&amp;#x2F;ssr&amp;#x2F;getting-started.html#installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用createSSRApp,renderToString以及renderToStream方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;成熟的，大而全的SSR通用开发框架：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nuxt.js &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9udXh0anMub3JnLw==&#34;&gt;https://nuxtjs.org/&lt;/span&gt;  （Vue）&lt;/li&gt;
&lt;li&gt;React类似的Next.js https:&amp;#x2F;nextjs.orgl （React）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SSR&#34;&gt;&lt;a href=&#34;#SSR&#34; class=&#34;headerlink&#34; title=&#34;SSR&#34;&gt;&lt;/a&gt;SSR&lt;/h3&gt;&lt;p&gt;express等框架的res.render方法可以渲染html模板，使用的是nunjucks库进行数据填充。&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html class=&amp;quot;no-js&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;#123;&amp;#123; desc &amp;#125;&amp;#125;&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body style=&amp;quot;&amp;#123;&amp;#123; bodyStyle &amp;#125;&amp;#125;&amp;quot;&amp;gt;  //根据传入的props动态添加style样式
    &amp;#123;&amp;#123; html | safe &amp;#125;&amp;#125;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.js  (依据express框架为例：)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//...res是响应参数
res.render(&amp;#39;index&amp;#39;,function(err,html)&amp;#123;
    res.send(html);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vue中SSR&#34;&gt;&lt;a href=&#34;#vue中SSR&#34; class=&#34;headerlink&#34; title=&#34;vue中SSR&#34;&gt;&lt;/a&gt;vue中SSR&lt;/h3&gt;&lt;p&gt;1、vue3有包：@vue&amp;#x2F;server-renderer，在3.2.13版本以上内置了，低于此版本需要自行安装。&lt;/p&gt;
&lt;p&gt;2、使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//.......... res是服务端返回
import &amp;#123; pipeline &amp;#125; from &amp;#39;stream/promises&amp;#39;;
import &amp;#123; createSSRApp &amp;#125; from &amp;#39;vue&amp;#39;;
import &amp;#123; renderToString , renderToNodeStream &amp;#125; from &amp;#39;@vue/server-renderer&amp;#39;
const vueApp = createSSRApp(&amp;#123;
    data:()=&amp;gt;&amp;#123; msg:&amp;#39;hello world&amp;#39; &amp;#125;,
    template: &amp;#39;&amp;lt;h1&amp;gt;&amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&amp;#39;
&amp;#125;)
const appContent = await renderToString(vueApp);
res.type = &amp;#39;text/html&amp;#39;;
res.body = appContent;
// 或者使用流式输出：
const stream = renderToNodeStream(vueApp);
res.statys = 200;
await pipeline(stream,res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;RBAC权限验证&#34;&gt;&lt;a href=&#34;#RBAC权限验证&#34; class=&#34;headerlink&#34; title=&#34;RBAC权限验证&#34;&gt;&lt;/a&gt;RBAC权限验证&lt;/h1&gt;&lt;h3 id=&#34;介绍-2&#34;&gt;&lt;a href=&#34;#介绍-2&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;权限验证的场景以及需求：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特定的角色的用户才能操作特定的资源&lt;/li&gt;
&lt;li&gt;不同的用户能操作同类资源的特定实体&lt;/li&gt;
&lt;li&gt;不同的用户操作特定资源的不同属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;谁(User)拥有什么权限(Authority）去操作(Operation)哪些资源(Resource)&lt;/strong&gt;&lt;br&gt;根据角色完成权限的控制-RBAC(role based access control)，其实就是在原本用户——-权限的对应关系之上加一层中间层角色：用户——角色—–权限。好处是使得用户和权限的对应关系更加清晰和易于掌控。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;Node.js实现RBAC的库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29udXJ5L2FjY2Vzc2NvbnRyb2w=&#34;&gt;AccessControl.js（不推荐，不维护了）&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.6k Star&lt;/li&gt;
&lt;li&gt;3年没有更新，很多issue没人处理&lt;/li&gt;
&lt;li&gt;不支持ts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Nhc2Jpbi9ub2RlLWNhc2Jpbg==&#34;&gt;Casbin&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.7k Star&lt;/li&gt;
&lt;li&gt;ts编写，支持多种编程语言&lt;/li&gt;
&lt;li&gt;概念比较复杂，使用略繁琐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N0YWxuaXkvY2FzbA==&#34;&gt;Casl&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3.4k Star&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ts编写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单易用，可读性良好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Casl使用&#34;&gt;&lt;a href=&#34;#Casl使用&#34; class=&#34;headerlink&#34; title=&#34;Casl使用&#34;&gt;&lt;/a&gt;&lt;strong&gt;Casl使用&lt;/strong&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import &amp;#123; AbilityBuilder , Ability &amp;#125; from &amp;#39;@casl/ability&amp;#39;;
class Work &amp;#123;
    constructor(attrs)&amp;#123;
        Object.assign(this,attrs);
    &amp;#125;
&amp;#125;
const templateWork = new Work(&amp;#123; id : 1 , isTemplate : true &amp;#125;);
const notWork = new Work(&amp;#123; id : 2 , isTemplate : false &amp;#125;);
function defineRules()&amp;#123;
    const &amp;#123; can , cannot ,build &amp;#125; = new AbilityBuilder(Ability);
    can(&amp;#39;read&amp;#39;,&amp;#39;Work&amp;#39;);
    cannot(&amp;#39;delete&amp;#39;,&amp;#39;Work&amp;#39;);
    can(&amp;#39;update&amp;#39;,&amp;#39;Work&amp;#39;,&amp;#123;isTemplate:false&amp;#125;);
    return build();
&amp;#125;
console.log(templateWork.constructor.name)
const rules defineRules()
console.log(rules.can(&amp;#39;read&amp;#39;,&amp;#39;Work&amp;#39;))
console.log(rules.can(&amp;#39;delete&amp;#39;,&amp;#39;Work&amp;#39;))
console.log(rules.can(&amp;#39;update&amp;#39;,templateWork))
console.log(rules.can(&amp;#39;update&amp;#39;,notWork))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;部署-1&#34;&gt;&lt;a href=&#34;#部署-1&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;部署&lt;/h1&gt;&lt;h3 id=&#34;传统模式&#34;&gt;&lt;a href=&#34;#传统模式&#34; class=&#34;headerlink&#34; title=&#34;传统模式&#34;&gt;&lt;/a&gt;传统模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;本地开发&lt;/strong&gt;&lt;br&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1iaW4=&#34;&gt;egg-bin&lt;/span&gt;，提供了便捷的方式在本地进行开发、调试、单元测试，它可以自动的监控文件的修改，然后重新运行对应的命令。&lt;br&gt;采用的配置文件是：config.default.ts&lt;br&gt;启动开发环境命令为&lt;code&gt;egg-bin dev&lt;/code&gt;&lt;br&gt;&lt;strong&gt;生产环境运行程序&lt;/strong&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbTIua2V5bWV0cmljcy5pby8=&#34;&gt;pm2-process manager&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node script.js pm2 start script.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PM2的优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cluster模式运行&lt;/li&gt;
&lt;li&gt;自动重启auto reload&lt;/li&gt;
&lt;li&gt;热替换hot reload&lt;/li&gt;
&lt;li&gt;性能监控Monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;egg.js中有对应于PM2的内置方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1zY3JpcHRz&#34;&gt;egg-scripts&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1jbHVzdGVy&#34;&gt;egg-cluster&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;egg.js生产环境启动和关闭&lt;/strong&gt;&lt;br&gt;&lt;code&gt;egg-scripts start egg-scripts stop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;br&gt;config.prod.ts config.default.ts&lt;br&gt;&lt;strong&gt;编译过程&lt;/strong&gt;&lt;br&gt;需要手动将ts转换为js,借助&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3doeGF4ZXMvZWdnLXRzLWhlbHBlcg==&#34;&gt;ets&lt;/span&gt;&lt;br&gt;&lt;code&gt;特别注意将项目中的typscript版本升级到4.4.3 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run tsc&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Cluster模型&#34;&gt;&lt;a href=&#34;#Cluster模型&#34; class=&#34;headerlink&#34; title=&#34;Cluster模型&#34;&gt;&lt;/a&gt;Cluster模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Egg.js Cluster模型的原理&lt;/strong&gt;&lt;br&gt;Egg.js关于这部分内容的文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lZ2dqcy5vcmcvemgtY24vY29yZS9jbHVzdGVyLWFuZC1pcGMuaHRtbA==&#34;&gt;https://eggjs.org/zh-cn/core/cluster-and-ipc.html&lt;/span&gt;&lt;br&gt;&lt;strong&gt;为什么要采用Cluster模式&lt;/strong&gt;&lt;br&gt;JavaScript代码是运行在单线程上的，那么如果用Node.js来做Web Server,就无法享受到多核运算的好处。&lt;br&gt;&lt;strong&gt;什么是Cluster模式&lt;/strong&gt;&lt;br&gt;文档：http:l&amp;#x2F;nodejs.cn&amp;#x2F;api&amp;#x2F;cluster.html&lt;/p&gt;
&lt;p&gt;Node.jS的单个实例在单个线程中运行。为了利用多核系统，用户有时会想&lt;br&gt;要启动Node.js进程的集群来处理负载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在服务器上同时启动多个进程&lt;/li&gt;
&lt;li&gt;每个进程里都跑的是同一份源代码（将一个进程的工作分给多个进程去做）&lt;/li&gt;
&lt;li&gt;这些进程可以同时监听一个端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cluster的运行模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Request————-master_process主进程———————workers进程（多个）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程间通信（IPC）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUExJThDJUU3JUE4JThCJUU5JTk2JTkzJUU5JTgwJTlBJUU4JUE4JThB&#34;&gt;IPC Inter-Process Communication&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;IPC指的是至少两个进程或线程间传送数据或信号的一些技术或者方法，Node.js将其封装为基于事件的形式便于使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cluster使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;import http from &amp;#39;http&amp;#39;;
import cluster from &amp;#39;cluster&amp;#39;;
import &amp;#123; cpus &amp;#125; from &amp;#39;os&amp;#39;;
import process from &amp;#39;process&amp;#39;;
if(cluster.isPrimary)&amp;#123;
    console.log(`master $&amp;#123;process.pid&amp;#125; running`);
    const cpuLength = cpus().length;
    for(let i = 0 ; i &amp;lt; cpuLength ; i++)&amp;#123;
        cluster.fork();
    &amp;#125;
    cluster.on(&amp;#39;exit&amp;#39;,(worker)=&amp;gt;&amp;#123;
        console.log(`worker $&amp;#123;worker.process.pid&amp;#125; exited`);
    &amp;#125;)
&amp;#125;else&amp;#123;
    http.createServer((req,res)=&amp;gt;&amp;#123;
        res.writeHead(200);
        res.end(&amp;quot;hello world&amp;quot;);
    &amp;#125;).listen(8000);
    console.log(`worker $&amp;#123;process.pid&amp;#125; started`);
    console.log(cluster.workers); //获得子进程，可以通过process.send和on(&amp;#39;message&amp;#39;)事件进行进程间通信。
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;egg.js中对于Cluster的二次封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用egg-scripts启动master process&lt;/li&gt;
&lt;li&gt;使用egg-cluster启动和CPU核数相等的app_worker process&lt;/li&gt;
&lt;li&gt;使用egg-cluster启动的一个独特的agent_.worker process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程守护&lt;/strong&gt;&lt;br&gt;考虑到生产环境的健壮性，必须保证进程异常的情况下怎样处理。&lt;br&gt;&lt;strong&gt;当代码抛出异常并没有被捕获的时候，worker使用process.on(‘uncaughtException’,handler)来捕获对应的错误，这时进程处于不确定的状态，需要优雅退出。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统异常&lt;/strong&gt;&lt;br&gt;而当一个进程出现异常导致crash或者被系统杀死时，不像未捕获异常发生时我们还有机会让进程继续执行，Master立刻fork一个新的Worker。&lt;br&gt;&lt;strong&gt;Agent机制&lt;/strong&gt;&lt;br&gt;有一些特殊性质的工作，不能多个worker一起合作，容易造成混乱。对于这种工作egg.js提供了一个新的agent进程来完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Egg.js三种进程的总结：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;进程数量&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;稳定性&lt;/th&gt;
&lt;th&gt;是否运行业务代码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Master进程&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;进程管理，进程间消息转发&lt;/td&gt;
&lt;td&gt;非常高&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agent进程&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;后台运行工作&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;少量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Workers进程&lt;/td&gt;
&lt;td&gt;CPU核数&lt;/td&gt;
&lt;td&gt;执行业务代码&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Cluster模型和Node多进程的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cluster模块可以将一个node进程分裂成多个子进程，每个子进程独立运行在cpu内核上，以提升应用程序的并发能力和性能，通过主进程和子进程之间的通信来实现负载均衡，处理并发请求。&lt;/li&gt;
&lt;li&gt;node多进程使用child_process模块，其不具备负载均衡和通信机制，需要自行实现进程间通信和负载均衡逻辑。可用于处理长时操作，返回结果给主进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Node.js压力测试工具：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模拟高并发场景：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9hZHRlc3Q=&#34;&gt;Loadtest&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# n                   总过发送多少个请求
# c concurrency       同时有几个客户端在发送请求
# rps request per seconds   每秒发送多少个请求
loadtest -n 400 -c 10 --rps 200 http://mysite.com/ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;云服务器&#34;&gt;&lt;a href=&#34;#云服务器&#34; class=&#34;headerlink&#34; title=&#34;云服务器&#34;&gt;&lt;/a&gt;云服务器&lt;/h1&gt;&lt;h4 id=&#34;购买&#34;&gt;&lt;a href=&#34;#购买&#34; class=&#34;headerlink&#34; title=&#34;购买&#34;&gt;&lt;/a&gt;购买&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L2Vjcw==&#34;&gt;阿里云ECS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2N2bQ==&#34;&gt;腾讯云CVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;价格（学生优惠）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9hY3QvY2FtcHVzP2Zyb209MTQ1OTk=&#34;&gt;https://cloud.tencent.com/act/campus?from=14599&lt;/span&gt; 12G 38&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tL3Byb2R1Y3QvZWNzLmh0bWw=&#34;&gt;华为云ECS&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;登录&#34;&gt;&lt;a href=&#34;#登录&#34; class=&#34;headerlink&#34; title=&#34;登录&#34;&gt;&lt;/a&gt;登录&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;为什么使用root登录时一个不好的实践&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有非常多的bot会尝试使用root+pwd的ssh方式暴力登录机器，当尝试成功以后，黑客就会控制整个系统。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;假如使用特定用户名+pwd,bot需要先猜测用户名(N次)，然后是密码(M次)，这样复杂度提升到N&lt;/em&gt;M&lt;/li&gt;
&lt;li&gt;root可以造成更大的危害，影响整个系统，而某个特定用户只能影响它的文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;创建一个用户账号进行登录&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 远程登录
ssh root@xxx.xx.xx.xx
# 添加用户以及设置密码
adduser dmq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;设置该用户拥有sudo权限，给予它在登录以后切换到root的能力&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 修改权限，u表示所有者，w表示写权限+表示添加
chmod u+w /etc/sudoers
# 编辑文件
vim /etc/sudoers
# 找到  `root ALL=(ALL)  ALL`
# 再加一行  `dmq ALL=(ALL)  ALL`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用新用户登录并且测试权限&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ssh dmq@xxx.xx.xx.xx
# 可以使用 su 直接切换为root用户
# 也可以使用sudo快捷的使用root权限进行操作
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;禁止使用root远程登录ssh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 修改ssh配置
vim /etc/ssh/sshd_config I
# 修改yes为no
PermitRootLogin no
# 重启sshd服务
service sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可选：不使用密码登录&lt;/strong&gt;&lt;br&gt;为什么使用密码登录有时候是一个不好的实践？&lt;br&gt;&lt;strong&gt;非常简单：用户经常使用非常错误（简单的）用户密码，全球最常用的密码是123456以及bc123,而且用户会在多个账户大量重复使用，所以黑客从别的地方盗取的密码很可能在其他账户也可以使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用SSH kev讲行登录&lt;/strong&gt;&lt;br&gt;SSH key采角了经典的非对称加密技术，可以使用工具创建一个公钥和私钥，你可以将公钥放置在任何的服务器当中，在本地保留私钥。在ssh登录的时候，SSH验证公钥和私钥的合法性，当合法的时候，就可以免密码登录了。证书由1024Bits到4096Bits（128到512字符)的随机字符组成，&lt;br&gt;要比你自己的密码安全的多。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;#创建ssh key pair
ssh-keygen -t rsa -b 4096 -C &amp;quot;your email@example.com&amp;quot;
windows可以使用putty或者git scma软件生成，备注网址：
https://www.jianshu.com/p/95262f5eba7a
# 本地ssh证书的位置
-/.ssh/id rsa
-/.ssh/id rsa.pub
# 登录远程机器
ssh viking@xxx.xx.xx.xx
# 创建受信任的登录密钥
# 这个文件当中的公钥会被当前的主机设置为信任方
touch -/.ssh/authorized keys
# 将id rsa.pub的文本内容黏贴进来
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可选，关闭密码登录服务器的功能&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash#修改ssh配置&#34;&gt;vim /etc/ssh/sshd config
#修改为no
PasswordAuthentication no
#重启服务
service sshd i restart
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;使用-1&#34;&gt;&lt;a href=&#34;#使用-1&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;准备云服务器必备软件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nodejs (16)&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linux发行版的两大家族&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debian(完全免费的Linux发行版)-Ubuntu(基于Debian,更加容易上手)-apt包管理系统-软件格式为deb包大&lt;/li&gt;
&lt;li&gt;Red Hat(商用Linux发行版)-CentOS(Red Hat减去收费软件)-yum包管理系统-软件格式为rpm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;软件安装&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;安装Node.js&lt;/strong&gt;&lt;br&gt;1安装nvm管理node版本&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=&#34;&gt;https://github.com/nvm-sh/nvm&lt;/span&gt;&lt;br&gt;2使用包管理器安装node最新版本&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucy9ibG9iL21hc3Rlci9SRUFETUUubWQjZGVi&#34;&gt;https://github.com/nodesource/distributions/blob/master/README.md#deb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装MongoDB&lt;/strong&gt;&lt;br&gt;1从源代码下载安装，回顾之前的内容&lt;br&gt;2使用包管理器安装&lt;br&gt;Ubuntu:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC90dXRvcmlhbC9pbnN0YWxsLW1vbmdvZGItb24tdWJ1bnR1Lw==&#34;&gt;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/&lt;/span&gt;&lt;br&gt;Centos:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC90dXRvcmlhbC9pbnN0YWxsLW1vbmdvZGItb24tcmVkLWhhdC8=&#34;&gt;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装Redis&lt;/strong&gt;&lt;br&gt;*1从源代码下载安装，回顾之前的基础知识&lt;br&gt;*2使用包管理器安装&lt;br&gt;CentOS:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLXNlY3VyZS1yZWRpcy1jZW50b3MtNw==&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-secure-redis-centos-7&lt;/span&gt;&lt;br&gt;Ubuntu:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLWFuZC1zZWN1cmUtcmVkaXMtb24tdWJ1bnR1LTE4LTA0&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;管理&#34;&gt;&lt;a href=&#34;#管理&#34; class=&#34;headerlink&#34; title=&#34;管理&#34;&gt;&lt;/a&gt;管理&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;使用service或者systemctl管理服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# systemd 模块 - https://en.wikipedia.org/wiki/Systemd
service  服务名称(mongod)  操作指令(status/start/stop/restart)
systemctl  操作指令(start/stop/status/restart/reload)  服务名称service
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;普通部署&#34;&gt;&lt;a href=&#34;#普通部署&#34; class=&#34;headerlink&#34; title=&#34;普通部署&#34;&gt;&lt;/a&gt;普通部署&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;在服务器上部署并运行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1登录远程机器，使用普通用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2在自己的目录下面，clone代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3安装对应的依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以使用sharp淘宝mirror来安装比较大的二进制文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaGFycC5waXhlbHBsdW1iaW5nLmNvbS9pbnN0YWxsI2NoaW5lc2UtbWlycm9y&#34;&gt;https://sharp.pixelplumbing.com/install#chinese-mirror&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4创建并且设置.env文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5开启云服务对应的端口(7001)访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;阿里云：左侧导航“本实例安全组”，“配置规则”，“手动添加”端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他云平台请自行查看。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6启动服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;确认mongo,redis在运行状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm run tsc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm run start&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于此可以完成基本的项目部署，但是这种部署方式启动和更新时过于复杂，存在如下问题：&lt;/p&gt;
&lt;p&gt;三个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前置软件的安装，它们在不同操作系统中安装的方式，启动的脚本，预设初始的方式有可能都不相同，这就给我们造成一个很大的困扰，假如你在多台机器上部署的话，可能会遇到各种各样的问题。&lt;/li&gt;
&lt;li&gt;项目需要运行一系列对应的命令才能启动&lt;/li&gt;
&lt;li&gt;项目更新的问题，需要一系列手动的步骤，这是一个非常繁琐，而且容易出错的步骤。有没有更方便的方式可以完成这个过程呢？&lt;ul&gt;
&lt;li&gt;完成对应的pull代码，更新依赖，启动应用的过程&lt;/li&gt;
&lt;li&gt;是在特定的提交自动触发这个过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要更加方便的进行部署可以使用如下工具：&lt;/p&gt;
&lt;h2 id=&#34;Docker&#34;&gt;&lt;a href=&#34;#Docker&#34; class=&#34;headerlink&#34; title=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcA==&#34;&gt;Docker&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&#34;介绍-3&#34;&gt;&lt;a href=&#34;#介绍-3&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;br&gt;我们希望有一个工具可以帮我们一键智能部署，假如你要部署在多台不同的机器上，可以不用在担心不同系统，不同版本的差异，以及运行之前需要安装不同软件的痛苦。&lt;br&gt;&lt;strong&gt;解决&lt;/strong&gt;&lt;br&gt;当红的虚拟化软件：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG9ja2VyLmNvbWwv&#34;&gt;Docker&lt;/span&gt;&lt;br&gt;Docker的进化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-26_20-27-53.jpg&#34; alt=&#34;Docker的进化&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统虚拟机，虚拟硬件以后，需要在上面安装一个完整的操作系统。&lt;/li&gt;
&lt;li&gt;Docker:推出了容器的概念，每个容器不需要安装完成的操作系统，里面的进程直接运行在Docker创造的宿主内核中，不需要虚拟硬件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Docker的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快速的启动速度&lt;/li&gt;
&lt;li&gt;更少的资源占用&lt;/li&gt;
&lt;li&gt;一致的运行环境，使用户不关注操作系统而只关心应用程序。&lt;/li&gt;
&lt;li&gt;微服务架构，docker天生适配微服务架构（Docker 有助于将一个复杂系统分解成一系列可组合的部分，这让用户可以用更离散的方式来思考其服务。用户可以在不影响全局的前提下重组软件，使其各部分更易于管理和可插拔。）&lt;/li&gt;
&lt;li&gt;用户可以更准确地控制构建环境的状态，Docker 构建比传统软件构建方法更具有可重现性和可复制性。使持续交付的实现变得更容易。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Docker-images&#34;&gt;&lt;a href=&#34;#Docker-images&#34; class=&#34;headerlink&#34; title=&#34;Docker  images&#34;&gt;&lt;/a&gt;&lt;strong&gt;Docker  images&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9zZWFyY2g/Zz0mdHlwZT1pbWFnZSVFNCVCOCVBRCVFOCU4RSVCNyVFNSU4RiU5NiVFNSU5MCU4NCVFNyVBNyU4RCVFNSVBRSU5OCVFNiU5NiVCOSVFNyU5QSU4NCVFOSU5NSU5QyVFNSU4MyU4RiVFRiVCQyU4QyVFNSVCOSVCNiVFNCVCOCU5NCVFNSU4RiVBRiVFNCVCQiVBNSVFNCVCOCU4QSVFNCVCQyVBMCVFNCVCRCVBMCVFOCU4NyVBQSVFNSVCNyVCMSVFNyU5QSU4NCVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFOSU5NSU5QyVFNSU4MyU4Rg==&#34;&gt;https://hub.docker.com/search?g=&amp;amp;type=image中获取各种官方的镜像，并且可以上传你自己的自定义镜像&lt;/span&gt;&lt;br&gt;Docker镜像仓库获取镜像的命令是docker pull&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 下载镜像
docker pull &amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;
# 查看以及下载的镜像
docker images
# 删除镜像
docker rmi &amp;lt;image-id&amp;gt;
# 上传
docker push &amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用镜像代理：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.mirrors.ustc.edu.cn/&amp;quot;,
    &amp;quot;https://reg-mirror.qiniu.com&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Docker-Container&#34;&gt;&lt;a href=&#34;#Docker-Container&#34; class=&#34;headerlink&#34; title=&#34;Docker Container&#34;&gt;&lt;/a&gt;&lt;strong&gt;Docker Container&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;启动Docker容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker run -d -p 主机端口:镜像端口 --name 容器名称 镜像名称
# 例如：（--name 容器名称省略）
docker run -d -p 81:80 nginx
# -d  后台运行
# -p  端口映射，81为主机的端口，80为镜像端口
# --name 自定义容器名称
# 镜像名称，假如本地没有，会自动pull一次镜像进行下载。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;其他命令&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 查看所有容器
docker  ps
# 停止容器
docker stop container-id
# 删除容器
docker rm container-id
# 启动已终止容器
docker container start container-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;进入容器内部&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker exec -it &amp;lt;container-id&amp;gt; command
-i : 即使没有附加也保持STDIN 打开
-t : 分配一个伪终端
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;持久化容器数据&#34;&gt;&lt;a href=&#34;#持久化容器数据&#34; class=&#34;headerlink&#34; title=&#34;持久化容器数据&#34;&gt;&lt;/a&gt;&lt;strong&gt;持久化容器数据&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用-v参数，可以设定一个数据的映射关系，将本地的文件映射到容器中对应的文件中去。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker run -d -p 81:80 -v host:container image-name
#例如：将本地数据卷映射到容器中
docker run -d -v /data/db:/data/db mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;创建对应的数据卷volumn&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 创建数据卷
docker volume create &amp;lt;volumn-name&amp;gt;
#例如：docker volume create mongo
# 使用volumn数据卷
docker run -d -v &amp;lt;volumn-name&amp;gt;:/data/db mongo
# 例如：docker run -d -v mongo:/data/db mongo
# 检查数据卷
docker volume inspect &amp;lt;volumn-name&amp;gt;
# 删除数据卷
docker volume remove mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Dockerfile自定义镜像&#34;&gt;&lt;a href=&#34;#Dockerfile自定义镜像&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile自定义镜像&#34;&gt;&lt;/a&gt;Dockerfile自定义镜像&lt;/h3&gt;&lt;p&gt;Docker image中的镜像虽然非常多，但是不能完全符合自己项目的全部需求，可以自定义构建一个自己的镜像。&lt;/p&gt;
&lt;p&gt;Dockerfile是一个特殊的文本文件，其中包括一系列指令，用于构建对应的镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNmcm9t&#34;&gt;指令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;Dockerfile示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;dockerfile&#34;&gt;# 指定基础镜像，从node14开始构建
FROM node:14

# 创建对应的文件夹，作为项目运行的位置
RUN mkdir -p /usr/src/app

# 指定工作区，后面的运行任何命令都是在这个工作区中完成的
WORKDIR /usr/sec/app

# 从本地拷贝对应的文件 到 工作区
COPY server.js /usr/src/app

# 执行安装命令
RUN npm install --registry=https://registry.npm.taobao.org
RUN npm run tsc

#告知当前Docker image暴露的是3000端☐
EXPOSE 3000

#执行启动命令，一个Dockerfile只能有一个
CMD node server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构建：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 这里特别注意上下文的概念，不要在根目录使用Dockerfi1e
docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt;
# 例如：(在项目文件夹中运行)
docker build -t test-node .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;.dockerignore文件用于忽略docker中需要打包进镜像的文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.dockerignore示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;dockerfile&#34;&gt;# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/
# Optional REPL history
.node_repl_history
# Output of &amp;#39;npm pack&amp;#39;
*.tgz
# Yarn Integrity file
.yarn-integrity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;strong&gt;多个容器相互通信：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要点：Docker中每一个container应该只完成一个工作，并且将它做好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解耦，这样不同的服务和后端代砀都可以完全分离开来，方便管理以及未来的扩展。&lt;/li&gt;
&lt;li&gt;服务的更新以及升级都是完全独立的。&lt;/li&gt;
&lt;li&gt;在一个container中，启动多个不同的进程，需要一个进程管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;通信过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker容器之间不能直接进行访问，而是应该通过docker网络进行访问。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 创建docker网络
docker network create test
# 在创建的docker网络中启动服务
docker run -d --network test --name mongo -p 27017:27017 mongo
# 将原来项目中的的ip地址替换为docker的name名称
# 例如原来为：mongodb://localhost:27017/api  的地址要替换为： mongodb://mongo:27017/api
# 只有在同一个docker网络中启动的项目间才能进行访问。
docker run -d --network test --name use -p 80:3000 use
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果每个容器都要这样操作一遍就会显得非常麻烦，这时就需要使用Docer compose工具（配置docker-compose.yml文件）&lt;/p&gt;
&lt;p&gt;Docker compose工具&lt;/p&gt;
&lt;p&gt;Docker compose是Docker官方推出的工具，用来管理和共享多个容器的应用，Mac系统和Windows系统安装客户端时自带。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==&#34;&gt;Linux需要单独安装&lt;/span&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker-compose version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;配置：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker compose通过一个特殊的yml文件，进行配置，这个文件必须命名为&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;docker-compose所有的字段参考文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvY29tcG9zZS1maWxlLXYzLw==&#34;&gt;https://docs.docker.com/compose/compose-file/compose-file-v3/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml文件配置示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &amp;#39;3&amp;#39; # docker指令版本
services: # 要启动的服务
  test-mongo: # 服务名称，这里的服务名称对应着容器通信时的前缀！
    image: mongo # 使用的镜像名称
    container_name: test-mongo # 容器名称
    volumes:  # 使用的数据卷映射
      - &amp;#39;.docker-volumes/mongo/data:/data/db&amp;#39;
    ports:  # 端口映射
      - 27017:27017
    environment: # 设置环境变量
      - MONGO_INITDB_ROOT_USERNAME=admin  # 内置的环境变量，可以初始化添加一个User
      - MONGO_INITDB_ROOT_PASSWORD=pass
    env_file: # 设置环境变量文件，将敏感信息放置到环境变量文件中
      - .env
  test-use: # 第二个项目，注意对齐关系
    depends_on: # 配置所依赖的服务
      - test-mongo
    build: # 设置构建配置
      context: . # 操作上下文为当前目录
      dockerfile: Dockerfile # 基于Dockerfile进行构建
    image: test-use-image
    container_name: test-use
    ports:
      - 7001:7001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;启动以及关闭：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 启动
docker-compose up -d
# 关闭
docker-compose down
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据库配置&#34;&gt;&lt;a href=&#34;#数据库配置&#34; class=&#34;headerlink&#34; title=&#34;数据库配置&#34;&gt;&lt;/a&gt;数据库配置&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;数据库准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库配置，初始化工作，比如插入一些特定的数据&lt;/li&gt;
&lt;li&gt;避免使用root用户去启动服务，从而提高安全性（配置数据库访问权限）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特殊的初始化数据库的位置：&amp;#x2F;docker-entrypoint-initdb.d（这个文件夹中的脚本会在容器启动前自动执行）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以创建js文件或者sh文件（shell）进行执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mongoDB：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fbW9uZ28=&#34;&gt;https://hub.docker.com/_mongo&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Postgres:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fbHBvc3RncmVz&#34;&gt;https://hub.docker.com/_lpostgres&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特别注意，只有在数据库没有被创建的情况下，也就是&lt;strong&gt;数据库的文件夹是空的情况下&lt;/strong&gt;，脚本才会被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml文件中配置env_file为当前文件夹下的.env文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用js文件或者sh文件，但是由于此文件在其余文件之前运行，此时js文件中通过process.env获取不到所需要的环境变量，可以选用sh文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shell中EOF&amp;lt;&amp;lt;的用法&lt;/strong&gt;&lt;br&gt;在Shell中我们通常将EOF与&amp;lt;结合使用，表示，二债的输入作为子命令或子Shell的输入，直到遇到EOF为止，再返回到主调Shell。.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#!/bin/bash
mongo &amp;lt;&amp;lt;EOF
use admin
db.auth(&amp;#39;root&amp;#39;,&amp;#39;123456&amp;#39;)
use lego
db.createUser(&amp;#123;
    user: &amp;#39;$MONGO_DB_USERNAME&amp;#39;,
    pwd: &amp;#39;$MONGO_DB_PASSWORD&amp;#39;,
    roles: [&amp;#123;
        role: &amp;#39;readWrite&amp;#39;,
        db: &amp;#39;lego&amp;#39;
    &amp;#125;]
&amp;#125;)
db.createCollection(&amp;#39;works&amp;#39;)
db.works.insertMany([
    &amp;#123;
          id:19,
          title:&amp;#39;测试标题&amp;#39;,
          name:&amp;#39;张三&amp;#39;
    &amp;#125;
])
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;优化镜像大小&#34;&gt;&lt;a href=&#34;#优化镜像大小&#34; class=&#34;headerlink&#34; title=&#34;优化镜像大小&#34;&gt;&lt;/a&gt;优化镜像大小&lt;/h3&gt;&lt;p&gt; &lt;strong&gt;Docker镜像构建优化：使用alpine版本的镜像&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优化镜像大小  ：   什么是Alpine Linux:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hbHBpbmVsaW51eC5vcmcv&#34;&gt;https://alpinelinux.org&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alpine的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Small小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认软件包，alpine选择busybox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C运行库，一般会用glibc,alpine选择musl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最简依赖，Simple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;很多内置软件的插件都去掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;国际化内容都被删除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secure安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用alpine版本的镜像可以大大减小镜像的体积。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DockerBuild构建提速&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker中运行命令是基于一层一层的，当修改文件之后，COPY后的缓存全部失效，这时就会重新执行后续命令，使用不了缓存，导致构建速度很慢。此时可以将原来COPY文件夹，改为COPY具体的文件（进行拆分），以更好地使用缓存。&lt;/p&gt;
&lt;h3 id=&#34;部署-2&#34;&gt;&lt;a href=&#34;#部署-2&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;部署&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;安装Docker（有的云服务可以自定义安装）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu：（需要使用root账户进行安装）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9kb2NrZXIvdWJ1bnR1LWRvY2tlci1pbnN0YWxsLmh0bWw=&#34;&gt;https://www.runoob.com/docker/ubuntu-docker-install.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==&#34;&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;配置用户组&lt;/strong&gt;&lt;br&gt;因为是root安装，普通用户执行对应的命令的时候有可能会报错：&lt;br&gt;&lt;code&gt;Can&amp;#39;t connect to docker daemonGot permission denied while trying to connect to the Docker daemonsocket at unix:///var/run/docker.sock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要将对应的用户添加到docker的用户组中。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;#usermod命令修改用户账户
#a--append添加-G--groups
组的名称
sudo usermod-aG docker 你的用户名
#如果组不存在，添加对应的docker组
sudo groupadd docker
#查看一个用户所属的组
groups
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;添加下载镜像：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# root
vim /etc/docker/daemon.json
&amp;#123;
&amp;quot;registry-mirrors&amp;quot;:
&amp;quot;https://docker.mirrors.ustc.edu.cn/&amp;quot;,
&amp;quot;https://reg-mirror.qiniu.com&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;运行：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 拉最新的代码
git pull
# 先查看目前端口是否被占用
# 如果被占用，释放端口
# 或者改变docker-compose,yml的映射端口
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;YAML语言&#34;&gt;&lt;a href=&#34;#YAML语言&#34; class=&#34;headerlink&#34; title=&#34;YAML语言&#34;&gt;&lt;/a&gt;YAML语言&lt;/h1&gt;&lt;p&gt;YAML&lt;br&gt;(YAML Ain’t a Markup Language)是一种标记语言，它使用空格作为缩进，看起来非常的简洁，可读性非常的好，非常适合一些内容大纲和配置文件。他最终是通过工具转化为JSON文件的，但是YAML的可读性比JSON强很多，因此复杂的配置文件一般使用YAML。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;# 字符串不用加引号
key: value
number: 100
boolean: true
# 字符串不用加引号，但是加上也不会报错
quote_string: &amp;#39;quote String&amp;#39;
# 多行字符串使用 literal block语法：也就是竖线
mutiple_string: |
  line one
  line two
  line three
# collection types 集合类型
# 使用缩进表示层级关系，最好使用两个空格，不是两个空格也没关系，对齐就行
person:
  name: dmq
  age: 18
  address:
    city: 上海

# sequences 数组或者列表
hobbies:
  - Item 1
  - Item 2
  - name: weson
    value: xyz
    address:
      city: 北京
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Github-Action&#34;&gt;&lt;a href=&#34;#Github-Action&#34; class=&#34;headerlink&#34; title=&#34;Github Action&#34;&gt;&lt;/a&gt;Github Action&lt;/h1&gt;&lt;p&gt;Github官方的CI&amp;#x2F;CD工具，作为github的亲儿子，和github几乎是完美的无缝衔接的，功能非常强大。&lt;/p&gt;
&lt;p&gt;CI   CD常用工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github actions &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucw==&#34;&gt;https://docs.github.com/en/actions&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Travis &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJhdmlzLWNpLmNvbS8=&#34;&gt;https://www.travis-ci.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CircleCl &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaXJjbGVjaS5jb20v&#34;&gt;https://circleci.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Jenkins &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamVua2lucy5pby8=&#34;&gt;https://www.jenkins.io/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;优势讨论：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMwNjE5NTAzMy9hbnN3ZXIvMTg3MDMyMjExOA==&#34;&gt;https://www.zhihu.com/question/306195033/answer/1870322118&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-27_18-37-04.jpg&#34; alt=&#34;/images/Snipaste_2024-04-16_12-54-33.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow&lt;/strong&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy91bmRlcnN0YW5kaW5nLWdpdGh1Yi1hY3Rpb25zI3dvcmtmbG93cw==&#34;&gt;https://docs.github.com/cn/actions/learn-github-actions/understanding-github-actions#workflows&lt;/span&gt;&lt;br&gt;Workflow是一个可配置的自动化流程，可以包含多个jobs,通过一个在repo当中的yml文件来定义对应的流程，一个repo可以包含多个workflow。&lt;br&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;br&gt;Event是触发workflow的特殊事件，比如pull request,push或者issue,也可以完全自定义，完整列表请看：https:&amp;#x2F;docs.github.com&amp;#x2F;cn&amp;#x2F;actions&amp;#x2F;learn-github-actions&amp;#x2F;events-that-trigger-workflows&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Job是Workflow当中一系列的可执行步骤，每个Job是在同一个runner中进行的（(Runner是指处于github的一台特殊的虚拟机，支持各种操作系统)，每个步骤或者是一个shell脚本，抑或是一个可执行的action,每个步骤是按顺序执行，并且互相依赖的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-27_19-54-06.jpg&#34; alt=&#34;/images/Snipaste_2024-04-16_12-54-33.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Action是github actions中的一个自定义应用，它可以运行一系列复杂的并且常用的任务，使用action可以帮我们减少在workflow中写重复代码，Github提供了非常多常用的action,可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlP3R5cGU9YWN0aW9ucw==&#34;&gt;这里查阅&lt;/span&gt;，同时我们也可以写自己的action。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;github secrets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中有的私密信息不希望公开暴露，通常的做法是将私密信息写道env文件中，使用gitingore将其忽略掉，这里还有一个做法就是github secrets，在github官网设置github secret，然后在文件中直接书写变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：.github文件夹下workflow文件夹下创建一个yml文件，写入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;name: Github Actions Demo
on: [push]
jobs:
  Check-Github-actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo &amp;quot;triggered by a $&amp;#123;&amp;#123; github.event_name &amp;#125;&amp;#125; event&amp;quot;
      - run: echo &amp;quot;running on a $&amp;#123;&amp;#123; runner.os &amp;#125;&amp;#125; server hosted by github&amp;quot;
      - name: check out repo code
        uses: actions/checkout@v2 # 在工作流程中检出代码仓库的内容、确保工作流程始终使用一致的代码版本
      - run: echo &amp;quot;the $&amp;#123;&amp;#123; github.reopsitory &amp;#125;&amp;#125; has been cloned&amp;quot;
      - name: List files in the repo
        run: |
          ls $&amp;#123;&amp;#123; github.workspace &amp;#125;&amp;#125;
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        width:
          repository: &amp;#39;vikingmute/lego-bricks&amp;#39;
      - name: List files in the repo
        run: |
          ls $&amp;#123;&amp;#123; github.workspace &amp;#125;&amp;#125;
      - uses: actions/setup-node@v2
        with:
          node-version: &amp;#39;16&amp;#39;
      - run: node -v
      - run: npm install -g typescript
      - run: tsc -v
  jobs:
    SECRET-SSH-ACTIONS:
      runs-on: ubuntu-latest
      steps:
      #使用ssh-action完成远程登陆：文档地址：https://github.com/appleboy/ssh-action
        - uses: appleboy/ssh-action@master 
          with:
            host: $&amp;#123;&amp;#123; secrets.HOST &amp;#125;&amp;#125;
            username: $&amp;#123;&amp;#123; secrets.SSH_USER &amp;#125;&amp;#125;
            password: $&amp;#123;&amp;#123; secrets.SSH_PWD &amp;#125;&amp;#125;
            script_stop: true
            script: |
              pwd
              ls -l
              touch secret.txt
              echo $&amp;#123;&amp;#123; secrets.MY_SECRET &amp;#125;&amp;#125; &amp;gt;&amp;gt; secret.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;自动化部署&#34;&gt;&lt;a href=&#34;#自动化部署&#34; class=&#34;headerlink&#34; title=&#34;自动化部署&#34;&gt;&lt;/a&gt;自动化部署&lt;/h1&gt;&lt;h2 id=&#34;推送远程镜像仓库&#34;&gt;&lt;a href=&#34;#推送远程镜像仓库&#34; class=&#34;headerlink&#34; title=&#34;推送远程镜像仓库&#34;&gt;&lt;/a&gt;推送远程镜像仓库&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;普通线上更新流程：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 每次代码更新以后，登录到ssh服务器
# 关闭服务
docker-compose down
# 更新代码
git pull
# 假如有.env，的更新需要重新设置，env文件
# 重新build应用镜像
docker-compose build lego-backend
# 重启服务
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;弊端：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初次上线和更新属于两步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初次上线需要特别的操作，就是之前手动部署上线的运行的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clone代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置环境变量.env&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker-compose up -d&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追求的成果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每次提交，可以自动一次性的部署到任何服务器，实现初次启动或者更新的效果，这才是一个完美的devops的流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将上面本地的镜像存在于docker hub服务器中，这样每次就不用重新build，而是直接拉取。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;services:
  lego-redis:
    image:redis:6
  lego-mongo:
    image:mongo:latest
  lego-backend:
    image:lego-backend
#我们需要每次手动的build镜像，也就说镜像只存在于本地
  build:
    ......context:.
    dockerfile:Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;改为：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;# 更好的方案
# 不需要任何代码库中的文件，只需要一个docker-compose.yml文件
# 就可以轻松的在任何服务器运行
services:
  lego-redis:
    image:redis:6
  lego-mongo
    image:mongo:latest
  lego-backend:
# 不需要build,而是存在于docker hub服务器中，可以每次直接拉取
    image:lego-backend:1.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;docker hub免费版有限制，推荐使用阿里云容器镜像服务：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sd3d3LmFsaXl1bi5jb20vcHJvZHVjdC9hY3I=&#34;&gt;阿里云容器镜像服务ACR&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;个人版完全免费&lt;/p&gt;
&lt;p&gt;创建镜像仓库之后，需要将本地镜像推送到ACR仓库中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 来到镜像仓库的基本信息页面
# 登录
docker login --username=用户名 registry.cn-hangzhou.aliyuncs.com
# tag两种方式：
# 1:使用tag bui1d
docker build--tag &amp;quot;registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]&amp;quot;
# 2:给 build 好的打 tag
docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]
# 查看镜像是否 build 完成
docker images
# 推送镜像
docker push registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]
# 在阿里云ACR界面检查看是否已经存在
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Github-Actions自动部署&#34;&gt;&lt;a href=&#34;#Github-Actions自动部署&#34; class=&#34;headerlink&#34; title=&#34;Github Actions自动部署&#34;&gt;&lt;/a&gt;Github Actions自动部署&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用github actions加成自动化部署：当推送代码到github仓库时，让我们的代码自动提交镜像到镜像仓库。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大体分为两步&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h6 id=&#34;在github服务器上build-image并且push&#34;&gt;&lt;a href=&#34;#在github服务器上build-image并且push&#34; class=&#34;headerlink&#34; title=&#34;在github服务器上build image并且push&#34;&gt;&lt;/a&gt;在github服务器上build image并且push&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用docker-compose-online文件在服务器上运行应用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第一步详细流程分析，在github runner上运行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;checkout代码（在github服务器上）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建.env文件，并且添加两个环境变量( upload to OSS需要两个对应的信息 )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用阿里云ACR完成docker login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用正确的阿里云tag进行docker build&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎样每次push生成特殊的tag？是一个后续的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker push&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：【1】在项目文件夹.github&amp;#x2F;workflow下创建yml文件，写入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: build image,push to ACR
on: [push]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # checkout 代码
      - uses: actions/checkout@v2
      # 创建env文件
      - run: touch .env
      # 使用“ &amp;gt;&amp;gt; ”添加信息
      - run: echo ALC_ACCESS_KEY=$&amp;#123;&amp;#123; secrets.ALC_ACCESS_KEY &amp;#125;&amp;#125; &amp;gt;&amp;gt; .env
      - run: echo ALC_SECRET_KEY=$&amp;#123;&amp;#123; secrets.ALC_SECRET_KEY &amp;#125;&amp;#125; &amp;gt;&amp;gt; .env
      # 使用阿里云ACR 完成 docker login
      - name: Login to Aliyun ACR
        uses: aliyun/acr-login@v1 # 使用专属的镜像
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          region-id: cn-hangzhou # 查看官网自己仓库的信息
          username: &amp;quot;$&amp;#123;&amp;#123; secrets.ACR_USERNAME &amp;#125;&amp;#125;&amp;quot;
          password: &amp;quot;$&amp;#123;&amp;#123; secrets.ACR_PASSWORD &amp;#125;&amp;#125;&amp;quot;
        # 使用正确的阿里云 tag 进行 docker build
        - name: Build image for Docker
          run: docker build --tag &amp;quot;registry.cn-hangzhou.aliyuncs.com/dmq00/test:0.0.2&amp;quot;
        - name: Push Image to ACR
          run: docker push registry.cn-hangzhou.aliyuncs.com/dmq00/test:0.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就能保证代码push到github上之后自动将镜像推送到docker镜像仓库，结合dockerfile文件就能保证使用docker镜像时自动执行命令，安装对应依赖并执行项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步详细流程分析，在服务器上部署对应的代码并且运行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;checkout代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建.env文件，添加多个环境变量。(应用所有需要的环境变量)，github  secrets中添加。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建文件夹，拷贝如下文件到文件夹内&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.env&lt;/li&gt;
&lt;li&gt;docker-compose-online.yml&lt;/li&gt;
&lt;li&gt;mongo-entrypoint文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将新建的文件夹拷贝到服务器(SCP)当中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwcGxlYm95L3NjcC1hY3Rpb24=&#34;&gt;https://github.com/appleboy/scp-action&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SSH到服务器中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入拷贝的文件夹内&lt;/li&gt;
&lt;li&gt;登录阿里云ACR&lt;/li&gt;
&lt;li&gt;停止服务docker-compose down （第一次的话，没有启动也不会报错）&lt;/li&gt;
&lt;li&gt;启动服务docker-compose up&lt;/li&gt;
&lt;li&gt;清理工作可选，保证安全（删除.env文件，登出docker账户）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;后续过程需要完成：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在push tags的时候才触发对应的job&lt;/p&gt;
&lt;p&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy9ldmVudHMtdGhhdC10cmlnZ2VyLXdvcmtmbG93cw==&#34;&gt;https://docs.github.com/cn/actions/learn-github-actions/events-that-trigger-workflows&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;怎样获取对应的每次提交相关的特殊信息&lt;/p&gt;
&lt;p&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy9jb250ZXh0cw==&#34;&gt;https://docs.github.com/en/actions/learn-github-actions/contexts&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用这个特殊信息，在对应的docker-compose-online.yml中进行替换，将要启动的版本替换为将要构建的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/03/30/jest/</guid>
            <title>jest</title>
            <link>https://dmqweb.cn/2024/03/30/jest/</link>
            <category term="TDD" scheme="https://dmqweb.cn/categories/TDD/" />
            <category term="jest" scheme="https://dmqweb.cn/tags/jest/" />
            <pubDate>Sat, 30 Mar 2024 20:33:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;jest测试&#34;&gt;&lt;a href=&#34;#jest测试&#34; class=&#34;headerlink&#34; title=&#34;jest测试&#34;&gt;&lt;/a&gt;jest测试&lt;/h1&gt;&lt;p&gt;市面上有很多测试框架，例如：mocha 、jasmine、vue test utils、vitest、react testing library和testing frameworks for jacascript等，但语法和思想大致相同，现在依jest框架进行简单的使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;/**
 * jest简单的语法
 * expect  toBe 语法
 */
test(&amp;#39;tow plus to 4&amp;#39;,()=&amp;gt;&amp;#123;
    expect(2+2).toBe(4);
&amp;#125;)
/**
 * toEqual语法，递归检查对象或数组的每个字段
 */
test(&amp;#39;object assignment&amp;#39;,()=&amp;gt;&amp;#123;
    const data = &amp;#123;name:&amp;quot;张三&amp;quot;&amp;#125;;
    data[&amp;#39;age&amp;#39;] = 18;
    expect(data).toEqual(&amp;#123;name:&amp;quot;张三&amp;quot;,age:18&amp;#125;)
&amp;#125;)
/**
 * expect  not  toBe
 */
test(&amp;#39;adding is not 0&amp;#39;,()=&amp;gt;&amp;#123;
    for(let i=0;i&amp;lt;10;i++)&amp;#123;
        for(let j=0;j&amp;lt;5;j++)&amp;#123;
            expect(i + j).not.toBe(-1);
        &amp;#125;
    &amp;#125;
&amp;#125;)
/**
 * 检查指定空类型（null,undefined,defined，true和false）
 */
test(&amp;#39;toBe null&amp;#39;,()=&amp;gt;&amp;#123;
    const n = null;
    expect(n).toBeNull();
&amp;#125;)
test(&amp;#39;toBe defined&amp;#39;,()=&amp;gt;&amp;#123;
    const n = 1;
    expect(n).toBeDefined();
&amp;#125;)
test(&amp;#39;toBe Undefined&amp;#39;,()=&amp;gt;&amp;#123;
    let n;
    expect(n).toBeUndefined();
&amp;#125;)
test(&amp;#39;toBe Truthy&amp;#39;,()=&amp;gt;&amp;#123;
    const n = 1;
    const m = true;
    expect(n &amp;amp;&amp;amp; m).toBeTruthy();
&amp;#125;)
test(&amp;#39;toBe falsy&amp;#39;,()=&amp;gt;&amp;#123;
    const n = 0;
    const m = false;
    expect(n &amp;amp;&amp;amp; m).toBeFalsy();
&amp;#125;)
/**
 * jest对0进行精确测试的结果
 */
test(&amp;#39;zero&amp;#39;, () =&amp;gt; &amp;#123;
    const z = 0;
    expect(z).not.toBeNull(); //非null
    expect(z).toBeDefined(); //defined
    expect(z).not.toBeUndefined(); 
    expect(z).not.toBeTruthy(); //非true
    expect(z).toBeFalsy(); //false
  &amp;#125;);
/**
 * jest测试数字
 */
test(&amp;#39;two and two&amp;#39;,()=&amp;gt;&amp;#123;
    const value = 2 + 2;
    expect(value).toBeGreaterThan(3);
    expect(value).toBeGreaterThanOrEqual(4)
    expect(value).toBeLessThanOrEqual(4.5)
    expect(value).toBeLessThanOrEqual(4)
    expect(value).toBe(4)
    expect(value).toEqual(4)
&amp;#125;)
/**
 * toBeCloseTo检查浮点数相等
 */
test(&amp;#39;test float number&amp;#39;,()=&amp;gt;&amp;#123;
    const value = 0.1 + 0.2;
    // expect(value).toBe(0.3)  报错，因为计算机精度的原因
    expect(value).toBeCloseTo(0.3)
&amp;#125;)
/**
 * toMatch根据正则表达式检查字符串
 */
test(&amp;#39;test reg&amp;#39;,()=&amp;gt;&amp;#123;
    expect(&amp;#39;team&amp;#39;).not.toMatch(/I/)
    expect(&amp;#39;Christoph&amp;#39;).toMatch(/stop/)
    expect(&amp;#39;hello world&amp;#39;).toMatch(&amp;#39;lo w&amp;#39;)
&amp;#125;)
/**
 * toContain测试数组和可迭代对象
 */
const List = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;];
test(&amp;#39;list to be&amp;#39;,()=&amp;gt;&amp;#123;
    expect(List).toContain(&amp;#39;c&amp;#39;);
    expect(List).not.toContain(1);
&amp;#125;)
/**
 * 测试异步代码
 */
const testPromise = Promise.resolve(&amp;#39;hello&amp;#39;);
//1 使用return
test(&amp;#39;return异步代码&amp;#39;,()=&amp;gt;&amp;#123;
    return testPromise.then(data=&amp;gt;&amp;#123;
        expect(data).toBe(&amp;#39;hello&amp;#39;)
    &amp;#125;)
&amp;#125;)
//2 使用async和await语法
function fetchMessage() &amp;#123;
    return new Promise((resolve) =&amp;gt; &amp;#123;
        setTimeout(() =&amp;gt; &amp;#123;
            resolve(&amp;#39;hello&amp;#39;);
        &amp;#125;, 1000);
    &amp;#125;);
&amp;#125;
test(&amp;#39;async and await&amp;#39;, async () =&amp;gt; &amp;#123;
    const result = await fetchMessage();
    expect(result).toBe(&amp;#39;hello&amp;#39;);
&amp;#125;);
//expect.assertions验证是否调用了一定数量的断言，确保兑现的承若通过测试
//catch捕捉（确保Promise不会被兑现）
// test(&amp;#39;catch fails with errors&amp;#39;,()=&amp;gt;&amp;#123;
//     return fetchData2().catch(e=&amp;gt;expect(e).toMatch(&amp;#39;error&amp;#39;))
// &amp;#125;)

// 3 使用回调函数done
test(&amp;#39;done to async&amp;#39;,(done)=&amp;gt;&amp;#123;
    testPromise.then(res=&amp;gt;&amp;#123;
        expect(res).toBe(&amp;#39;hello&amp;#39;);
    &amp;#125;)
    done();
&amp;#125;)
// 4 .resolves匹配器等待Promise解析（reject则失败）
test(&amp;#39;.resolves匹配器&amp;#39;,()=&amp;gt;&amp;#123;
    expect(testPromise).resolves.toBe(&amp;#39;hello&amp;#39;)
&amp;#125;)
/**
 * beforeEach和afterEach钩子函数
 * 当每一个测试之前或之后都需要调用相同的方法就可以使用这两个钩子函数
 */

/**
 * describe块
 */

/**
 * test.only只运行一个测试
 */
test.only(&amp;#39;test only&amp;#39;,()=&amp;gt;&amp;#123;
    expect(&amp;#39;test only&amp;#39;).toMatch(&amp;#39;t o&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dmqweb.cn/2024/03/30/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/</guid>
            <title>本地文件链接</title>
            <link>https://dmqweb.cn/2024/03/30/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/</link>
            <category term="脚手架开发" scheme="https://dmqweb.cn/categories/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/" />
            <category term="脚手架 cli" scheme="https://dmqweb.cn/tags/%E8%84%9A%E6%89%8B%E6%9E%B6-cli/" />
            <pubDate>Sat, 30 Mar 2024 19:31:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;链接本地文件的方式&#34;&gt;&lt;a href=&#34;#链接本地文件的方式&#34; class=&#34;headerlink&#34; title=&#34;链接本地文件的方式&#34;&gt;&lt;/a&gt;链接本地文件的方式&lt;/h1&gt;&lt;h3 id=&#34;npm-link&#34;&gt;&lt;a href=&#34;#npm-link&#34; class=&#34;headerlink&#34; title=&#34;npm link&#34;&gt;&lt;/a&gt;npm link&lt;/h3&gt;&lt;p&gt;1、带有package.json文件的文件夹内运行：npm link ，即可在用户全局中创建该文件夹的全局链接。&lt;/p&gt;
&lt;p&gt;2、在需要使用文件的地方执行：npm link  文件名，注意文件名是package.json中的name字段值。&lt;/p&gt;
&lt;h3 id=&#34;file路径&#34;&gt;&lt;a href=&#34;#file路径&#34; class=&#34;headerlink&#34; title=&#34;file路径&#34;&gt;&lt;/a&gt;file路径&lt;/h3&gt;&lt;p&gt;在需要使用的package.json的dependence中添加：文件名：”file:  ….”，添加上file路径指向本地文件。&lt;/p&gt;
&lt;h3 id=&#34;区别：&#34;&gt;&lt;a href=&#34;#区别：&#34; class=&#34;headerlink&#34; title=&#34;区别：&#34;&gt;&lt;/a&gt;区别：&lt;/h3&gt;&lt;p&gt;两种方式的区别在于如果项目较为简单，使用file:路径即可解决，但如果项目较为复杂，且文件包括文件地址需要不断移动时，使用npm  link的方式更好。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
