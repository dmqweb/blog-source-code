<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dmqweb.cn</id>
    <title>杜明清的个人博客</title>
    <subtitle>👻欢迎一起交流学习👻</subtitle>
    <icon>https://dmqweb.cn/images/favicon.ico</icon>
    <link href="https://dmqweb.cn" />
    <author>
      <name>dmq</name>
    </author>
    <updated>2024-07-29T06:56:39.000Z</updated>
    <entry>
        <id>https://dmqweb.cn/2024/07/29/%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</id>
        <title>架构风格</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/29/%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTQzMDY4MjA1MDY0I2hlYWRpbmctMA==&#34;&gt;推荐&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;分层架构&#34;&gt;&lt;a href=&#34;#分层架构&#34; class=&#34;headerlink&#34; title=&#34;分层架构&#34;&gt;&lt;/a&gt;分层架构&lt;/h1&gt;&lt;h1 id=&#34;管道架构&#34;&gt;&lt;a href=&#34;#管道架构&#34; class=&#34;headerlink&#34; title=&#34;管道架构&#34;&gt;&lt;/a&gt;管道架构&lt;/h1&gt;&lt;h1 id=&#34;复制风格&#34;&gt;&lt;a href=&#34;#复制风格&#34; class=&#34;headerlink&#34; title=&#34;复制风格&#34;&gt;&lt;/a&gt;复制风格&lt;/h1&gt;&lt;h1 id=&#34;微内核架构&#34;&gt;&lt;a href=&#34;#微内核架构&#34; class=&#34;headerlink&#34; title=&#34;微内核架构&#34;&gt;&lt;/a&gt;微内核架构&lt;/h1&gt;&lt;h1 id=&#34;微前端架构&#34;&gt;&lt;a href=&#34;#微前端架构&#34; class=&#34;headerlink&#34; title=&#34;微前端架构&#34;&gt;&lt;/a&gt;微前端架构&lt;/h1&gt;&lt;h1 id=&#34;组件化架构&#34;&gt;&lt;a href=&#34;#组件化架构&#34; class=&#34;headerlink&#34; title=&#34;组件化架构&#34;&gt;&lt;/a&gt;组件化架构&lt;/h1&gt;</content>
        <category term="架构风格" scheme="https://dmqweb.cn/categories/%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/" />
        <category term="架构风格" scheme="https://dmqweb.cn/tags/%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/" />
        <updated>2024-07-29T06:56:39.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/07/26/%E6%A1%86%E6%9E%B6%E9%AB%98%E7%BA%A7/</id>
        <title>框架高级</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/26/%E6%A1%86%E6%9E%B6%E9%AB%98%E7%BA%A7/"/>
        <content type="html">&lt;h1 id=&#34;vue高级用法&#34;&gt;&lt;a href=&#34;#vue高级用法&#34; class=&#34;headerlink&#34; title=&#34;vue高级用法&#34;&gt;&lt;/a&gt;vue高级用法&lt;/h1&gt;&lt;h3 id=&#34;watchEffect函数&#34;&gt;&lt;a href=&#34;#watchEffect函数&#34; class=&#34;headerlink&#34; title=&#34;watchEffect函数&#34;&gt;&lt;/a&gt;watchEffect函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;立即运行传入的函数，同时自动追踪其依赖，并在依赖更改时重新执行。&lt;br&gt;watchEffect的返回值是用于清除该副作用的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const data = ref(0);
const stop = watchEffect(()=&amp;gt;console.log(data.value,&amp;#39;data变化了&amp;#39;));
stop(); //清除响应性监听
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;watchEffect的第二个参数是options配置项，可以配置flush、onTrack函数和onTrigger函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;watchEffect(()=&amp;gt;&amp;#123;&amp;#125;,&amp;#123;
    flush:&amp;quot;post&amp;quot;, //flush配置项配置回调函数的刷新时机，post会在DOM渲染之后触发、sync会在vue进行任何更新之前进行触发
    onTrack(e)&amp;#123;debugger&amp;#125;;
    onTrigger(e)&amp;#123;debugger&amp;#125;;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;watchSyncEffect函数&#34;&gt;&lt;a href=&#34;#watchSyncEffect函数&#34; class=&#34;headerlink&#34; title=&#34;watchSyncEffect函数&#34;&gt;&lt;/a&gt;watchSyncEffect函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;回调函数会在DOM渲染之后触发,相当于watchEffect中配置了fulsh:”post”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;watchSyncEffect函数-1&#34;&gt;&lt;a href=&#34;#watchSyncEffect函数-1&#34; class=&#34;headerlink&#34; title=&#34;watchSyncEffect函数&#34;&gt;&lt;/a&gt;watchSyncEffect函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;回调函数在vue进行任何更新之前触发,相当于watchEffect中配置了fulsh:”sync”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;effectScope函数&#34;&gt;&lt;a href=&#34;#effectScope函数&#34; class=&#34;headerlink&#34; title=&#34;effectScope函数&#34;&gt;&lt;/a&gt;effectScope函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;effectScope函数创建一个effect作用域，可以捕获其中所创建的响应式副作用（即计算属性和侦听器），这样捕获到的副作用可以一起处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const scope = effectScope();
scope.run(()=&amp;gt;&amp;#123;
  const doubled = computed(() =&amp;gt; counter.value * 2)
  watch(doubled, () =&amp;gt; console.log(doubled.value))
  watchEffect(() =&amp;gt; console.log(&amp;#39;Count: &amp;#39;, doubled.value))
&amp;#125;)
scope.stop(); //清除掉作用域内所有的effect
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;getCurrentScope函数&#34;&gt;&lt;a href=&#34;#getCurrentScope函数&#34; class=&#34;headerlink&#34; title=&#34;getCurrentScope函数&#34;&gt;&lt;/a&gt;getCurrentScope函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;获取当前活跃的effect作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;onScopeDispost函数&#34;&gt;&lt;a href=&#34;#onScopeDispost函数&#34; class=&#34;headerlink&#34; title=&#34;onScopeDispost函数&#34;&gt;&lt;/a&gt;onScopeDispost函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在当前活跃的effect作用域上注册一个处理回调函数。当相关的effect作用域停止时会调用这个回调函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;shallowRef函数&#34;&gt;&lt;a href=&#34;#shallowRef函数&#34; class=&#34;headerlink&#34; title=&#34;shallowRef函数&#34;&gt;&lt;/a&gt;shallowRef函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用于浅层响应式,避免深层比较带来的效率问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;triggerRef函数&#34;&gt;&lt;a href=&#34;#triggerRef函数&#34; class=&#34;headerlink&#34; title=&#34;triggerRef函数&#34;&gt;&lt;/a&gt;triggerRef函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;强制触发依赖于一个浅层ref的副作用，通常在对浅引用的内部值进行深度变更后使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;customRef函数&#34;&gt;&lt;a href=&#34;#customRef函数&#34; class=&#34;headerlink&#34; title=&#34;customRef函数&#34;&gt;&lt;/a&gt;customRef函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;customRef函数创建一个自定义的ref，显示声明对其依赖追踪和更新触发的控制方式。预期接受一个工厂函数作为参数，这个工厂函数接收track和trigger两个函数作为参数，并返回一个带有get和set方法的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;// 定义一个返回懒执行响应式数据的函数
function useDebouncedRef(value,delay=200)&amp;#123;
    let timeout;
    return customRef((track,trigger)=&amp;gt;&amp;#123;
        return &amp;#123;
            get()&amp;#123;
                track();
                return value;
            &amp;#125;,
            set(newValue)&amp;#123;
                clearTimeout(timeout);
                timeout = setTimeout(()=&amp;gt;&amp;#123;
                    value = newValue;
                    trigger();
                &amp;#125;,delay)     
            &amp;#125;
        &amp;#125;
    &amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shallowReactive&#34;&gt;&lt;a href=&#34;#shallowReactive&#34; class=&#34;headerlink&#34; title=&#34;shallowReactive&#34;&gt;&lt;/a&gt;shallowReactive&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;shallowReactive是reactive的浅层作用形式，只有跟级别的属性是响应式的，属性的值会被原样存储和暴露，这也意味着值为ref的属性不会被自动解包了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;shallowReadonly&#34;&gt;&lt;a href=&#34;#shallowReadonly&#34; class=&#34;headerlink&#34; title=&#34;shallowReadonly&#34;&gt;&lt;/a&gt;shallowReadonly&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;shallowReadonly是readonly的浅层作用形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;isRef函数&#34;&gt;&lt;a href=&#34;#isRef函数&#34; class=&#34;headerlink&#34; title=&#34;isRef函数&#34;&gt;&lt;/a&gt;isRef函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用于检查某个值是否是ref&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;unref函数&#34;&gt;&lt;a href=&#34;#unref函数&#34; class=&#34;headerlink&#34; title=&#34;unref函数&#34;&gt;&lt;/a&gt;unref函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;如果是ref，返回ref内部的值，否则返回参数本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;toRef函数&#34;&gt;&lt;a href=&#34;#toRef函数&#34; class=&#34;headerlink&#34; title=&#34;toRef函数&#34;&gt;&lt;/a&gt;toRef函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;传入ref返回ref本身&lt;/li&gt;
&lt;li&gt;传入props.key创建一个只读的ref&lt;/li&gt;
&lt;li&gt;传入number或者string相当于ref函数&lt;/li&gt;
&lt;li&gt;传入响应式数据和键值会封装为一个ref，但是相比于直接封装ref来说，会与源属性进行同步&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const state = reactive(&amp;#123;foo:1,bar:2&amp;#125;);
const fooRef = toRef(state,&amp;#39;foo&amp;#39;); //fooRef会和state的响应性相关联
const fooRef2 = ref(state.foo); //fooRef2不会和state.foo的响应性相关联
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;toRefs函数&#34;&gt;&lt;a href=&#34;#toRefs函数&#34; class=&#34;headerlink&#34; title=&#34;toRefs函数&#34;&gt;&lt;/a&gt;toRefs函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;vue3中的ref将reactive响应性绑定到.value属性上，其本质就是为了防止开发者错误的将响应式数据进行解构后的变量又其当作响应式数据。所以加了一层隔离。toRefs函数也是用于解决这个问题。&lt;br&gt;将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的ref。每个单独的ref都是使用toRef创建的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const state = reactive(&amp;#123;
  name:&amp;quot;张三&amp;quot;,
  age:18  
&amp;#125;)
const stateAsRefs = toRefs(state);
state.name = &amp;quot;李四&amp;quot;; //toRefs返回的响应式数据和原响应式数据相互关联
console.log(stateAsRefs.name.value) //李四
//toRefs的存在是为了保证reactive响应式被解构之后仍然存在响应性
const &amp;#123;name,age&amp;#125; = toRefs(state)
//解构之后的name和age都是响应式对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;toRaw函数&#34;&gt;&lt;a href=&#34;#toRaw函数&#34; class=&#34;headerlink&#34; title=&#34;toRaw函数&#34;&gt;&lt;/a&gt;toRaw函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;toRaw返回由reactive、readonly、shallowReactive或者shallowReadonly创建的代理对应的原始对象（栈赋值），返回的对象不再具有响应式，栈赋值时不会影响到页面的展示，但如果改变该对象的堆中的属性，原对象的依赖项也会随之变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markRaw函数&#34;&gt;&lt;a href=&#34;#markRaw函数&#34; class=&#34;headerlink&#34; title=&#34;markRaw函数&#34;&gt;&lt;/a&gt;markRaw函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将一个对象标记为不可被转为代理，返回该对象本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;toValue函数&#34;&gt;&lt;a href=&#34;#toValue函数&#34; class=&#34;headerlink&#34; title=&#34;toValue函数&#34;&gt;&lt;/a&gt;toValue函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将值、函数、或响应式数据规范化为普通值，toValue(ref(1)) —&amp;gt; 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;isProxy函数&#34;&gt;&lt;a href=&#34;#isProxy函数&#34; class=&#34;headerlink&#34; title=&#34;isProxy函数&#34;&gt;&lt;/a&gt;isProxy函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;检查一个对象是否是由reactive、readonly、shallowReactive或者shallowReadonly创建的代理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;isReactive函数&#34;&gt;&lt;a href=&#34;#isReactive函数&#34; class=&#34;headerlink&#34; title=&#34;isReactive函数&#34;&gt;&lt;/a&gt;isReactive函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;检查一个对象是否是由reactive或shallowReactive创建的代理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;isreadonly函数&#34;&gt;&lt;a href=&#34;#isreadonly函数&#34; class=&#34;headerlink&#34; title=&#34;isreadonly函数&#34;&gt;&lt;/a&gt;isreadonly函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;检查传入的值是否是只读对象，只读对象的属性可以更改，但是不能通过传入的对象直接赋值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Transition组件&#34;&gt;&lt;a href=&#34;#Transition组件&#34; class=&#34;headerlink&#34; title=&#34;Transition组件&#34;&gt;&lt;/a&gt;Transition组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用过渡样式&lt;/li&gt;
&lt;li&gt;mode属性定义动画进行的顺序,常用out-in &lt;/li&gt;
&lt;li&gt;name属性定义动画的名称,配合css使用&lt;/li&gt;
&lt;li&gt;appear属性初次渲染过渡&lt;/li&gt;
&lt;li&gt;生命周期钩子用于自定义过渡中执行过程,依次是before-enter,enter,after-enter,enter-cancelled,before-leave,leave,leave-cancelled,可用的参数有el和done()&lt;/li&gt;
&lt;li&gt;css样式过渡:name-enter-from\name-enter-active\name-enter-to\name-leave-from\name-leave-active\name-leave-to定义对应时期的样式(只对可以过渡变化的样式生效)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;TransitionGroup组件&#34;&gt;&lt;a href=&#34;#TransitionGroup组件&#34; class=&#34;headerlink&#34; title=&#34;TransitionGroup组件&#34;&gt;&lt;/a&gt;TransitionGroup组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TransitionGroup组件用于对v-for列表中的元素或组件插入 、移除或顺序变化添加动画效果.&lt;/li&gt;
&lt;li&gt;属性和生命周期和Transition一样&lt;/li&gt;
&lt;li&gt;tag属性可以指定TransitionGroup为一个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;KeepAlive组件&#34;&gt;&lt;a href=&#34;#KeepAlive组件&#34; class=&#34;headerlink&#34; title=&#34;KeepAlive组件&#34;&gt;&lt;/a&gt;KeepAlive组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;KeepAlive用于在多个组件间切换状态时缓存被移除的组件实例(使组件保存状态)&lt;/li&gt;
&lt;li&gt;KeepAlive的原理就是当KeepAlive中的组件被移除时,用变量将整个组件缓存起来,需要切换时直接使用缓存起来的变量&lt;/li&gt;
&lt;li&gt;include和exclude属性用于包含或排除对应的组件name&lt;/li&gt;
&lt;li&gt;KeepAlive的组件包含onActivated和onDeactived两个生命周期钩子&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Teleport组件&#34;&gt;&lt;a href=&#34;#Teleport组件&#34; class=&#34;headerlink&#34; title=&#34;Teleport组件&#34;&gt;&lt;/a&gt;Teleport组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Teleport组件,用于将组件内部的一部分模板传送到外部结构中去&lt;/li&gt;
&lt;li&gt;to属性用于指定传送到的组件或者DOM元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Suspense组件&#34;&gt;&lt;a href=&#34;#Suspense组件&#34; class=&#34;headerlink&#34; title=&#34;Suspense组件&#34;&gt;&lt;/a&gt;Suspense组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Suspense组件用于显示异步组件加载中的显示状态&lt;/li&gt;
&lt;li&gt;Suspense组件中fallback具名插槽用于显示加载内容&lt;/li&gt;
&lt;li&gt;Suspense组件嵌套Suspense组件时,给内部Suspense组件加上suspensible属性表示为异步组件,否则则会被父级Suspense组件视为同步组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;watch的options配置项&#34;&gt;&lt;a href=&#34;#watch的options配置项&#34; class=&#34;headerlink&#34; title=&#34;watch的options配置项&#34;&gt;&lt;/a&gt;watch的options配置项&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;watch的options配置项中可以使用:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;immediate,为true时会在初始化时立即执行一次&lt;/li&gt;
&lt;li&gt;deep,为true时会深度监听对象堆中变化&lt;/li&gt;
&lt;li&gt;flush,调整回调函数的执行时机&lt;/li&gt;
&lt;li&gt;once,回调函数只会执行一次&lt;/li&gt;
&lt;li&gt;onTrack函数,当响应式被收集时进行触发&lt;strong&gt;只在开发模式下有效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;onTrigger函数,当依赖项变更时进行触发&lt;strong&gt;只在开发模式下有效&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;computed的options配置项&#34;&gt;&lt;a href=&#34;#computed的options配置项&#34; class=&#34;headerlink&#34; title=&#34;computed的options配置项&#34;&gt;&lt;/a&gt;computed的options配置项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;onTrack函数,当响应式被收集时进行触发&lt;strong&gt;只在开发模式下有效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;onTrigger函数,当依赖项变更时进行触发&lt;strong&gt;只在开发模式下有效&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vue对jsx的支持友好&#34;&gt;&lt;a href=&#34;#vue对jsx的支持友好&#34; class=&#34;headerlink&#34; title=&#34;vue对jsx的支持友好&#34;&gt;&lt;/a&gt;vue对jsx的支持友好&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在vue中也可以很方便的去集成jsx或tsx语法，tsx语法需要在tsconfig.json中配置：jsx：preserve，最终的jsx语法会被转换为h函数&lt;/li&gt;
&lt;li&gt;对于事件和案件修饰符，可以使用vue中的withModifiers函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vue对web-component的支持友好&#34;&gt;&lt;a href=&#34;#vue对web-component的支持友好&#34; class=&#34;headerlink&#34; title=&#34;vue对web component的支持友好&#34;&gt;&lt;/a&gt;vue对web component的支持友好&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在 Vue 应用中使用自定义元素基本上与使用原生 HTML 元素的效果相同&lt;/li&gt;
&lt;li&gt;需要在构建工具中配置compilerOptions.isCustomElement这个选项&lt;/li&gt;
&lt;li&gt;传递ODM属性时，需要使用v-bind绑定，通过.prop修饰符进行设置&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;my-element :user.prop=&amp;quot;&amp;#123; name: &amp;#39;jack&amp;#39; &amp;#125;&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
&amp;lt;!-- 等价简写 --&amp;gt;
&amp;lt;my-element .user=&amp;quot;&amp;#123; name: &amp;#39;jack&amp;#39; &amp;#125;&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用vue构建web component需要使用defineCustomElement这个方法定义出组件，然后通过customElement.define这个方法将vue组件添加标签到HTML中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-component的优缺点&#34;&gt;&lt;a href=&#34;#web-component的优缺点&#34; class=&#34;headerlink&#34; title=&#34;web component的优缺点&#34;&gt;&lt;/a&gt;web component的优缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全部使用自定义元素来构建应用的方式可以使得应用永不过时和多平台、框架共享&lt;/li&gt;
&lt;li&gt;但是设想与显示总是存在偏差：&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;1、原生web component并不具备响应式的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;2、原生web component并不具备一个声明式的、高效的模板系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;3、SSR渲染时，web component需要在node.js中模拟出DOM，这将增大服务器端的压力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;4、当下要想使用shadow DOM书写局部作用域的CSS，必须要将样式嵌入到JavaScript中才可以在运行时注入到shadow root上，这将导致SSR场景下需要渲染大量重复的样式标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vue结合js动画库&#34;&gt;&lt;a href=&#34;#vue结合js动画库&#34; class=&#34;headerlink&#34; title=&#34;vue结合js动画库&#34;&gt;&lt;/a&gt;vue结合js动画库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以gsap为例，vue结合js动画库实现动画效果时，不能直接对响应式变量进行动画设置，因为是响应式完成之后才被监听到，此时响应式变量已经是最新的值，所以应该再来一个响应式变量中转一下，页面动画效果绑定的是中转的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vue生命周期&#34;&gt;&lt;a href=&#34;#vue生命周期&#34; class=&#34;headerlink&#34; title=&#34;vue生命周期&#34;&gt;&lt;/a&gt;vue生命周期&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vue3中setup替代了beforeCreate和created&lt;/li&gt;
&lt;li&gt;beforeMount、monuted、beforeUpdate、updated、beforeUnmount、unMounted&lt;/li&gt;
&lt;li&gt;错误捕获钩子：onErrorCaptured，如果在onErrorCaptured中抛出一个错误，则会被app.config.errorHandler捕获到&lt;/li&gt;
&lt;li&gt;开发时钩子：onRenderTracked（组件渲染过程中追踪到响应式依赖时调用）和onRenderTriggered（当响应式依赖触发了组件渲染时调用）&lt;/li&gt;
&lt;li&gt;SSR钩子：onServerPrefetch（注册一个异步函数，在组件实例在服务器上被渲染之前调用），SSR渲染时，组件作为初始请求的一部分被渲染，这时可以在服务器上预请求数据，因为它比在客户端上更快。&lt;/li&gt;
&lt;li&gt;keepAlive组件下的钩子：onActivated和onDeactivated两个，用于当组件激活和失活时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;React&#34;&gt;&lt;a href=&#34;#React&#34; class=&#34;headerlink&#34; title=&#34;React&#34;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&#34;Fiber&#34;&gt;&lt;a href=&#34;#Fiber&#34; class=&#34;headerlink&#34; title=&#34;Fiber&#34;&gt;&lt;/a&gt;Fiber&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Fiber架构：Fiber架构是一个增量渲染，架构风格类似协程，Fiber架构出现的原因是由于 JS 单线程执行的特性当遇到繁琐的执行任务时，原来React15的协调过程就会很长，从而延迟DOM的渲染更新，进而出现掉帧。Fiber架构将任务分给一个个的迭代器进行执行，并且使迭代器的执行过程发生在浏览器的空闲时间，从而最大程度利用了这部分资源，使得UI渲染不会被大量执行任务所阻塞。&lt;br&gt;fiber树：fiber树是一个数据结构，架构在虚拟DOM转换到真实DOM之间，在Fiber结构中的任务是可以中断执行的，继续执行时会丢弃掉原来的工作从头再来，并且重新执行中断的任务，对用于来说也是无感的，因为Fiber架构的视图更新是后缓冲区视图 替换 前缓冲区视图的过程。&lt;br&gt;由于Fiber架构下的reconciler协调阶段是异步可中断的，且会被反复重新执行，使得反复执行时有可能触发的生命周期钩子被废弃，例如：componentWillMount、componentWillReceiveProps、componentWillUpdate这些。&lt;br&gt;fiber树（fiber节点构成的树状链表）的遍历与执行：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fiber树遍历：children子节点—-sibling兄弟节点—-return父节点&lt;/li&gt;
&lt;li&gt;fiber树的执行：遍历到最底层子节点A—-A的兄弟节点—–A的父节点B——B的兄弟节点（深度优先遍历）&lt;blockquote&gt;
&lt;p&gt;fiber节点（对象）：一个fiber节点对应一个React 组件，fiber节点里包含了组件的work任务等信息，比如组件的Hooks执行逻辑（它是一个链表，可以通过memorizedState拿到跟节点，Hooks执行逻辑里面存储了state）、生命周期、对于html组件的增删改查等副作用&lt;br&gt;当执行fiber节点中的任务时，每次执行完之后React就会检查当前帧还剩多少时间，没有时间就会将控制权让出去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fiber树、VDOM和diff算法&#34;&gt;&lt;a href=&#34;#fiber树、VDOM和diff算法&#34; class=&#34;headerlink&#34; title=&#34;fiber树、VDOM和diff算法&#34;&gt;&lt;/a&gt;fiber树、VDOM和diff算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;fiber树就是VDOM,fiber树的变化反映了组件的状态变化&lt;br&gt;diff算法的本质就是: 对比&lt;code&gt;current fiber&lt;/code&gt; 和 &lt;code&gt;JSX对象&lt;/code&gt; 生成 &lt;code&gt;work-in-progress-fiber&lt;/code&gt;&lt;br&gt;即使是最前沿的算法,完全对比两棵树的时间复杂度也需要O(n^3),其中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Hooks&#34;&gt;&lt;a href=&#34;#Hooks&#34; class=&#34;headerlink&#34; title=&#34;Hooks&#34;&gt;&lt;/a&gt;Hooks&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;注意：react Hooks只能在件顶层进行调用并且不能写在条件判断中，这是因为hooks以链表的形式存放在fiber节点中（类组件的副作用也存在fiber节点中），每次更新时会基于链表的顺序进行调用，而调用hooks所产生的state就存在于hooks节点之中，如果hooks写在条件判断中则导致hooks链表执行混乱，使得状态更新出错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;workLoop工作循环&#34;&gt;&lt;a href=&#34;#workLoop工作循环&#34; class=&#34;headerlink&#34; title=&#34;workLoop工作循环&#34;&gt;&lt;/a&gt;workLoop工作循环&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;workLoop中会根据当前帧的剩余时间去执行fiber节点中的任务,如果时间不够就将控制权转给UI渲染,并保存当期的执行上下文(包括当前fiber节点的状态),当UI渲染完毕后,恢复其执行(执行到一半的任务会重新执行)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;双缓冲策略&#34;&gt;&lt;a href=&#34;#双缓冲策略&#34; class=&#34;headerlink&#34; title=&#34;双缓冲策略&#34;&gt;&lt;/a&gt;双缓冲策略&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;双缓冲策略是用于减少组件渲染过程中的闪烁和卡顿。双缓冲策略是对于fiber树来说的&lt;br&gt;双缓冲策略会维护两个Fiber树：Work-in-progress-fiber树 和 current-fiber树。协调过程中React会比较新旧两个fiber树的差异，从而确定哪些组件需要更新。一旦新的fiber树构建完成，React就会使用diff算法去更新真实DOM。更新完成后会将工作Fiber树的根节点与当前Fiber树的根节点进行交换，这个过程叫做提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Fiber更新的三个阶段&#34;&gt;&lt;a href=&#34;#Fiber更新的三个阶段&#34; class=&#34;headerlink&#34; title=&#34;Fiber更新的三个阶段&#34;&gt;&lt;/a&gt;Fiber更新的三个阶段&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开始阶段: &lt;code&gt;ReactFiberBeginWork&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;这个阶段react需要决定哪些组件需要更新、哪些组件可以复用、哪些组件需要被挂载或卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;React 通过比较新旧 Fiber 树来确定变化，这个过程称为协调算法（Reconciliation）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;此阶段会创建一个新的工作进度树（work-in-progress tree），表示 UI 的最新状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;这个阶段是可中断的，React 可以决定挂起渲染过程，稍后再恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完成阶段: &lt;code&gt;ReactFiberCompeleteWork&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;这个阶段发生在实际将更新应用到屏幕之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;React 执行生命周期方法，如 getSnapshotBeforeUpdate，允许组件捕获当前的 DOM 状态或执行捕获操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;这个阶段用于执行那些需要在提交前知道布局效果的副作用，例如，测量组件的尺寸或位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提交阶段: &lt;code&gt;ReactFiberCommitWork&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;这是实际将更改应用到真实 DOM 的阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;React 处理所有副作用，如 componentDidMount、componentDidUpdate 和 componentWillUnmount 生命周期方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;更新 DOM 元素和属性，添加或删除 DOM 节点，以确保真实 DOM 与工作进度树同步。这个阶段是连续的，不能被中断，因为 DOM 更新通常需要原子性地完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么hooks不能写在条件判断&#34;&gt;&lt;a href=&#34;#为什么hooks不能写在条件判断&#34; class=&#34;headerlink&#34; title=&#34;为什么hooks不能写在条件判断&#34;&gt;&lt;/a&gt;为什么hooks不能写在条件判断&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;hooks函数最终会被存在组件对应的fiber节点的memoizatedState中，组件每次更新会按照顺序执行(hooks里面存着state状态)，如果组件每次更新时的hooks链表顺序乱了,就会导致state对应不上、状态混乱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;react不可变数据&#34;&gt;&lt;a href=&#34;#react不可变数据&#34; class=&#34;headerlink&#34; title=&#34;react不可变数据&#34;&gt;&lt;/a&gt;react不可变数据&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如当setData(data + 1)副作用在组件内连续调用三次时,其实是相当于只调用了一次,这就是react不可变数据或者说:当前快照只能操作当前快照的值 ;&lt;br&gt;出现react不可变数据现象的原因是由于: hooks执行逻辑最后会以链表的形式存储在fiber节点之中,而那里面不会有类似上面data这样的变量,data会在hooks执行过程被存储之前转换为其具体的值,上例正确的写法是写成一个函数,这样在存储hooks执行逻辑到fiber节点中时就会先执行传入的这个函数,例如应该写成:setData(()&amp;#x3D;&amp;gt;data+1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useState钩子&#34;&gt;&lt;a href=&#34;#useState钩子&#34; class=&#34;headerlink&#34; title=&#34;useState钩子&#34;&gt;&lt;/a&gt;useState钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;创建可以直接更新的状态变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useReducer钩子&#34;&gt;&lt;a href=&#34;#useReducer钩子&#34; class=&#34;headerlink&#34; title=&#34;useReducer钩子&#34;&gt;&lt;/a&gt;useReducer钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;与useState相似，创建状态变量，同时可以自定义reducer（内部变量变化的调度机制）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;function App() &amp;#123;
  //注意：reducer中的返回值就是新的state
  const dataReducer = (state, aciton) =&amp;gt; &amp;#123;
    switch (aciton) &amp;#123;
      case 0: return &amp;quot;你好&amp;quot;;
      case 1: return &amp;quot;世界&amp;quot;;
      case 2: return &amp;quot;你好世界&amp;quot;;
      default: return &amp;quot;世界你好&amp;quot;;
    &amp;#125;
  &amp;#125;
  const [data, dispatchData] = useReducer(dataReducer, &amp;quot;你好世界&amp;quot;);
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;&amp;#123;data&amp;#125;&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick=&amp;#123;() =&amp;gt; dispatchData(0)&amp;#125;&amp;gt;你好&amp;lt;/button&amp;gt;
      &amp;lt;button onClick=&amp;#123;() =&amp;gt; dispatchData(1)&amp;#125;&amp;gt;世界&amp;lt;/button&amp;gt;
      &amp;lt;button onClick = &amp;#123;()=&amp;gt;dispatchData(2)&amp;#125;&amp;gt;你好世界&amp;lt;/button&amp;gt;
      &amp;lt;button onClick=&amp;#123;() =&amp;gt; dispatchData(3)&amp;#125;&amp;gt;世界你好&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  )
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;createContext和useContext钩子&#34;&gt;&lt;a href=&#34;#createContext和useContext钩子&#34; class=&#34;headerlink&#34; title=&#34;createContext和useContext钩子&#34;&gt;&lt;/a&gt;createContext和useContext钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;createContext和useContext直接使用相当于是创建可用的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;const testContext = createContext(&amp;quot;初始化数据&amp;quot;)
// 在组件中就可以拿到testContextData,然后使用:
const testContextData = useContext(testContext);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;createContext和useContext高级用法本质上是依赖注入,他返回一个对象，对象的Provider属性是一个组件，用于注入数据（在Provider组件上绑定value属性），注入的数据可以通过useContext获取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;const ThemeContext = createContext(null); //创建context
function MyPage() &amp;#123;
  const [theme, setTheme] = useState(&amp;#39;dark&amp;#39;);
  // 将依赖注入到组件内部
  return (
    &amp;lt;ThemeContext.Provider value=&amp;#123;theme&amp;#125;&amp;gt;
      &amp;lt;ThemeText /&amp;gt;
    &amp;lt;/ThemeContext.Provider&amp;gt;
  );
&amp;#125;
// 组件内部使用注入的依赖
function ThemeText()&amp;#123;
  const themeData = useContext(ThemeContext);
  return &amp;lt;&amp;gt;&amp;#123;themeData&amp;#125;&amp;lt;/&amp;gt;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;useRef钩子&#34;&gt;&lt;a href=&#34;#useRef钩子&#34; class=&#34;headerlink&#34; title=&#34;useRef钩子&#34;&gt;&lt;/a&gt;useRef钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;帮助引用一个不需要渲染的值(不会触发组件重新渲染),返回一个具有current属性的对象,通常用于保存DOM节点&lt;br&gt;注意,改变 ref 不会触发重新渲染，所以 ref 不适合用于存储期望显示在屏幕上的信息。如有需要，使用 state 代替。React希望不要在渲染期间写入或者读取 ref.current,如果不得不在渲染期间读取 或者写入，那么应该 使用 state 代替。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;function App() &amp;#123;
  const inputFocus = (ref) =&amp;gt; &amp;#123;
    ref.current.focus();
  &amp;#125;;
  const inputRef = useRef(null);
  return (
    &amp;lt;&amp;gt;&amp;lt;input ref=&amp;#123;inputRef&amp;#125; /&amp;gt;
      &amp;lt;button onclick=&amp;#123;(e) =&amp;gt; inputFocus(inputRef)&amp;#125;&amp;gt;聚焦输入框&amp;lt;/button&amp;gt;&amp;lt;/&amp;gt;
  );
&amp;#125;
export default App
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;useEffect钩子&#34;&gt;&lt;a href=&#34;#useEffect钩子&#34; class=&#34;headerlink&#34; title=&#34;useEffect钩子&#34;&gt;&lt;/a&gt;useEffect钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;接收两个参数: 副作用函数和依赖项数组,当依赖项变化时自动执行副作用函数,副作用函数的返回值是一个清理函数,会在每次组件更新前进行执行&lt;br&gt;useEffect中第二个参数不传代表&lt;strong&gt;每次渲染组件后都执行一次&lt;/strong&gt;，传空数组代表&lt;strong&gt;只会在第一次挂载后执行&lt;/strong&gt;，传依赖项代表在&lt;strong&gt;依赖项变化时执行。&lt;/strong&gt;并且默认组件挂载时就会自动执行一次,以便可以读取到依赖项&lt;br&gt;useEffect 依赖项中传入 ref 通常是无效的，因为 ref 相当于不使用渲染赋值的 state 状态，传递过去的 ref 引用始终相同（不随着快照的渲染而变化）。&lt;br&gt;某些逻辑不能放在 effect 中执行，因为 effect 的执行是和组件渲染强绑定的（例如不能在 effect 中写购买商品的逻辑，这样会导致组件以任何方式被渲染都会执行购买逻辑，这样是不对的）&lt;br&gt;effect 中 return 的函数会在下一次 effect 执行前被执行，常用于执行清理函数（清除定时器等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useLayoutEffect钩子&#34;&gt;&lt;a href=&#34;#useLayoutEffect钩子&#34; class=&#34;headerlink&#34; title=&#34;useLayoutEffect钩子&#34;&gt;&lt;/a&gt;useLayoutEffect钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在浏览器重新绘制屏幕前执行，可以在此处测量布局。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useInsertionEffect钩子&#34;&gt;&lt;a href=&#34;#useInsertionEffect钩子&#34; class=&#34;headerlink&#34; title=&#34;useInsertionEffect钩子&#34;&gt;&lt;/a&gt;useInsertionEffect钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 React 对 DOM 进行更改之前触发，库可以在此处插入动态 CSS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useMemo钩子&#34;&gt;&lt;a href=&#34;#useMemo钩子&#34; class=&#34;headerlink&#34; title=&#34;useMemo钩子&#34;&gt;&lt;/a&gt;useMemo钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;缓存函数的计算结果,只有当依赖项发生变化时,才会重新计算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useCallback钩子&#34;&gt;&lt;a href=&#34;#useCallback钩子&#34; class=&#34;headerlink&#34; title=&#34;useCallback钩子&#34;&gt;&lt;/a&gt;useCallback钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;缓存函数的定义,接收的参数是: 缓存函数和依赖项,只有当依赖项(栈值)发生变化时,才会更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;function ProductPage(&amp;#123; productId, referrer, theme &amp;#125;) &amp;#123;
  // 在多次渲染中缓存函数
  const handleSubmit = useCallback((orderDetails) =&amp;gt; &amp;#123;
    post(&amp;#39;/product/&amp;#39; + productId + &amp;#39;/buy&amp;#39;, &amp;#123;
      referrer,
      orderDetails,
    &amp;#125;);
  &amp;#125;, [productId, referrer]); // 只要这些依赖没有改变

  return (
    &amp;lt;div className=&amp;#123;theme&amp;#125;&amp;gt;
      &amp;#123;/* ShippingForm 就会收到同样的 props 并且跳过重新渲染 */&amp;#125;
      &amp;lt;ShippingForm onSubmit=&amp;#123;handleSubmit&amp;#125; /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;useCallback是由useMemo封装而来: (useCallback内部存储的不是原来的函数体,而是一个普通函数返回函数体被useMemo缓存的结果)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;function useCallback (fn,dependencies)&amp;#123;
  return useMemo(()=&amp;gt;fn,dependencies)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;useTransition钩子&#34;&gt;&lt;a href=&#34;#useTransition钩子&#34; class=&#34;headerlink&#34; title=&#34;useTransition钩子&#34;&gt;&lt;/a&gt;useTransition钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;允许将状态转换标记为非阻塞，并允许其他更新中断它。为了更好地控制组件更新和动画而设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useDeferredValue钩子&#34;&gt;&lt;a href=&#34;#useDeferredValue钩子&#34; class=&#34;headerlink&#34; title=&#34;useDeferredValue钩子&#34;&gt;&lt;/a&gt;useDeferredValue钩子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;允许延迟更新 UI 的非关键部分，以让其他部分先更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Fragment组件&#34;&gt;&lt;a href=&#34;#Fragment组件&#34; class=&#34;headerlink&#34; title=&#34;Fragment组件&#34;&gt;&lt;/a&gt;Fragment组件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;Fragment&gt; 通常使用 &amp;lt;&amp;gt;…&amp;lt;&amp;#x2F;&amp;gt; 代替，它们都允许你在不添加额外节点的情况下将子元素组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Profiler组件&#34;&gt;&lt;a href=&#34;#Profiler组件&#34; class=&#34;headerlink&#34; title=&#34;Profiler组件&#34;&gt;&lt;/a&gt;Profiler组件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;Profiler&gt; 允许你编程式测量 React 树的渲染性能。接受一个id用于表示测量的UI部分,接受一个回调函数,当包裹的组件树更新时会传入渲染信息进行调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;&amp;lt;Profiler id=&amp;quot;App&amp;quot; onRender=&amp;#123;onRender&amp;#125;&amp;gt;
  &amp;lt;App /&amp;gt;
&amp;lt;/Profiler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;StrictMode组件&#34;&gt;&lt;a href=&#34;#StrictMode组件&#34; class=&#34;headerlink&#34; title=&#34;StrictMode组件&#34;&gt;&lt;/a&gt;StrictMode组件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;开启严格模式,开发阶段会渲染两次,使得尽早地发现组件中错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Suspense组件-1&#34;&gt;&lt;a href=&#34;#Suspense组件-1&#34; class=&#34;headerlink&#34; title=&#34;Suspense组件&#34;&gt;&lt;/a&gt;Suspense组件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;展示子组件加载完成前渲染的内容.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;jsx&#34;&gt;&amp;lt;Suspense fallback=&amp;#123;&amp;lt;Loading /&amp;gt;&amp;#125;&amp;gt;
  &amp;lt;AsyncComponent /&amp;gt;
&amp;lt;/Suspense&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memo方法&#34;&gt;&lt;a href=&#34;#memo方法&#34; class=&#34;headerlink&#34; title=&#34;memo方法&#34;&gt;&lt;/a&gt;memo方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;memo允许你的组件在道具没有改变的情况下跳过重新渲染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;createPortal方法&#34;&gt;&lt;a href=&#34;#createPortal方法&#34; class=&#34;headerlink&#34; title=&#34;createPortal方法&#34;&gt;&lt;/a&gt;createPortal方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;createPortal 允许你将 JSX 作为 children 渲染至 DOM 的指定部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;createRoot方法&#34;&gt;&lt;a href=&#34;#createRoot方法&#34; class=&#34;headerlink&#34; title=&#34;createRoot方法&#34;&gt;&lt;/a&gt;createRoot方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;createRoot 允许在浏览器的 DOM 节点中创建根节点以显示 React 组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;hydrateRoot方法&#34;&gt;&lt;a href=&#34;#hydrateRoot方法&#34; class=&#34;headerlink&#34; title=&#34;hydrateRoot方法&#34;&gt;&lt;/a&gt;hydrateRoot方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;hydrateRoot 函数允许你在先前由 react-dom&amp;#x2F;server 生成的浏览器 HTML DOM 节点中展示 React 组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;act方法&#34;&gt;&lt;a href=&#34;#act方法&#34; class=&#34;headerlink&#34; title=&#34;act方法&#34;&gt;&lt;/a&gt;act方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;行为测试助手,用于测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;forwardRef方法&#34;&gt;&lt;a href=&#34;#forwardRef方法&#34; class=&#34;headerlink&#34; title=&#34;forwardRef方法&#34;&gt;&lt;/a&gt;forwardRef方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;允许组件使用ref将 DOM 节点指向给父组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;lazy方法&#34;&gt;&lt;a href=&#34;#lazy方法&#34; class=&#34;headerlink&#34; title=&#34;lazy方法&#34;&gt;&lt;/a&gt;lazy方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;延迟加载组件(懒加载)。常配合Suspense组件使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;startTransition方法&#34;&gt;&lt;a href=&#34;#startTransition方法&#34; class=&#34;headerlink&#34; title=&#34;startTransition方法&#34;&gt;&lt;/a&gt;startTransition方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;可以在不阻止UI的情况下更新状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Vue和React比对&#34;&gt;&lt;a href=&#34;#Vue和React比对&#34; class=&#34;headerlink&#34; title=&#34;Vue和React比对&#34;&gt;&lt;/a&gt;Vue和React比对&lt;/h1&gt;&lt;h3 id=&#34;setup和Hooks&#34;&gt;&lt;a href=&#34;#setup和Hooks&#34; class=&#34;headerlink&#34; title=&#34;setup和Hooks&#34;&gt;&lt;/a&gt;setup和Hooks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;React Hooks在组件每次更新时,如果不做优化就会重新调用,这也带来一些性能问题&lt;/li&gt;
&lt;li&gt;Hooks有严格的调用顺序,并且不能写在条件分支中,还必须要写在react组件里面&lt;/li&gt;
&lt;li&gt;昂贵的计算需要使用useMemo,也需要传入正确的数组&lt;/li&gt;
&lt;li&gt;要解决变量闭包导致的问题,再结合并发功能,使得很难推理出一段钩子代码是什么时候运行的,并且很不好处理需要在多次渲染间保持引用的可变状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;react类组件和函数式组件&#34;&gt;&lt;a href=&#34;#react类组件和函数式组件&#34; class=&#34;headerlink&#34; title=&#34;react类组件和函数式组件&#34;&gt;&lt;/a&gt;react类组件和函数式组件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;类组件和函数式的比对实际上是: 面向对象和函数式编程这两大编程思想的碰撞&lt;br&gt;函数式编程关心的是:  需要做什么,而不是怎么去做 , 而面向对象关心的是:  数据和对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;面向对象编程&#34;&gt;&lt;a href=&#34;#面向对象编程&#34; class=&#34;headerlink&#34; title=&#34;面向对象编程&#34;&gt;&lt;/a&gt;面向对象编程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完成某项任务关心的是: 数据和对象&lt;br&gt;面向对象编程主要围绕着数据或者对象而不是功能和逻辑实现,他将&lt;code&gt;关注点放在对于数据的操作方法&lt;/code&gt;,&lt;code&gt;面向对象将数据和操作方法封装为一个类中,这样有利于代码的可复用性和可扩展性&lt;/code&gt;&lt;br&gt;面向对象编程的优点是: 效率高(符合现实世界)、容易维护(结构清晰)、易扩展(面向对象的程序往往高内聚而低耦合)、可重用(得益于对象的继承)&lt;br&gt;面型对象编程的缺点是: 过度的对象化、状态过于共享导致推理复杂、状态共享导致的并发问题(可变状态复杂的共享机制导致面向对象的代码几乎不可能并行化,需要复杂的线程锁定、互斥等机制)、消耗内存、性能低(会创建很多的类和实例)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面向对象编程三大特点&#34;&gt;&lt;a href=&#34;#面向对象编程三大特点&#34; class=&#34;headerlink&#34; title=&#34;面向对象编程三大特点:&#34;&gt;&lt;/a&gt;面向对象编程三大特点:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;封装意味着所有的数据和方法都被封装在对象内&lt;/code&gt;，由开发者自己选择性的去公开哪些属性和方法，对于创建的实例来说他能访问的只能是这些公开的属性和方法，而对于其他对象来说是无权访问此类或者进行更改，&lt;code&gt;封装这一特性为程序提供了更高的安全性&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;继承意味着代码的可重用性&lt;/code&gt;，子类和父类这两个概念就是很好的体现，子类拥有父类所有的属性和方法避免数据和方法的重复定义，同时也能够保持独特的层析结构,&lt;code&gt;继承这一特性为程序提供了可重用性&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;多态意味着设计对象以共享行为，使用继承子类可以用新的方法去覆盖父类共享的行为，多态性允许同一个方法执行两种不同的行为：覆盖和重载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数式编程&#34;&gt;&lt;a href=&#34;#函数式编程&#34; class=&#34;headerlink&#34; title=&#34;函数式编程&#34;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完成某项任务关心的是: 需要做什么,而不是怎么去做&lt;br&gt;函数式编程又称声明式编程,最明显的特点就是我们&lt;code&gt;不太关心函数的具体实现&lt;/code&gt;,而&lt;code&gt;只关心自己的业务逻辑线路&lt;/code&gt;&lt;br&gt;函数式编程的优点是: 代码可读性强、有一定的逻辑复用能力、并发速度快、出错率少易排查 ;&lt;br&gt;函数式编程的缺点是: 性能消耗大(主要是创建执行上下文的消耗) 和 资源占用大(数据不可变导致要创建很多重复的对象),同时不利于实现时间旅行等操作(状态很难回滚)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;函数式编程三大特点&#34;&gt;&lt;a href=&#34;#函数式编程三大特点&#34; class=&#34;headerlink&#34; title=&#34;函数式编程三大特点:&#34;&gt;&lt;/a&gt;函数式编程三大特点:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数是一等公民: 在JS中函数和其他数据类型一样处于平等地位,可以作为变量赋值给其他变量,并且可以作为参数和返回值&lt;/li&gt;
&lt;li&gt;声明式编程: 函数式编程又称声明式编程,我们不太关心函数内部的具体实现,而是关心业务逻辑的执行流程&lt;/li&gt;
&lt;li&gt;纯函数: 纯函数特点:无副作用、引用透明 和 数据不可变&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;无副作用: 本身不会依赖和修改外部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;引用透明: 输入相同的值一定会得到相同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;数据不可变: 针对引用数据类型的入参,最好的方式是重新生成一份数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="框架高级" scheme="https://dmqweb.cn/categories/%E6%A1%86%E6%9E%B6%E9%AB%98%E7%BA%A7/" />
        <category term="框架高级" scheme="https://dmqweb.cn/tags/%E6%A1%86%E6%9E%B6%E9%AB%98%E7%BA%A7/" />
        <updated>2024-07-26T04:24:04.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/07/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
        <title>操作系统</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;操作系统定义&#34;&gt;&lt;a href=&#34;#操作系统定义&#34; class=&#34;headerlink&#34; title=&#34;操作系统定义&#34;&gt;&lt;/a&gt;操作系统定义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;操作系统（Operating System）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件应用程序，同时也是计算机系统的内核和基石。&lt;br&gt;操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;进程&#34;&gt;&lt;a href=&#34;#进程&#34; class=&#34;headerlink&#34; title=&#34;进程&#34;&gt;&lt;/a&gt;进程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;进程是：操作系统进行&lt;code&gt;资源分配&lt;/code&gt;的基本单位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;线程&#34;&gt;&lt;a href=&#34;#线程&#34; class=&#34;headerlink&#34; title=&#34;线程&#34;&gt;&lt;/a&gt;线程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;线程是：操作系统进行&lt;code&gt;资源调度&lt;/code&gt;的基本单位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;内存&#34;&gt;&lt;a href=&#34;#内存&#34; class=&#34;headerlink&#34; title=&#34;内存&#34;&gt;&lt;/a&gt;内存&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;内存是：计算机的随机访问存储器（RAM），是计算机的主要存储资源之一，用于存储计算机运行时正在使用或即将使用的数据和指令。&lt;br&gt;内存具有：易失性（计算机关闭时内存中的数据会丢失）、访问速度快等特点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;虚拟内存（地址空间）&#34;&gt;&lt;a href=&#34;#虚拟内存（地址空间）&#34; class=&#34;headerlink&#34; title=&#34;虚拟内存（地址空间）&#34;&gt;&lt;/a&gt;虚拟内存（地址空间）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;虚拟内存是：虚拟内存是操作系统对物理内存的抽象，是一种内存管理技术，允许操作系统将硬盘空间用作临时的RAM来使用&lt;br&gt;虚拟内存能够运行比物理内存更多的内存的程序，同时也为操作系统提供了更大的地址空间，虚拟内存的关键有：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;地址转换&lt;/li&gt;
&lt;li&gt;分页&lt;/li&gt;
&lt;li&gt;页面置换算法&lt;/li&gt;
&lt;li&gt;硬盘空间使用&lt;/li&gt;
&lt;li&gt;性能影响&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;文件&#34;&gt;&lt;a href=&#34;#文件&#34; class=&#34;headerlink&#34; title=&#34;文件&#34;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;文件是：操作系统对物理磁盘的抽象，是一个基本的数据存储单元，用于在计算机系统或存储设备上保存数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;shell&#34;&gt;&lt;a href=&#34;#shell&#34; class=&#34;headerlink&#34; title=&#34;shell&#34;&gt;&lt;/a&gt;shell&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;shell是：一个程序，可以从键盘中获取命令并将其提供给操作系统进行执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;GUI&#34;&gt;&lt;a href=&#34;#GUI&#34; class=&#34;headerlink&#34; title=&#34;GUI&#34;&gt;&lt;/a&gt;GUI&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GUI是：一个用户界面，用户可以通过图形或图标指示符与电子设备进行交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;计算机架构&#34;&gt;&lt;a href=&#34;#计算机架构&#34; class=&#34;headerlink&#34; title=&#34;计算机架构&#34;&gt;&lt;/a&gt;计算机架构&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;计算机架构是：计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法，主要包括：指令集、内存管理、I&amp;#x2F;O和总线结构等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;多处理系统&#34;&gt;&lt;a href=&#34;#多处理系统&#34; class=&#34;headerlink&#34; title=&#34;多处理系统&#34;&gt;&lt;/a&gt;多处理系统&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;多处理系统是：指计算机同时运行多个程序的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;程序计数器&#34;&gt;&lt;a href=&#34;#程序计数器&#34; class=&#34;headerlink&#34; title=&#34;程序计数器&#34;&gt;&lt;/a&gt;程序计数器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;程序计数器是：一个CPU中的寄存器，用于指示计算机在其程序序列中的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;多线程&#34;&gt;&lt;a href=&#34;#多线程&#34; class=&#34;headerlink&#34; title=&#34;多线程&#34;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;多线程是：指一个软件或硬件上实现多线程并发执行的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;CPU核心（core）&#34;&gt;&lt;a href=&#34;#CPU核心（core）&#34; class=&#34;headerlink&#34; title=&#34;CPU核心（core）&#34;&gt;&lt;/a&gt;CPU核心（core）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CPU核心是：CPU的大脑，它接收指令，并执行计算或运算以满足这些指令，一个CPU可以有多个内核。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;图形处理器（视觉处理器）&#34;&gt;&lt;a href=&#34;#图形处理器（视觉处理器）&#34; class=&#34;headerlink&#34; title=&#34;图形处理器（视觉处理器）&#34;&gt;&lt;/a&gt;图形处理器（视觉处理器）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图形处理器是：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;缓存命中&#34;&gt;&lt;a href=&#34;#缓存命中&#34; class=&#34;headerlink&#34; title=&#34;缓存命中&#34;&gt;&lt;/a&gt;缓存命中&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当应用程序或软件请求数据时，会首先发生缓存命中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;RAM（随机存取存储器、主存）&#34;&gt;&lt;a href=&#34;#RAM（随机存取存储器、主存）&#34; class=&#34;headerlink&#34; title=&#34;RAM（随机存取存储器、主存）&#34;&gt;&lt;/a&gt;RAM（随机存取存储器、主存）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;RAM是：与CPU直接交换数据的内存存储器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;ROM（只读存储器）&#34;&gt;&lt;a href=&#34;#ROM（只读存储器）&#34; class=&#34;headerlink&#34; title=&#34;ROM（只读存储器）&#34;&gt;&lt;/a&gt;ROM（只读存储器）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ROM是：一助攻半导体存储器,特点是一旦存储数据就无法改变或删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;驱动程序&#34;&gt;&lt;a href=&#34;#驱动程序&#34; class=&#34;headerlink&#34; title=&#34;驱动程序&#34;&gt;&lt;/a&gt;驱动程序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;驱动程序是：一个允许高级别电脑软件与硬件交互的程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;USB&#34;&gt;&lt;a href=&#34;#USB&#34; class=&#34;headerlink&#34; title=&#34;USB&#34;&gt;&lt;/a&gt;USB&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;USB是：连接计算机系统与外部设备的一种串口总线标准,也是一种输入输出接口的技术规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;地址空间&#34;&gt;&lt;a href=&#34;#地址空间&#34; class=&#34;headerlink&#34; title=&#34;地址空间&#34;&gt;&lt;/a&gt;地址空间&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;地址空间是：内存中可供程序或进程使用的有效地址规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;进程间通信&#34;&gt;&lt;a href=&#34;#进程间通信&#34; class=&#34;headerlink&#34; title=&#34;进程间通信&#34;&gt;&lt;/a&gt;进程间通信&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;进程间通信是：指至少两个进程或线程间传送数据或信号的一些技术或方法&lt;br&gt;进程间的通信方式有：管道、消息队列、共享内存、信号量、信号、套接字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;管道&lt;br&gt;管道一种半双工的通信方式，数据只能单向流动，管道实质上是一个内核缓冲区，且以先进先出的方式存取数据。&lt;br&gt;管道分为命名管道和匿名管道&lt;br&gt;匿名管道它的优点是：简单方便；缺点是：&lt;br&gt;因为管道局限于单向通信且缓冲区有限, 所以它的通信效率低, 不适合进程间频繁地交换数据&lt;br&gt;只能在父子进程间使用&lt;br&gt;命名管道，和匿名管道相比，它的优点是：可以实现任意关系的进程间的通信；缺点是：&lt;br&gt;长期存在系统中，使用不当容易出错&lt;/li&gt;
&lt;li&gt;消息队列&lt;br&gt;消息队列是保存在内核中的消息链表&lt;br&gt;优点：可以实现任意进程间的通信，并且通过系统调用函数来实现消息发送和接收之间的同步，无需考虑同步问题&lt;br&gt;缺点：&lt;br&gt;消息队列不适合比较大数据的传输，因为每个消息体都有最大长度限制，同时全体消息也有总长度上限&lt;br&gt;通信过程中，存在用户态与内核态之间的数据拷贝开销&lt;/li&gt;
&lt;li&gt;共享内存&lt;br&gt;共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问&lt;br&gt;优点：进程可以直接读写这块内存而不需要进行数据拷贝，提高效率&lt;br&gt;缺点：&lt;br&gt;多个进程同时修改同一个共享内存，会发生冲突&lt;br&gt;共享内存只能在同一计算机系统中共享&lt;/li&gt;
&lt;li&gt;信号量&lt;br&gt;信号量是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据&lt;br&gt;优点：信号量解决了止多进程竞争共享资源，而造成数据的错乱的&lt;br&gt;缺点：信号量有限&lt;/li&gt;
&lt;li&gt;信号&lt;br&gt;信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生&lt;/li&gt;
&lt;li&gt;套接字&lt;br&gt;套接字通信不仅可以跨网络与不同主机的进程通信，还可以在同主机进程通信&lt;br&gt;优点：&lt;br&gt;传输数据为字节级，传输数据可自定义&lt;br&gt;适合客户端和服务端之间信息实时交互&lt;br&gt;可以加密，数据安全性强&lt;br&gt;缺点：需对传输的数据进行解析，转化成应用级的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;目录（文件夹）&#34;&gt;&lt;a href=&#34;#目录（文件夹）&#34; class=&#34;headerlink&#34; title=&#34;目录（文件夹）&#34;&gt;&lt;/a&gt;目录（文件夹）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;目录或文件夹是：指一个装有数字文件系统的虚拟容器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;路径&#34;&gt;&lt;a href=&#34;#路径&#34; class=&#34;headerlink&#34; title=&#34;路径&#34;&gt;&lt;/a&gt;路径&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;路径是：一种电脑文件或目录的名称的通用表现形式,它指向文件系统上的一个唯一位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;根目录&#34;&gt;&lt;a href=&#34;#根目录&#34; class=&#34;headerlink&#34; title=&#34;根目录&#34;&gt;&lt;/a&gt;根目录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;根目录是：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;文件描述符&#34;&gt;&lt;a href=&#34;#文件描述符&#34; class=&#34;headerlink&#34; title=&#34;文件描述符&#34;&gt;&lt;/a&gt;文件描述符&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;文件描述符是一个用于表述指向文件的引用的抽象化概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;客户端&#34;&gt;&lt;a href=&#34;#客户端&#34; class=&#34;headerlink&#34; title=&#34;客户端&#34;&gt;&lt;/a&gt;客户端&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;客户端是:访问服务器提供的服务的计算硬件或软件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;服务端&#34;&gt;&lt;a href=&#34;#服务端&#34; class=&#34;headerlink&#34; title=&#34;服务端&#34;&gt;&lt;/a&gt;服务端&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;服务端是:为其他程序或设备提供功能的计算机程序或设备&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="操作系统" scheme="https://dmqweb.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <category term="操作系统" scheme="https://dmqweb.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2024-07-23T07:02:19.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/07/08/docker/</id>
        <title>Docker</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/08/docker/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;https://dmqweb.cn/images/Docker.pdf&#34; alt=&#34;Docker&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://dmqweb.cn/images/Docker%E6%96%87%E6%A1%A3.pdf&#34; alt=&#34;Docker文档&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://dmqweb.cn/images/Docker%E5%A4%A7%E7%BA%B2.pdf&#34; alt=&#34;Docker大纲&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;虚拟化技术&#34;&gt;&lt;a href=&#34;#虚拟化技术&#34; class=&#34;headerlink&#34; title=&#34;虚拟化技术&#34;&gt;&lt;/a&gt;虚拟化技术&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;虚拟化是一种计算机资源管理的技术,是将计算机的各种硬件资源,比如服务器、网络、CPU、内存、以及存储等,通过抽象和转换后呈现出的一套新的硬件资源环境,在这套资源环境中可以按照操作系统 , 部署应用环境等&lt;br&gt;虚拟化技术打破了计算机硬件资源不可切割的障碍,提高了计算机硬件资源的利用率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;虚拟机-硬件级虚拟化技术&#34;&gt;&lt;a href=&#34;#虚拟机-硬件级虚拟化技术&#34; class=&#34;headerlink&#34; title=&#34;虚拟机(硬件级虚拟化技术)&#34;&gt;&lt;/a&gt;虚拟机(硬件级虚拟化技术)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;虚拟机是使用虚拟化的技术，使用抽象逻辑对物理计算机的模拟，包含整个操作系统和其中的应用程式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;缺点是：启动慢、使用空间很大、性能通常不高，无法完全使用计算机的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;容器-操作系统级虚拟化技术&#34;&gt;&lt;a href=&#34;#容器-操作系统级虚拟化技术&#34; class=&#34;headerlink&#34; title=&#34;容器(操作系统级虚拟化技术)&#34;&gt;&lt;/a&gt;容器(操作系统级虚拟化技术)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;容器是包含在任何环境中的运行所需的所有元素的软件包，这样容器就可以模拟化应用程序，并可以在任何地方运行。它直接调用原操作系统的能力，并屏蔽了操作系统之间的差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;docker&#34;&gt;&lt;a href=&#34;#docker&#34; class=&#34;headerlink&#34; title=&#34;docker&#34;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;docker 是一个用于构建、运行和传送应用程序的平台，docker 是容器的一种实现方式。&lt;br&gt;docker 和虚拟机的区别在于：是否模拟构建整个操作系统的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;image-镜像&#34;&gt;&lt;a href=&#34;#image-镜像&#34; class=&#34;headerlink&#34; title=&#34;image 镜像&#34;&gt;&lt;/a&gt;image 镜像&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;image 镜像就相当于是一个菜谱，对应用程序的执行进行模板化。参照同一个 image 镜像运行的应用程序是相同的。它包含了运行容器所需的所有那日容（代码、运行时、库、环境变量和配置文件）&lt;br&gt;image 镜像打包了：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;配置文件、启动命令&lt;/li&gt;
&lt;li&gt;应用程序、环境变量&lt;/li&gt;
&lt;li&gt;第三方软件库和依赖包&lt;/li&gt;
&lt;li&gt;运行时环境&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-容器&#34;&gt;&lt;a href=&#34;#docker-容器&#34; class=&#34;headerlink&#34; title=&#34;docker 容器&#34;&gt;&lt;/a&gt;docker 容器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYWJzLnBsYXktd2l0aC1kb2NrZXIuY29tLw==&#34;&gt;https://labs.play-with-docker.com/&lt;/span&gt; ,在线运行各种 docker 容器&lt;br&gt;docker 容器就相当于是一个根据 image 镜像创建的运行实例，在 docker 容器中包含了运行时的全部环境，它屏蔽了操作系统之间的差异，使得应用程序的可移植性非常强。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;docker-的优势&#34;&gt;&lt;a href=&#34;#docker-的优势&#34; class=&#34;headerlink&#34; title=&#34;docker 的优势&#34;&gt;&lt;/a&gt;docker 的优势&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果不使用 docker，在开发环境和测试环境中都需要对应用程序的运行环境进行配置。尤其是当应用程序十分复杂时，配置运行环境的工作就十分复杂，使用 docker 之后就相当于封装了应用程序及其对应的运行环境，并且屏蔽了操作系统之间的差异，它直接调用主机操作系统的能力运行 docker 容器。&lt;br&gt;例如：使用 docker 之后，我们开发环境配置好运行环境，打包成镜像之后，测试环境中直接使用镜像构建 docker 容器，运行应用程序即可，无需重新配置环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;docker-命令&#34;&gt;&lt;a href=&#34;#docker-命令&#34; class=&#34;headerlink&#34; title=&#34;docker 命令&#34;&gt;&lt;/a&gt;docker 命令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;安装 docker 之后，就可以使用 docker 对应的命令（windows 安装后需要开启 Hyper 选项），命令行中输入对应的命令之后会交给内部的 docker daemon 进行执行，docker daemon 会将执行结果返回给命令行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# docker run：运行一个新的容器实例。
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
# docker start：启动一个或多个已经停止运行的容器。
docker start [CONTAINER...]
# docker stop：停止一个或多个正在运行的容器。
docker stop [CONTAINER...]
# docker pause：暂停容器内的所有进程。
docker pause [CONTAINER...]
# docker unpause：恢复之前被暂停的容器。
docker unpause [CONTAINER...]
# docker restart：重启容器。
docker restart [CONTAINER...]
# docker rm：删除一个或多个容器。
docker rm [CONTAINER...]
# docker rmi：删除一个或多个镜像。
docker rmi [OPTIONS] IMAGE [IMAGE...]
# docker ps：列出当前正在运行的容器。
docker ps [OPTIONS]
# docker images：列出本地的镜像。
docker images [OPTIONS] [REPOSITORY[:TAG]]
# docker build：根据 Dockerfile 构建镜像。
docker build [OPTIONS] PATH | URL | -
# docker pull：从远程仓库拉取镜像或仓库到本地。
docker pull [OPTIONS] NAME[:TAG|@DIGEST]
# docker push：将本地的镜像或仓库推送到远程仓库。
docker push [OPTIONS] NAME[:TAG]
# docker login：登录到一个 Docker 远程仓库。
docker login [OPTIONS] [SERVER] USERNAME
# docker logout：从 Docker 远程仓库登出。
docker logout [SERVER]
# docker exec：在运行的容器中执行命令。
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
# docker logs：获取容器的日志。
docker logs [OPTIONS] CONTAINER
# docker network：管理 Docker 网络设置。
docker network [OPTIONS]
# docker volume：管理 Docker 数据卷。
docker volume [OPTIONS]
# docker inspect：获取容器、镜像、网络或数据卷的详细信息。
docker inspect [OPTIONS] NAME|ID [NAME|ID...]
# docker prune：删除未使用的 Docker 对象，如容器、镜像、网络、数据卷。
docker prune [OPTIONS]
# docker stats：实时显示容器的资源使用情况。
docker stats [OPTIONS] [CONTAINER...]
# docker-compose：使用 Docker Compose 工具管理多容器 Docker 应用程序。
docker-compose [OPTIONS] [COMMAND] [ARGS...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;容器化&#34;&gt;&lt;a href=&#34;#容器化&#34; class=&#34;headerlink&#34; title=&#34;容器化&#34;&gt;&lt;/a&gt;容器化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如何将应用程序和运行时的环境打包成一个镜像呢（）容器化？这时候就需要配置 dockerfile 定义容器的构建过程,构建镜像。最后使用 docker 命令镜像创建和运行容器（docker build -t app-name . 和 docker run -p 8080:8080 app-name）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Dockerfile&#34;&gt;&lt;a href=&#34;#Dockerfile&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile&#34;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;dockerfile 文件用于定义软件依赖的构建过程，确保应用程序的依赖项得到满足。alpine 是一个轻量的 linx 发行版。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;dockerfile&#34;&gt;# Docker镜像是一层一层进行构建的
# 指定对应的操作系统和版本，alpine是linx轻量级的发行版
FROM node:14-alpine
# 使用COPY命令，将文件复制到镜像中
COPY index.js /index.js
# 运行应用程序
# CMD [&amp;quot;node&amp;quot;,&amp;quot;/index.js&amp;quot;] 或者
CMD node /index.js
# 此时使用docker build -t docker-name:版本号 . 就可以构建docker镜像，不指定版本号默认是latest
# 使用docker image ls 可以查看所有的镜像
# 使用docker run docker-name 运行镜像
# 将容器推送到远程镜像仓库：docker push your-dockerhub-username/your-app-name:tag
# 如果想要根据这个镜像创建docker容器，只需要拿到Dockerfile文件，运行上述命令即可
# 通常将应用程序上传到docker hub中，后面通过docker pull docker-name 进行拉取
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;volumes-逻辑卷&#34;&gt;&lt;a href=&#34;#volumes-逻辑卷&#34; class=&#34;headerlink&#34; title=&#34;volumes 逻辑卷&#34;&gt;&lt;/a&gt;volumes 逻辑卷&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;volumes 逻辑卷是 Docker 中用于存储数据的，因为 docker 中的数据是不会进行持久化的。它通常以一个干净的文件开始，容器启动之后，可以在容器中创建文件和修改文件，但是当容器停止之后，数据并不会持久化，从而丢失，这时候就要在 Docker Compose 中使用 volumes 逻辑卷&lt;br&gt;volumes 逻辑卷可以将容器中的目录或者指定路径映射到宿主机的某一个目录或者位置上，从而实现数据的持久化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Dev-Environments&#34;&gt;&lt;a href=&#34;#Dev-Environments&#34; class=&#34;headerlink&#34; title=&#34;Dev Environments&#34;&gt;&lt;/a&gt;Dev Environments&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;docker desktop 中的一个功能，可以将自己当前环境分享给其他人，从而共享开发环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Docker-Compose&#34;&gt;&lt;a href=&#34;#Docker-Compose&#34; class=&#34;headerlink&#34; title=&#34;Docker Compose&#34;&gt;&lt;/a&gt;Docker Compose&lt;/h1&gt;&lt;p&gt;容器编排工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个项目中需要的应用程序和应用程序（容器）间的逻辑是十分复杂的，统一管理他们的启动和停止非常麻烦，Docker Compose 用一个 YAML 文件，定义和运行多容器 Docker 应用程序，其中可以配置多个容器、网络和数据卷等，以便在隔离的环境中快速启动和停止整个应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docker Compose 的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多容器管理：Docker Compose 允许你在一个文件中定义多个容器，统一管理它们的启动和停止。&lt;/li&gt;
&lt;li&gt;环境一致性：通过使用 Compose，你可以在不同的机器和环境中保持应用程序的一致性，因为它定义了应用程序的完整运行环境。&lt;/li&gt;
&lt;li&gt;配置简化：Compose 使用 YAML 格式，使得配置更加简洁和易于理解。&lt;/li&gt;
&lt;li&gt;服务依赖管理：Compose 可以处理容器之间的依赖关系，确保在启动和停止时按正确的顺序操作。&lt;/li&gt;
&lt;li&gt;网络配置：Compose 允许定义自定义网络，使容器之间能够相互发现和通信。&lt;/li&gt;
&lt;li&gt;数据卷管理：可以配置数据卷，以便在容器之间共享数据或持久化数据。&lt;/li&gt;
&lt;li&gt;扩展性：Compose 支持扩展服务，允许你指定服务运行的容器数量。&lt;/li&gt;
&lt;li&gt;自动化：通过简单的命令，Compose 可以自动构建、启动或停止整个应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &amp;quot;3.8&amp;quot; # 指定 docker-compose 的版本

services:
  web:
    image: nginx:alpine # 使用官方的 nginx 镜像（基于 Alpine 版本）
    ports:
      - &amp;quot;80:80&amp;quot; # 将容器的 80 端口映射到宿主机的 80 端口
    volumes:
      - ./src:/usr/share/nginx/html # 挂载当前目录下的 src 文件夹到容器的 nginx HTML 目录
    depends_on:
      - app # 表示 web 服务依赖于 app 服务

  app:
    build: ./app # 构建当前目录下 app 文件夹中的 Dockerfile
    expose:
      - &amp;quot;9000&amp;quot; # 暴露容器内部的 9000 端口，供其他服务访问，但不映射到宿主机
    environment:
      - APP_ENV=production # 设置环境变量
    volumes:
      - ./app:/var/www # 挂载当前目录下的 app 文件夹到容器的 /var/www 目录

  db:
    image: mysql:5.7 # 使用官方的 MySQL 5.7 镜像
    volumes:
      - db-data:/var/lib/mysql # 挂载卷 db-data 到容器的 MySQL 数据目录
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword # 设置 MySQL root 用户的密码
      - MYSQL_DATABASE=myappdb # 创建并使用名为 myappdb 的数据库

volumes:
  db-data: # 定义一个名为 db-data 的卷，用于持久化 MySQL 数据
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;文件将一组互相关联的容器组合在一起，然后使用&lt;code&gt;docker compose up&lt;/code&gt;命令（包含 docker-compose.yml 的文件中执行）即可启动整个应用程序。&lt;/p&gt;
&lt;p&gt;docker-compose.yml 可以结合 CI&amp;#x2F;CD 工具，集成到自动化工作流中，实现从开发到部署的自动化。&lt;/p&gt;
&lt;h1 id=&#34;Kubernetes&#34;&gt;&lt;a href=&#34;#Kubernetes&#34; class=&#34;headerlink&#34; title=&#34;Kubernetes&#34;&gt;&lt;/a&gt;Kubernetes&lt;/h1&gt;&lt;p&gt;Kubernetes 和 Docker Compose 类似，是一种容器编排工具，用于管理和部署容器化应用程序。但是 Kubernetes 相比之下更适合大规模的生产环境和复杂的容器编排需求。&lt;/p&gt;
&lt;h3 id=&#34;比较&#34;&gt;&lt;a href=&#34;#比较&#34; class=&#34;headerlink&#34; title=&#34;比较&#34;&gt;&lt;/a&gt;比较&lt;/h3&gt;&lt;p&gt;k8s 和 Docker Compose 的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;功能和规模：&lt;ul&gt;
&lt;li&gt;Docker Compose 是一个简单的工具，用于定义和运行多个 Docker 容器组成的应用程序。它适用于单机或简单的多机环境，并提供了一种简化的方式来定义容器之间的依赖关系和配置。&lt;/li&gt;
&lt;li&gt;Kubernetes 是一个更强大和复杂的容器编排平台，用于管理大规模的容器集群。它可以自动化容器的部署、扩展、负载均衡、故障恢复等操作，并提供了更丰富的功能和管理能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架构和部署方式：&lt;ul&gt;
&lt;li&gt;Docker Compose 使用单个 YAML 文件来定义整个应用程序的配置和服务之间的关系。它可以在单个主机上使用&lt;code&gt;docker-compose&lt;/code&gt;命令进行部署和管理。&lt;/li&gt;
&lt;li&gt;Kubernetes 使用一组 YAML 文件来定义应用程序的各个组件和资源，并通过 Kubernetes API 进行管理。它需要一个 Kubernetes 集群来部署和运行应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可扩展性和弹性：&lt;ul&gt;
&lt;li&gt;Docker Compose 适用于小型应用程序或开发&amp;#x2F;测试环境，它的扩展性和弹性有限。它可以在单个主机上运行多个容器，但无法自动进行水平扩展或故障恢复。&lt;/li&gt;
&lt;li&gt;Kubernetes 设计用于大规模的生产环境，具有强大的扩展性和弹性。它可以自动进行容器的水平扩展、负载均衡和故障恢复，以确保应用程序的高可用性和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;社区和生态系统：&lt;ul&gt;
&lt;li&gt;Docker Compose 是 Docker 官方提供的工具，拥有庞大的用户社区和丰富的生态系统。它与 Docker Engine 紧密集成，并且易于上手和使用。&lt;/li&gt;
&lt;li&gt;Kubernetes 是由 Google 开源并托管在 Cloud Native Computing Foundation（CNCF）下的项目，也拥有庞大的用户社区和活跃的开发者社区。它有许多第三方工具和插件，可以扩展其功能和集成其他系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，Docker Compose 适用于简单的应用程序部署和开发&amp;#x2F;测试环境，而 Kubernetes 适用于大规模的生产环境和复杂的容器编排需求。根据实际需求和规模选择合适的工具&lt;/p&gt;
</content>
        <category term="Docker" scheme="https://dmqweb.cn/categories/Docker/" />
        <category term="Docker" scheme="https://dmqweb.cn/tags/Docker/" />
        <updated>2024-07-08T02:26:39.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/07/07/gitlab-cicd/</id>
        <title>gitlab cicd</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/07/gitlab-cicd/"/>
        <content type="html">&lt;h1 id=&#34;CICD&#34;&gt;&lt;a href=&#34;#CICD&#34; class=&#34;headerlink&#34; title=&#34;CICD&#34;&gt;&lt;/a&gt;CICD&lt;/h1&gt;&lt;p&gt;CI：持续集成&lt;/p&gt;
&lt;p&gt;CD：持续交付&lt;/p&gt;
&lt;p&gt;CD：持续部署&lt;/p&gt;
&lt;h3 id=&#34;上线流程&#34;&gt;&lt;a href=&#34;#上线流程&#34; class=&#34;headerlink&#34; title=&#34;上线流程&#34;&gt;&lt;/a&gt;上线流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;发布上线流程举例：git 上传，开始跑测试，进行打包，使用 docker 容器化镜像打包，推送到 dev 开发环境，部署到 staging 测试环境，最后部署到 production 生产环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pipeline&#34;&gt;&lt;a href=&#34;#pipeline&#34; class=&#34;headerlink&#34; title=&#34;pipeline&#34;&gt;&lt;/a&gt;pipeline&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一次 pipeline 就相当于一次构建任务，里面可以包含多个流程，如：安装依赖，跑测试代码，eslint 校验，编译，部署测试服务器，部署生产服务器等流程，任何提交或者 Merge Request 的合并都可以触发 Pipeline。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;runner&#34;&gt;&lt;a href=&#34;#runner&#34; class=&#34;headerlink&#34; title=&#34;runner&#34;&gt;&lt;/a&gt;runner&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个 runner 就相当于一个打工仔，可以下载 gitlab runner 之后注册多个 runner，并且指定对应的 runner 执行任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;gitlab-ci-yml-文件&#34;&gt;&lt;a href=&#34;#gitlab-ci-yml-文件&#34; class=&#34;headerlink&#34; title=&#34;.gitlab-ci.yml 文件&#34;&gt;&lt;/a&gt;.gitlab-ci.yml 文件&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;# 一项代表一个pipeline作业
helloworld:
  stage: linter
  script:
    - echo &amp;quot;hello world,Gitlab!&amp;quot;
    - chmod +x ./run.sh # 将run.sh文件添加可执行权限
    - ./run.sh # 将执行过程提取成可执行文件进行执行

# 私密使用（不想暴露到代码中）的环境变量，可以在平台上进行设置
variables: # 全局的环境变量，还有一些内置的环境变量，例如：$CI_PIPELINE_SOURCE 详见文档
  my_password: &amp;quot;全局的配置变量&amp;quot;

run_unit_tests:
  variables: # 任务中配置变量，使用时加上$符号
    my_password: &amp;quot;iamsomepassword...&amp;quot;
  stage: testing
  script:
    - echo &amp;quot;执行单元测试&amp;quot;

# 配置运行的容器镜像
image: alpine:latest

before_script:
  image: node:3.1.2-alpine3.16 # 配置单项作业运行的容器镜像
  stage: build
  needs: # 同一个stage中，通过needs来指定工作的相依性
    - bad_job
  script:
    - echo &amp;quot;安装套件&amp;quot;
    - echo &amp;quot;设定资料链接&amp;quot;

workflow: # 配置工作流
  rules: # 当main分支commit时，才启动工作流程
    - if: $CI_COMMIT_BRANCH == &amp;quot;main&amp;quot; # $CI_COMMIT_BRANCH是内置的环境变量
      when: always
    - when: never

after_script:
  stage: deplpy
  script:
    - echo &amp;quot;删除不必要的文件&amp;quot;

build_docker_image:
  only: # 指定只有推送到main分支上才会执行，指定哪些分支不执行使用：except
    - main
  state: build
  script:
    - echo &amp;quot;building docker image&amp;quot;

bad_job: # 假设错误的任务，则会中断当前工作的执行，每个工作独立执行
  tags: # 指定runner(打工仔)进行执行，在注册runner时会创建一个tags
    - runner_tags
    - uname # 验证当前在runner中执行
  stage: build
  script: script:no_script

# 建立舞台，使得工作按照指定先后顺序执行
stages:
  - linter
  - testing
  - build
  - deploy
# 服务端去官网安装gitlab runner，使用runner（打工仔）分配工作
# 接着启动服务
# 然后将这个服务进行注册（配置在gitlab runner的配置中）
# runner分为：shared runner、 group runners和specific runners三种
# 可以为某个群组设置runner，例如在群组中设置runner配置，服务中注册一个runner进行配置
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="gitlab cicd" scheme="https://dmqweb.cn/categories/gitlab-cicd/" />
        <category term="gitlab cicd" scheme="https://dmqweb.cn/tags/gitlab-cicd/" />
        <updated>2024-07-07T06:26:39.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/</id>
        <title>设计模式与设计原则</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
        <content type="html">&lt;p&gt;注：本教程总结自《设计模式之争》和《大话设计模式》，对设计模式感兴趣的同学强烈推荐这两本书。&lt;/p&gt;
&lt;h1 id=&#34;23-种设计模式&#34;&gt;&lt;a href=&#34;#23-种设计模式&#34; class=&#34;headerlink&#34; title=&#34;23 种设计模式&#34;&gt;&lt;/a&gt;23 种设计模式&lt;/h1&gt;&lt;h2 id=&#34;创建型&#34;&gt;&lt;a href=&#34;#创建型&#34; class=&#34;headerlink&#34; title=&#34;创建型&#34;&gt;&lt;/a&gt;创建型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单例模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工厂模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象工厂模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建造者模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结构型&#34;&gt;&lt;a href=&#34;#结构型&#34; class=&#34;headerlink&#34; title=&#34;结构型&#34;&gt;&lt;/a&gt;结构型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;适配器模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;装饰器模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代理模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外观模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;桥接模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组合模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;享元模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;行为型&#34;&gt;&lt;a href=&#34;#行为型&#34; class=&#34;headerlink&#34; title=&#34;行为型&#34;&gt;&lt;/a&gt;行为型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;观察者模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;迭代器模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;策略模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模板方法模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;职责链模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;备忘录模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问者模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中介者模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解释器模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;工厂模式&#34;&gt;&lt;a href=&#34;#工厂模式&#34; class=&#34;headerlink&#34; title=&#34;工厂模式&#34;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;p&gt;工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Product &amp;#123;
  constructor(name) &amp;#123;
    this.name = name;
  &amp;#125;
  init() &amp;#123;
    console.log(&amp;quot;init&amp;quot;);
  &amp;#125;
  fun() &amp;#123;
    console.log(&amp;quot;fun&amp;quot;);
  &amp;#125;
&amp;#125;
class Factory &amp;#123;
  create(name) &amp;#123;
    return new Product(name);
  &amp;#125;
&amp;#125;
// use
let factory = new Factory();
let p = factory.create(&amp;quot;p1&amp;quot;);
p.init();
p.fun();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;适用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择&lt;br&gt;将 new 操作简单封装，遇到 new 的时候就应该考虑是否用工厂模式；&lt;br&gt;需要依赖具体环境创建不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建对象的过程可能很复杂，但我们只需要关心创建结果。&lt;br&gt;构造函数和创建者分离, 符合“开闭原则”&lt;br&gt;一个调用者想创建一个对象，只要知道其名称就可以了。&lt;br&gt;扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加新产品时，需要编写新的具体产品类,一定程度上增加了系统的复杂度&lt;br&gt;考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么时候不用&lt;br&gt;当被应用到错误的问题类型上时,这一模式会给应用程序引入大量不必要的复杂性.除非为创建对象提供一个接口是我们编写的库或者框架的一个设计上目标,否则我会建议使用明确的构造器,以避免不必要的开销。&lt;br&gt;由于对象的创建过程被高效的抽象在一个接口后面的事实,这也会给依赖于这个过程可能会有多复杂的单元测试带来问题。&lt;br&gt;例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;曾经我们熟悉的 JQuery 的$()就是一个工厂函数，它根据传入参数的不同创建元素或者去寻找上下文中的元素，创建成相应的 jQuery 对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class jQuery &amp;#123;
  constructor(selector) &amp;#123;
    super(selector);
  &amp;#125;
  add() &amp;#123;&amp;#125;
  // 此处省略若干 API
&amp;#125;
window.$ = function (selector) &amp;#123;
  return new jQuery(selector);
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;vue 的异步组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue.component(&amp;quot;async-example&amp;quot;, function (resolve, reject) &amp;#123;
  setTimeout(function () &amp;#123;
    // 向 `resolve` 回调传递组件定义
    resolve(&amp;#123;
      template: &amp;quot;&amp;lt;div&amp;gt;I am async!&amp;lt;/div&amp;gt;&amp;quot;,
    &amp;#125;);
  &amp;#125;, 1000);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;单例模式&#34;&gt;&lt;a href=&#34;#单例模式&#34; class=&#34;headerlink&#34; title=&#34;单例模式&#34;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;一个类只有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class LoginForm &amp;#123;
  constructor() &amp;#123;
    this.state = &amp;quot;hide&amp;quot;;
  &amp;#125;
  show() &amp;#123;
    if (this.state === &amp;quot;show&amp;quot;) &amp;#123;
      alert(&amp;quot;已经显示&amp;quot;);
      return;
    &amp;#125;
    this.state = &amp;quot;show&amp;quot;;
    console.log(&amp;quot;登录框显示成功&amp;quot;);
  &amp;#125;
  hide() &amp;#123;
    if (this.state === &amp;quot;hide&amp;quot;) &amp;#123;
      alert(&amp;quot;已经隐藏&amp;quot;);
      return;
    &amp;#125;
    this.state = &amp;quot;hide&amp;quot;;
    console.log(&amp;quot;登录框隐藏成功&amp;quot;);
  &amp;#125;
&amp;#125;
LoginForm.getInstance = (function () &amp;#123;
  let instance;
  return function () &amp;#123;
    if (!instance) &amp;#123;
      instance = new LoginForm();
    &amp;#125;
    return instance;
  &amp;#125;;
&amp;#125;)();
let obj1 = LoginForm.getInstance();
obj1.show();

let obj2 = LoginForm.getInstance();
obj2.hide();
console.log(obj1 === obj2);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;划分命名空间，减少全局变量&lt;br&gt;增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护&lt;br&gt;且只会实例化一次。简化了代码的调试和维护&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于单例模式提供的是一种单点访问，所以它有可能导致模块间的强耦合 从而不利于单元测试。无法单独测试一个调用了来自单例的方法的类，而只能把它与那个单例作为一个单元一起测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义命名空间和实现分支型方法&lt;br&gt;登录框&lt;br&gt;vuex 和 redux 中的 store&lt;/p&gt;
&lt;h1 id=&#34;适配器模式0&#34;&gt;&lt;a href=&#34;#适配器模式0&#34; class=&#34;headerlink&#34; title=&#34;适配器模式0&#34;&gt;&lt;/a&gt;适配器模式0&lt;/h1&gt;&lt;p&gt;将一个类的接口转化为另外一个接口，以满足用户需求，使类之间接口不兼容问题通过适配器得以解决。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Plug &amp;#123;
  getName() &amp;#123;
    return &amp;quot;iphone 充电头&amp;quot;;
  &amp;#125;
&amp;#125;
class Target &amp;#123;
  constructor() &amp;#123;
    this.plug = new Plug();
  &amp;#125;
  getName() &amp;#123;
    return this.plug.getName() + &amp;quot; 适配器 Type-c 充电头&amp;quot;;
  &amp;#125;
&amp;#125;
let target = new Target();
target.getName(); // iphone 充电头 适配器转 Type-c 充电头
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以让任何两个没有关联的类一起运行。&lt;br&gt;提高了类的复用。&lt;br&gt;适配对象，适配库，适配数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;额外对象的创建，非直接调用，存在一定的开销（且不像代理模式在某些功能点上可实现性能优化)&lt;br&gt;如果没必要使用适配器模式的话，可以考虑重构，如果使用的话，尽量把文档完善&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整合第三方 SDK&lt;br&gt;封装旧接口&lt;/p&gt;
&lt;p&gt;自己封装的 ajax， 使用方式如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;ajax(&amp;#123;
  url: &amp;quot;/getData&amp;quot;,
  type: &amp;quot;Post&amp;quot;,
  dataType: &amp;quot;json&amp;quot;,
  data: &amp;#123;
    test: 111,
  &amp;#125;,
&amp;#125;).done(function () &amp;#123;&amp;#125;);
// 因为历史原因，代码中全都是：
// $.ajax(&amp;#123;....&amp;#125;)

// 做一层适配器
var $ = &amp;#123;
  ajax: function (options) &amp;#123;
    return ajax(options);
  &amp;#125;,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vue 的 computed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;example&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;Original message: &amp;quot;&amp;#123;&amp;#123; message &amp;#125;&amp;#125;&amp;quot;&amp;lt;/p&amp;gt;
    &amp;lt;!-- Hello --&amp;gt;
    &amp;lt;p&amp;gt;Computed reversed message: &amp;quot;&amp;#123;&amp;#123; reversedMessage &amp;#125;&amp;#125;&amp;quot;&amp;lt;/p&amp;gt;
    &amp;lt;!-- olleH --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
export default &amp;#123;
  name: &amp;quot;demo&amp;quot;,
  data() &amp;#123;
    return &amp;#123;
      message: &amp;quot;Hello&amp;quot;,
    &amp;#125;;
  &amp;#125;,
  computed: &amp;#123;
    reversedMessage: function () &amp;#123;
      return this.message.split(&amp;quot;&amp;quot;).reverse().join(&amp;quot;&amp;quot;);
    &amp;#125;,
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
export default &amp;#123;
  name: &amp;quot;demo&amp;quot;,
  data() &amp;#123;
    return &amp;#123;
      message: &amp;quot;Hello&amp;quot;,
    &amp;#125;;
  &amp;#125;,
  computed: &amp;#123;
    reversedMessage: function () &amp;#123;
      return this.message.split(&amp;quot;&amp;quot;).reverse().join(&amp;quot;&amp;quot;);
    &amp;#125;,
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原有 data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式&lt;br&gt;不同点&lt;br&gt;适配器与代理模式相似&lt;/p&gt;
&lt;p&gt;适配器模式： 提供一个不同的接口（如不同版本的插头）&lt;br&gt;代理模式： 提供一模一样的接口&lt;/p&gt;
&lt;h1 id=&#34;装饰者模式&#34;&gt;&lt;a href=&#34;#装饰者模式&#34; class=&#34;headerlink&#34; title=&#34;装饰者模式&#34;&gt;&lt;/a&gt;装饰者模式&lt;/h1&gt;&lt;p&gt;动态地给某个对象添加一些额外的职责，，是一种实现继承的替代方案&lt;br&gt;在不改变原对象的基础上，通过对其进行包装扩展，使原有对象可以满足用户的更复杂需求，而不会影响从这个类中派生的其他对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Cellphone &amp;#123;
  create() &amp;#123;
    console.log(&amp;quot;生成一个手机&amp;quot;);
  &amp;#125;
&amp;#125;
class Decorator &amp;#123;
  constructor(cellphone) &amp;#123;
    this.cellphone = cellphone;
  &amp;#125;
  create() &amp;#123;
    this.cellphone.create();
    this.createShell(cellphone);
  &amp;#125;
  createShell() &amp;#123;
    console.log(&amp;quot;生成手机壳&amp;quot;);
  &amp;#125;
&amp;#125;
// 测试代码
let cellphone = new Cellphone();
cellphone.create();

console.log(&amp;quot;------------&amp;quot;);
let dec = new Decorator(cellphone);
dec.create();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如现在有 4 种型号的自行车，我们为每种自行车都定义了一个单&lt;br&gt;独的类。现在要给每种自行车都装上前灯、尾&lt;br&gt;灯和铃铛这 3 种配件。如果使用继承的方式来给&lt;br&gt;每种自行车创建子类，则需要 4×3 &amp;#x3D; 12 个子类。&lt;br&gt;但是如果把前灯、尾灯、铃铛这些对象动态组&lt;br&gt;合到自行车上面，则只需要额外增加 3 个类&lt;br&gt;ES7 Decorator 阮一峰&lt;br&gt;core-decorators&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;装饰类和被装饰类都只关心自身的核心业务，实现了解耦。&lt;br&gt;方便动态的扩展功能，且提供了比继承更多的灵活性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多层装饰比较复杂。&lt;br&gt;常常会引入许多小对象，看起来比较相似，实际功能大相径庭，从而使得我们的应用程序架构变得复杂起来&lt;/p&gt;
&lt;h1 id=&#34;代理模式&#34;&gt;&lt;a href=&#34;#代理模式&#34; class=&#34;headerlink&#34; title=&#34;代理模式&#34;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代理模式和中介者模式的区别在于：代理模式往往是一对一的，但中介模式往往是一对多。&lt;br&gt;是为一个对象提供一个代用品或占位符，以便控制对它的访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设当 A 在心情好的时候收到花，小明表白成功的几率有&lt;br&gt;60%，而当 A 在心情差的时候收到花，小明表白的成功率无限趋近于 0。&lt;br&gt;小明跟 A 刚刚认识两天，还无法辨别 A 什么时候心情好。如果不合时宜地把花送给 A，花&lt;br&gt;被直接扔掉的可能性很大，这束花可是小明吃了 7 天泡面换来的。&lt;br&gt;但是 A 的朋友 B 却很了解 A，所以小明只管把花交给 B，B 会监听 A 的心情变化，然后选&lt;br&gt;择 A 心情好的时候把花转交给 A，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let Flower = function () &amp;#123;&amp;#125;;
let xiaoming = &amp;#123;
  sendFlower: function (target) &amp;#123;
    let flower = new Flower();
    target.receiveFlower(flower);
  &amp;#125;,
&amp;#125;;
let B = &amp;#123;
  receiveFlower: function (flower) &amp;#123;
    A.listenGoodMood(function () &amp;#123;
      A.receiveFlower(flower);
    &amp;#125;);
  &amp;#125;,
&amp;#125;;
let A = &amp;#123;
  receiveFlower: function (flower) &amp;#123;
    console.log(&amp;quot;收到花&amp;quot; + flower);
  &amp;#125;,
  listenGoodMood: function (fn) &amp;#123;
    setTimeout(function () &amp;#123;
      fn();
    &amp;#125;, 1000);
  &amp;#125;,
&amp;#125;;
xiaoming.sendFlower(B);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML 元 素事件代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;ul id=&amp;quot;ul&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
let ul = document.querySelector(&amp;quot;#ul&amp;quot;);
ul.addEventListener(&amp;quot;click&amp;quot;, (event) =&amp;gt; &amp;#123;
  console.log(event.target);
&amp;#125;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES6 的 proxy 阮一峰 Proxy&lt;br&gt;jQuery.proxy()方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用&lt;br&gt;代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缺点&lt;br&gt;处理请求速度可能有差别，非直接访问存在开销&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同点&lt;br&gt;装饰者模式实现上和代理模式类似&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;装饰者模式： 扩展功能，原有功能不变且可直接使用&lt;br&gt;代理模式： 显示原有功能，但是经过限制之后的&lt;/p&gt;
&lt;h1 id=&#34;外观模式&#34;&gt;&lt;a href=&#34;#外观模式&#34; class=&#34;headerlink&#34; title=&#34;外观模式&#34;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;p&gt;为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使子系统更加容易使用&lt;br&gt;兼容浏览器事件绑定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let addMyEvent = function (el, ev, fn) &amp;#123;
  if (el.addEventListener) &amp;#123;
    el.addEventListener(ev, fn, false);
  &amp;#125; else if (el.attachEvent) &amp;#123;
    el.attachEvent(&amp;quot;on&amp;quot; + ev, fn);
  &amp;#125; else &amp;#123;
    el[&amp;quot;on&amp;quot; + ev] = fn;
  &amp;#125;
&amp;#125;;

// 封装接口
let myEvent = &amp;#123;
  // ...
  stop: (e) =&amp;gt; &amp;#123;
    e.stopPropagation();
    e.preventDefault();
  &amp;#125;,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;场景&lt;/p&gt;
&lt;p&gt;设计初期，应该要有意识地将不同的两个层分离，比如经典的三层结构，在数据访问层和业务逻辑层、业务逻辑层和表示层之间建立外观 Facade&lt;br&gt;在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade 可以提供一个简单的接口，减少他们之间的依赖。&lt;br&gt;在维护一个遗留的大型系统时，可能这个系统已经很难维护了，这时候使用外观 Facade 也是非常合适的，为系系统开发一个外观 Facade 类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和 Facade 对象交互，Facade 与遗留代码交互所有的复杂工作。&lt;/p&gt;
&lt;p&gt;参考： 大话设计模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;减少系统相互依赖。&lt;br&gt;提高灵活性。&lt;br&gt;提高了安全性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。&lt;/p&gt;
&lt;p&gt;观察者模式&lt;br&gt;定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使它们能够自动更新自己，当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。&lt;/p&gt;
&lt;h1 id=&#34;发布-amp-订阅&#34;&gt;&lt;a href=&#34;#发布-amp-订阅&#34; class=&#34;headerlink&#34; title=&#34;发布 &amp;amp; 订阅&#34;&gt;&lt;/a&gt;发布 &amp;amp; 订阅&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一对多&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 主题 保存状态，状态变化之后触发所有观察者对象
class Subject &amp;#123;
  constructor() &amp;#123;
    this.state = 0;
    this.observers = [];
  &amp;#125;
  getState() &amp;#123;
    return this.state;
  &amp;#125;
  setState(state) &amp;#123;
    this.state = state;
    this.notifyAllObservers();
  &amp;#125;
  notifyAllObservers() &amp;#123;
    this.observers.forEach((observer) =&amp;gt; &amp;#123;
      observer.update();
    &amp;#125;);
  &amp;#125;
  attach(observer) &amp;#123;
    this.observers.push(observer);
  &amp;#125;
&amp;#125;
// 观察者
class Observer &amp;#123;
  constructor(name, subject) &amp;#123;
    this.name = name;
    this.subject = subject;
    this.subject.attach(this);
  &amp;#125;
  update() &amp;#123;
    console.log(`$&amp;#123;this.name&amp;#125; update, state: $&amp;#123;this.subject.getState()&amp;#125;`);
  &amp;#125;
&amp;#125;
// 测试
let s = new Subject();
let o1 = new Observer(&amp;quot;o1&amp;quot;, s);
let o2 = new Observer(&amp;quot;02&amp;quot;, s);

s.setState(12);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DOM 事件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;document.body.addEventListener(&amp;quot;click&amp;quot;, function () &amp;#123;
  console.log(&amp;quot;hello world!&amp;quot;);
&amp;#125;);
document.body.click();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vue 响应式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持简单的广播通信，自动通知所有已经订阅过的对象&lt;br&gt;目标对象与观察者之间的抽象耦合关系能单独扩展以及重用&lt;br&gt;增加了灵活性&lt;br&gt;观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;br&gt;过度使用会导致对象与对象之间的联系弱化，会导致程序难以跟踪维护和理解&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;状态模式&#34;&gt;&lt;a href=&#34;#状态模式&#34; class=&#34;headerlink&#34; title=&#34;状态模式&#34;&gt;&lt;/a&gt;状态模式&lt;/h1&gt;&lt;p&gt;允许一个对象在其内部状态改变的时候改变它的行为，对象看起来似乎修改了它的类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 状态 （弱光、强光、关灯）
class State &amp;#123;
  constructor(state) &amp;#123;
    this.state = state;
  &amp;#125;
  handle(context) &amp;#123;
    console.log(`this is $&amp;#123;this.state&amp;#125; light`);
    context.setState(this);
  &amp;#125;
&amp;#125;
class Context &amp;#123;
  constructor() &amp;#123;
    this.state = null;
  &amp;#125;
  getState() &amp;#123;
    return this.state;
  &amp;#125;
  setState(state) &amp;#123;
    this.state = state;
  &amp;#125;
&amp;#125;
// test
let context = new Context();
let weak = new State(&amp;quot;weak&amp;quot;);
let strong = new State(&amp;quot;strong&amp;quot;);
let off = new State(&amp;quot;off&amp;quot;);
// 弱光
weak.handle(context);
console.log(context.getState());
// 强光
strong.handle(context);
console.log(context.getState());
// 关闭
off.handle(context);
console.log(context.getState());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;场景&lt;/p&gt;
&lt;p&gt;一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为&lt;br&gt;一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义了状态与行为之间的关系，封装在一个类里，更直观清晰，增改方便&lt;br&gt;状态与状态间，行为与行为间彼此独立互不干扰&lt;br&gt;用对象代替字符串来记录当前状态，使得状态的切换更加一目了然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;会在系统中定义许多状态类&lt;br&gt;逻辑分散&lt;/p&gt;
&lt;h1 id=&#34;迭代器模式&#34;&gt;&lt;a href=&#34;#迭代器模式&#34; class=&#34;headerlink&#34; title=&#34;迭代器模式&#34;&gt;&lt;/a&gt;迭代器模式&lt;/h1&gt;&lt;p&gt;提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Iterator &amp;#123;
  constructor(conatiner) &amp;#123;
    this.list = conatiner.list;
    this.index = 0;
  &amp;#125;
  next() &amp;#123;
    if (this.hasNext()) &amp;#123;
      return this.list[this.index++];
    &amp;#125;
    return null;
  &amp;#125;
  hasNext() &amp;#123;
    if (this.index &amp;gt;= this.list.length) &amp;#123;
      return false;
    &amp;#125;
    return true;
  &amp;#125;
&amp;#125;
class Container &amp;#123;
  constructor(list) &amp;#123;
    this.list = list;
  &amp;#125;
  getIterator() &amp;#123;
    return new Iterator(this);
  &amp;#125;
&amp;#125;
// 测试代码
let container = new Container([1, 2, 3, 4, 5]);
let iterator = container.getIterator();
while (iterator.hasNext()) &amp;#123;
  console.log(iterator.next());
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Array.prototype.forEach&lt;br&gt;jQuery 中的$.each()&lt;br&gt;ES6 Iterator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问一个聚合对象的内容而无需暴露它的内部表示。&lt;br&gt;为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结&lt;br&gt;对于集合内部结果常常变化各异，不想暴露其内部结构的话，但又想让客户代码透明的访问其中的元素，可以使用迭代器模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;桥接模式&#34;&gt;&lt;a href=&#34;#桥接模式&#34; class=&#34;headerlink&#34; title=&#34;桥接模式&#34;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;p&gt;桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Color &amp;#123;
  constructor(name) &amp;#123;
    this.name = name;
  &amp;#125;
&amp;#125;
class Shape &amp;#123;
  constructor(name, color) &amp;#123;
    this.name = name;
    this.color = color;
  &amp;#125;
  draw() &amp;#123;
    console.log(`$&amp;#123;this.color.name&amp;#125; $&amp;#123;this.name&amp;#125;`);
  &amp;#125;
&amp;#125;

//测试
let red = new Color(&amp;quot;red&amp;quot;);
let yellow = new Color(&amp;quot;yellow&amp;quot;);
let circle = new Shape(&amp;quot;circle&amp;quot;, red);
circle.draw();
let triangle = new Shape(&amp;quot;triangle&amp;quot;, yellow);
triangle.draw();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有助于独立地管理各组成部分， 把抽象化与实现化解耦&lt;br&gt;提高可扩充性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大量的类将导致开发成本的增加，同时在性能方面可能也会有所减少。&lt;/p&gt;
&lt;h1 id=&#34;组合模式&#34;&gt;&lt;a href=&#34;#组合模式&#34; class=&#34;headerlink&#34; title=&#34;组合模式&#34;&gt;&lt;/a&gt;组合模式&lt;/h1&gt;&lt;p&gt;将对象组合成树形结构，以表示“整体-部分”的层次结构。&lt;br&gt;通过对象的多态表现，使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class TrainOrder &amp;#123;
  create() &amp;#123;
    console.log(&amp;quot;创建火车票订单&amp;quot;);
  &amp;#125;
&amp;#125;
class HotelOrder &amp;#123;
  create() &amp;#123;
    console.log(&amp;quot;创建酒店订单&amp;quot;);
  &amp;#125;
&amp;#125;
class TotalOrder &amp;#123;
  constructor() &amp;#123;
    this.orderList = [];
  &amp;#125;
  addOrder(order) &amp;#123;
    this.orderList.push(order);
    return this;
  &amp;#125;
  create() &amp;#123;
    this.orderList.forEach((item) =&amp;gt; &amp;#123;
      item.create();
    &amp;#125;);
    return this;
  &amp;#125;
&amp;#125;
// 可以在购票网站买车票同时也订房间
let train = new TrainOrder();
let hotel = new HotelOrder();
let total = new TotalOrder();
total.addOrder(train).addOrder(hotel).create();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表示对象-整体层次结构&lt;br&gt;希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;br&gt;如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;原型模式&#34;&gt;&lt;a href=&#34;#原型模式&#34; class=&#34;headerlink&#34; title=&#34;原型模式&#34;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;p&gt;原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Person &amp;#123;
  constructor(name) &amp;#123;
    this.name = name;
  &amp;#125;
  getName() &amp;#123;
    return this.name;
  &amp;#125;
&amp;#125;
class Student extends Person &amp;#123;
  constructor(name) &amp;#123;
    super(name);
  &amp;#125;
  sayHello() &amp;#123;
    console.log(`Hello， My name is $&amp;#123;this.name&amp;#125;`);
  &amp;#125;
&amp;#125;
let student = new Student(&amp;quot;xiaoming&amp;quot;);
student.sayHello();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原型模式，就是创建一个共享的原型，通过拷贝这个原型来创建新的类，用于创建重复的对象，带来性能上的提升。&lt;/p&gt;
&lt;h1 id=&#34;策略模式&#34;&gt;&lt;a href=&#34;#策略模式&#34; class=&#34;headerlink&#34; title=&#34;策略模式&#34;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;策略模式-校验表单&amp;lt;/title&amp;gt;
    &amp;lt;meta content=&amp;quot;text/html; charset=utf-8&amp;quot; http-equiv=&amp;quot;Content-Type&amp;quot; /&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;form id=&amp;quot;registerForm&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;http://xxxx.com/api/register&amp;quot;&amp;gt;
      用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;userName&amp;quot; /&amp;gt; 密码：&amp;lt;input
        type=&amp;quot;text&amp;quot;
        name=&amp;quot;password&amp;quot;
      /&amp;gt;
      手机号码：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;phoneNumber&amp;quot; /&amp;gt;
      &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;提交&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      // 策略对象
      const strategies = &amp;#123;
        isNoEmpty: function (value, errorMsg) &amp;#123;
          if (value === &amp;quot;&amp;quot;) &amp;#123;
            return errorMsg;
          &amp;#125;
        &amp;#125;,
        isNoSpace: function (value, errorMsg) &amp;#123;
          if (value.trim() === &amp;quot;&amp;quot;) &amp;#123;
            return errorMsg;
          &amp;#125;
        &amp;#125;,
        minLength: function (value, length, errorMsg) &amp;#123;
          if (value.trim().length &amp;lt; length) &amp;#123;
            return errorMsg;
          &amp;#125;
        &amp;#125;,
        maxLength: function (value, length, errorMsg) &amp;#123;
          if (value.length &amp;gt; length) &amp;#123;
            return errorMsg;
          &amp;#125;
        &amp;#125;,
        isMobile: function (value, errorMsg) &amp;#123;
          if (
            !/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\d&amp;#123;8&amp;#125;$/.test(
              value
            )
          ) &amp;#123;
            return errorMsg;
          &amp;#125;
        &amp;#125;,
      &amp;#125;;
      // 验证类
      class Validator &amp;#123;
        constructor() &amp;#123;
          this.cache = [];
        &amp;#125;
        add(dom, rules) &amp;#123;
          for (let i = 0, rule; (rule = rules[i++]); ) &amp;#123;
            let strategyAry = rule.strategy.split(&amp;quot;:&amp;quot;);
            let errorMsg = rule.errorMsg;
            this.cache.push(() =&amp;gt; &amp;#123;
              let strategy = strategyAry.shift();
              strategyAry.unshift(dom.value);
              strategyAry.push(errorMsg);
              return strategies[strategy].apply(dom, strategyAry);
            &amp;#125;);
          &amp;#125;
        &amp;#125;
        start() &amp;#123;
          for (let i = 0, validatorFunc; (validatorFunc = this.cache[i++]); ) &amp;#123;
            let errorMsg = validatorFunc();
            if (errorMsg) &amp;#123;
              return errorMsg;
            &amp;#125;
          &amp;#125;
        &amp;#125;
      &amp;#125;
      // 调用代码
      let registerForm = document.getElementById(&amp;quot;registerForm&amp;quot;);
      let validataFunc = function () &amp;#123;
        let validator = new Validator();
        validator.add(registerForm.userName, [
          &amp;#123;
            strategy: &amp;quot;isNoEmpty&amp;quot;,
            errorMsg: &amp;quot;用户名不可为空&amp;quot;,
          &amp;#125;,
          &amp;#123;
            strategy: &amp;quot;isNoSpace&amp;quot;,
            errorMsg: &amp;quot;不允许以空白字符命名&amp;quot;,
          &amp;#125;,
          &amp;#123;
            strategy: &amp;quot;minLength:2&amp;quot;,
            errorMsg: &amp;quot;用户名长度不能小于2位&amp;quot;,
          &amp;#125;,
        ]);
        validator.add(registerForm.password, [
          &amp;#123;
            strategy: &amp;quot;minLength:6&amp;quot;,
            errorMsg: &amp;quot;密码长度不能小于6位&amp;quot;,
          &amp;#125;,
        ]);
        validator.add(registerForm.phoneNumber, [
          &amp;#123;
            strategy: &amp;quot;isMobile&amp;quot;,
            errorMsg: &amp;quot;请输入正确的手机号码格式&amp;quot;,
          &amp;#125;,
        ]);
        return validator.start();
      &amp;#125;;

      registerForm.onsubmit = function () &amp;#123;
        let errorMsg = validataFunc();
        if (errorMsg) &amp;#123;
          alert(errorMsg);
          return false;
        &amp;#125;
      &amp;#125;;
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;如果在一个系统里面有许多类，它们之间的区别仅在于它们的’行为’，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。&lt;br&gt;一个系统需要动态地在几种算法中选择一种。&lt;br&gt;表单验证&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;利用组合、委托、多态等技术和思想，可以有效的避免多重条件选择语句&lt;br&gt;提供了对开放-封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，理解，易于扩展&lt;br&gt;利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的代替方案&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;会在程序中增加许多策略类或者策略对象&lt;br&gt;要使用策略模式，必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，这样才能选择一个合适的 strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;享元模式&#34;&gt;&lt;a href=&#34;#享元模式&#34; class=&#34;headerlink&#34; title=&#34;享元模式&#34;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;p&gt;运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let examCarNum = 0 // 驾考车总数
// /_ 驾考车对象 _/
class ExamCar &amp;#123;
constructor(carType) &amp;#123;
examCarNum++
this.carId = examCarNum
this.carType = carType ? &amp;#39;手动档&amp;#39; : &amp;#39;自动档&amp;#39;
this.usingState = false // 是否正在使用
&amp;#125;
/* 在本车上考试 */
examine(candidateId) &amp;#123;
    return new Promise((resolve =&amp;gt; &amp;#123;
        this.usingState = true
        console.log(`考生- $&amp;#123; candidateId &amp;#125; 开始在$&amp;#123; this.carType &amp;#125;驾考车- $&amp;#123; this.carId &amp;#125; 上考试`)
        setTimeout(() =&amp;gt; &amp;#123;
            this.usingState = false
            console.log(`%c考生- $&amp;#123; candidateId &amp;#125; 在$&amp;#123; this.carType &amp;#125;驾考车- $&amp;#123; this.carId &amp;#125; 上考试完毕`, &amp;#39;color:#f40&amp;#39;)
            resolve()                       // 0~2秒后考试完毕
        &amp;#125;, Math.random() * 2000)
    &amp;#125;))
&amp;#125;&amp;#125;
// /_ 手动档汽车对象池 _/
ManualExamCarPool = &amp;#123;
\_pool: [], // 驾考车对象池
\_candidateQueue: [], // 考生队列
/* 注册考生 ID 列表 */
registCandidates(candidateList) &amp;#123;
  candidateList.forEach(candidateId =&amp;gt; this.registCandidate(candidateId))
&amp;#125;,
/* 注册手动档考生 */
registCandidate(candidateId) &amp;#123;
  const examCar = this.getManualExamCar()    // 找一个未被占用的手动档驾考车
  if (examCar) &amp;#123;
      examCar.examine(candidateId)           // 开始考试，考完了让队列中的下一个考生开始考试
        .then(() =&amp;gt; &amp;#123;
            const nextCandidateId = this._candidateQueue.length &amp;amp;&amp;amp; this._candidateQueue.shift()
            nextCandidateId &amp;amp;&amp;amp; this.registCandidate(nextCandidateId)
        &amp;#125;)
  &amp;#125; else this._candidateQueue.push(candidateId)
&amp;#125;,
/* 注册手动档车 */
initManualExamCar(manualExamCarNum) &amp;#123;
  for (let i = 1; i &amp;lt;= manualExamCarNum; i++) &amp;#123;
      this._pool.push(new ExamCar(true))
  &amp;#125;
&amp;#125;,
/* 获取状态为未被占用的手动档车 */
getManualExamCar() &amp;#123;
  return this._pool.find(car =&amp;gt; !car.usingState)
&amp;#125;
ManualExamCarPool.initManualExamCar(3) // 一共有 3 个驾考车
ManualExamCarPool.registCandidates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // 10 个考生来考试
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;文件上传需要创建多个文件实例的时候&lt;br&gt;如果一个应用程序使用了大量的对象，而这些大量的对象造成了很大的存储开销时就应该考虑使用享元模式&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;大大减少对象的创建，降低系统的内存，使效率提高。&lt;/li&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，&lt;br&gt;不应该随着内部状态的变化而变化，否则会造成系统的混乱&lt;/p&gt;
&lt;h1 id=&#34;模板方法模式&#34;&gt;&lt;a href=&#34;#模板方法模式&#34; class=&#34;headerlink&#34; title=&#34;模板方法模式&#34;&gt;&lt;/a&gt;模板方法模式&lt;/h1&gt;&lt;p&gt;模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法和封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Beverage &amp;#123;
  constructor(&amp;#123; brewDrink, addCondiment &amp;#125;) &amp;#123;
    this.brewDrink = brewDrink;
    this.addCondiment = addCondiment;
  &amp;#125;
  // /_ 烧开水，共用方法 _/
  boilWater() &amp;#123;
    console.log(&amp;quot;水已经煮沸=== 共用&amp;quot;);
  &amp;#125;
  // /_ 倒杯子里，共用方法 _/
  pourCup() &amp;#123;
    console.log(&amp;quot;倒进杯子里===共用&amp;quot;);
  &amp;#125;
  // /_ 模板方法 _/
  init() &amp;#123;
    this.boilWater();
    this.brewDrink();
    this.pourCup();
    this.addCondiment();
  &amp;#125;
&amp;#125;
/_ 咖啡 _/;
const coffee = new Beverage(&amp;#123;
  // /_ 冲泡咖啡，覆盖抽象方法 _/
  brewDrink: function () &amp;#123;
    console.log(&amp;quot;冲泡咖啡&amp;quot;);
  &amp;#125;,
  // /_ 加调味品，覆盖抽象方法 _/
  addCondiment: function () &amp;#123;
    console.log(&amp;quot;加点奶和糖&amp;quot;);
  &amp;#125;,
&amp;#125;);
coffee.init();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现&lt;br&gt;子类中公共的行为应被提取出来并集中到一个公共父类中的避免代码重复&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;提取了公共代码部分，易于维护&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;增加了系统复杂度，主要是增加了的抽象类和类间联系&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;职责链模式&#34;&gt;&lt;a href=&#34;#职责链模式&#34; class=&#34;headerlink&#34; title=&#34;职责链模式&#34;&gt;&lt;/a&gt;职责链模式&lt;/h1&gt;&lt;p&gt;使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 请假审批，需要组长审批、经理审批、总监审批
class Action &amp;#123;
  constructor(name) &amp;#123;
    this.name = name;
    this.nextAction = null;
  &amp;#125;
  setNextAction(action) &amp;#123;
    this.nextAction = action;
  &amp;#125;
  handle() &amp;#123;
    console.log(`$&amp;#123;this.name&amp;#125; 审批`);
    if (this.nextAction != null) &amp;#123;
      this.nextAction.handle();
    &amp;#125;
  &amp;#125;
&amp;#125;
let a1 = new Action(&amp;quot;组长&amp;quot;);
let a2 = new Action(&amp;quot;经理&amp;quot;);
let a3 = new Action(&amp;quot;总监&amp;quot;);
a1.setNextAction(a2);
a2.setNextAction(a3);
a1.handle();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;JS 中的事件冒泡&lt;br&gt;作用域链&lt;br&gt;原型链&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;降低耦合度。它将请求的发送者和接收者解耦。&lt;br&gt;简化了对象。使得对象不需要知道链的结构&lt;br&gt;增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任&lt;br&gt;增加新的请求处理类很方便。&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;不能保证某个请求一定会被链中的节点处理，这种情况可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。&lt;br&gt;使程序中多了很多节点对象，可能再一次请求的过程中，大部分的节点并没有起到实质性的作用。他们的作用仅仅是让请求传递下去，从性能当面考虑，要避免过长的职责链到来的性能损耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;命令模式&#34;&gt;&lt;a href=&#34;#命令模式&#34; class=&#34;headerlink&#34; title=&#34;命令模式&#34;&gt;&lt;/a&gt;命令模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简单理解为一个类,光传递内部数据而不执行过程,类似于控制反转&lt;br&gt;将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 接收者类
class Receiver &amp;#123;
  execute() &amp;#123;
    console.log(&amp;quot;接收者执行请求&amp;quot;);
  &amp;#125;
&amp;#125;
// 命令者
class Command &amp;#123;
  constructor(receiver) &amp;#123;
    this.receiver = receiver;
  &amp;#125;
  execute() &amp;#123;
    console.log(&amp;quot;命令&amp;quot;);
    this.receiver.execute();
  &amp;#125;
&amp;#125;
// 触发者
class Invoker &amp;#123;
  constructor(command) &amp;#123;
    this.command = command;
  &amp;#125;
  invoke() &amp;#123;
    console.log(&amp;quot;开始&amp;quot;);
    this.command.execute();
  &amp;#125;
&amp;#125;
// 仓库
const warehouse = new Receiver();
// 订单
const order = new Command(warehouse);
// 客户
const client = new Invoker(order);
client.invoke();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;br&gt;对命令进行封装，使命令易于扩展和修改&lt;br&gt;命令发出者和接受者解耦，使发出者不需要知道命令的具体执行过程即可执行&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;使用命令模式可能会导致某些系统有过多的具体命令类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;备忘录模式&#34;&gt;&lt;a href=&#34;#备忘录模式&#34; class=&#34;headerlink&#34; title=&#34;备忘录模式&#34;&gt;&lt;/a&gt;备忘录模式&lt;/h1&gt;&lt;p&gt;在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//备忘类
class Memento &amp;#123;
  constructor(content) &amp;#123;
    this.content = content;
  &amp;#125;
  getContent() &amp;#123;
    return this.content;
  &amp;#125;
&amp;#125;
// 备忘列表
class CareTaker &amp;#123;
  constructor() &amp;#123;
    this.list = [];
  &amp;#125;
  add(memento) &amp;#123;
    this.list.push(memento);
  &amp;#125;
  get(index) &amp;#123;
    return this.list[index];
  &amp;#125;
&amp;#125;
// 编辑器
class Editor &amp;#123;
  constructor() &amp;#123;
    this.content = null;
  &amp;#125;
  setContent(content) &amp;#123;
    this.content = content;
  &amp;#125;
  getContent() &amp;#123;
    return this.content;
  &amp;#125;
  saveContentToMemento() &amp;#123;
    return new Memento(this.content);
  &amp;#125;
  getContentFromMemento(memento) &amp;#123;
    this.content = memento.getContent();
  &amp;#125;
&amp;#125;
//测试代码
let editor = new Editor();
let careTaker = new CareTaker();
editor.setContent(&amp;quot;111&amp;quot;);
editor.setContent(&amp;quot;222&amp;quot;);
careTaker.add(editor.saveContentToMemento());
editor.setContent(&amp;quot;333&amp;quot;);
careTaker.add(editor.saveContentToMemento());
editor.setContent(&amp;quot;444&amp;quot;);
console.log(editor.getContent()); //444
editor.getContentFromMemento(careTaker.get(1));
console.log(editor.getContent()); //333
editor.getContentFromMemento(careTaker.get(0));
console.log(editor.getContent()); //222
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;分页控件&lt;br&gt;撤销组件&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;中介者模式&#34;&gt;&lt;a href=&#34;#中介者模式&#34; class=&#34;headerlink&#34; title=&#34;中介者模式&#34;&gt;&lt;/a&gt;中介者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代理模式和中介者模式的区别在于：代理模式往往是一对一的，但中介模式往往是一对多。&lt;br&gt;解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的 相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知 中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者&lt;br&gt;模式使网状的多对多关系变成了相对简单的一对多关系（类似于观察者模式，但是单向的，由中介者统一管理。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class A &amp;#123;
  constructor() &amp;#123;
    this.number = 0;
  &amp;#125;
  setNumber(num, m) &amp;#123;
    this.number = num;
    if (m) &amp;#123;
      m.setB();
    &amp;#125;
  &amp;#125;
&amp;#125;
class B &amp;#123;
  constructor() &amp;#123;
    this.number = 0;
  &amp;#125;
  setNumber(num, m) &amp;#123;
    this.number = num;
    if (m) &amp;#123;
      m.setA();
    &amp;#125;
  &amp;#125;
&amp;#125;
class Mediator &amp;#123;
  constructor(a, b) &amp;#123;
    this.a = a;
    this.b = b;
  &amp;#125;
  setA() &amp;#123;
    let number = this.b.number;
    this.a.setNumber(number / 10);
  &amp;#125;
  setB() &amp;#123;
    let number = this.a.number;
    this.b.setNumber(number / 10);
  &amp;#125;
&amp;#125;
let a = new A();
let b = new B();
let m = new Mediator(a, b);
a.setNumber(10, m);
console.log(a.number, b.number);
b.setNumber(10, m);
console.log(a.number, b.number);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象&lt;br&gt;想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;使各对象之间耦合松散，而且可以独立地改变它们之间的交互&lt;br&gt;中介者和对象一对多的关系取代了对象之间的网状多对多的关系&lt;br&gt;如果对象之间的复杂耦合度导致维护很困难，而且耦合度随项目变化增速很快，就需要中介者重构代码&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;系统中会新增一个中介者对象，因 为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介 者对象自身往往就是一个难以维护的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;解释器模式&#34;&gt;&lt;a href=&#34;#解释器模式&#34; class=&#34;headerlink&#34; title=&#34;解释器模式&#34;&gt;&lt;/a&gt;解释器模式&lt;/h1&gt;&lt;p&gt;给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;class Context &amp;#123;
  constructor() &amp;#123;
    this._list = []; // 存放 终结符表达式
    this._sum = 0; // 存放 非终结符表达式(运算结果)
  &amp;#125;
  get sum() &amp;#123;
    return this._sum;
  &amp;#125;
  set sum(newValue) &amp;#123;
    this._sum = newValue;
  &amp;#125;
  add(expression) &amp;#123;
    this._list.push(expression);
  &amp;#125;
  get list() &amp;#123;
    return [...this._list];
  &amp;#125;
&amp;#125;
class PlusExpression &amp;#123;
  interpret(context) &amp;#123;
    if (!(context instanceof Context)) &amp;#123;
      throw new Error(&amp;quot;TypeError&amp;quot;);
    &amp;#125;
    context.sum = ++context.sum;
  &amp;#125;
&amp;#125;
class MinusExpression &amp;#123;
  interpret(context) &amp;#123;
    if (!(context instanceof Context)) &amp;#123;
      throw new Error(&amp;quot;TypeError&amp;quot;);
    &amp;#125;
    context.sum = --context.sum;
  &amp;#125;
&amp;#125;
/** 以下是测试代码 **/
const context = new Context();
// 依次添加: 加法 | 加法 | 减法 表达式
context.add(new PlusExpression());
context.add(new PlusExpression());
context.add(new MinusExpression());
// 依次执行: 加法 | 加法 | 减法 表达式
context.list.forEach((expression) =&amp;gt; expression.interpret(context));
console.log(context.sum);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;br&gt;易于改变和扩展文法。&lt;br&gt;由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;执行效率较低，在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度慢&lt;br&gt;对于复杂的文法比较难维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;访问者模式&#34;&gt;&lt;a href=&#34;#访问者模式&#34; class=&#34;headerlink&#34; title=&#34;访问者模式&#34;&gt;&lt;/a&gt;访问者模式&lt;/h1&gt;&lt;p&gt;表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 访问者
class Visitor &amp;#123;
  constructor() &amp;#123;&amp;#125;
  visitConcreteElement(ConcreteElement) &amp;#123;
    ConcreteElement.operation();
  &amp;#125;
&amp;#125;
// 元素类
class ConcreteElement &amp;#123;
  constructor() &amp;#123;&amp;#125;
  operation() &amp;#123;
    console.log(&amp;quot;ConcreteElement.operation invoked&amp;quot;);
  &amp;#125;
  accept(visitor) &amp;#123;
    visitor.visitConcreteElement(this);
  &amp;#125;
&amp;#125;
// client
let visitor = new Visitor();
let element = new ConcreteElement();
element.accept(visitor);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;场景例子&lt;br&gt;对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作&lt;br&gt;需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。&lt;/li&gt;
&lt;li&gt;优点&lt;br&gt;符合单一职责原则&lt;br&gt;优秀的扩展性&lt;br&gt;灵活性&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;具体元素对访问者公布细节，违反了迪米特原则&lt;br&gt;违反了依赖倒置原则，依赖了具体类，没有依赖抽象。&lt;br&gt;具体元素变更比较困难&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;设计原则&#34;&gt;&lt;a href=&#34;#设计原则&#34; class=&#34;headerlink&#34; title=&#34;设计原则&#34;&gt;&lt;/a&gt;设计原则&lt;/h1&gt;&lt;h2 id=&#34;面向对象&#34;&gt;&lt;a href=&#34;#面向对象&#34; class=&#34;headerlink&#34; title=&#34;面向对象&#34;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h4 id=&#34;开放封闭原则&#34;&gt;&lt;a href=&#34;#开放封闭原则&#34; class=&#34;headerlink&#34; title=&#34;开放封闭原则&#34;&gt;&lt;/a&gt;开放封闭原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;开放封闭原则的核心是：对扩展开放，对修改封闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对扩展开放意味着：软件实体（如类、模块、函数等）应该易于扩展，即：不修改现有代码的基础上添加新的功能&lt;/li&gt;
&lt;li&gt;对修改封闭意味着：软件实体应该避免修改，尤其是已经经过测试并被证明是稳定的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单一功能原则&#34;&gt;&lt;a href=&#34;#单一功能原则&#34; class=&#34;headerlink&#34; title=&#34;单一功能原则&#34;&gt;&lt;/a&gt;单一功能原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;单一功能原则的核心是：一个类应该只有一个引起他变化的原因，它强调的是类的职责应该清晰明确，一个类只负责一项任务或功能，这样做的目的是为了降低类的复杂性，增加代码的可维护性和可复用性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;里氏替换原则&#34;&gt;&lt;a href=&#34;#里氏替换原则&#34; class=&#34;headerlink&#34; title=&#34;里氏替换原则&#34;&gt;&lt;/a&gt;里氏替换原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;里氏替换原则是实现开放封闭原则的方式之一，里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;最少知识原则&#34;&gt;&lt;a href=&#34;#最少知识原则&#34; class=&#34;headerlink&#34; title=&#34;最少知识原则&#34;&gt;&lt;/a&gt;最少知识原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;最少知识原则又称迪米特法则，意思是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。&lt;br&gt;最少知识原则降低了类的耦合性，提高了模块的独立性，从而提升了模块的可复用率和系统的扩展性。但是过度使用则会使系统产生大量的中介类，从而增加系统的复杂性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;合成复用原则&#34;&gt;&lt;a href=&#34;#合成复用原则&#34; class=&#34;headerlink&#34; title=&#34;合成复用原则&#34;&gt;&lt;/a&gt;合成复用原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;类的复用分为两种：继承复用和合成复用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;继承复用的优点：简单清晰，易于实现&lt;/li&gt;
&lt;li&gt;继承复用的缺点：破坏了类的封装性（继承会将父类的实现细节暴露给子类，因此这种复用又称为白箱复用）、子类与父类的耦合度高，父类的实现改变会导致子类的实现改变。&lt;/li&gt;
&lt;li&gt;合成复用的优点：维持了类的封装性（对象内部细节对外部是不可见的，因此又称为黑盒复用）、新类和旧类之间耦合度低、复用的灵活性高&lt;/li&gt;
&lt;li&gt;合成复用的缺点：实现复杂、代码量多&lt;blockquote&gt;
&lt;p&gt;合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向接口&#34;&gt;&lt;a href=&#34;#面向接口&#34; class=&#34;headerlink&#34; title=&#34;面向接口&#34;&gt;&lt;/a&gt;面向接口&lt;/h2&gt;&lt;h4 id=&#34;依赖倒置原则&#34;&gt;&lt;a href=&#34;#依赖倒置原则&#34; class=&#34;headerlink&#34; title=&#34;依赖倒置原则&#34;&gt;&lt;/a&gt;依赖倒置原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;依赖倒置原则：程序要依赖于抽象接口，而不要依赖于具体的实现，也就是说高层模块不应该依赖于底层模块，两者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖抽象。&lt;br&gt;依赖倒置原则的核心是：通过面向接口的编程来降低类之间的耦合性。&lt;br&gt;&lt;code&gt;依赖倒置&lt;/code&gt;是面向接口领域的软件设计原则，&lt;code&gt;依赖反转&lt;/code&gt;是遵守依赖倒置原则而提出的一种设计模式，而&lt;code&gt;依赖注入&lt;/code&gt;是为了实现依赖反转的一种手段和方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;接口隔离原则&#34;&gt;&lt;a href=&#34;#接口隔离原则&#34; class=&#34;headerlink&#34; title=&#34;接口隔离原则&#34;&gt;&lt;/a&gt;接口隔离原则&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;接口隔离原则要求将臃肿庞大的接口进行拆分，拆分为更小的更具体的接口，小的接口之间相互隔离。&lt;br&gt;接口隔离原则的核心是：提高内聚，减少对外交互，使接口用最少的方法完成最多的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；&lt;/li&gt;
&lt;li&gt;里氏替换原则告诉我们不要破坏继承体系；&lt;/li&gt;
&lt;li&gt;依赖倒置原则告诉我们要面向接口编程；&lt;/li&gt;
&lt;li&gt;单一职责原则告诉我们实现类要职责单一；&lt;/li&gt;
&lt;li&gt;接口隔离原则告诉我们在设计接口的时候要精简单一；&lt;/li&gt;
&lt;li&gt;最少知识原则告诉我们要降低耦合度；&lt;/li&gt;
&lt;li&gt;合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="设计模式与设计原则" scheme="https://dmqweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/" />
        <category term="设计模式与设计原则" scheme="https://dmqweb.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/" />
        <updated>2024-07-07T06:26:39.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</id>
        <title>OSI七层网络模型</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
        <content type="html">&lt;h1 id=&#34;OSI七层网络模型&#34;&gt;&lt;a href=&#34;#OSI七层网络模型&#34; class=&#34;headerlink&#34; title=&#34;OSI七层网络模型&#34;&gt;&lt;/a&gt;OSI七层网络模型&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/images/e3cc1860482648d5a2b2f6bac23280d3~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;七、应用层（应用）&#34;&gt;&lt;a href=&#34;#七、应用层（应用）&#34; class=&#34;headerlink&#34; title=&#34;七、应用层（应用）&#34;&gt;&lt;/a&gt;七、应用层（应用）&lt;/h1&gt;&lt;p&gt;应用层就是我们最接近我们、最常用的一层，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ajax调用接口发送&lt;strong&gt;http请求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;DNS域名查询&lt;/strong&gt;系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邮件协议SMTP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;websock长连接&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;六、表示层（安全、压缩、翻译）&#34;&gt;&lt;a href=&#34;#六、表示层（安全、压缩、翻译）&#34; class=&#34;headerlink&#34; title=&#34;六、表示层（安全、压缩、翻译）&#34;&gt;&lt;/a&gt;六、表示层（安全、压缩、翻译）&lt;/h1&gt;&lt;p&gt;表示层做了几件重要的事情如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩&lt;/li&gt;
&lt;li&gt;安全（数据发送前进行加密，在接受者的表示层进行解密）&lt;/li&gt;
&lt;li&gt;程序在网络中的翻译官（对图片文件等格式进行解码和编码）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;五、会话层（检查点机制）&#34;&gt;&lt;a href=&#34;#五、会话层（检查点机制）&#34; class=&#34;headerlink&#34; title=&#34;五、会话层（检查点机制）&#34;&gt;&lt;/a&gt;五、会话层（检查点机制）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;会话层是在发送方和接收方之间进行通信时创建、维持、之后终止或断开连接的地方&lt;/li&gt;
&lt;li&gt;会话层定义了一种机制，允许发送方和接收方启动或停止请求会话，当及当双方发生拥塞时仍然能保持对话&lt;/li&gt;
&lt;li&gt;会话层包含了一种&lt;strong&gt;检查点的机制&lt;/strong&gt;来维持可靠会话，检查点定义了一个最接近成功通信的点，并且定义了当发生内容丢失或者损坏时需要回滚以便回复丢失或损坏数据的点，即断点下载的原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四、传输层（TCP、UDP连接）&#34;&gt;&lt;a href=&#34;#四、传输层（TCP、UDP连接）&#34; class=&#34;headerlink&#34; title=&#34;四、传输层（TCP、UDP连接）&#34;&gt;&lt;/a&gt;四、传输层（TCP、UDP连接）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;传输层主要就是定义端口号，以及控流和校验&lt;/li&gt;
&lt;li&gt;TCP（面向连接的协议并且TCP是可靠的），因为TCP会进行三报文握手和四报文挥手，所以是可靠的，但是这样会降低速度&lt;/li&gt;
&lt;li&gt;UDP（UDP没有三报文握手和四报文挥手，因此不够稳定，但是速度快，常用于直播和游戏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三、网络层（IP地址）&#34;&gt;&lt;a href=&#34;#三、网络层（IP地址）&#34; class=&#34;headerlink&#34; title=&#34;三、网络层（IP地址）&#34;&gt;&lt;/a&gt;三、网络层（IP地址）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;网络层是最复杂的一层，在网络层定义了IP&lt;/li&gt;
&lt;li&gt;网络层控制数据链路层与传输层之间的信息转发，建立，维持和终止网络的连接。&lt;/li&gt;
&lt;li&gt;数据链路层的数据在网络层被转换为数据包，然后通过路径选择、分段组合、顺序、进&amp;#x2F;出路由等控制，将信息从一个网络设备传送到另一个网络设备&lt;/li&gt;
&lt;li&gt;寻址：对网络层而言使用IP地址来唯一标识互联网上的设备，网络层依靠IP地址进行相互通信（类似于数据链路层的MAC地址）&lt;/li&gt;
&lt;li&gt;路由：在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。&lt;/li&gt;
&lt;li&gt;如果所有的使用互联网的用户在同一个网段中，&lt;strong&gt;会产生广播风暴，所以要将用户进行划分&lt;/strong&gt;，让他们在不同的网段中，自己在自己的小网段中广播。而&lt;strong&gt;互联网就是这无数的子网络构成的一个巨型网络&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在网络层中引入了一套新的地址，让我们能够区分不同的网段。这套地址就叫做“网络地址”，简称“网址”。于是，&lt;strong&gt;”网络层”出现以后，每台计算机有了两种地址&lt;/strong&gt;，&lt;strong&gt;一种是MAC地址，另一种是网络地址&lt;/strong&gt;。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。&lt;strong&gt;网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。&lt;/strong&gt;因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。&lt;/li&gt;
&lt;li&gt;这一层中有一个&lt;strong&gt;规定网络地址的协议，叫做IP协议&lt;/strong&gt;，它所定义的地址，就被称为IP地址。&lt;/li&gt;
&lt;li&gt;目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。因为IPv4的地址已经不够用了，所以现在推广IPv6，&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二、数据链路层（MAC地址）&#34;&gt;&lt;a href=&#34;#二、数据链路层（MAC地址）&#34; class=&#34;headerlink&#34; title=&#34;二、数据链路层（MAC地址）&#34;&gt;&lt;/a&gt;二、数据链路层（MAC地址）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;建立逻辑连接、进行硬件地址寻址、差错校验等功能（底层网络定义协议）&lt;/li&gt;
&lt;li&gt;及比特组合成字节进而组合成帧，用MAC地址访问介质，此时可以发现错误但不能纠正。&lt;/li&gt;
&lt;li&gt;MAC地址是每个网卡的唯一标识，有了MAC地址就能知道谁是接收者，谁是发送者，并且知道了数据的内容，并且进行分组。&lt;/li&gt;
&lt;li&gt;传播数据是通过广播的方式进行传输，在局域网中的所有计算机都能接收到消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一、物理层（物理信道）&#34;&gt;&lt;a href=&#34;#一、物理层（物理信道）&#34; class=&#34;headerlink&#34; title=&#34;一、物理层（物理信道）&#34;&gt;&lt;/a&gt;一、物理层（物理信道）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;物理层是直接和物理介质打交道的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;物理层的设备 网卡，网线，集线器，中继器，调制解调器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;物理层信道：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有线信道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明线（平行架设在电线杆上的架空线路）&lt;/li&gt;
&lt;li&gt;对称电缆（对多双绞线组成）&lt;/li&gt;
&lt;li&gt;同轴电缆（具有外层屏蔽层）&lt;/li&gt;
&lt;li&gt;光纤（利用光在纤维中的反射原理进行传输）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无线信道&lt;/p&gt;
&lt;p&gt;以辐射无线电波为传输方式无线信道主要有地波传输，天波传输和视距传输 例如：卫星通讯，电台广播&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物理层通过以上的方式，会获取他们对应的传送信号，电压，转换成010101010101但是数据还未组织，仅作为原始的电气电压处理&lt;code&gt;单位为bit&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="OSI七层网络模型" scheme="https://dmqweb.cn/categories/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" />
        <category term="OSI七层网络模型" scheme="https://dmqweb.cn/tags/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" />
        <updated>2024-05-27T10:16:27.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/24/node/</id>
        <title>Node学习笔记</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/24/node/"/>
        <content type="html">&lt;h1 id=&#34;Node-js&#34;&gt;&lt;a href=&#34;#Node-js&#34; class=&#34;headerlink&#34; title=&#34;Node.js&#34;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js并不是JavaScript应用，也不是编程语言，而是JavaScript的运行时。&lt;/li&gt;
&lt;li&gt;Node.js是构建在V8引擎之上的，V8引擎由C &amp;#x2F; C++编写，因此JavaScript语言需要编译为C &amp;#x2F; C++代码之后才能执行。&lt;/li&gt;
&lt;li&gt;Node.js采用异步IO和事件驱动的设计理念，可以高效的处理大量并发请求，提供了非阻塞IO接口和事件循环机制，使其可以编写出高性能、高扩展的应用程序。（异步IO通过libuv库来实现）&lt;/li&gt;
&lt;li&gt;Node.js使用npm作为包管理工具&lt;/li&gt;
&lt;li&gt;Node.js适合做一些IO密集型应用，不适合做一些CPU密集型应用（事件循环机制和异步IO使得Node.js有很强的处理能力，但是因为Node.js单线程的原因，容易造成CPU占用率过高）&lt;/li&gt;
&lt;li&gt;如果非要用Node.js做CPU密集型应用，需要编写C++插件，或者Node提供的cluster模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;npm&#34;&gt;&lt;a href=&#34;#npm&#34; class=&#34;headerlink&#34; title=&#34;npm&#34;&gt;&lt;/a&gt;npm&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;npm是Node.js的包管理工具，它基于命令行，用于帮助开发者在自己的项目中安装、升级、移除和管理依赖项。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qaWF4aWFveGlhby5uZXRsaWZ5LmFwcC8yMDE5LzA3LzMwL25vZGUvbm9kZS1ucG0v&#34;&gt;npm命令大全&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTQ1NzU5ODY4MDEwMzY0OTU5&#34;&gt;package.json配置详解&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-install&#34;&gt;&lt;a href=&#34;#npm-install&#34; class=&#34;headerlink&#34; title=&#34;npm install&#34;&gt;&lt;/a&gt;npm install&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;npm install&lt;/code&gt;时，npm会通过广度优先遍历算法遍历依赖树，npm会首先处理项目根目录下的依赖，然后逐层处理每个依赖包的依赖，直到所有的依赖被处理完成。在处理每个依赖时，npm会检查该依赖的版本号是否符合依赖树中其他依赖的版本要求，如果不符合，则会尝试安装适合的版本。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-28_18-35-31.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;npmrc文件&#34;&gt;&lt;a href=&#34;#npmrc文件&#34; class=&#34;headerlink&#34; title=&#34;.npmrc文件&#34;&gt;&lt;/a&gt;.npmrc文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;registry=http://registry.npmjs.org/
# 定义npm的registry，即npm的包下载源
proxy=http://proxy.example.com:8080/
# 定义npm的代理服务器，用于访问网络
https-proxy=http://proxy.example.com:8080/
# 定义npm的https代理服务器，用于访问网络
strict-ssl=true
# 是否在SSL证书验证错误时退出
cafile=/path/to/cafile.pem
# 定义自定义CA证书文件的路径
user-agent=npm/&amp;#123;npm-version&amp;#125; node/&amp;#123;node-version&amp;#125; &amp;#123;platform&amp;#125;
# 自定义请求头中的User-Agent
save=true
# 安装包时是否自动保存到package.json的dependencies中
save-dev=true
# 安装包时是否自动保存到package.json的devDependencies中
save-exact=true
# 安装包时是否精确保存版本号
engine-strict=true
# 是否在安装时检查依赖的node和npm版本是否符合要求
scripts-prepend-node-path=true
# 是否在运行脚本时自动将node的路径添加到PATH环境变量中
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;package-lock-json&#34;&gt;&lt;a href=&#34;#package-lock-json&#34; class=&#34;headerlink&#34; title=&#34;package-lock.json&#34;&gt;&lt;/a&gt;package-lock.json&lt;/h4&gt;&lt;p&gt;文件的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;锁定版本号、记录依赖树详细信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package-lock.json帮我们做了缓存，他会通过 &lt;code&gt;name + version + integrity&lt;/code&gt; 信息生成一个唯一的key，这个key能找到对应的index-v5 下的缓存记录 （npm cache 文件夹下），如果发现有缓存记录，就会找到tar包的hash值，然后将对应的二进制文件解压到node_modeules&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-run&#34;&gt;&lt;a href=&#34;#npm-run&#34; class=&#34;headerlink&#34; title=&#34;npm run&#34;&gt;&lt;/a&gt;npm run&lt;/h4&gt;&lt;p&gt;读取package.json的scripts对应的脚本命令，查找的规则是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前项目node_modules&amp;#x2F;.bin查找&lt;/li&gt;
&lt;li&gt;全局node_modules&amp;#x2F;.bin查找&lt;/li&gt;
&lt;li&gt;环境变量查找&lt;/li&gt;
&lt;li&gt;找不到，报错&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;node_modules&amp;#x2F;.bin中有三个文件（Node作为跨平台工具，需要处理平台兼容性）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sh文件是给Linux unix Macos 使用&lt;/li&gt;
&lt;li&gt;.cmd 给windows的cmd使用&lt;/li&gt;
&lt;li&gt;.ps1 给windows的powerShell 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm-生命周期&#34;&gt;&lt;a href=&#34;#npm-生命周期&#34; class=&#34;headerlink&#34; title=&#34;npm 生命周期&#34;&gt;&lt;/a&gt;npm 生命周期&lt;/h4&gt;&lt;p&gt;在package.json中的scripts字段中，我们可以利用npm脚本命名规范使用npm的生命周期特性，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascripton&#34;&gt;    &amp;quot;pretest&amp;quot;: &amp;quot;node prev.js&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;node index.js&amp;quot;,
    &amp;quot;posttest&amp;quot;: &amp;quot;node post.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则执行：npm run test时，会最先执行pretest，最后执行posttest。&lt;/p&gt;
&lt;h4 id=&#34;npx&#34;&gt;&lt;a href=&#34;#npx&#34; class=&#34;headerlink&#34; title=&#34;npx&#34;&gt;&lt;/a&gt;npx&lt;/h4&gt;&lt;p&gt;npx是一个命令行工具，它是npm 5.2.0版本中新增的功能。它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。&lt;/p&gt;
&lt;p&gt;npx的作用是在命令行中运行node包中的可执行文件，而不需要全局安装这些包。这可以使开发人员更轻松地管理包的依赖关系，并且可以避免全局污染的问题。它还可以帮助开发人员在项目中使用不同版本的包，而不会出现版本冲突的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npx 的优势&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免全局安装：&lt;code&gt;npx&lt;/code&gt;允许你执行npm package，而不需要你先全局安装它。&lt;/li&gt;
&lt;li&gt;总是使用最新版本：如果你没有在本地安装相应的npm package，&lt;code&gt;npx&lt;/code&gt;会从npm的package仓库中下载并使用最新版。&lt;/li&gt;
&lt;li&gt;执行任意npm包：&lt;code&gt;npx&lt;/code&gt;不仅可以执行在&lt;code&gt;package.json&lt;/code&gt;的&lt;code&gt;scripts&lt;/code&gt;部分定义的命令，还可以执行任何npm package。&lt;/li&gt;
&lt;li&gt;执行GitHub gist：&lt;code&gt;npx&lt;/code&gt;甚至可以执行GitHub gist或者其他公开的JavaScript文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;npm 和 npx 区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npx&lt;/code&gt;侧重于执行命令的，执行某个模块命令。虽然会自动安装模块，但是重在执行某个命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;侧重于安装或者卸载某个模块的。重在安装，并不具备执行某个模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;npm私服&#34;&gt;&lt;a href=&#34;#npm私服&#34; class=&#34;headerlink&#34; title=&#34;npm私服&#34;&gt;&lt;/a&gt;npm私服&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以离线使用&lt;/strong&gt;，你可以将npm私服部署到内网集群，这样离线也可以访问私有的包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高包的安全性&lt;/strong&gt;，使用私有的npm仓库可以更好的管理你的包，避免在使用公共的npm包的时候出现漏洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高包的下载速度&lt;/strong&gt;，使用私有 npm 仓库，你可以将经常使用的 npm 包缓存到本地，从而显著提高包的下载速度，减少依赖包的下载时间。这对于团队内部开发和持续集成、部署等场景非常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;搭建：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以克隆npm或cnpm仓库，更改yaml配置文件为自己想要的设置即可&lt;/li&gt;
&lt;li&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92ZXJkYWNjaW8ub3JnL3poLWNuLw==&#34;&gt;verdaccio工具&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install verdaccio -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verdaccio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问localhost:4873&lt;/li&gt;
&lt;li&gt;使用npm操作时，加上&lt;code&gt;--registry http://localhost:4873&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Node模块化&#34;&gt;&lt;a href=&#34;#Node模块化&#34; class=&#34;headerlink&#34; title=&#34;Node模块化&#34;&gt;&lt;/a&gt;Node模块化&lt;/h2&gt;&lt;h4 id=&#34;CommonJS&#34;&gt;&lt;a href=&#34;#CommonJS&#34; class=&#34;headerlink&#34; title=&#34;CommonJS&#34;&gt;&lt;/a&gt;CommonJS&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持引入内置模块例如 &lt;code&gt;http&lt;/code&gt; &lt;code&gt;os&lt;/code&gt; &lt;code&gt;fs&lt;/code&gt; &lt;code&gt;child_process&lt;/code&gt; 等nodejs内置模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入第三方模块&lt;code&gt;express&lt;/code&gt; &lt;code&gt;md5&lt;/code&gt; &lt;code&gt;koa&lt;/code&gt; 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入自己编写的模块 .&amp;#x2F; ..&amp;#x2F; 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持引入addon C++扩展模块 .node文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ESM&#34;&gt;&lt;a href=&#34;#ESM&#34; class=&#34;headerlink&#34; title=&#34;ESM&#34;&gt;&lt;/a&gt;ESM&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;import静态导入需要在顶层调用&lt;/li&gt;
&lt;li&gt;import导入json文件需要添加断言（低版本node不可用）&lt;/li&gt;
&lt;li&gt;支持函数式动态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对比&#34;&gt;&lt;a href=&#34;#对比&#34; class=&#34;headerlink&#34; title=&#34;对比&#34;&gt;&lt;/a&gt;对比&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;CommonJS基于运行时的同步加载，ESM基于编译时的异步加载&lt;/li&gt;
&lt;li&gt;CommonJS是可以修改值的，ESM值并且不可修改（可读的）&lt;/li&gt;
&lt;li&gt;CommonJS不可以tree shaking，ESM支持tree shaking&lt;/li&gt;
&lt;li&gt;CommonJS中顶层的this指向这个模块本身，而ESM中顶层this指向undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;require执行顺序&#34;&gt;&lt;a href=&#34;#require执行顺序&#34; class=&#34;headerlink&#34; title=&#34;require执行顺序&#34;&gt;&lt;/a&gt;require执行顺序&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;.js文件，调用compile函数进行执行。&lt;/li&gt;
&lt;li&gt;.json文件，读取文件内容，调用JSON.parse方法处理。&lt;/li&gt;
&lt;li&gt;.node文件，通过process.dlopen方法进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;全局变量&#34;&gt;&lt;a href=&#34;#全局变量&#34; class=&#34;headerlink&#34; title=&#34;全局变量&#34;&gt;&lt;/a&gt;全局变量&lt;/h2&gt;&lt;h4 id=&#34;global&#34;&gt;&lt;a href=&#34;#global&#34; class=&#34;headerlink&#34; title=&#34;global&#34;&gt;&lt;/a&gt;global&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;浏览器端的全局对象是window&lt;/li&gt;
&lt;li&gt;Node环境的全局对象是global&lt;/li&gt;
&lt;li&gt;global上定义的变量在当前环境执行任何文件时都可以访问到&lt;/li&gt;
&lt;li&gt;ES2020推出globalThis用于兼容window和global（自动切换）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dirname&#34;&gt;&lt;a href=&#34;#dirname&#34; class=&#34;headerlink&#34; title=&#34;__dirname&#34;&gt;&lt;/a&gt;__dirname&lt;/h4&gt;&lt;p&gt;当前模块所在目录的绝对路径&lt;/p&gt;
&lt;h4 id=&#34;filename&#34;&gt;&lt;a href=&#34;#filename&#34; class=&#34;headerlink&#34; title=&#34;__filename&#34;&gt;&lt;/a&gt;__filename&lt;/h4&gt;&lt;p&gt;当前模块文件所在的绝对路径，包括文件名和文件扩展名&lt;/p&gt;
&lt;h4 id=&#34;require&#34;&gt;&lt;a href=&#34;#require&#34; class=&#34;headerlink&#34; title=&#34;require&#34;&gt;&lt;/a&gt;require&lt;/h4&gt;&lt;h4 id=&#34;module&#34;&gt;&lt;a href=&#34;#module&#34; class=&#34;headerlink&#34; title=&#34;module&#34;&gt;&lt;/a&gt;module&lt;/h4&gt;&lt;h4 id=&#34;process&#34;&gt;&lt;a href=&#34;#process&#34; class=&#34;headerlink&#34; title=&#34;process&#34;&gt;&lt;/a&gt;process&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是当前执行环境的路径&lt;/li&gt;
&lt;li&gt;第二个参数是当前执行的文件的路径&lt;/li&gt;
&lt;li&gt;剩余的参数是传递给脚本文件的命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.env&lt;/code&gt;环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.cwd()&lt;/code&gt;返回当前工作目录路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.on(event,listener)&lt;/code&gt;，监听进程变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.exit([code])&lt;/code&gt;，退出Node进程，提供退出码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.pid&lt;/code&gt;返回进程id&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Buffer类&#34;&gt;&lt;a href=&#34;#Buffer类&#34; class=&#34;headerlink&#34; title=&#34;Buffer类&#34;&gt;&lt;/a&gt;Buffer类&lt;/h4&gt;&lt;p&gt;Node.js 6.0版本开始，&lt;code&gt;Buffer&lt;/code&gt;构造函数的使用已被弃用，推荐使用&lt;code&gt;Buffer.alloc()&lt;/code&gt;、&lt;code&gt;Buffer.from()&lt;/code&gt;等方法来创建&lt;code&gt;Buffer&lt;/code&gt;实例。&lt;/p&gt;
&lt;h4 id=&#34;DOM、BOM&#34;&gt;&lt;a href=&#34;#DOM、BOM&#34; class=&#34;headerlink&#34; title=&#34;DOM、BOM&#34;&gt;&lt;/a&gt;DOM、BOM&lt;/h4&gt;&lt;p&gt;Node环境中无法操作DOM和BOM，不过可以借助一些工具进行模拟，例如：&lt;code&gt;jsdom&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const fs = require(&amp;#39;node:fs&amp;#39;)
const &amp;#123; JSDOM &amp;#125; = require(&amp;#39;jsdom&amp;#39;) // jsdom模拟浏览器环境
const dom = new JSDOM(`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;div id=&amp;#39;app&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;`)
const document = dom.window.document
const window = dom.window
fetch(&amp;#39;https://api.thecatapi.com/v1/images/search?limit=10&amp;amp;page=1&amp;#39;).then(res =&amp;gt; res.json()).then(data =&amp;gt; &amp;#123;
    const app = document.getElementById(&amp;#39;app&amp;#39;)
    data.forEach(item=&amp;gt;&amp;#123;
       const img =  document.createElement(&amp;#39;img&amp;#39;)
       img.src = item.url
       img.style.width = &amp;#39;200px&amp;#39;
       img.style.height = &amp;#39;200px&amp;#39;
       app.appendChild(img)
    &amp;#125;)
    fs.writeFileSync(&amp;#39;./index.html&amp;#39;, dom.serialize())
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;path模块&#34;&gt;&lt;a href=&#34;#path模块&#34; class=&#34;headerlink&#34; title=&#34;path模块&#34;&gt;&lt;/a&gt;path模块&lt;/h2&gt;&lt;p&gt;path模块在windows和posix系统中是有差异的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;posix表示可移植操作系统接口，也就是定义了一套标准，遵守这套标准的操作系统有(unix,like unix,linux,macOs,windows wsl)，用于多个平台间相互兼容&lt;/li&gt;
&lt;li&gt;Windows 并没有完全遵循 POSIX 标准，在 Windows 系统中，路径使用反斜杠（&lt;code&gt;\&lt;/code&gt;）作为路径分隔符。这与 POSIX 系统使用的正斜杠（&lt;code&gt;/&lt;/code&gt;）是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;差异举例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path.basename(&amp;#39;C:\temp\myfile.html&amp;#39;); 
// 在posix中 返回: &amp;#39;C:\temp\myfile.html&amp;#39;
// 在windows中 返回 empmyfile.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;path.basename返回文件名（包括后缀）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;path.basename(&amp;#39;C:/fs/dmq/MI/index.html&amp;#39;) //返回index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path.extname&lt;/code&gt;返回扩展名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.join&lt;/code&gt;路径拼接（路径拼接）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.resolve&lt;/code&gt;解析绝对路径并且返回绝对路径（路径解析）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.parse&lt;/code&gt;将路径解析为对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.format&lt;/code&gt;将对象解析为路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;os模块&#34;&gt;&lt;a href=&#34;#os模块&#34; class=&#34;headerlink&#34; title=&#34;os模块&#34;&gt;&lt;/a&gt;os模块&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.type()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;它在 Linux 上返回 &lt;code&gt;&amp;#39;Linux&amp;#39;&lt;/code&gt;，在 macOS 上返回 &lt;code&gt;&amp;#39;Darwin&amp;#39;&lt;/code&gt;，在 Windows 上返回 &lt;code&gt;&amp;#39;Windows_NT&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.platform()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回标识为其编译 Node.js 二进制文件的操作系统平台的字符串。 该值在编译时设置。 可能的值为 &lt;code&gt;&amp;#39;aix&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;darwin&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;freebsd&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;linux&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;openbsd&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;sunos&amp;#39;&lt;/code&gt;、以及 &lt;code&gt;&amp;#39;win32&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.release()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回操作系统的版本例如10.xxxx win10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.homedir()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回用户目录 例如c:\user\xiaoman 原理就是 windows &lt;code&gt;echo %USERPROFILE% &lt;/code&gt;posix $HOME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.arch()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回cpu的架构  可能的值为 &lt;code&gt;&amp;#39;arm&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;arm64&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ia32&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;mips&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;mipsel&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ppc&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;ppc64&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;s390&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;s390x&amp;#39;&lt;/code&gt;、以及 &lt;code&gt;&amp;#39;x64&amp;#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.cups()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取&lt;code&gt;cpu线程&lt;/code&gt;和cpu详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;os.networkInterfaces()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取&lt;code&gt;网络信息&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;process模块&#34;&gt;&lt;a href=&#34;#process模块&#34; class=&#34;headerlink&#34; title=&#34;process模块&#34;&gt;&lt;/a&gt;process模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是当前执行环境的路径&lt;/li&gt;
&lt;li&gt;第二个参数是当前执行的文件的路径&lt;/li&gt;
&lt;li&gt;剩余的参数是传递给脚本文件的命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.env&lt;/code&gt;环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.cwd()&lt;/code&gt;返回当前工作目录路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.on(event,listener)&lt;/code&gt;，监听进程变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.exit([code])&lt;/code&gt;，退出Node进程，提供退出码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.pid&lt;/code&gt;返回进程id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.arch&lt;/code&gt;返回操作系统CPU架构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.memoryUsage&lt;/code&gt;获取当前进程内存使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.kill(process.pid)&lt;/code&gt;用于杀死一个进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;child-process模块&#34;&gt;&lt;a href=&#34;#child-process模块&#34; class=&#34;headerlink&#34; title=&#34;child_process模块&#34;&gt;&lt;/a&gt;child_process模块&lt;/h2&gt;&lt;p&gt;子进程是Nodejs核心API，如果你会shell命令，他会有非常大的帮助，或者你喜欢编写前端工程化工具之类的，他也有很大的用处，以及处理CPU密集型应用。&lt;/p&gt;
&lt;h4 id=&#34;创建子进程&#34;&gt;&lt;a href=&#34;#创建子进程&#34; class=&#34;headerlink&#34; title=&#34;创建子进程&#34;&gt;&lt;/a&gt;创建子进程&lt;/h4&gt;&lt;p&gt;Nodejs创建子进程共有&lt;code&gt;7个&lt;/code&gt;API Sync同步API ，不加是异步API&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;spawn  执行命令&lt;/li&gt;
&lt;li&gt;exec   执行命令&lt;/li&gt;
&lt;li&gt;execFile   执行可执行文件&lt;/li&gt;
&lt;li&gt;fork   创建node子进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execSync&lt;/code&gt; 执行命令 同步执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execFileSync&lt;/code&gt; 执行可执行文件 同步执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawnSync&lt;/code&gt; 执行命令 同步执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cluster模块&#34;&gt;&lt;a href=&#34;#cluster模块&#34; class=&#34;headerlink&#34; title=&#34;cluster模块&#34;&gt;&lt;/a&gt;cluster模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cluster模块也用于创建node子进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相比较于child_process模块，cluster模块主要用于利用多核CPU的优势，通过创建多个工作进程来提高应用程序的并发处理能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cluster模块创建的每个工作进程都是独立地node.js进程，他们共享一个端口和监听器，由主进程负责分配请求到各个工作进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cluster模块自动实现请求的负载均衡，主进程会根据工作进程的负载请情况将请求分配给不同的工作进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进程通过process.send方法进行通信，但常用于工作进程和主进程之间的通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cluster模块支持优雅关闭工作进程，允许工作进程在关闭之前完成当前正在处理的请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ffmpeg工具&#34;&gt;&lt;a href=&#34;#ffmpeg工具&#34; class=&#34;headerlink&#34; title=&#34;ffmpeg工具&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mZm1wZWcucDJocC5jb20vZG93bmxvYWQuaHRtbA==&#34;&gt;ffmpeg工具&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;FFmpeg 是一个开源的跨平台多媒体处理工具，可以用于处理音频、视频和多媒体流。它提供了一组强大的命令行工具和库，可以进行视频转码、视频剪辑、音频提取、音视频合并、流媒体传输等操作。&lt;/p&gt;
&lt;h2 id=&#34;events模块&#34;&gt;&lt;a href=&#34;#events模块&#34; class=&#34;headerlink&#34; title=&#34;events模块&#34;&gt;&lt;/a&gt;events模块&lt;/h2&gt;&lt;p&gt;Node.js的事件模型采用发布订阅的设计思想，将发布者和订阅者之间解耦合，使得双方能够独立地扩展自己。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const EventEmitter = require(&amp;#39;events&amp;#39;);
const event = new EventEmitter()
//监听test
event.on(&amp;#39;test&amp;#39;,(data)=&amp;gt;&amp;#123;
    console.log(data)
&amp;#125;)
event.emit(&amp;#39;test&amp;#39;,&amp;#39;data数据&amp;#39;) //派发事件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;event实例默认监听10个为上限，可以通过&lt;code&gt;setMaxListeners()&lt;/code&gt;方法来设置监听上限。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;event.setMaxListeners(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;event.once方法&lt;/code&gt;可以只订阅一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;event.once(&amp;#39;test&amp;#39;,(data)=&amp;gt;&amp;#123;
    console.log(&amp;#39;once取代on，只监听一次&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;event.off&lt;/code&gt;方法取消订阅&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;event.on(&amp;#39;test&amp;#39;, fn) // 订阅事件
event.off(&amp;#39;test&amp;#39;, fn) // 取消事件订阅
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;SSE&#34;&gt;&lt;a href=&#34;#SSE&#34; class=&#34;headerlink&#34; title=&#34;SSE&#34;&gt;&lt;/a&gt;SSE&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSE（server send events）服务端推送事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是一种实现服务端向客户端推送数据的技术，也被称为事件流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它是基于HTTP协议，利用HTTP协议长连接的优势，实现服务端向客户端推送实时数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器端需要使用&lt;code&gt;EventSource&lt;/code&gt;注册api地址，服务端需要对该地址的响应头中设置Content-Type为 &lt;code&gt;text/event-stream &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;node后端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import express from &amp;#39;express&amp;#39;;
const app = express();
app.get(&amp;#39;/api/sse&amp;#39;, (req, res) =&amp;gt; &amp;#123;
    res.writeHead(200, &amp;#123;
        &amp;#39;Content-Type&amp;#39;: &amp;#39;text/event-stream&amp;#39;, //核心返回数据流
        &amp;#39;Connection&amp;#39;: &amp;#39;close&amp;#39;
    &amp;#125;)
    const data = fs.readFileSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;utf8&amp;#39;)
    const total = data.length;
    let current = 0;
    //mock sse 数据
    let time = setInterval(() =&amp;gt; &amp;#123;
        console.log(current, total)
        if (current &amp;gt;= total) &amp;#123;
            console.log(&amp;#39;end&amp;#39;)
            clearInterval(time)
            return
        &amp;#125;
        //返回自定义事件名
        res.write(`event:name\n`)
        //返回数据
        res.write(`data:$&amp;#123;data.split(&amp;#39;&amp;#39;)[current]&amp;#125;\n\n`)
        current++
    &amp;#125;, 300)
&amp;#125;)
app.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Listening on port 3000&amp;#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;客户端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const sse = new EventSource(&amp;#39;http://localhost:3000/api/sse&amp;#39; )
if (sse.readyState === EventSource.CONNECTING) &amp;#123;
  console.log(&amp;#39;正在连接服务器...&amp;#39;);
&amp;#125; else if (sse.readyState === EventSource.OPEN) &amp;#123;
  console.log(&amp;#39;已经连接上服务器！&amp;#39;);
&amp;#125; else if (sse.readyState === EventSource.CLOSED) &amp;#123;
  console.log(&amp;#39;连接已经关闭。&amp;#39;);
&amp;#125;
sse.onmessage = (data)=&amp;gt;&amp;#123;
    console.log(data);
&amp;#125;
sse.onerror = (e)=&amp;gt;&amp;#123;
    sse.close(); //关闭连接
    console.error(e);
&amp;#125;
sse.addEventListener(&amp;#39;open&amp;#39;, (e) =&amp;gt; &amp;#123;
    console.log(&amp;#39;连接成功&amp;#39;);
&amp;#125;)
//对应后端nodejs自定义的事件名lol
sse.addEventListener(&amp;#39;name&amp;#39;, (e) =&amp;gt; &amp;#123;
    console.log(e.data)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;util模块&#34;&gt;&lt;a href=&#34;#util模块&#34; class=&#34;headerlink&#34; title=&#34;util模块&#34;&gt;&lt;/a&gt;util模块&lt;/h2&gt;&lt;p&gt;Node.js内部提供的工具集模块，方便快速开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.promisify&lt;/code&gt;将函数改为promise类型的形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.callbackify&lt;/code&gt;将promise类型的api改为函数形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;util.format&lt;/code&gt;用于格式化文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: &lt;code&gt;String&lt;/code&gt; 将用于转换除 &lt;code&gt;BigInt&lt;/code&gt;、&lt;code&gt;Object&lt;/code&gt; 和 &lt;code&gt;-0&lt;/code&gt; 之外的所有值。 &lt;code&gt;BigInt&lt;/code&gt; 值将用 &lt;code&gt;n&lt;/code&gt; 表示，没有用户定义的 &lt;code&gt;toString&lt;/code&gt; 函数的对象使用具有选项 &lt;code&gt;&amp;#123; depth: 0, colors: false, compact: 3 &amp;#125;&lt;/code&gt; 的 &lt;code&gt;util.inspect()&lt;/code&gt; 进行检查。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;: &lt;code&gt;Number&lt;/code&gt; 将用于转换除 &lt;code&gt;BigInt&lt;/code&gt; 和 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%i&lt;/code&gt;: &lt;code&gt;parseInt(value, 10)&lt;/code&gt; 用于除 &lt;code&gt;BigInt&lt;/code&gt; 和 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt;: &lt;code&gt;parseFloat(value)&lt;/code&gt; 用于除 &lt;code&gt;Symbol&lt;/code&gt; 之外的所有值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%j&lt;/code&gt;: JSON。 如果参数包含循环引用，则替换为字符串 &lt;code&gt;&amp;#39;[Circular]&amp;#39;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%o&lt;/code&gt;: &lt;code&gt;Object&lt;/code&gt;. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于具有选项 &lt;code&gt;&amp;#123; showHidden: true, showProxy: true &amp;#125;&lt;/code&gt; 的 &lt;code&gt;util.inspect()&lt;/code&gt;。 这将显示完整的对象，包括不可枚举的属性和代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%O&lt;/code&gt;: &lt;code&gt;Object&lt;/code&gt;. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于没有选项的 &lt;code&gt;util.inspect()&lt;/code&gt;。 这将显示完整的对象，但不包括不可枚举的属性和代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt;: &lt;code&gt;CSS&lt;/code&gt;. 此说明符被忽略，将跳过任何传入的 CSS。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%&lt;/code&gt;: 单个百分号 (&lt;code&gt;&amp;#39;%&amp;#39;&lt;/code&gt;)。 这不消费参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他工具函数省略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pngquant工具&#34;&gt;&lt;a href=&#34;#pngquant工具&#34; class=&#34;headerlink&#34; title=&#34;pngquant工具&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbmdxdWFudC5vcmcv&#34;&gt;pngquant工具&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pngquant&lt;/code&gt; 是一个用于压缩 PNG 图像文件的工具。它可以显著减小 PNG 文件的大小，同时保持图像质量和透明度。通过减小文件大小，可以提高网页加载速度，并节省存储空间。&lt;code&gt;pngquant&lt;/code&gt; 提供命令行接口和库，可轻松集成到各种应用程序和脚本中。&lt;/p&gt;
&lt;h2 id=&#34;fs模块&#34;&gt;&lt;a href=&#34;#fs模块&#34; class=&#34;headerlink&#34; title=&#34;fs模块&#34;&gt;&lt;/a&gt;fs模块&lt;/h2&gt;&lt;p&gt;在 Node.js 中，&lt;code&gt;fs&lt;/code&gt; 模块是文件系统模块（File System module）的缩写，它提供了与文件系统进行交互的各种功能。通过 &lt;code&gt;fs&lt;/code&gt; 模块，你可以执行诸如读取文件、写入文件、更改文件权限、创建目录等操作，&lt;code&gt;Node.js 核心API之一&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;同步与异步&#34;&gt;&lt;a href=&#34;#同步与异步&#34; class=&#34;headerlink&#34; title=&#34;同步与异步&#34;&gt;&lt;/a&gt;同步与异步&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fs支持同步和异步两种模式 增加了&lt;code&gt;Sync&lt;/code&gt; fs 就会采用同步的方式运行代码，会阻塞下面的代码，不加Sync就是异步的模式不会阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fs新增了promise版本，只需要在引入包后面增加&amp;#x2F;promise即可，fs便可支持promise回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fs返回的是一个buffer二进制数据 每两个十六进制数字表示一个字节&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;api&#34;&gt;&lt;a href=&#34;#api&#34; class=&#34;headerlink&#34; title=&#34;api&#34;&gt;&lt;/a&gt;api&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.readFile&lt;/code&gt;异步读取文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.writeFile&lt;/code&gt;异步写入文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.appendFile&lt;/code&gt;文件异步追加写入内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.copyFile&lt;/code&gt;文件异步拷贝写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.open&lt;/code&gt;异步打开文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.close&lt;/code&gt;异步关闭文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.read&lt;/code&gt;异步读取文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.write&lt;/code&gt;异步将Buffer中的数据写入文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.access&lt;/code&gt;异步检查文件是否可读可写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.stat&lt;/code&gt;异步获取文件目录的stats对象（文件夹信息）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.mkdir&lt;/code&gt;异步创建文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.readdir&lt;/code&gt;异步读取文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.rmdir&lt;/code&gt;异步删除目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.unlink&lt;/code&gt;异步删除文件&lt;/li&gt;
&lt;li&gt;以上方法都有对应的同步执行的方法，在方法名后面加上Sync后缀即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fs-x2F-promises&#34;&gt;&lt;a href=&#34;#fs-x2F-promises&#34; class=&#34;headerlink&#34; title=&#34;fs&amp;#x2F;promises&#34;&gt;&lt;/a&gt;fs&amp;#x2F;promises&lt;/h4&gt;&lt;p&gt;node中fs模块的方法提供了Promise版本的调用形式，导入即可使用promise的使用方式调用api&lt;/p&gt;
&lt;h4 id=&#34;源码&#34;&gt;&lt;a href=&#34;#源码&#34; class=&#34;headerlink&#34; title=&#34;源码&#34;&gt;&lt;/a&gt;源码&lt;/h4&gt;&lt;p&gt;Node.js中fs模块是由libuv来进行调度的，文件读取完成之后libuv才会将fs的结果推入V8的队列。&lt;/p&gt;
&lt;h4 id=&#34;writeFileSync&#34;&gt;&lt;a href=&#34;#writeFileSync&#34; class=&#34;headerlink&#34; title=&#34;writeFileSync&#34;&gt;&lt;/a&gt;writeFileSync&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一个参数是要写入的文件&lt;/li&gt;
&lt;li&gt;第二个参数是写入的内容&lt;/li&gt;
&lt;li&gt;第三个参数是写入方式配置项，其flag有以下配置：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt;: 打开文件进行追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;ax&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;a+&amp;#39;&lt;/code&gt;: 打开文件进行读取和追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;ax+&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;a+&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;as&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;as+&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行读取和追加。 如果文件不存在，则创建该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;r&amp;#39;&lt;/code&gt;: 打开文件进行读取。 如果文件不存在，则会发生异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;r+&amp;#39;&lt;/code&gt;: 打开文件进行读写。 如果文件不存在，则会发生异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;rs+&amp;#39;&lt;/code&gt;: 以同步模式打开文件进行读写。 指示操作系统绕过本地文件系统缓存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;w&amp;#39;&lt;/code&gt;: 打开文件进行写入。 创建（如果它不存在）或截断（如果它存在）该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;wx&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;w&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;w+&amp;#39;&lt;/code&gt;: 打开文件进行读写。 创建（如果它不存在）或截断（如果它存在）该文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;wx+&amp;#39;&lt;/code&gt;: 类似于 &lt;code&gt;&amp;#39;w+&amp;#39;&lt;/code&gt; 但如果路径存在则失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如追加文件内容除了可以使用&lt;code&gt;appendFileSync&lt;/code&gt;之外，还可以：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;fs.writeFileSync(&amp;#39;index.txt&amp;#39;, &amp;#39;追加的内容&amp;#39;,&amp;#123;
    flag: &amp;#39;a&amp;#39; //配置options中的flag
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;可写流&#34;&gt;&lt;a href=&#34;#可写流&#34; class=&#34;headerlink&#34; title=&#34;可写流&#34;&gt;&lt;/a&gt;可写流&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const fs = require(&amp;#39;node:fs&amp;#39;)
let verse = [
    &amp;#39;待到秋来九月八&amp;#39;,
    &amp;#39;我花开后百花杀&amp;#39;,
    &amp;#39;冲天香阵透长安&amp;#39;,
    &amp;#39;满城尽带黄金甲&amp;#39;
]
let writeStream = fs.createWriteStream(&amp;#39;index.txt&amp;#39;) //创建写入流
verse.forEach(item =&amp;gt; &amp;#123;
    writeStream.write(item + &amp;#39;\n&amp;#39;) //写入内容
&amp;#125;)
writeStream.end()
writeStream.on(&amp;#39;finish&amp;#39;,()=&amp;gt;&amp;#123; //监听写入完成事件
    console.log(&amp;#39;写入完成&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以创建一个可写流 打开一个通道，可以一直写入数据，用于处理大量的数据写入，写入完成之后调用end 关闭可写流，监听finish 事件 写入完成&lt;/p&gt;
&lt;h4 id=&#34;硬链接、软连接&#34;&gt;&lt;a href=&#34;#硬链接、软连接&#34; class=&#34;headerlink&#34; title=&#34;硬链接、软连接&#34;&gt;&lt;/a&gt;硬链接、软连接&lt;/h4&gt;&lt;h6 id=&#34;inode&#34;&gt;&lt;a href=&#34;#inode&#34; class=&#34;headerlink&#34; title=&#34;inode&#34;&gt;&lt;/a&gt;inode&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;文件存储在磁盘上，磁盘的最小存储单位叫做&lt;code&gt;扇区&lt;/code&gt;，每个扇区存储512字节&lt;/li&gt;
&lt;li&gt;操作系统读取磁盘时，不会一个扇区一个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，多个扇区称之为&lt;code&gt;块&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;块&lt;/code&gt;是文件读取的最小单位&lt;/li&gt;
&lt;li&gt;文件数据都存储在&lt;code&gt;块&lt;/code&gt;中，因此需要一个地方存储文件的元信息，这中存储文件元信息的区域就叫做&lt;code&gt;inode&lt;/code&gt;，索引节点&lt;/li&gt;
&lt;li&gt;创建软链接时生成了新的&lt;code&gt;inode&lt;/code&gt;，创建硬链接时没有。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-07-39.png&#34; alt=&#34;扇区、块和inode&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inode中包含信息：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件的字节数&lt;/li&gt;
&lt;li&gt;文件拥有者ID&lt;/li&gt;
&lt;li&gt;文件的Group ID&lt;/li&gt;
&lt;li&gt;文件读、写、执行权限&lt;/li&gt;
&lt;li&gt;文件的时间戳&lt;/li&gt;
&lt;li&gt;链接数&lt;/li&gt;
&lt;li&gt;文件数据block的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个 &lt;code&gt;inode&lt;/code&gt; 都有一个唯一的标识码 ，上面的输出信息中 &lt;code&gt;ino&lt;/code&gt; 就是 &lt;code&gt;inode&lt;/code&gt; 的唯一标识码，在 &lt;code&gt;linux&lt;/code&gt; 系统内部使用 &lt;code&gt;inode&lt;/code&gt; 的标识码来识别文件，并不使用文件名。之前系的&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 系统中，目录也是一种文件。目录文件包含一系列目录项，每一个目录项由两部分组成：所包含文件的文件名，以及文件名对应的 &lt;code&gt;inode&lt;/code&gt; 标识码。我们可以使用 &lt;code&gt;ls -i&lt;/code&gt; 来列出目录中的文件以及所有的 &lt;code&gt;inde&lt;/code&gt; 标识码。这里也可以解释可能小伙伴们觉得说不通的问题，仅修改目录的读权限，并不能实现读取目录下所有文件内容的原因，最后需要通过递归目录下的文件来进行修改。&lt;/p&gt;
&lt;h6 id=&#34;软链接&#34;&gt;&lt;a href=&#34;#软链接&#34; class=&#34;headerlink&#34; title=&#34;软链接&#34;&gt;&lt;/a&gt;软链接&lt;/h6&gt;&lt;p&gt;软链接类似于 &lt;code&gt;Window&lt;/code&gt; 中的 “快捷方式” 。创建软链接会创建一个新的 &lt;code&gt;inode&lt;/code&gt;，比如为文件 &lt;code&gt;a&lt;/code&gt; 创建了软链接文件 b，文件 &lt;code&gt;b&lt;/code&gt; 内部会指向 &lt;code&gt;a&lt;/code&gt; 的 &lt;code&gt;inode&lt;/code&gt;。当我们读取文件&lt;code&gt;b&lt;/code&gt;的时候，系统会自动导向文件 &lt;code&gt;a&lt;/code&gt; ，文件 &lt;code&gt;b&lt;/code&gt; 就是文件 &lt;code&gt;a&lt;/code&gt; 软连接(或者叫符号链接)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问：创建了软链接后我们就可以使用不同的文件名访问相同的内容，&lt;/li&gt;
&lt;li&gt;修改：修改文件 &lt;code&gt;a&lt;/code&gt; 的内容，文件 &lt;code&gt;b&lt;/code&gt; 的内容也会发生改变，对文件内容的修改向放映到所有文件。&lt;/li&gt;
&lt;li&gt;删除：当我们删除源文件 &lt;code&gt;a&lt;/code&gt; 时，在访问软连接文件 b 是，会报错 &lt;code&gt;&amp;quot;No such file or directory&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以直接使用 &lt;code&gt;linux&lt;/code&gt; 命令 &lt;code&gt;ln -s source target&lt;/code&gt; 来创建软链接(注意：表示 &lt;code&gt;target&lt;/code&gt; “指向” &lt;code&gt;source&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-12-05.png&#34; alt=&#34;软链接&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;硬链接&#34;&gt;&lt;a href=&#34;#硬链接&#34; class=&#34;headerlink&#34; title=&#34;硬链接&#34;&gt;&lt;/a&gt;硬链接&lt;/h6&gt;&lt;p&gt;一般情况，一个文件名”唯一”对应一个 &lt;code&gt;inode&lt;/code&gt;。但是 &lt;code&gt;linux&lt;/code&gt; 允许多个文件名都指向同一个 &lt;code&gt;inode&lt;/code&gt;。表示我们可以使用不同对文件名访问同样的内容；对文件内容进行修改将放映到所有文件；删除一个文件不影响另一个文件对访问。这种机制就被称为”硬链接”&lt;/p&gt;
&lt;p&gt;硬链接的创建 可以直接使用 &lt;code&gt;linux&lt;/code&gt; 命令 &lt;code&gt;ln source target&lt;/code&gt; 来创建硬链接（注意：&lt;code&gt;source&lt;/code&gt; 已存在的文件，target 是将要建立的链接）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-29_14-14-11.png&#34; alt=&#34;硬链接&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;创建链接&#34;&gt;&lt;a href=&#34;#创建链接&#34; class=&#34;headerlink&#34; title=&#34;创建链接&#34;&gt;&lt;/a&gt;创建链接&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;fs.linkSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;./index2.txt&amp;#39;) //硬链接
fs.symlinkSync(&amp;#39;./index.txt&amp;#39;, &amp;#39;./index3.txt&amp;#39; ,&amp;quot;file&amp;quot;) //软连接
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;用途&#34;&gt;&lt;a href=&#34;#用途&#34; class=&#34;headerlink&#34; title=&#34;用途&#34;&gt;&lt;/a&gt;用途&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;硬链接的作用和用途如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件共享：硬链接允许多个文件名指向同一个文件，这样可以在不同的位置使用不同的文件名引用相同的内容。这样的共享文件可以节省存储空间，并且在多个位置对文件的修改会反映在所有引用文件上。&lt;/li&gt;
&lt;li&gt;文件备份：通过创建硬链接，可以在不复制文件的情况下创建文件的备份。如果原始文件发生更改，备份文件也会自动更新。这样可以节省磁盘空间，并确保备份文件与原始文件保持同步。&lt;/li&gt;
&lt;li&gt;文件重命名：通过创建硬链接，可以为文件创建一个新的文件名，而无需复制或移动文件。这对于需要更改文件名但保持相同内容和属性的场景非常有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;软链接的一些特点和用途如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软链接可以创建指向文件或目录的引用。这使得你可以在不复制或移动文件的情况下引用它们，并在不同位置使用不同的文件名访问相同的内容。&lt;/li&gt;
&lt;li&gt;软链接可以用于创建快捷方式或别名，使得你可以通过一个简短或易记的路径来访问复杂或深层次的目录结构。&lt;/li&gt;
&lt;li&gt;软链接可以用于解决文件或目录的位置变化问题。如果目标文件或目录被移动或重命名，只需更新软链接的目标路径即可，而不需要修改引用该文件或目录的其他代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;crypto模块&#34;&gt;&lt;a href=&#34;#crypto模块&#34; class=&#34;headerlink&#34; title=&#34;crypto模块&#34;&gt;&lt;/a&gt;crypto模块&lt;/h2&gt;&lt;p&gt;crypto模块的目的是为了提供通用的&lt;code&gt;加密和哈希算法&lt;/code&gt;。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。nodejs用C&amp;#x2F;C++实现这些算法后，通过crypto这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。&lt;/p&gt;
&lt;p&gt;密码学是计算机科学中的一个重要领域，它涉及到加密、解密、哈希函数和数字签名等技术。Node.js是一个流行的服务器端JavaScript运行环境，它提供了强大的密码学模块，使开发人员能够轻松地在其应用程序中实现各种密码学功能。本文将介绍密码学的基本概念，并探讨Node.js中常用的密码学API。&lt;/p&gt;
&lt;h4 id=&#34;对称加密&#34;&gt;&lt;a href=&#34;#对称加密&#34; class=&#34;headerlink&#34; title=&#34;对称加密&#34;&gt;&lt;/a&gt;对称加密&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;js复制代码const crypto = require(&amp;#39;node:crypto&amp;#39;);

// 生成一个随机的 16 字节的初始化向量 (IV)
const iv = Buffer.from(crypto.randomBytes(16));

// 生成一个随机的 32 字节的密钥
const key = crypto.randomBytes(32);

// 创建加密实例，使用 AES-256-CBC 算法，提供密钥和初始化向量
const cipher = crypto.createCipheriv(&amp;quot;aes-256-cbc&amp;quot;, key, iv);

// 对输入数据进行加密，并输出加密结果的十六进制表示
cipher.update(&amp;quot;小满zs&amp;quot;, &amp;quot;utf-8&amp;quot;, &amp;quot;hex&amp;quot;);
const result = cipher.final(&amp;quot;hex&amp;quot;);

// 解密
const de = crypto.createDecipheriv(&amp;quot;aes-256-cbc&amp;quot;, key, iv);
de.update(result, &amp;quot;hex&amp;quot;);
const decrypted = de.final(&amp;quot;utf-8&amp;quot;);

console.log(&amp;quot;Decrypted:&amp;quot;, decrypted);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对称加密是一种简单而快速的加密方式，它使用相同的密钥（称为对称密钥）来进行加密和解密。这意味着发送者和接收者在加密和解密过程中都使用相同的密钥。对称加密算法的加密速度很快，适合对大量数据进行加密和解密操作。然而，对称密钥的安全性是一个挑战，因为需要确保发送者和接收者都安全地共享密钥，否则有风险被未授权的人获取密钥并解密数据。&lt;/p&gt;
&lt;h4 id=&#34;非对称加密&#34;&gt;&lt;a href=&#34;#非对称加密&#34; class=&#34;headerlink&#34; title=&#34;非对称加密&#34;&gt;&lt;/a&gt;非对称加密&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;js复制代码const crypto = require(&amp;#39;node:crypto&amp;#39;)
// 生成 RSA 密钥对
const &amp;#123; privateKey, publicKey &amp;#125; = crypto.generateKeyPairSync(&amp;#39;rsa&amp;#39;, &amp;#123;
  modulusLength: 2048,
&amp;#125;);

// 要加密的数据
const text = &amp;#39;小满zs&amp;#39;;

// 使用公钥进行加密
const encrypted = crypto.publicEncrypt(publicKey, Buffer.from(text, &amp;#39;utf-8&amp;#39;));

// 使用私钥进行解密
const decrypted = crypto.privateDecrypt(privateKey, encrypted);

console.log(decrypted.toString());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非对称加密使用一对密钥，分别是公钥和私钥。发送者使用接收者的公钥进行加密，而接收者使用自己的私钥进行解密。公钥可以自由分享给任何人，而私钥必须保密。非对称加密算法提供了更高的安全性，因为即使公钥泄露，只有持有私钥的接收者才能解密数据。然而，非对称加密算法的加密速度相对较慢，不适合加密大量数据。因此，在实际应用中，通常使用非对称加密来交换对称密钥，然后使用对称加密算法来加密实际的数据。&lt;/p&gt;
&lt;h4 id=&#34;哈希函数&#34;&gt;&lt;a href=&#34;#哈希函数&#34; class=&#34;headerlink&#34; title=&#34;哈希函数&#34;&gt;&lt;/a&gt;哈希函数&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const crypto = require(&amp;#39;node:crypto&amp;#39;);
// 要计算哈希的数据
let text = &amp;#39;123456&amp;#39;;
// 创建哈希对象，并使用 MD5 算法
const hash = crypto.createHash(&amp;#39;md5&amp;#39;);
// 更新哈希对象的数据
hash.update(text);
// 计算哈希值，并以十六进制字符串形式输出
const hashValue = hash.digest(&amp;#39;hex&amp;#39;);
console.log(&amp;#39;Text:&amp;#39;, text);
console.log(&amp;#39;Hash:&amp;#39;, hashValue);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;哈希函数具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定长度输出：不论输入数据的大小，哈希函数的输出长度是固定的。例如，常见的哈希函数如 MD5 和 SHA-256 生成的哈希值长度分别为 128 位和 256 位。&lt;/li&gt;
&lt;li&gt;不可逆性：哈希函数是单向的，意味着从哈希值推导出原始输入数据是非常困难的，几乎不可能。即使输入数据发生微小的变化，其哈希值也会完全不同。&lt;/li&gt;
&lt;li&gt;唯一性：哈希函数应该具有较低的碰撞概率，即不同的输入数据生成相同的哈希值的可能性应该非常小。这有助于确保哈希值能够唯一地标识输入数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们可以避免密码明文传输 使用md5加密或者sha256&lt;/li&gt;
&lt;li&gt;验证文件完整性，读取文件内容生成md5 如果前端上传的md5和后端的读取文件内部的md5匹配说明文件是完整的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;md转html&#34;&gt;&lt;a href=&#34;#md转html&#34; class=&#34;headerlink&#34; title=&#34;md转html&#34;&gt;&lt;/a&gt;md转html&lt;/h2&gt;&lt;h4 id=&#34;工具&#34;&gt;&lt;a href=&#34;#工具&#34; class=&#34;headerlink&#34; title=&#34;工具&#34;&gt;&lt;/a&gt;工具&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ejs：模板渲染库，使用特定语法填充内容，进行模板渲染&lt;/li&gt;
&lt;li&gt;marked：用于将Markdown语法转为HTML&lt;/li&gt;
&lt;li&gt;browserSync：用于在浏览器实时预览和同步刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;index.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const ejs = require(&amp;#39;ejs&amp;#39;); // 导入ejs库，用于渲染模板
const fs = require(&amp;#39;node:fs&amp;#39;); // 导入fs模块，用于文件系统操作
const marked = require(&amp;#39;marked&amp;#39;); // 导入marked库，用于将Markdown转换为HTML
const readme = fs.readFileSync(&amp;#39;README.md&amp;#39;); // 读取README.md文件的内容,直接read的结果是buffer中的数据，通过toString方法变为原始内容
const browserSync = require(&amp;#39;browser-sync&amp;#39;); // 导入browser-sync库，用于实时预览和同步浏览器
const openBrowser =  () =&amp;gt; &amp;#123;
    // 创建浏览器服务
    const browser = browserSync.create()
    // 初始化浏览器服务 ，传入目录和主页
    browser.init(&amp;#123;
        server: &amp;#123;
            baseDir: &amp;#39;./&amp;#39;,
            index: &amp;#39;index.html&amp;#39;,
        &amp;#125;
    &amp;#125;)
    return browser
&amp;#125;
// ejs模板进行渲染，传入变量
ejs.renderFile(&amp;#39;template.ejs&amp;#39;, &amp;#123;
    content: marked.parse(readme.toString()),
    title:&amp;#39;markdown to html&amp;#39;
&amp;#125;,(err,data)=&amp;gt;&amp;#123;
    if(err)&amp;#123;
        console.log(err)
    &amp;#125;
    // 将文件内容写入到index.html
    let writeStream = fs.createWriteStream(&amp;#39;index.html&amp;#39;)
    writeStream.write(data)
    writeStream.close()
    writeStream.on(&amp;#39;finish&amp;#39;,()=&amp;gt;&amp;#123;
        // index.html写入完毕之后，打开浏览器实时预览
        openBrowser()
    &amp;#125;)
&amp;#125;)     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template.ejs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./index.css&amp;quot;&amp;gt;  &amp;lt;!-- 引入css样式 --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;%- content %&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.css&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;/* Markdown通用样式 */
/* 设置全局字体样式 */
body &amp;#123;
    font-family: Arial, sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: #333;
  &amp;#125;
  /* 设置标题样式 */
  h1,h2,h3,h4,h5,h6 &amp;#123;
    margin-top: 1.3em;
    margin-bottom: 0.6em;
    font-weight: bold;
  &amp;#125;
  h1 &amp;#123;
    font-size: 2.2em;
  &amp;#125;
  h2 &amp;#123;
    font-size: 1.8em;
  &amp;#125;
  h3 &amp;#123;
    font-size: 1.6em;
  &amp;#125;
  h4 &amp;#123;
    font-size: 1.4em;
  &amp;#125;
  h5 &amp;#123;
    font-size: 1.2em;
  &amp;#125;
  h6 &amp;#123;
    font-size: 1em;
  &amp;#125;
  /* 设置段落样式 */
  p &amp;#123;
    margin-bottom: 1.3em;
  &amp;#125;
  /* 设置链接样式 */
  a &amp;#123;
    color: #337ab7;
    text-decoration: none;
  &amp;#125;
  a:hover &amp;#123;
    text-decoration: underline;
  &amp;#125;
  /* 设置列表样式 */
  ul,
  ol &amp;#123;
    margin-top: 0;
    margin-bottom: 1.3em;
    padding-left: 2em;
  &amp;#125;
  /* 设置代码块样式 */
  pre &amp;#123;
    background-color: #f7f7f7;
    padding: 1em;
    border-radius: 4px;
    overflow: auto;
  &amp;#125;
  code &amp;#123;
    font-family: Consolas, Monaco, Courier, monospace;
    font-size: 0.9em;
    background-color: #f7f7f7;
    padding: 0.2em 0.4em;
    border-radius: 4px;
  &amp;#125;
  /* 设置引用样式 */
  blockquote &amp;#123;
    margin: 0;
    padding-left: 1em;
    border-left: 4px solid #ddd;
    color: #777;
  &amp;#125;
  /* 设置表格样式 */
  table &amp;#123;
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1.3em;
  &amp;#125;
  table th,
  table td &amp;#123;
    padding: 0.5em;
    border: 1px solid #ccc;
  &amp;#125;
  /* 添加一些额外的样式，如图片居中显示 */
  img &amp;#123;
    display: block;
    margin: 0 auto;
    max-width: 100%;
    height: auto;
  &amp;#125;
  /* 设置代码行号样式 */
  pre code .line-numbers &amp;#123;
    display: inline-block;
    width: 2em;
    padding-right: 1em;
    color: #999;
    text-align: right;
    user-select: none;
    pointer-events: none;
    border-right: 1px solid #ddd;
    margin-right: 0.5em;
  &amp;#125;
  /* 设置代码行样式 */
  pre code .line &amp;#123;
    display: block;
    padding-left: 1.5em;
  &amp;#125;
  /* 设置代码高亮样式 */
  pre code .line.highlighted &amp;#123;
    background-color: #f7f7f7;
  &amp;#125;
  /* 添加一些响应式样式，适应移动设备 */
  @media only screen and (max-width: 768px) &amp;#123;
    body &amp;#123;
      font-size: 14px;
      line-height: 1.5;
    &amp;#125;
    h1 &amp;#123;
      font-size: 1.8em;
    &amp;#125;
    h2 &amp;#123;
      font-size: 1.5em;
    &amp;#125;
    h3 &amp;#123;
      font-size: 1.3em;
    &amp;#125;
    h4 &amp;#123;
      font-size: 1.1em;
    &amp;#125;
    h5 &amp;#123;
      font-size: 1em;
    &amp;#125;
    h6 &amp;#123;
      font-size: 0.9em;
    &amp;#125;
    table &amp;#123;
      font-size: 14px;
    &amp;#125;
  &amp;#125;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;zlib模块&#34;&gt;&lt;a href=&#34;#zlib模块&#34; class=&#34;headerlink&#34; title=&#34;zlib模块&#34;&gt;&lt;/a&gt;zlib模块&lt;/h2&gt;&lt;h4 id=&#34;介绍-1&#34;&gt;&lt;a href=&#34;#介绍-1&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Node.js中zlib模块用于对数据提供压缩和解压缩的功能，以便在应用程序中减少数据的传输大小、节省带宽和提高性能&lt;/li&gt;
&lt;li&gt;该模块包含各种压缩算法，包含Deflate、Gzip和Raw Deflate等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据压缩，减少数据的大小，这在网络传输和磁盘存储中很有用，可以节省带宽和存储空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据解压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流压缩，zlib模块支持流式的方式进行数据的压缩和解压缩，使得可以对大型文件或者网络数据流进行逐步处理，而不需要将整个数据加载到内存中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 压缩文件（以Gzip为例）
const zlib = require(&amp;#39;zlib&amp;#39;)
const fs = require(&amp;#39;node:fs&amp;#39;)
const readStream = fs.createReadStream(&amp;#39;./test.txt&amp;#39;);
const writeStream = fs.createWriteStream(&amp;#39;./test.txt.gz&amp;#39;);
// 将readStream利用zlib进行压缩,pipe到下一个管道，最后pipe到写入流
readStream.pipe(zlib.createGzip()).pipe(writeStream)
// 解压缩文件
const reStr = fs.createReadStream(&amp;#39;./test.txt.gz&amp;#39;);
const wrStr = fs.createWriteStream(&amp;#39;./t.txt&amp;#39;);
const gunzip = zlib.createGunzip();
reStr.pipe(gunzip).pipe(wrStr);
gunzip.on(&amp;#39;error&amp;#39;, (err) =&amp;gt; &amp;#123;
    console.error(&amp;#39;Gunzip error:&amp;#39;, err);
&amp;#125;);
  reStr.on(&amp;#39;end&amp;#39;, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Input file has been read.&amp;#39;);
&amp;#125;);
  wrStr.on(&amp;#39;finish&amp;#39;, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Output file has been written.&amp;#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;对比-1&#34;&gt;&lt;a href=&#34;#对比-1&#34; class=&#34;headerlink&#34; title=&#34;对比&#34;&gt;&lt;/a&gt;对比&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;压缩算法：Gzip 使用的是 Deflate 压缩算法，该算法结合了 LZ77 算法和哈夫曼编码。LZ77 算法用于数据的重复字符串的替换和引用，而哈夫曼编码用于进一步压缩数据。&lt;/li&gt;
&lt;li&gt;压缩效率：Gzip 压缩通常具有更高的压缩率，因为它使用了哈夫曼编码来进一步压缩数据。哈夫曼编码根据字符的出现频率，将较常见的字符用较短的编码表示，从而减小数据的大小。&lt;/li&gt;
&lt;li&gt;压缩速度：相比于仅使用 Deflate 的方式，Gzip 压缩需要更多的计算和处理时间，因为它还要进行哈夫曼编码的步骤。因此，在压缩速度方面，Deflate 可能比 Gzip 更快。&lt;/li&gt;
&lt;li&gt;应用场景：Gzip 压缩常用于文件压缩、网络传输和 HTTP 响应的内容编码。它广泛应用于 Web 服务器和浏览器之间的数据传输，以减小文件大小和提高网络传输效率。&lt;/li&gt;
&lt;li&gt;deflate是一种过时的压缩方式，现代浏览器对其支持并不友好&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;zlib模块可以用于对发送网络请求返回的数据进行压缩，节省带宽和传输速率。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;brotli&#34;&gt;&lt;a href=&#34;#brotli&#34; class=&#34;headerlink&#34; title=&#34;brotli&#34;&gt;&lt;/a&gt;brotli&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;针对常见的 Web 资源内容，Brotli 的性能比 Gzip 提高了 17-25%；&lt;/li&gt;
&lt;li&gt;当 Brotli 压缩级别为 1 时，压缩率比 Gzip 的最高级别 9 还要高；&lt;/li&gt;
&lt;li&gt;在处理不同的 HTML 文档时，Brotli 依然能提供非常高的压缩率。&lt;/li&gt;
&lt;li&gt;除了 IE 和 Opera Mini 之外，几乎所有主流浏览器都已支持 Brotli 算法。&lt;/li&gt;
&lt;li&gt;尽管 Brotli 在压缩方面表现出色，但随着压缩级别的提高，Brotli 压缩所需的时间也会相应增加。换句话说，Brotli 需要更多的计算能力，这可能意味着更高的设备和软件成本。&lt;/li&gt;
&lt;li&gt;Brotli 要求浏览器必须支持 HTTPS 才能使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http模块&#34;&gt;&lt;a href=&#34;#http模块&#34; class=&#34;headerlink&#34; title=&#34;http模块&#34;&gt;&lt;/a&gt;http模块&lt;/h2&gt;&lt;h4 id=&#34;介绍-2&#34;&gt;&lt;a href=&#34;#介绍-2&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;http模块是Node.js中用于创建和处理HTTP服务器和客户端的核心模块&lt;/li&gt;
&lt;li&gt;http模块使得基于HTTP协议的应用程序更加简单和灵活&lt;/li&gt;
&lt;li&gt;http模块也可以用于创建代理服务器，用于转发客户端的请求到其他服务器，代理服务器可以用于负载均衡、缓存、安全过滤或跨域请求等场景。通过在代理服务器上添加逻辑，可以对请求和响应进行修改、记录或过滤。&lt;/li&gt;
&lt;li&gt;http模块也可以创建文件服务器，用于提供静态文件，通过读取文件并将其作为响应发送给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用-1&#34;&gt;&lt;a href=&#34;#使用-1&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const http = require(&amp;#39;http&amp;#39;)
const httpServer = http.createServer((req,res)=&amp;gt;&amp;#123;
    if(req.method === &amp;#39;POST&amp;#39;)&amp;#123;&amp;#125;
    else if(req.method === &amp;#39;GET&amp;#39;)&amp;#123;&amp;#125;
&amp;#125;)
httpServer.listen(98,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;服务器启动，端口：98&amp;#39;);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;url模块&#34;&gt;&lt;a href=&#34;#url模块&#34; class=&#34;headerlink&#34; title=&#34;url模块&#34;&gt;&lt;/a&gt;url模块&lt;/h4&gt;&lt;p&gt;可以通过url模块来解析req的请求路径，来进一步精细化响应内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const http = require(&amp;#39;node:http&amp;#39;); // 引入 http 模块
const url = require(&amp;#39;node:url&amp;#39;); // 引入 url 模块
// 创建 HTTP 服务器，并传入回调函数用于处理请求和生成响应
http.createServer((req, res) =&amp;gt; &amp;#123;
  const &amp;#123; pathname, query &amp;#125; = url.parse(req.url, true); // 解析请求的 URL，获取路径和查询参数
  if (req.method === &amp;#39;POST&amp;#39;) &amp;#123; // 检查请求方法是否为 POST
    if (pathname === &amp;#39;/post&amp;#39;) &amp;#123; // 检查路径是否为 &amp;#39;/post&amp;#39;
      let data = &amp;#39;&amp;#39;;
      req.on(&amp;#39;data&amp;#39;, (chunk) =&amp;gt; &amp;#123;
        data += chunk; // 获取 POST 请求的数据
        console.log(data);
      &amp;#125;);
      req.on(&amp;#39;end&amp;#39;, () =&amp;gt; &amp;#123;
        res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;); // 设置响应头的 Content-Type 为 &amp;#39;application/json&amp;#39;
        res.statusCode = 200; // 设置响应状态码为 200
        res.end(data); // 将获取到的数据作为响应体返回
      &amp;#125;);
    &amp;#125; else &amp;#123;
      res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;); // 设置响应头的 Content-Type 为 &amp;#39;application/json&amp;#39;
      res.statusCode = 404; // 设置响应状态码为 404
      res.end(&amp;#39;Not Found&amp;#39;); // 返回 &amp;#39;Not Found&amp;#39; 作为响应体
    &amp;#125;
  &amp;#125; else if (req.method === &amp;#39;GET&amp;#39;) &amp;#123; // 检查请求方法是否为 GET
    if (pathname === &amp;#39;/get&amp;#39;) &amp;#123; // 检查路径是否为 &amp;#39;/get&amp;#39;
      console.log(query.a); // 打印查询参数中的键名为 &amp;#39;a&amp;#39; 的值
      res.end(&amp;#39;get success&amp;#39;); // 返回 &amp;#39;get success&amp;#39; 作为响应体
    &amp;#125;
  &amp;#125;
&amp;#125;).listen(98, () =&amp;gt; &amp;#123;
  console.log(&amp;#39;server is running on port 98&amp;#39;); // 打印服务器启动的信息
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;net模块&#34;&gt;&lt;a href=&#34;#net模块&#34; class=&#34;headerlink&#34; title=&#34;net模块&#34;&gt;&lt;/a&gt;net模块&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net模块是Node.js的核心模块之一，提供了用于创建基于网络的应用程序的API&lt;/li&gt;
&lt;li&gt;net模块主要用于&lt;strong&gt;创建TCP服务器和TCP客户端，以及处理网络通信&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;应用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务端之间的通讯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务端之间的通讯可以直接使用TCP通讯，而不需要上升到http层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;server.js（TCP层面的服务端）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const net = require(&amp;#39;net&amp;#39;)
const server = net.createServer((client)=&amp;gt;&amp;#123;
  setTimeout(() =&amp;gt; &amp;#123;
  client.write(&amp;#39;发送TCP内容&amp;#39;)
  &amp;#125;, 1000);
&amp;#125;)
server.listen(3000,()=&amp;gt;&amp;#123;
  console.log(&amp;#39;3000端口启动服务&amp;#39;);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;connection.js（TCP层面的客户端）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const net = require(&amp;#39;net&amp;#39;)
const connection = net.createConnection(&amp;#123;
  host:&amp;#39;127.0.0.1&amp;#39;,
  port:3000
&amp;#125;)
connection.on(&amp;#39;data&amp;#39;,(data)=&amp;gt;&amp;#123;
  console.log(data.toString());
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从传输层实现http协议&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const net = require(&amp;#39;net&amp;#39;);
const html = `&amp;lt;h1&amp;gt;TCP Server&amp;lt;/h1&amp;gt;`
const reposneHeader = [
    &amp;#39;HTTP/1.1 200 OK&amp;#39;,
    &amp;#39;Content-Type: text/html&amp;#39;,
    &amp;#39;Content-Length: &amp;#39; + html.length,
    &amp;#39;Server: Nodejs&amp;#39;,
    &amp;#39;\r\n&amp;#39;,
    html
]
const http = net.createServer((connect)=&amp;gt;&amp;#123;
  connect.on(&amp;#39;data&amp;#39;,(data)=&amp;gt;&amp;#123;
    console.log(data.toString().slice(0,3));
    if(data.toString().startsWith(&amp;#39;GET&amp;#39;))&amp;#123;
      connect.write(reposneHeader.join(&amp;#39;\r\n&amp;#39;)) //向TCP连接中写入html响应
      connect.end()
    &amp;#125;
  &amp;#125;)
&amp;#125;)
http.listen(3000,()=&amp;gt;&amp;#123;
  console.log(&amp;#39;服务启动&amp;#39;);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动静分离&#34;&gt;&lt;a href=&#34;#动静分离&#34; class=&#34;headerlink&#34; title=&#34;动静分离&#34;&gt;&lt;/a&gt;动静分离&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;动静分离是Web服务器架构中常用的优化技术，用于提高网站的性能和可伸缩性&lt;/li&gt;
&lt;li&gt;原理就是将静态资源的请求和动态内容分开处理（通过url，例如加上static后缀表示静态）&lt;/li&gt;
&lt;li&gt;好处在于：&lt;ul&gt;
&lt;li&gt;性能优化（静态资源内容不变，可以利用缓存）&lt;/li&gt;
&lt;li&gt;负载均衡（动态内容请求分发到不同的服务器或服务上，平衡服务器的负载）&lt;/li&gt;
&lt;li&gt;安全性（动态内容往往涉及敏感信息，动静分离可以更好地管理访问控制和安全策略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import http from &amp;#39;node:http&amp;#39; // 导入http模块
import fs from &amp;#39;node:fs&amp;#39; // 导入文件系统模块
import path from &amp;#39;node:path&amp;#39; // 导入路径处理模块
import mime from &amp;#39;mime&amp;#39; // 导入mime模块
const server = http.createServer((req, res) =&amp;gt; &amp;#123;
    const &amp;#123; url, method &amp;#125; = req
    // 处理静态资源
    if (method === &amp;#39;GET&amp;#39; &amp;amp;&amp;amp; url.startsWith(&amp;#39;/static&amp;#39;)) &amp;#123;
        const filePath = path.join(process.cwd(), url) // 获取文件路径
        const mimeType = mime.getType(filePath) // 获取文件的MIME类型
        console.log(mimeType) // 打印MIME类型
        fs.readFile(filePath, (err, data) =&amp;gt; &amp;#123; // 读取文件内容
            if (err) &amp;#123;
                res.writeHead(404, &amp;#123;
                    &amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot; // 设置响应头为纯文本类型
                &amp;#125;)
                res.end(&amp;#39;not found&amp;#39;) // 返回404 Not Found
            &amp;#125; else &amp;#123;
                res.writeHead(200, &amp;#123;
                    &amp;quot;Content-Type&amp;quot;: mimeType, // 设置响应头为对应的MIME类型
                    &amp;quot;Cache-Control&amp;quot;: &amp;quot;public, max-age=3600&amp;quot; // 设置缓存控制头
                &amp;#125;)
                res.end(data) // 返回文件内容
            &amp;#125;
        &amp;#125;)
    &amp;#125;
    // 处理动态资源
    if (url.startsWith(&amp;#39;/api&amp;#39;)) &amp;#123;
        // ...处理动态资源的逻辑
    &amp;#125;
&amp;#125;)
server.listen(80) // 监听端口80
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;邮件服务&#34;&gt;&lt;a href=&#34;#邮件服务&#34; class=&#34;headerlink&#34; title=&#34;邮件服务&#34;&gt;&lt;/a&gt;邮件服务&lt;/h2&gt;&lt;p&gt;邮件服务可以用于给成员发送邮件、通知成员信息，在node.js上创建邮件服务，需要提供授权码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工具：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js-yaml：用于将yaml转为js对象&lt;/li&gt;
&lt;li&gt;nodemailer：用于创建邮件服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// node.js发送邮件
const yamlTrans = require(&amp;#39;js-yaml&amp;#39;);
const fs = require(&amp;#39;fs&amp;#39;);
const nodemailer = require(&amp;#39;nodemailer&amp;#39;)
const yamlCode = fs.readFileSync(&amp;#39;./data.yaml&amp;#39;,&amp;#39;utf-8&amp;#39;);
const dataObj = yamlTrans.load(yamlCode);
//nodemailer.createTransport创建transPort服务,传入auth信息和配置项
//授权码需要到对应官网生成
const transPort = nodemailer.createTransport(&amp;#123;
    serviece:&amp;#39;qq&amp;#39;,
    port:587,
    host:&amp;#39;smtp.qq.cmo&amp;#39;,
    secure:true,
    auth:&amp;#123;
        pass:dataObj.pass, //授权码需要去官网申请生成
        user:dataObj.user
    &amp;#125;
&amp;#125;)
// sendMail方法发送邮件，传入接收方信息
transPort.sendMail(&amp;#123;
    to: send.qq.com,
    from: dataObj.user,
    subject: &amp;#39;邮件标题&amp;#39;,
    text: &amp;#39;邮件内容&amp;#39;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;防盗链&#34;&gt;&lt;a href=&#34;#防盗链&#34; class=&#34;headerlink&#34; title=&#34;防盗链&#34;&gt;&lt;/a&gt;防盗链&lt;/h2&gt;&lt;p&gt;防盗链是指在网页或其他资源中，通过直接链接的方式链接到其他网站上的图片、视频或者其他媒体文件，显示在自己的网页上，这种行为通常会给被链接的网站带来额外的带宽消耗和资源浪费，而且可能侵犯了原始网站的版权。采用措施有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过HTTP引用检查&lt;/strong&gt;：（查看请求来源地址，不匹配则不提供资源）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用Referrer检查&lt;/strong&gt;：检查HTTP请求中的Referrer字段，该字段指示了请求资源的来源页面（不匹配则不提供服务）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用访问控制列表&lt;/strong&gt;（ACL）：网站管理员可以配置服务器的访问控制列表，只允许特定的域名或IP地址访问资源，其他来源的请求将被拒绝。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用防盗链插件或脚本&lt;/strong&gt;：一些网站平台和内容管理系统提供了专门的插件或脚本来防止盗链。这些工具可以根据需要配置，阻止来自未经授权的网站的盗链请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用水印技术&lt;/strong&gt;：在图片或视频上添加水印可以帮助识别盗链行为，并提醒用户资源的来源。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import express from &amp;#39;express&amp;#39;;
const app = express();
const whitelist = [&amp;#39;localhost&amp;#39;];
//防盗链中间件
const preventHotLinking = (req,res,next)=&amp;gt;&amp;#123;
    const referer = req.get(&amp;#39;referer&amp;#39;); //请求中的referrer字段标识请求来源
    if(referer)&amp;#123;
        const &amp;#123;hostname&amp;#125; = new URL(referer);
        if(!whistlist.includes(hostname))&amp;#123;
            res.status(403).send(&amp;#39;我不允许你访问我的资源&amp;#39;);
            return;
        &amp;#125;
    &amp;#125;
    next();
&amp;#125;;
app.use(preventHotLinking);
app.listen(3000,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;3000端口启动&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;响应头和请求头&#34;&gt;&lt;a href=&#34;#响应头和请求头&#34; class=&#34;headerlink&#34; title=&#34;响应头和请求头&#34;&gt;&lt;/a&gt;响应头和请求头&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;响应头：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP响应头（HTTP response headers）是在HTTP响应中发送的元数据信息，用于描述响应的特性、内容和行为。他们以键值对的形式出现。每个键值对由一个标头字段和响应值组成。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;http&#34;&gt;Access-Control-Allow-Origin: *
Cache-Control:public, max-age=0, must-revalidate
Content-Type:text/html; charset=utf-8
Server:nginx
Date:Mon, 08 Jan 2024 18:32:47 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cors：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跨域资源共享（CORS）是一种机制，用于在浏览器中实现跨域请求访问资源的权限控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个网页通过XMLHttpRequest或者Fetch Api进行跨域请求时，浏览器会根据同源策略进行限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同源策略要求请求的协议、域名和端口号必须一致。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求头：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accept：指定客户端能够处理的内容类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accept-Language：指定客户端偏好的自然语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content-Language：指定请求或响应实体的自然语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content-Type：指定请求或响应实体的媒体类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DNT (Do Not Track)：指示客户端不希望被跟踪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Origin：指示请求的源（协议、域名和端口）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User-Agent：包含发起请求的用户代理的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Referer：指示当前请求的源 URL。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content-type: application&amp;#x2F;x-www-form-urlencoded | multipart&amp;#x2F;form-data |  text&amp;#x2F;plain&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求方法支持：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务端默认只支持GET、POST、HEAD、OPTIONS请求，使用其他 restful api请求方法需要添加响应头&lt;code&gt;Access-Control-Allow-Methods: *&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;SSE-1&#34;&gt;&lt;a href=&#34;#SSE-1&#34; class=&#34;headerlink&#34; title=&#34;SSE&#34;&gt;&lt;/a&gt;SSE&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSE（Server-Sent-Events）是一种在客户端和服务器之间实现单向事件流的机制，允许服务器主动向客户端发送事件数据，在SSE中可以自定义事件来完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SSE核心就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端通过&lt;code&gt;EventSource&lt;/code&gt; 来注册事件源，监听对应事件。&lt;/li&gt;
&lt;li&gt;后端通过设置响应头&lt;code&gt;Content-Type&lt;/code&gt;为：&lt;code&gt;text/event-stream&lt;/code&gt; 之后 发送具有特定类型的事件数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const sse = new EventSource(&amp;#39;http://localhost:3000/sse&amp;#39;);
sse.addEventListener(&amp;#39;test&amp;#39;,(event)=&amp;gt;&amp;#123;
    console.log(event.data);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;后端：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;app.get(&amp;#39;/sse&amp;#39;(req,res)=&amp;gt;&amp;#123;
    res.setHeader(&amp;#39;Content-Type&amp;#39;,&amp;#39;text/event-stream&amp;#39;); //设置事件响应头
    res.status(200);
    setInterval(()=&amp;gt;&amp;#123;
        res.write(&amp;#39;event: test\n&amp;#39;); // 发送对应的事件
        res.write(&amp;#39;data: &amp;#39; + new Date().getTime() + &amp;#39;\n\n&amp;#39;);
    &amp;#125;,1000)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ORM框架&#34;&gt;&lt;a href=&#34;#ORM框架&#34; class=&#34;headerlink&#34; title=&#34;ORM框架&#34;&gt;&lt;/a&gt;ORM框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ORM(Object Relation Map)：对象关系映射，常用于为关系型数据库提供类型安全的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;knex&#34;&gt;&lt;a href=&#34;#knex&#34; class=&#34;headerlink&#34; title=&#34;knex&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rbmV4anMub3JnL2d1aWRlL3F1ZXJ5LWJ1aWxkZXIuaHRtbCNzZWxlY3Q=&#34;&gt;knex&lt;/span&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;knex是一个基于JavaScript的查询生成器&lt;/li&gt;
&lt;li&gt;knex允许使用JavaScript代码来生成和执行SQL查询语句&lt;/li&gt;
&lt;li&gt;knex提供了一种简单和直观的方式来与关系型数据库进行交互，而无需编写SQL语句&lt;/li&gt;
&lt;li&gt;可以使用knex来定义表结构，执行查询、插入、更新和删除等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;连接数据库：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import knex from &amp;#39;knex&amp;#39;;
const db = knex(&amp;#123;
    client: &amp;quot;mysql2&amp;quot;,
    connection:&amp;#123;
        user:root,
        password:&amp;#39;123456&amp;#39;,
        host:localhost,
        port:3306,
        database:test
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;增删改查详见官网。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事务相当于分组的一个概念，可以使用事务来确保一组数据库操作的原子性，要么全部成功提交，要么全部回滚。&lt;/p&gt;
&lt;h4 id=&#34;prisma&#34;&gt;&lt;a href=&#34;#prisma&#34; class=&#34;headerlink&#34; title=&#34;prisma&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcmlzbWEueW9nYS9nZXR0aW5nLXN0YXJ0ZWQ=&#34;&gt;prisma&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Prisma 和 Knex 都是现代的 Node.js ORM（对象关系映射）库，它们可以帮助开发者以面向对象的方式来操作数据库。尽管它们的目标相似，但它们在设计理念、功能特性和使用方式上存在一些区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prisma和TypeScript联系紧密&lt;/li&gt;
&lt;li&gt;prisma提供强大的类型安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJpc21h&#34;&gt;prisma CLI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;prisma对应的脚手架可以快速创建模板结构。&lt;/p&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;&lt;a href=&#34;#设计模式&#34; class=&#34;headerlink&#34; title=&#34;设计模式&#34;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;h4 id=&#34;MVC&#34;&gt;&lt;a href=&#34;#MVC&#34; class=&#34;headerlink&#34; title=&#34;MVC&#34;&gt;&lt;/a&gt;MVC&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;概念：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MVC是一种常用的软件架构模式，用于设计和组织应用程序的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它将应用程序分为三个主要的组件：模型(Model)、视图(view)和控制器(Controller)，各自负责不同的模块&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVC将应用程序的逻辑数据等和界面相分离，以提高代码的可维护性、可扩展性和可重用性。&lt;/li&gt;
&lt;li&gt;通过将不同职责分配给不同组件，MVC提供了一种清晰的结构使得开发人员更好的管理应用程序的各个部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;loC控制反转&#34;&gt;&lt;a href=&#34;#loC控制反转&#34; class=&#34;headerlink&#34; title=&#34;loC控制反转&#34;&gt;&lt;/a&gt;loC控制反转&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;概念：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;控制反转（IoC）是一种设计原则，它将组件的控制权从组件自身转移到外部容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传统上，组件负责自己的创建和管理，而控制反转则将这个责任转给了一个外部的容器或框架。容器负责创建组件实例并管理它们的生命周期，组件只需声明自己所需的依赖关系，并通过容器获取这些依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;loC控制反转使得组件更加松耦合、可测试和可维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;依赖注入：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;依赖注入（DI）是实现控制反转的一种具体技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它通过将组件的依赖关系从组件内部移动到外部容器来实现松耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件不再负责创建或管理它所依赖的其他组件，而是通过构造函数、属性或方法参数等方式将依赖关系注入到组件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依赖注入可以通过构造函数注入（Constructor Injection）、属性注入（Property Injection）或方法注入（Method Injection）等方式实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工具包：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用inversify、reflect-metadata、inversify-express-utils来实现。&lt;/p&gt;
&lt;h2 id=&#34;JWT&#34;&gt;&lt;a href=&#34;#JWT&#34; class=&#34;headerlink&#34; title=&#34;JWT&#34;&gt;&lt;/a&gt;JWT&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JWT（JSON Web Token）是一种开放的标准，是一种基于JSON的安全令牌，用于在客户端和服务端之间传输信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JWT由三部分组成，它们通过点（.）进行分隔：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Header（头部）：包含了令牌的类型和使用的加密算法等信息。通常采用Base64编码表示。&lt;/li&gt;
&lt;li&gt;Payload（负载）：包含了身份验证和授权等信息，如用户ID、角色、权限等。也可以自定义其他相关信息。同样采用Base64编码表示。&lt;/li&gt;
&lt;li&gt;Signature（签名）：使用指定的密钥对头部和负载进行签名，以确保令牌的完整性和真实性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;工作流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户通过提供有效的凭证（例如用户名和密码）进行身份验证。&lt;/li&gt;
&lt;li&gt;服务器验证凭证，并生成一个JWT作为响应。JWT包含了用户的身份信息和其他必要的数据。&lt;/li&gt;
&lt;li&gt;服务器将JWT发送给客户端。&lt;/li&gt;
&lt;li&gt;客户端在后续的请求中，将JWT放入请求的头部或其他适当的位置。&lt;/li&gt;
&lt;li&gt;服务器在接收到请求时，验证JWT的签名以确保其完整性和真实性。如果验证通过，服务器使用JWT中的信息进行授权和身份验证。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Redis&#34;&gt;&lt;a href=&#34;#Redis&#34; class=&#34;headerlink&#34; title=&#34;Redis&#34;&gt;&lt;/a&gt;Redis&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;内存存储系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis（Remote Dictionary Server）是一个开源的内存数据结构存储系统，提供了一个高效的键值存储解决方案，并支持多种数据结构，如：string字符串、hashes哈希、lists列表、sets集合和sorted sets有序集合等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis被广泛应用于缓存、消息队列和实时统计等场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存存储，因此具有快速的读写功能，能持久化数据到硬盘，以便在重新启动后恢复数据&lt;/li&gt;
&lt;li&gt;多种数据结构，Redis支持多种数据结构&lt;/li&gt;
&lt;li&gt;发布&amp;#x2F;订阅，Redis支持发布订阅模式，允许多个客户端订阅同一个或多个频道，以接收实时发布的消息，这使得Redis可以用于实时消息系统&lt;/li&gt;
&lt;li&gt;事务支持，Redis支持事务，可以将多个命令打包成一个原子操作执行，确保命令要么全部成功，要么全部失败&lt;/li&gt;
&lt;li&gt;持久化，Redis提供两种持久化数据的方式：&lt;ul&gt;
&lt;li&gt;RDB（Redis Database），RDB是将数据以快照的形式保存到磁盘。&lt;/li&gt;
&lt;li&gt;AOF（Append Only File），AOF是将每个写操作追加到文件中，确保数据在意外宕机或重启后的持久性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高可用性，Redis支持主从复制和Sentine哨兵机制，通过主从复制可以创建多个Redis实例的副本，以提高读取性和容错能力。&lt;code&gt;sentinel&lt;/code&gt;是一个用于监控和自动故障转移的系统，可以在主节点宕机时自动将节点提升为主节点。&lt;/li&gt;
&lt;li&gt;缓存，Redis的快速读写能力和灵活的数据结构使其被广泛应用于缓存层，它可以将常用的数据存储在内存中，以加快数据访问速度，减轻后端数据库的负载。&lt;/li&gt;
&lt;li&gt;实时统计，Redis的计数器和有序集合等数据结构使其非常适合实时统计的场景，可以存储和更新计数器，并对有序集合进行排名和范围查询，用于统计和排行榜功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装文件，配置环境变量，然后启动即可。&lt;/p&gt;
&lt;p&gt;连接redis服务可以使用Navicate或者在vscode中下载对应的插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布订阅模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在redis中，发布订阅模式通过命令：publish、subscribe、unsubscribe、psubscribe命令和punsubscribe命令来进行操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis支持事务，允许用户将多个命令打包在一起作为一个单元进行执行，事务提供了一种原子性操作的机制，要么所有命令都执行成功，要么所有命令都不成功。&lt;/li&gt;
&lt;li&gt;Redis的事务不支持回滚操作，如果在事务执行期间发生错误，事务会继续执行，而不会会回滚已执行的命令。&lt;/li&gt;
&lt;li&gt;Redis事务常用命令：&lt;ul&gt;
&lt;li&gt;multi：开启一个事务&lt;/li&gt;
&lt;li&gt;exec：执行事务中所有命令&lt;/li&gt;
&lt;li&gt;watch：对一个或多个键进行监视&lt;/li&gt;
&lt;li&gt;discard：取消事务，清空事务队列中的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;redis持久化：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB（Redis Database）持久化&lt;ul&gt;
&lt;li&gt;RDB持久化是一种快照的形式，会将内存中的数据定期保存到磁盘上。&lt;/li&gt;
&lt;li&gt;可以通过配置Redis服务器，设置自动触发RDB快照的条件，比如指定时间间隔或指定操作次数自动保存。&lt;/li&gt;
&lt;li&gt;RDB持久化生成的快照文件是二进制文件，包含了Redis数据的完整状态。&lt;/li&gt;
&lt;li&gt;在恢复数据时，可以通过加载快照文件将数据重新加载到内存中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDB使用：&lt;ul&gt;
&lt;li&gt;找到redis的redis.conf文件，配置其中的save字段。&lt;/li&gt;
&lt;li&gt;或者在redis启动的命令行中输入save，手动保存快照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOF（Append Only File）持久化&lt;ul&gt;
&lt;li&gt;AOF持久化记录了Redis服务器执行的所有写操作命令，在文件中以追加的方式保存&lt;/li&gt;
&lt;li&gt;当redis重启时，可以重新执行AOF文件中保存的命令，以重新构建数据集。相比于RDB持久化，AOF持久化提供了更好的数据恢复保证，因为它记录了每个写操作，而不是快照的形式。&lt;/li&gt;
&lt;li&gt;AOF文件相对于RDB文件更大，恢复数据的速度可能会比较慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOF使用：&lt;ul&gt;
&lt;li&gt;redus.conf文件的appendonly字段设置为yes。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;redis主从复制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis主从复制是一种数据复制和同步机制，其中一个redis服务器（主服务器）将其数据复制到一个或多个其他Redis服务器（从服务器）中，主从复制提供了数据冗余备份、读写分离和故障恢复等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ioredis：在node.js中与Redis进行交互的三方库。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;lua&#34;&gt;&lt;a href=&#34;#lua&#34; class=&#34;headerlink&#34; title=&#34;lua&#34;&gt;&lt;/a&gt;lua&lt;/h2&gt;&lt;p&gt;轻量级、可嵌入的脚本语言。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lua是一种轻量级、高效、可嵌入的脚本语言，被广泛应用于嵌入式系统、游戏开发、Web应用和脚本编写等领域。&lt;/li&gt;
&lt;li&gt;其设计目标之一就是作为扩展和嵌入式脚本语言，可以与其他编程语言无缝集成。&lt;/li&gt;
&lt;li&gt;在redius中可以直接执行lua脚本（.lua文件）。&lt;/li&gt;
&lt;li&gt;web应用为了增强性能和可扩展性，通常将Lua、Redis和Nginx结合使用，以构建高性能的Web应用程序或API服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubHVhLm9yZy8=&#34;&gt;安装&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;corn表达式&#34;&gt;&lt;a href=&#34;#corn表达式&#34; class=&#34;headerlink&#34; title=&#34;corn表达式&#34;&gt;&lt;/a&gt;corn表达式&lt;/h2&gt;&lt;p&gt;corn表达式是一种用汉语指定定时任务执行时间的字符串表示形式，由6个或7个字段组成，每个字段表示任务执行的时间单位和范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式为：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    │
│    │    │    │    │    └── 星期（0 - 6，0表示星期日）
│    │    │    │    └───── 月份（1 - 12）
│    │    │    └────────── 日（1 - 31）
│    │    └─────────────── 小时（0 - 23）
│    └──────────────────── 分钟（0 - 59）
└───────────────────────── 秒（0 - 59）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常见的Cron表达式示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* * * * * *&lt;/code&gt;：每秒执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 * * * * *&lt;/code&gt;：每分钟的整点执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 * * * *&lt;/code&gt;：每小时的整点执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 * * * *&lt;/code&gt;：每天的午夜执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 * * 1 *&lt;/code&gt;：每周一的午夜执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 1 * * *&lt;/code&gt;：每月的1号午夜执行一次任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 1 1 * *&lt;/code&gt;：每年的1月1日午夜执行一次任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;掘金定时自动签到：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const schedule = require(&amp;#39;node-schedule&amp;#39;)
const axios = require(&amp;#39;axios&amp;#39;);
const aid = &amp;#39;******&amp;#39; //输入掘金账号的aid
const uid = &amp;#39;******&amp;#39; //输入掘金账号的uid
const cookie = &amp;#39;******&amp;#39; //输入在掘金的cookie
schedule.scheduleJob(&amp;#39;48 15 * * *&amp;#39;,()=&amp;gt;&amp;#123;
    //corn表达式表示43分钟15小时每天每月每星期（每天15点43分）点执行
    axios.post(`https://api.juejin.cn/growth_api/v1/check_in?aid=$&amp;#123;aid&amp;#125;&amp;amp;uid=$&amp;#123;uid&amp;#125;`,&amp;#123;&amp;#125;,&amp;#123;
        headers:&amp;#123;
            referer: &amp;#39;https://juejin.cn/&amp;#39;,
            cookie: `sessionid=$&amp;#123;&amp;#125;`
        &amp;#125;
    &amp;#125;).then(res=&amp;gt;&amp;#123;
        console.log(&amp;#39;签到成功&amp;#39;);
    &amp;#125;).catch(err=&amp;gt;&amp;#123;
        console.log(&amp;#39;出现错误&amp;#39;,err);
    &amp;#125;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;serverLess&#34;&gt;&lt;a href=&#34;#serverLess&#34; class=&#34;headerlink&#34; title=&#34;serverLess&#34;&gt;&lt;/a&gt;serverLess&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serverLess并不是一项技术，而是一个架构模型（无服务器架构）。&lt;/li&gt;
&lt;li&gt;在传统模式下，部署一个服务需要选择服务器（linux、windows等），并且需要安装环境，熟悉操作系统命令，知晓安全知识等，都需要一定的成本，serverLess的核心思想就是让开发者更多关注业务本身而不是服务器运行成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Faas：函数即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FaaS是一种Serverless计算模型，它允许开发人员编写和部署函数代码，而无需关心底层的服务器管理。在FaaS中，开发人员只需关注函数的实现和逻辑，将其上传到云平台上，平台会负责函数的运行和扩展。当有请求触发函数时，云平台会自动为函数提供所需的计算资源，并根据请求量进行弹性扩展。这种按需计算的模式使开发人员可以更专注于业务逻辑的实现，同时实现了资源的高效利用。&lt;/p&gt;
&lt;p&gt;每个函数即一个服务，函数内只需处理业务，可以使用BASS层提供的服务已完成业务，无需关心背后计算资源的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Baas：后端即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后端即服务是一种提供面向移动应用和Web应用的后端功能的云服务模型。BaaS为开发人员提供了一组预构建的后端服务，如用户身份验证、数据库存储、文件存储、推送通知等，以简化应用程序的开发和管理。开发人员可以使用BaaS平台提供的API和SDK，直接集成这些功能到他们的应用中，而无需自己构建和维护后端基础设施。&lt;/p&gt;
&lt;p&gt;对后端的资源当成一种服务，如文件存储，数据存储，推送服务，身份验证。该层只需提供对应的服务，无需关心业务。定义为底层基础服务，由其他服务调用，正常不触及用户终端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脚手架快速编写：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHNlcnZlcmxlc3MtZGV2cy9z&#34;&gt;https://www.npmjs.com/package/@serverless-devs/s&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;webSocket&#34;&gt;&lt;a href=&#34;#webSocket&#34; class=&#34;headerlink&#34; title=&#34;webSocket&#34;&gt;&lt;/a&gt;webSocket&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;传统HTTP的不足：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传统HTTP是一种单向请求–响应协议，客户端发送请求之后，服务器才会响应并返回相应的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在传统HTTP中，客户端需要主动发送请求才能获取服务器上的资源，而且每次请求都需要重新建立连接，这种方式在实时通信和持续获取资源的场景下效率较低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Socket：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;socket提供了实时的双向通信能力，可以实时地传输数据。客户端和服务器之间的通信是即时的，数据的传输和响应几乎是实时完成的，不需要轮询或定时发送请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node中使用webSocket：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        * &amp;#123;
            padding: 0;
            margin: 0;
        &amp;#125;
        html,
        body,
        .room &amp;#123;
            height: 100%;
            width: 100%;
        &amp;#125;
        .room &amp;#123;
            display: flex;
        &amp;#125;
        .left &amp;#123;
            width: 300px;
            border-right: 0.5px solid #f5f5f5;
            background: #333;
        &amp;#125;
        .right &amp;#123;
            background: #1c1c1c;
            flex: 1;
            display: flex;
            flex-direction: column;
        &amp;#125;
        .header &amp;#123;
            background: #8d0eb0;
            color: white;
            padding: 10px;
            box-sizing: border-box;
            font-size: 20px;
        &amp;#125;
        .main &amp;#123;
            flex: 1;
            padding: 10px;
            box-sizing: border-box;
            font-size: 20px;
            overflow: auto;
        &amp;#125;
        .main-chat &amp;#123;
            color: green;
        &amp;#125;
        .footer &amp;#123;
            min-height: 200px;
            border-top: 1px solid green;
        &amp;#125;
        .footer .ipt &amp;#123;
            width: 100%;
            height: 100%;
            color: green;
            outline: none;
            font-size: 20px;
            padding: 10px;
            box-sizing: border-box;
        &amp;#125;
        .groupList &amp;#123;
            height: 100%;
            overflow: auto;
        &amp;#125;
        .groupList-items &amp;#123;
            height: 50px;
            width: 100%;
            background: #131313;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        &amp;#125;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;div class=&amp;quot;room&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;groupList&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;
        &amp;lt;header class=&amp;quot;header&amp;quot;&amp;gt;聊天室&amp;lt;/header&amp;gt;
        &amp;lt;main class=&amp;quot;main&amp;quot;&amp;gt;
        &amp;lt;/main&amp;gt;
        &amp;lt;footer class=&amp;quot;footer&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;ipt&amp;quot; contenteditable&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/footer&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;
        const sendMessage = (message) =&amp;gt; &amp;#123;
            const div = document.createElement(&amp;#39;div&amp;#39;);
            div.className = &amp;#39;main-chat&amp;#39;;
            div.innerText = `$&amp;#123;message.user&amp;#125;:$&amp;#123;message.text&amp;#125;`;
            main.appendChild(div)
        &amp;#125;
        const groupEl = document.querySelector(&amp;#39;.groupList&amp;#39;);
        const main = document.querySelector(&amp;#39;.main&amp;#39;);
        import &amp;#123; io &amp;#125; from &amp;quot;https://cdn.socket.io/4.7.4/socket.io.esm.min.js&amp;quot;;
        const name = prompt(&amp;#39;请输入你的名字&amp;#39;);
        const room = prompt(&amp;#39;请输入房间号&amp;#39;);
        const socket = io(&amp;#39;ws://localhost:3000&amp;#39;);
        //键盘按下发送消息
        document.addEventListener(&amp;#39;keydown&amp;#39;, (e) =&amp;gt; &amp;#123;
            if (e.key === &amp;#39;Enter&amp;#39;) &amp;#123;
                e.preventDefault();
                const ipt = document.querySelector(&amp;#39;.ipt&amp;#39;);
                socket.emit(&amp;#39;message&amp;#39;, &amp;#123;
                    text: ipt.innerText,
                    room: room,
                    user: name
                &amp;#125;);
                sendMessage(&amp;#123;
                    text: ipt.innerText,
                    user: name,
                &amp;#125;)
                ipt.innerText = &amp;#39;&amp;#39;;
            &amp;#125;
        &amp;#125;)
        //连接成功socket
        socket.on(&amp;#39;connect&amp;#39;, () =&amp;gt; &amp;#123;
            socket.emit(&amp;#39;join&amp;#39;, &amp;#123; name, room &amp;#125;);//加入一个房间
            socket.on(&amp;#39;message&amp;#39;, (message) =&amp;gt; &amp;#123;
                sendMessage(message)
            &amp;#125;)
            socket.on(&amp;#39;groupList&amp;#39;, (groupList) =&amp;gt; &amp;#123;
                console.log(groupList);
                groupEl.innerHTML = &amp;#39;&amp;#39;
                Object.keys(groupList).forEach(key =&amp;gt; &amp;#123;
                    const item = document.createElement(&amp;#39;div&amp;#39;);
                    item.className = &amp;#39;groupList-items&amp;#39;;
                    item.innerText = `房间名称:$&amp;#123;key&amp;#125; 房间人数:$&amp;#123;groupList[key].length&amp;#125;`
                    groupEl.appendChild(item)
                &amp;#125;)
            &amp;#125;)
        &amp;#125;)
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务端：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import http from &amp;#39;http&amp;#39;
import &amp;#123; Server &amp;#125; from &amp;#39;socket.io&amp;#39;
import express from &amp;#39;express&amp;#39;
const app = express()
app.use(&amp;#39;*&amp;#39;, (req, res, next) =&amp;gt; &amp;#123;
    res.setHeader(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;);
    res.setHeader(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;*&amp;quot;);
    res.setHeader(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;*&amp;quot;);
    next();
&amp;#125;)
const server = http.createServer(app)
const io = new Server(server, &amp;#123;
    cors: true //允许跨域
&amp;#125;)
const groupList = &amp;#123;&amp;#125;
/**
 * [&amp;#123;1008:[&amp;#123;name,room,id&amp;#125;]&amp;#125;]
 */
io.on(&amp;#39;connection&amp;#39;, (socket) =&amp;gt; &amp;#123;
    //加入房间
    socket.on(&amp;#39;join&amp;#39;, (&amp;#123; name, room &amp;#125;) =&amp;gt; &amp;#123;
        socket.join(room)
        if (groupList[room]) &amp;#123;
            groupList[room].push(&amp;#123; name, room, id: socket.id &amp;#125;)
        &amp;#125; else &amp;#123;
            groupList[room] = [&amp;#123; name, room, id: socket.id &amp;#125;]
        &amp;#125;
        socket.emit(&amp;#39;message&amp;#39;, &amp;#123; user: &amp;#39;管理员&amp;#39;, text: `$&amp;#123;name&amp;#125;进入了房间` &amp;#125;)
        socket.emit(&amp;#39;groupList&amp;#39;, groupList)
        socket.broadcast.emit(&amp;#39;groupList&amp;#39;, groupList)
    &amp;#125;)
    //发送消息
    socket.on(&amp;#39;message&amp;#39;, (&amp;#123; text, room, user &amp;#125;) =&amp;gt; &amp;#123;
        socket.broadcast.to(room).emit(&amp;#39;message&amp;#39;, &amp;#123;
            text,
            user
        &amp;#125;)
    &amp;#125;)
    //断开链接内置事件
    socket.on(&amp;#39;disconnect&amp;#39;, () =&amp;gt; &amp;#123;
        Object.keys(groupList).forEach(key =&amp;gt; &amp;#123;
            let leval = groupList[key].find(item =&amp;gt; item.id === socket.id)
            if (leval) &amp;#123;
                socket.broadcast.to(leval.room).emit(&amp;#39;message&amp;#39;, &amp;#123; user: &amp;#39;管理员&amp;#39;, text: `$&amp;#123;leval.name&amp;#125;离开了房间` &amp;#125;)
            &amp;#125;
            groupList[key] = groupList[key].filter(item =&amp;gt; item.id !== socket.id)
        &amp;#125;)
        socket.broadcast.emit(&amp;#39;groupList&amp;#39;, groupList)
    &amp;#125;)
&amp;#125;);
server.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;listening on :3000&amp;#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;爬虫&#34;&gt;&lt;a href=&#34;#爬虫&#34; class=&#34;headerlink&#34; title=&#34;爬虫&#34;&gt;&lt;/a&gt;爬虫&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爬虫也称为网络爬虫或网络蜘蛛，是指一种自动化程序或脚本，用于在互联网上浏览和提取信息。&lt;/li&gt;
&lt;li&gt;爬虫模拟人类在网页上的行为，通过HTTP协议发送请求，获取网页内容，然后解析并提取需要的内容。&lt;/li&gt;
&lt;li&gt;在node中使用爬虫需要借助模拟浏览器环境的包（如 puppeteer）来模拟浏览器环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工具：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;puppeteer（模拟浏览器环境）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;npm包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;npm i puppeteer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.js：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import puppeteer from &amp;quot;puppeteer&amp;quot;;
const btnText = process.argv[2];
const browser = await puppeteer.launch(&amp;#123;
    headless:false, //取消无头模式
&amp;#125;)
const page = await browser.newPage(); //打开一个页面
console.log(page);
page.setViewport(&amp;#123; width:1920,height:1080 &amp;#125;); //设置页面宽高
await page.goto(&amp;#39;https://juejin.cn/&amp;#39;); //跳转
await page.waitForSelector(&amp;#39;.side-navigator-wrap&amp;#39;); //等待元素出现
const elements = await page.$$(&amp;#39;.side-navigator-wrap .nav-item-wrap span&amp;#39;) //获取元素
const articleList = [];
const collectFunc = async()=&amp;gt;&amp;#123;
    await page.waitForSelector(&amp;#39;.entry-list&amp;#39;)
    const elements = await page.$$(&amp;#39;.entry-list .title-row a&amp;#39;)
    for await (let el of elements) &amp;#123;
        const text = await el.getProperty(&amp;#39;innerText&amp;#39;)
        const name = await text.jsonValue()
        articleList.push(name)
    &amp;#125;
    console.log(articleList)
&amp;#125;
for await (let el of elements) &amp;#123;
    const text = await el.getProperty(&amp;#39;innerText&amp;#39;) //获取span的属性
    const name = await text.jsonValue() //获取内容
    if (name.trim() === (btnText || &amp;#39;前端&amp;#39;)) &amp;#123;
        await el.click() //自动点击对应的菜单
        collectFunc() //调用函数
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可以结合node子进程跑python脚本，使用pip仓库中相应的包和功能。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;C-扩展&#34;&gt;&lt;a href=&#34;#C-扩展&#34; class=&#34;headerlink&#34; title=&#34;C++扩展&#34;&gt;&lt;/a&gt;C++扩展&lt;/h2&gt;&lt;p&gt;Node.js在IO方面具有极强的能力，但是对CPU密集型的任务有所不足，为了填补这部分缺点，node.js支持C&amp;#x2F;C++为其编写原生的nodejs插件，补充这方面能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node.js中C++扩展：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;c++编写的代码能够被编译成一个动态链接库(dll),可以被nodejs require引入使用，后缀是&lt;code&gt;.node&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;.node文件的原理就是(&lt;code&gt;window dll&lt;/code&gt;) (&lt;code&gt;Mac dylib&lt;/code&gt;) (&lt;code&gt;Linux so&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;c++扩展编写语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NAN(Native Abstractions for Nodejs) 一次编写，到处编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 Nodejs和V8都更新的很快所有每个版本的方法名也不一样，对我们开发造成了很大的问题例如&lt;/li&gt;
&lt;li&gt;0.50版本 &lt;code&gt;Echo(const Prototype&amp;amp;proto)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3.00版本 &lt;code&gt;Echo(Object&amp;lt;Prototype&amp;gt;&amp;amp; proto)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NAN的就是一堆宏判断，判断各种版本的API，用来实现兼容所以他会到处编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N-API(node-api) 无需重新编译&lt;/li&gt;
&lt;li&gt;基于C的API&lt;/li&gt;
&lt;li&gt;c++ 封装 node-addon-api&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N-API 是一个更现代的选择，它提供了一个稳定的、跨版本的 API，使得你的插件可以在不同版本的 Node.js 上运行，而无需修改代码。这大大简化了编写和维护插件的过程。&lt;/p&gt;
&lt;p&gt;对于 C++，可以使用 node-addon-api，这是 N-API 的一个封装，提供了一个更易于使用的 C++ API。这将使你的代码更易于阅读和维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用C++编写的Nodejs库如&lt;code&gt;node-sass&lt;/code&gt; &lt;code&gt;node-jieba&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;CPU密集型应用&lt;/li&gt;
&lt;li&gt;代码保护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;需要安装C++编辑器：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;npm install --global --production windows-build-tools #管理员运行
#如果安装过python 以及c++开发软件就不需要装这个了
npm install node-gyp -g #全局安装
npm install node-addon-api -D #装到项目里
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cpu.cpp：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#define NAPI_VERSION 3  //指定addon版本
#define NAPI_CPP_EXCEPTIONS //启用 Node.js N-API 中的 C++ 异常支持
#include &amp;lt;napi.h&amp;gt;  //addon API
#include &amp;lt;windows.h&amp;gt; //windwos API

Napi::Value GetScreenSize(const Napi::CallbackInfo&amp;amp; info) &amp;#123;
    Napi::Env env = info.Env(); //指定环境

    int cx = GetSystemMetrics(SM_CXSCREEN); //获取设备宽
    int cy = GetSystemMetrics(SM_CYSCREEN); //获取设备高

    Napi::Object result = Napi::Object::New(env); //创建一个对象
    result.Set(&amp;quot;width&amp;quot;, cx);
    result.Set(&amp;quot;height&amp;quot;, cy);

    return result; //返回对象
&amp;#125;

Napi::Object Init(Napi::Env env, Napi::Object exports) &amp;#123;
    //抛出一个函数  getScreenSize 
    exports.Set(&amp;quot;getScreenSize&amp;quot;, Napi::Function::New(env, GetScreenSize));
    return exports;
&amp;#125;
//addon固定语法 必须抛出这个方法
NODE_API_MODULE(NODE_GYP_MODULE_NAME, Init)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;binding.gyp：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;#123;
    &amp;quot;targets&amp;quot;:[
        &amp;#123;
            &amp;quot;target_name&amp;quot;: &amp;quot;cpu&amp;quot;, //名称
            &amp;quot;sources&amp;quot;: [ &amp;quot;cpu.cpp&amp;quot; ], //指定文件
            &amp;quot;include_dirs&amp;quot;: [
                 &amp;quot;&amp;lt;!@(node -p \&amp;quot;require(&amp;#39;node-addon-api&amp;#39;).include\&amp;quot;)&amp;quot; //引入addon
            ]
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const addon = require(&amp;#39;./build/Release/cpu.node&amp;#39;)
console.log(addon.getScreenSize())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;命令行中打包addon：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;node-gyp configure #生成配置文件
node-gyp build  #打包addon
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;大文件上传&#34;&gt;&lt;a href=&#34;#大文件上传&#34; class=&#34;headerlink&#34; title=&#34;大文件上传&#34;&gt;&lt;/a&gt;大文件上传&lt;/h2&gt;&lt;p&gt;大文件上传方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大文件分片：将大文件切分成较小的片段（通常称为分片或者块），然后逐个上传这些分片&lt;ul&gt;
&lt;li&gt;优点是：提高上传的稳定性，因为上传失败时只需要重新上传该分片而不需要重新上传整个文件，同时分片上传还可以利用多个网络连接并行上传多个分片，提高上传速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;断点续传：如果上传中止，断点传输可以记录已成功上传的分片信息，以便在恢复上传时继续上传未完成的任务，而不是重新上传整个文件&lt;ul&gt;
&lt;li&gt;优点是可以大大减少上传失败的影响，并节省时间和带宽。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;script&amp;gt;
    const fileDOM = document.getElementById(&amp;#39;file&amp;#39;);
    fileDOM.addEventListener(&amp;#39;change&amp;#39;,(e)=&amp;gt;&amp;#123;
        const file = e.target.files[0];
        //对文件进行分片
        const chunks = sliceFile(file);
        //上传分片数据
        postChunksData(chunks);
    &amp;#125;)
    function sliceFile(file,size=1024 * 1024 * 4) &amp;#123;
        const chunks = [];
        for(let i=0;i&amp;lt;file.size;i+=size)&amp;#123;
            chunks.push(file.slice(i , i + size));
        &amp;#125;
        return chunks;
    &amp;#125;
    function postChunksData(chunks) &amp;#123;
        const list = [];
        for(let i=0;i&amp;lt;chunks.length;i++)&amp;#123;
            //使用formData上传所有分片
            const formData = new FormData();
            formData.append(&amp;#39;index&amp;#39;,i);
            formData.append(&amp;#39;total&amp;#39;,chunks.length);
            formData.append(&amp;#39;fileName&amp;#39;,&amp;#39;分片文件&amp;#39;);
            formData.append(&amp;#39;file&amp;#39;,chunks[i]);
            list.push(fetch(&amp;#39;http://localhost:3000/up&amp;#39;,&amp;#123;
                method:&amp;#39;POST&amp;#39;,
                body: formData,
            &amp;#125;))
        &amp;#125;
        //上传完所有分片之后将文件合并
        Promise.all(list).then(res =&amp;gt; &amp;#123;
            fetch(&amp;#39;http://localhost:3000/merge&amp;#39;,&amp;#123;
                method:&amp;quot;POST&amp;quot;,
                headers:&amp;#123;
                    &amp;quot;Content-Type&amp;quot;:&amp;quot;application/json&amp;quot;
                &amp;#125;,
                body:JSON.stringify(&amp;#123;
                    fileName:&amp;quot;分片上传文件&amp;quot;,
                &amp;#125;)
            &amp;#125;).then(res=&amp;gt;&amp;#123;
                console.log(res);
            &amp;#125;)
        &amp;#125;)
    &amp;#125;    
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import express from &amp;#39;express&amp;#39;
import multer from &amp;#39;multer&amp;#39;
import cors from &amp;#39;cors&amp;#39;
import fs from &amp;#39;node:fs&amp;#39;
import path from &amp;#39;node:path&amp;#39;
const storage = multer.diskStorage(&amp;#123;
    destination: (req, file, cb) =&amp;gt; &amp;#123;
        cb(null, &amp;#39;uploads/&amp;#39;)
    &amp;#125;,
    filename: (req, file, cb) =&amp;gt; &amp;#123;
        cb(null, `$&amp;#123;req.body.index&amp;#125;-$&amp;#123;req.body.fileName&amp;#125;`)
    &amp;#125;
&amp;#125;)
const upload = multer(&amp;#123; storage &amp;#125;)
const app = express()
app.use(cors())
app.use(express.json())
// 使用multer将数据存到服务器磁盘中
app.post(&amp;#39;/up&amp;#39;, upload.single(&amp;#39;file&amp;#39;), (req, res) =&amp;gt; &amp;#123;
    res.send(&amp;#39;ok&amp;#39;)
&amp;#125;)
// 使用fs.appendFileSync将切片文件进行合成
app.post(&amp;#39;/merge&amp;#39;, async (req, res) =&amp;gt; &amp;#123;
    const uploadPath = &amp;#39;./uploads&amp;#39;
    let files = fs.readdirSync(path.join(process.cwd(), uploadPath))
    files = files.sort((a, b) =&amp;gt; a.split(&amp;#39;-&amp;#39;)[0] - b.split(&amp;#39;-&amp;#39;)[0])
    const writePath = path.join(process.cwd(), `video`, `$&amp;#123;req.body.fileName&amp;#125;.mp4`)
    files.forEach((item) =&amp;gt; &amp;#123;
        fs.appendFileSync(writePath, fs.readFileSync(path.join(process.cwd(), uploadPath, item)))
        fs.unlinkSync(path.join(process.cwd(), uploadPath, item))
    &amp;#125;)
    res.send(&amp;#39;ok&amp;#39;)
&amp;#125;)
app.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Server is running on port 3000&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件流下载&#34;&gt;&lt;a href=&#34;#文件流下载&#34; class=&#34;headerlink&#34; title=&#34;文件流下载&#34;&gt;&lt;/a&gt;文件流下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件流下载是一种将文件内容通过流的形式发送给客户端，实现文件下载的方法，适用于处理大型文件或者需要实时生成文件内容的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心知识响应头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type指定下载文件的MIME类型&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/octet-stream&lt;/code&gt;（二进制流数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/pdf&lt;/code&gt;：Adobe PDF 文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/json&lt;/code&gt;：JSON 数据文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image/jpeg&lt;/code&gt;：JPEG 图像文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Disposition&lt;/code&gt; 指定服务器返回的内容在浏览器中的处理方式。它可以用于控制文件下载、内联显示或其他处理方式&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attachment&lt;/code&gt;：指示浏览器将响应内容作为附件下载。通常与 &lt;code&gt;filename&lt;/code&gt; 参数一起使用，用于指定下载文件的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;：指示浏览器直接在浏览器窗口中打开响应内容，如果内容是可识别的文件类型（例如图片或 PDF），则在浏览器中内联显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;script&amp;gt;
         const btn = document.getElementById(&amp;#39;btn&amp;#39;)
         btn.onclick = () =&amp;gt; &amp;#123;
            fetch(&amp;#39;http://localhost:3000/download&amp;#39;,&amp;#123;
                method:&amp;quot;post&amp;quot;,
                body:JSON.stringify(&amp;#123;
                    fileName:&amp;#39;1.png&amp;#39;
                &amp;#125;),
                headers:&amp;#123;
                    &amp;quot;Content-Type&amp;quot;:&amp;quot;application/json&amp;quot;
                &amp;#125;
            &amp;#125;).then(res=&amp;gt;res.arrayBuffer()).then(res=&amp;gt;&amp;#123; //请求到stream流式数据后，通过res.arrayBuffer方法获得Buffer数据，用Blob容器存储二进制缓冲数据，通过URL.createObjectURL创建URL地址，赋给a标签进行下载。
                const blob = new Blob([res],&amp;#123;type:&amp;#39;image/png&amp;#39;&amp;#125;)
                const url = URL.createObjectURL(blob)
                const a = document.createElement(&amp;#39;a&amp;#39;)
                a.href = url
                a.download = &amp;#39;1.png&amp;#39;
                a.click()
            &amp;#125;)
         &amp;#125;
     &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import express from &amp;#39;express&amp;#39;
import fs from &amp;#39;fs&amp;#39;
import path from &amp;#39;path&amp;#39;
import cors from &amp;#39;cors&amp;#39;
const app = express()
app.use(cors())
app.use(express.json())
app.use(express.static(&amp;#39;./static&amp;#39;))
app.post(&amp;#39;/download&amp;#39;, function (req, res) &amp;#123; //当请求download路径时，通过fs读取文件数据，设置响应头后返回文件数据
    const fileName = req.body.fileName
    const filePath = path.join(process.cwd(), &amp;#39;./static&amp;#39;, fileName)
    const content = fs.readFileSync(filePath)
    res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/octet-stream&amp;#39;)
    res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment;filename=&amp;#39; + fileName)
    res.send(content)
&amp;#125;)
app.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;http://localhost:3000&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;HTTP缓存&#34;&gt;&lt;a href=&#34;#HTTP缓存&#34; class=&#34;headerlink&#34; title=&#34;HTTP缓存&#34;&gt;&lt;/a&gt;HTTP缓存&lt;/h2&gt;&lt;p&gt;HTTP缓存分为两大类：强缓存和协商缓存。这两种缓存都是通过HTTP响应头来控制，目的是提高网站的性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;强缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;强缓存之后则不需要重新向服务器发送请求，而是从浏览器缓存（内存缓存或者硬盘缓存中）读取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory cache(内存缓存) 内存缓存存储在浏览器内存当中，一般刷新网页的时候会发现很多内存缓存&lt;/li&gt;
&lt;li&gt;disk cache(硬盘缓存) 硬盘缓存是存储在计算机硬盘中，空间大，但是读取效率比内存缓存慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;强缓存设置需要服务端设置对应的响应头Cache-Control，响应头含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max-age&lt;/code&gt;：浏览器资源缓存的时长(秒)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt;：不走强缓存，&lt;strong&gt;走协商缓存&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-store&lt;/code&gt;：禁止任何缓存策略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：资源即可以被浏览器缓存也可以被代理服务器缓存(CDN)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：资源只能被客户端缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const express = require(&amp;#39;express&amp;#39;);
const app = express();
app.get(&amp;#39;/&amp;#39;,(req,res)=&amp;gt;&amp;#123;
    res.setHeader(&amp;#39;Cache-Control&amp;#39;,&amp;#39;public, max-age=20&amp;#39;);
    res.json(&amp;#123;
        name:&amp;quot;cache&amp;quot;,
        version:&amp;#39;1.0.0&amp;#39;
    &amp;#125;)
&amp;#125;);
app.listen(3000,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;服务启动&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;协商缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当涉及到缓存机制时，强缓存优先于协商缓存。当资源的强缓存生效时，客户端可以直接从本地缓存中获取资源，而无需与服务器进行通信。&lt;/p&gt;
&lt;p&gt;如果强缓存未命中（例如&lt;code&gt;max-age&lt;/code&gt;过期），或者服务器响应中设置了&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;，则客户端会发起协商缓存的请求。在协商缓存中，客户端会发送带有缓存数据标识的请求头部字段，以向服务器验证资源的有效性。&lt;/p&gt;
&lt;p&gt;服务器会根据客户端发送的协商缓存字段（如&lt;code&gt;If-Modified-Since&lt;/code&gt;和&lt;code&gt;If-None-Match&lt;/code&gt;）来判断资源是否发生变化。如果资源未发生修改，服务器会返回状态码 304（Not Modified），通知客户端可以使用缓存的版本。如果资源已经发生变化，服务器将返回最新的资源，状态码为 200。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;服务端通过设置响应头&lt;code&gt;Last-Modified&lt;/code&gt;和&lt;code&gt;If-Modified-Since&lt;/code&gt;来通知客户端最后修改时间，客户端在后续请求中通过&lt;code&gt;If-Modified-Since&lt;/code&gt;请求头携带该时间，服务器判断资源是否有更新，如何没有返回304状态码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import express from &amp;#39;express&amp;#39;
import cors from &amp;#39;cors&amp;#39;
import fs from &amp;#39;node:fs&amp;#39;
const getModifyTime = () =&amp;gt; &amp;#123;
    return fs.statSync(&amp;#39;./index.js&amp;#39;).mtime.toISOString() //获取文件最后修改时间
&amp;#125;
const app = express()
app.use(cors())
app.get(&amp;#39;/api&amp;#39;, (req, res) =&amp;gt; &amp;#123;
    res.setHeader(&amp;#39;Cache-Control&amp;#39;, &amp;#39;no-cache, max-age=2592000&amp;#39;)//表示走协商缓存
    const ifModifiedSince = req.headers[&amp;#39;if-modified-since&amp;#39;] //获取浏览器上次修改时间
    res.setHeader(&amp;#39;Last-Modified&amp;#39;, getModifyTime())
    if (ifModifiedSince &amp;amp;&amp;amp; ifModifiedSince === getModifyTime()) &amp;#123;
        console.log(&amp;#39;304&amp;#39;)
        res.statusCode = 304
        res.end()
        return
    &amp;#125; else &amp;#123;
        console.log(&amp;#39;200&amp;#39;)
        res.end(&amp;#39;value&amp;#39;)
    &amp;#125;
&amp;#125;)
app.listen(3000, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;Example app listening on port 3000!&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ETag：&lt;/p&gt;
&lt;p&gt;ETag 和 If-None-Match：服务器通过 ETag 响应头给资源生成一个唯一标识符。客户端在后续请求中通过 If-None-Match 请求头携带该标识符，服务器根据标识符判断资源是否有更新。如果没有更新，返回 304 状态码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ETag 优先级比 Last-Modified 高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP2&#34;&gt;&lt;a href=&#34;#HTTP2&#34; class=&#34;headerlink&#34; title=&#34;HTTP2&#34;&gt;&lt;/a&gt;HTTP2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP2是超文本传输协议的下一个主要版本，是对HTTP&amp;#x2F;1.1协议的重大改进。目标是改善性能、效率和安全性，提供更快更高效的网络通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多路复用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP&amp;#x2F;2支持在单个TCP连接上同时发送多个请求和响应，这意味着可以避免建立多个连接，减少网络延迟，提高效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二进制分帧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在HTTP2应用层和传输层之间增加了二进制分帧层，将请求和响应拆分为多个帧，这种二进制格式的设计使得协议更加高效，并且容易解析和处理。&lt;ul&gt;
&lt;li&gt;数据帧（Data Frame）：用于传输请求和响应的实际数据。&lt;/li&gt;
&lt;li&gt;头部帧（Headers Frame）：包含请求或响应的头部信息。&lt;/li&gt;
&lt;li&gt;优先级帧（Priority Frame）：用于指定请求的优先级。&lt;/li&gt;
&lt;li&gt;设置帧（Settings Frame）：用于传输通信参数的设置。&lt;/li&gt;
&lt;li&gt;推送帧（Push Promise Frame）：用于服务器主动推送资源。&lt;/li&gt;
&lt;li&gt;PING 帧（PING Frame）：用于检测连接的活跃性。&lt;/li&gt;
&lt;li&gt;重置帧（RST_STREAM Frame）：用于重置数据流或通知错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;头部压缩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP2采用首部表和动态压缩算法来减少头部的大小，这减少了每个请求和响应的开销，提高了传输效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node中实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;可以使用openssl 生成 tls证书：&lt;/p&gt;
&lt;p&gt;生成私钥&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;openssl genrsa -out server.key 1024
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成证书请求文件(用完可以删掉也可以保留)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;openssl req -new -key server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成证书&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;openssl x509 -req -in server.csr -out server.crt -signkey server.key -days 3650
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import http2 from &amp;#39;node:http2&amp;#39;
import fs from &amp;#39;node:fs&amp;#39;
const server = http2.createSecureServer(&amp;#123;
    key: fs.readFileSync(&amp;#39;server.key&amp;#39;),
    cert: fs.readFileSync(&amp;#39;server.crt&amp;#39;)
&amp;#125;)
server.on(&amp;#39;stream&amp;#39;, (stream, headers) =&amp;gt; &amp;#123;
    stream.respond(&amp;#123;
        &amp;#39;content-type&amp;#39;: &amp;#39;text/html; charset=utf-8&amp;#39;,
        &amp;#39;:status&amp;#39;: 200
    &amp;#125;)
    stream.on(&amp;#39;error&amp;#39;, (err) =&amp;gt; &amp;#123;
        console.log(err)
    &amp;#125;)
    stream.end(`
      &amp;lt;h1&amp;gt;http2&amp;lt;/h1&amp;gt;
    `)
&amp;#125;)
server.listen(80, () =&amp;gt; &amp;#123;
    console.log(&amp;#39;server is running on port 80&amp;#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Node中事件循环&#34;&gt;&lt;a href=&#34;#Node中事件循环&#34; class=&#34;headerlink&#34; title=&#34;Node中事件循环&#34;&gt;&lt;/a&gt;Node中事件循环&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ29sb3ZpbmcvcC8xNjUyMzY0OC5odG1s&#34;&gt;https://www.cnblogs.com/goloving/p/16523648.html&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇出于学习&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vY29sdW1uLzcyNzQ4OTM3MTQ5NzA5MTg5Njk=&#34;&gt;node.js教程&lt;/span&gt;后所整理，内容中有大量引用和参照，详细可点击前去了解&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="Node.js" scheme="https://dmqweb.cn/categories/Node-js/" />
        <category term="node.js" scheme="https://dmqweb.cn/tags/node-js/" />
        <updated>2024-05-24T09:02:28.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/</id>
        <title>微前端</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
        <content type="html">&lt;h1 id=&#34;微前端&#34;&gt;&lt;a href=&#34;#微前端&#34; class=&#34;headerlink&#34; title=&#34;微前端&#34;&gt;&lt;/a&gt;微前端&lt;/h1&gt;&lt;h2 id=&#34;目标&#34;&gt;&lt;a href=&#34;#目标&#34; class=&#34;headerlink&#34; title=&#34;目标&#34;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，这样才能确保微应用真正具备独立开发、独立运行的能力（防止巨石应用）&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;微前端按业务功能将一整块前端应用分解成一系列更小的、更内聚的微前端应用，同时通过明确的交互协议来管理这些应用间的依赖关系，实现不同业务的解耦合。并将每个前端应用交给独立团队负责，各自独立开发、独立部署、充分利用并行性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微前端是一种架构风格，monorepo是一种开发策略，模块联邦是一种打包和部署方式&lt;ul&gt;
&lt;li&gt;微前端将大型的前端应用分解成一组小的、独立的前端服务，每一个小的前端服务可以由不同的团队独立开发、部署和维护。微前端的目标是提高大型前端项目的可维护性、可扩展性和灵活性&lt;/li&gt;
&lt;li&gt;monorepo是一种开发策略（技巧），它将多个项目或服务的代码放在一个单一的版本控制系统仓库中，有助于简化依赖管理、代码共享和团队协作。对于工具库能更好的暴露单独模块。&lt;/li&gt;
&lt;li&gt;模块联邦是Webpack5引入的一个特性，允许将多个Webpack项目远程接入、联合起来，形成一个单一的应用，每个模块可以独立开发和部署，同时共享彼此的代码，模块联邦是一种新的打包和部署前端应用的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;微前端应用&#34;&gt;&lt;a href=&#34;#微前端应用&#34; class=&#34;headerlink&#34; title=&#34;微前端应用&#34;&gt;&lt;/a&gt;微前端应用&lt;/h1&gt;&lt;h2 id=&#34;EMP&#34;&gt;&lt;a href=&#34;#EMP&#34; class=&#34;headerlink&#34; title=&#34;EMP&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbXAyLm5ldGxpZnkuYXBwLw==&#34;&gt;EMP&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;模块联邦技术，微前端构建方案，是基于 webpack 5 module federation 的微前端方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack 联邦编译可以保证所有子应用依赖解耦；&lt;/li&gt;
&lt;li&gt;应用间去中心化的调用、共享模块；&lt;/li&gt;
&lt;li&gt;模块远程 ts 支持；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对 webpack 强依赖，老旧项目不友好；&lt;/li&gt;
&lt;li&gt;没有有效的 css 沙箱和 js 沙箱，需要靠用户自觉；&lt;/li&gt;
&lt;li&gt;子应用保活、多应用激活无法实现；&lt;/li&gt;
&lt;li&gt;主、子应用的路由可能发生冲突；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 这个东西有点类似于拆包，也可以叫模块共享，例如React有个模块可以共享给Vue项目用Vue2的组件可以共享给Vue3用。&lt;/p&gt;
&lt;h2 id=&#34;single-spa&#34;&gt;&lt;a href=&#34;#single-spa&#34; class=&#34;headerlink&#34; title=&#34;single-spa&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC1oYW5zLnNpbmdsZS1zcGEuanMub3JnL2RvY3MvZ2V0dGluZy1zdGFydGVkLW92ZXJ2aWV3&#34;&gt;single-spa&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;single-spa是微前端的基础框架，乾坤框架就是基于single-spa来实现的，在single-spa的基础上做了一层封装，也解决了single-spa的一些缺陷。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;single-spa原理是通过网络请求请求到文件资源（使用import导入语法时，需要在importmap中注册包名称和地址）&lt;/li&gt;
&lt;li&gt;对于样式隔离，single-spa推荐的方法有：Scoped CSS和shadow DOM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;single-spa实现了一个微前端框架需要具备的各种功能，但是实现的又不够彻底，遗留了很多需要解决的问题。&lt;/p&gt;
&lt;h2 id=&#34;乾坤&#34;&gt;&lt;a href=&#34;#乾坤&#34; class=&#34;headerlink&#34; title=&#34;乾坤&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcWlhbmt1bi51bWlqcy5vcmcvemgv&#34;&gt;乾坤&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;乾坤是在single-spa的基础之上进行的进一步封装&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html entry 的方式引入子应用，相比 js entry 极大的降低了应用改造的成本；&lt;/li&gt;
&lt;li&gt;完备的沙箱方案，js 沙箱做了 SnapshotSandbox、LegacySandbox、ProxySandbox 三套渐进增强方案，css 沙箱做了 strictStyleIsolation、experimentalStyleIsolation 两套适用不同场景的方案；&lt;/li&gt;
&lt;li&gt;做了静态资源预加载能力；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;适配成本比较高，工程化、生命周期、静态资源路径、路由等都要做一系列的适配工作；&lt;/li&gt;
&lt;li&gt;css 沙箱采用严格隔离会有各种问题，js 沙箱在某些场景下执行性能下降严重；&lt;/li&gt;
&lt;li&gt;无法同时激活多个子应用，也不支持子应用保活；&lt;/li&gt;
&lt;li&gt;无法支持 vite 等 esmodule 脚本运行；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;无界&#34;&gt;&lt;a href=&#34;#无界&#34; class=&#34;headerlink&#34; title=&#34;无界&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vd3VqaWUtbWljcm8uZ2l0aHViLmlvL2RvYy9hcGkvYnVzLmh0bWw=&#34;&gt;无界&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接入简单只需要四五行代码&lt;/li&gt;
&lt;li&gt;不需要针对vite额外处理&lt;/li&gt;
&lt;li&gt;预加载&lt;/li&gt;
&lt;li&gt;应用保活机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隔离js使用一个空的iframe进行隔离&lt;/li&gt;
&lt;li&gt;子应用axios需要自行适配&lt;/li&gt;
&lt;li&gt;iframe沙箱的src设置了主应用的host，初始化iframe的时候需要等待iframe的location.orign从’about:blank’初始化为主应用的host，这个采用的计时器去等待的不是很悠亚。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 使用shadowDom 隔离css，js使用空的iframe隔离，通讯使用的是proxy&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;无界的原理就是使用开启影子dom来进行样式的隔离，通过使用attachShadow方法开启影子dom（继承HTMLElement），获得的shadow影子dom添加template（无界的初始模板）为子元素，这样就进行了样式隔离，最后通过window.customElement.define注册dom元素wu-jie，使用标签即可。&lt;/p&gt;
&lt;p&gt;index.js：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;window.onload = () =&amp;gt; &amp;#123;
    class WuJie extends HTMLElement &amp;#123;
        constructor() &amp;#123;
            super()
            this.init()
            this.getAttr(&amp;#39;url&amp;#39;)
        &amp;#125;
        init() &amp;#123;
          const shadow =  this.attachShadow(&amp;#123; mode: &amp;quot;open&amp;quot; &amp;#125;) //开启影子dom 也就是样式隔离
          const template = document.querySelector(&amp;#39;#wu-jie&amp;#39;) as HTMLTemplateElement
          console.log(template);
          shadow.appendChild(template.content.cloneNode(true))
        &amp;#125;
        getAttr (str:string) &amp;#123;
           console.log(&amp;#39;获取参数&amp;#39;,this.getAttribute(str));
        &amp;#125;
        //生命周期自动触发有东西插入
        connectedCallback () &amp;#123;
           console.log(&amp;#39;类似于vue 的mounted&amp;#39;);
        &amp;#125;
        //生命周期卸载
        disconnectedCallback () &amp;#123;
              console.log(&amp;#39;类似于vue 的destory&amp;#39;);
        &amp;#125;
        //跟watch类似
        attributeChangedCallback (name:any, oldVal:any, newVal:any) &amp;#123;
            console.log(&amp;#39;跟vue 的watch 类似 有属性发生变化自动触发&amp;#39;);
        &amp;#125;
    &amp;#125;
    window.customElements.define(&amp;#39;wu-jie&amp;#39;, WuJie)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.html：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;./index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!--外层写一个div测试隔离--&amp;gt;
    &amp;lt;div&amp;gt;我是div&amp;lt;/div&amp;gt;
    &amp;lt;wu-jie url=&amp;quot;xxxxxx&amp;quot;&amp;gt;&amp;lt;/wu-jie&amp;gt;
    &amp;lt;template id=&amp;quot;wu-jie&amp;quot;&amp;gt;
       &amp;lt;!--div的样式是作用于全局的--&amp;gt;
        &amp;lt;style&amp;gt;
            div &amp;#123;
                background: red;
            &amp;#125;
        &amp;lt;/style&amp;gt;
         &amp;lt;div&amp;gt;
            样式隔离的
         &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;预加载&#34;&gt;&lt;a href=&#34;#预加载&#34; class=&#34;headerlink&#34; title=&#34;预加载&#34;&gt;&lt;/a&gt;预加载&lt;/h4&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;需要从wujie的实例导出&lt;code&gt;preloadApp&lt;/code&gt;,参数跟&lt;code&gt;startApp&lt;/code&gt; 一致，预加载必须开启exec选项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;preloadApp(&amp;#123; name: &amp;quot;vue3&amp;quot;, url: &amp;quot;http://127.0.0.1:5174/&amp;quot;, exec: true &amp;#125;)
preloadApp(&amp;#123; name: &amp;quot;react&amp;quot;, url: &amp;quot;http://127.0.0.1:5175/&amp;quot;, exec: true &amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;exec代表是否进行预加载，默认值是true&lt;/li&gt;
&lt;li&gt;js的执行模式，由于子应用的执行会阻塞主应用的渲染线程，当设置为true时js采取类似于react fiber的模式方式间断执行，每个js文件的执行都包裹在&lt;code&gt;requestidlecallback&lt;/code&gt;中，每执行一个js文件后就可以返回去响应外部的输入，不会造成浏览器渲染和加载之间的冲突从而造成卡顿，但是这个颗粒度是js文件，所以应该保证js文件不应过大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器一帧之内要做的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理用于输入（事件）&lt;/li&gt;
&lt;li&gt;执行定时任务&lt;/li&gt;
&lt;li&gt;执行requestAnimationFrame&lt;/li&gt;
&lt;li&gt;执行dom的回流和重绘&lt;/li&gt;
&lt;li&gt;计算更新涂层的更新指令&lt;/li&gt;
&lt;li&gt;绘制指令合并主线程，如果有空余时间执行requestidlecallbask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;react也有该机制 但是react并没有用 &lt;code&gt;requestidlecallback&lt;/code&gt;，说是这个东西经过测试可能会超过16ms，超过16ms绘制就会看起来很卡 所以react16是用的 &lt;code&gt;requestAnimationFrame + postMessage&lt;/code&gt; 实现的那为什么不用&lt;code&gt;setTimeOut&lt;/code&gt; setTimeOut 及时为0 也会有一个最小毫秒延迟4ms，所以是用了postMessage，react18又换成了&lt;code&gt;MessageChannel&lt;/code&gt; 实现了队列方式去执行任务。&lt;/p&gt;
&lt;h2 id=&#34;micro-app&#34;&gt;&lt;a href=&#34;#micro-app&#34; class=&#34;headerlink&#34; title=&#34;micro-app&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vemVyb2luZy5qZC5jb20vbWljcm8tYXBwL2RvY3MuaHRtbCUyMy8=&#34;&gt;micro-app&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;micro-app 是基于 webcomponent + qiankun sandbox 的微前端方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 webcomponet 加载子应用相比 single-spa 这种注册监听方案更加优雅；&lt;/li&gt;
&lt;li&gt;复用经过大量项目验证过 qiankun 的沙箱机制也使得框架更加可靠；&lt;/li&gt;
&lt;li&gt;组件式的 api 更加符合使用习惯，支持子应用保活；&lt;/li&gt;
&lt;li&gt;降低子应用改造的成本，提供静态资源预加载能力；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不足&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;css 沙箱依然无法绝对的隔离，js 沙箱做全局变量查找缓存，性能有所优化；&lt;/li&gt;
&lt;li&gt;支持 vite 运行，但必须使用 plugin 改造子应用，且 js 代码没办法做沙箱隔离；&lt;/li&gt;
&lt;li&gt;对于不支持 webcompnent 的浏览器没有做降级处理；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;底层原理 js隔离跟qiankun类似也是使用proxy + with，css隔离自定义前缀类似于scoped&lt;/p&gt;
&lt;h1 id=&#34;模块联邦&#34;&gt;&lt;a href=&#34;#模块联邦&#34; class=&#34;headerlink&#34; title=&#34;模块联邦&#34;&gt;&lt;/a&gt;模块联邦&lt;/h1&gt;&lt;p&gt;模块联邦是跟&lt;code&gt;webpack5&lt;/code&gt;强耦合的，是基于webpack5内置插件的 无须安装&lt;/p&gt;
&lt;p&gt;它相当于是一个去中心化技术，它可以让多个独立构建的应用之间，动态的调用彼此的模块。这种运行机制，可以让我们轻松的拆分应用，真正做到跨应用的模块共享。&lt;/p&gt;
&lt;p&gt;配置过程就是在webpack.config.js中配置ModuleFederationPlugin插件，打完包之后观察会发现其实就是import函数动态加载，使用模块联邦的好处就在于之前当多个项目共有的模块改变时，每一个项目都需要重新install一下，而使用模块联邦之后，就相当于动态导入，免去了重新install的过程（由项目的克隆转为类似软链接的过程）。&lt;/p&gt;
</content>
        <category term="微前端" scheme="https://dmqweb.cn/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/" />
        <category term="微前端" scheme="https://dmqweb.cn/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/" />
        <updated>2024-05-24T06:26:39.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
        <title>网络安全</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
        <content type="html">&lt;h1 id=&#34;前端网络安全&#34;&gt;&lt;a href=&#34;#前端网络安全&#34; class=&#34;headerlink&#34; title=&#34;前端网络安全&#34;&gt;&lt;/a&gt;前端网络安全&lt;/h1&gt;&lt;h2 id=&#34;1-XSS-跨站脚本攻击&#34;&gt;&lt;a href=&#34;#1-XSS-跨站脚本攻击&#34; class=&#34;headerlink&#34; title=&#34;#1. XSS 跨站脚本攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzEteHNzLSVFOCVCNyVBOCVFNyVBQiU5OSVFOCU4NCU5QSVFNiU5QyVBQyVFNiU5NCVCQiVFNSU4NyVCQg==&#34;&gt;#&lt;/span&gt;1. XSS 跨站脚本攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XSS 是常见的 Web 攻击技术之一.所谓的跨站脚本攻击指得是:恶意攻击者往 Web 页面里注入恶意 Script 代码，用户浏览这些网页时，就会执行其中的恶意代码，可对用户进行盗取 cookie 信息、会话劫持等各种攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;危害&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;盗取各类用户帐号&lt;/strong&gt;，如机器登录帐号、用户网银帐号、各类管理员帐号&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;控制企业数据&lt;/strong&gt;，包括读取、篡改、添加、删除企业敏感数据的能力&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;盗窃企业重要的具有商业价值的资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;strong&gt;非法转账&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;strong&gt;强制发送电子邮件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;strong&gt;网站挂马&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;strong&gt;控制受害者机器向其它网站发起攻击&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤用户的输入信息，禁止用户在输入的过程中输入 “&amp;lt;”, “&amp;gt;”, “引号”, “$”, “_”&lt;/li&gt;
&lt;li&gt;核心的用户身份标示或 token 保存在 Cookie 中,Cookie 中一定要加 “HTTPOnly” 在结尾，保证只有在 html 操作时才能将 cookie 中的内容发送出去，在 JS 中无法获得用户的 Cookie 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-CSRF-网络攻击&#34;&gt;&lt;a href=&#34;#2-CSRF-网络攻击&#34; class=&#34;headerlink&#34; title=&#34;#2. CSRF 网络攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzItY3NyZi0lRTclQkQlOTElRTclQkIlOUMlRTYlOTQlQkIlRTUlODclQkI=&#34;&gt;#&lt;/span&gt;2. CSRF 网络攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSRF（Cross-site request forgery）跨站请求伪造，也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少在 cookie 中存储客户核心内容比如用户的 token、ID、access_token 等&lt;/li&gt;
&lt;li&gt;GET 请求不对数据进行修改&lt;/li&gt;
&lt;li&gt;不让第三方网站访问到 Cookie&lt;/li&gt;
&lt;li&gt;阻止第三方网站请求接口&lt;/li&gt;
&lt;li&gt;请求时附带验证信息，比如验证码或者 Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-DDOS-攻击&#34;&gt;&lt;a href=&#34;#3-DDOS-攻击&#34; class=&#34;headerlink&#34; title=&#34;#3. DDOS 攻击&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzMtZGRvcy0lRTYlOTQlQkIlRTUlODclQkI=&#34;&gt;#&lt;/span&gt;3. DDOS 攻击&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDOS 攻击，它在短时间内发起大量请求，耗尽服务器的资源，无法响应正常的访问，造成网站实质下线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防范 DDOS 的第一步，就是你要有一个备份网站，或者最低限度有一个临时主页。生产服务器万一下线了，可以立刻切换到备份网站，不至于毫无办法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;后端如何处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 请求的拦截，恶意请求都是从某个 IP 段发出的，那么把这个 IP 段封掉就行了。或者，它们的 User Agent 字段有特征（包含某个特定的词语），那就把带有这个词语的请求拦截。&lt;/li&gt;
&lt;li&gt;带宽扩容，或者使用 CDN&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="网络安全" scheme="https://dmqweb.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
        <category term="网络安全" scheme="https://dmqweb.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
        <updated>2024-05-23T08:47:30.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/21/electron/</id>
        <title>electron</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/21/electron/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Electron中preload模块最为重要，它的源码逻辑如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先electron中封装了c++模块对接node.js的addon模块,方法是：在头文件中标注了：#include &amp;lt;node&amp;#x2F;addon.h&amp;gt;&lt;/li&gt;
&lt;li&gt;此c++模块将app实例绑定(linkedBinding)到process上，app实例中有&lt;code&gt;exposeAPIInWorld&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;接着&lt;code&gt;contextBridge&lt;/code&gt;中的&lt;code&gt;expostInMainWorld&lt;/code&gt;方法返回的是&lt;code&gt;process.linkedBinding.exposeAPIInWorld&lt;/code&gt;方法。&lt;br&gt;&lt;img data-src=&#34;https://dmqweb.cn/images/Electron.pdf&#34; alt=&#34;Electron.pdf&#34;&gt;&lt;br&gt;&lt;a href=&#34;https://dmqweb.cn/images/Electron.pdf&#34;&gt;Electron pdf笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;最近有些忙，未完待续哈&#34;&gt;&lt;a href=&#34;#最近有些忙，未完待续哈&#34; class=&#34;headerlink&#34; title=&#34;最近有些忙，未完待续哈&#34;&gt;&lt;/a&gt;最近有些忙，未完待续哈&lt;/h1&gt;</content>
        <category term="electron" scheme="https://dmqweb.cn/categories/electron/" />
        <category term="electron" scheme="https://dmqweb.cn/tags/electron/" />
        <updated>2024-05-21T11:35:27.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
        <title>v8引擎编译原理</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;v8-执行-JS&#34;&gt;&lt;a href=&#34;#v8-执行-JS&#34; class=&#34;headerlink&#34; title=&#34;v8 执行 JS&#34;&gt;&lt;/a&gt;v8 执行 JS&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/images/image123.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;v8-引擎介绍&#34;&gt;&lt;a href=&#34;#v8-引擎介绍&#34; class=&#34;headerlink&#34; title=&#34;v8 引擎介绍&#34;&gt;&lt;/a&gt;v8 引擎介绍&lt;/h1&gt;&lt;p&gt;Blink 内核用于解析 HTML、DOM、CSS 渲染、嵌入了 v8 引擎用于解析 Javascript&lt;/p&gt;
&lt;p&gt;V8 是谷歌的开源高性能 JavaScript 和 WebAssembly 引擎，用 C++编写。它被用于 Chrome 和 Node.js 等。&lt;strong&gt;用于解析并执行 JavaScript 代码。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;执行过程&#34;&gt;&lt;a href=&#34;#执行过程&#34; class=&#34;headerlink&#34; title=&#34;执行过程&#34;&gt;&lt;/a&gt;执行过程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;初始化运行环境&lt;ul&gt;
&lt;li&gt;堆栈空间&lt;/li&gt;
&lt;li&gt;全局执行上下文&lt;/li&gt;
&lt;li&gt;全局作用域&lt;/li&gt;
&lt;li&gt;事件循环系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用 Scanner 扫描器将输入的代码词法分析成 tokens&lt;ul&gt;
&lt;li&gt;分析的结果就是一个个的 tokens 对象组成的数组&lt;/li&gt;
&lt;li&gt;分析的过程利用了有限自动状态机的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用 parser 解析器将 tokens 转化为抽象语法树&lt;ul&gt;
&lt;li&gt;根据分析 tokens 构造出一种树形关系结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预解析&lt;/strong&gt;：在 JS 代码执行之前对代码进行可选的预处理，用于提高执行效率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟解析&lt;/strong&gt;：只有代码执行到的部分才会去解析，节省了不必要的时间和开销，提高了 JavaScript 的执行效率，其中 vite 脚手架就是利用了这个优点（还有 esbuild 打包快的优势），提高了效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;ignation解释器&lt;/code&gt;将 AST（抽象语法树）转为字节码（不直接转为机器码？）&lt;ul&gt;
&lt;li&gt;当年v8以超越同行10倍的运行速度而备受青睐,其本质原因是当时v8将JS源码直接编译为机器码,使得首次运行速度和后续执行速度都很快,但也存在一个问题就是内存占用太大,并且编译时占用太多时间&lt;/li&gt;
&lt;li&gt;字节码使得v8能够很好的进行优化与反优化,当执行代码时,对机器码的存储和复用等操作时都十分繁琐(存储占用大,分析繁琐等),但是分析字节码就更加容易一些&lt;/li&gt;
&lt;li&gt;字节码跨平台能力强&lt;/li&gt;
&lt;li&gt;字节码更快的加载和解析执行&lt;/li&gt;
&lt;li&gt;动态优化易操作&lt;/li&gt;
&lt;li&gt;代码安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;TurboFan编译器&lt;/code&gt;将字节码转为 CPU 和 ARM 识别的机器码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v8-中的对象结构&#34;&gt;&lt;a href=&#34;#v8-中的对象结构&#34; class=&#34;headerlink&#34; title=&#34;v8 中的对象结构&#34;&gt;&lt;/a&gt;v8 中的对象结构&lt;/h1&gt;&lt;h3 id=&#34;常规属性和排序属性&#34;&gt;&lt;a href=&#34;#常规属性和排序属性&#34; class=&#34;headerlink&#34; title=&#34;常规属性和排序属性&#34;&gt;&lt;/a&gt;常规属性和排序属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;v8 中的对象主要分为三个指针构成的，分别是：隐藏类、常规属性和排序属性。&lt;/li&gt;
&lt;li&gt;对象的属性数字会从小到大排列，字符串会按照原创建顺序&lt;/li&gt;
&lt;li&gt;对象中数字属性被称为排序属性，字符串属性被称为常规属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快属性和慢属性&#34;&gt;&lt;a href=&#34;#快属性和慢属性&#34; class=&#34;headerlink&#34; title=&#34;快属性和慢属性&#34;&gt;&lt;/a&gt;快属性和慢属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JS 对象很多属性是在原型链上进行查找，这样就会很慢，v8 将部分常规属性（10 个）直接存储到对象本身（对象内属性），以提高属性的查询效率。&lt;/li&gt;
&lt;li&gt;快属性容量是 10 个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装、继承、多态&#34;&gt;&lt;a href=&#34;#封装、继承、多态&#34; class=&#34;headerlink&#34; title=&#34;封装、继承、多态&#34;&gt;&lt;/a&gt;封装、继承、多态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;封装就是将抽象出来的数据和对数据的操作封装在一起，数据在内部被保护，程序其他部分只有通过成员才能对数据进行操作&lt;/li&gt;
&lt;li&gt;继承：有原型链继承、寄生继承和 call、apply 借用法继承。&lt;/li&gt;
&lt;li&gt;多态就是函数重载：同一个函数可以根据调用的情况（参数类型和数量等）来进行不同的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;隐藏类&#34;&gt;&lt;a href=&#34;#隐藏类&#34; class=&#34;headerlink&#34; title=&#34;隐藏类&#34;&gt;&lt;/a&gt;隐藏类&lt;/h1&gt;&lt;p&gt;JavaScript 是一门动态语言，其各种不确定性导致 JavaScript 的执行效率要远低于静态语言，V8 为了提升 JavaScript 的执行效率，借鉴了很多静态语言的特性，比如：JIT 机制，为了加速运算而引入了内联缓存，为了提升对象的属性访问速度而引入了隐藏类。&lt;/p&gt;
&lt;p&gt;隐藏类是 V8 引擎在运行时自动生成和管理的数据结构，用于跟踪对象的属性和方法，相当于提前定义好对象的形状，以便于提高操作对象的效率。&lt;/p&gt;
&lt;h3 id=&#34;原因&#34;&gt;&lt;a href=&#34;#原因&#34; class=&#34;headerlink&#34; title=&#34;原因&#34;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当 JavaScript 运行时，例如查找对象上的某一个属性，V8 引擎会通过快慢属性去查找，整个过程非常耗时，因为 V8 在使用一个对象时，并不知道对象的具体形状（属性方法等）&lt;/li&gt;
&lt;li&gt;而 C++在声明一个对象前就需要定义该对象的结构，C++代码执行前是需要被编译的，编译时对象的结构就已经固定，也就是当代码执行时，对象的形状是无法改变&lt;/li&gt;
&lt;li&gt;所以 V8 引入了隐藏类的概念，用于跟踪对象的属性和方法以此在内存中快速查找对象属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;隐藏类就是把 JavaScript 的对象也进行静态化，&lt;code&gt;我们假设这个对象不会删除和新增&lt;/code&gt;，这样形状就固定了&lt;/p&gt;
&lt;p&gt;满足条件之后 V8 就会创建隐藏类，在这个隐藏类会创建对象的基础属性&lt;/p&gt;
&lt;p&gt;在 V8 引擎中，每个隐藏类都有一个编号（&lt;code&gt;map id&lt;/code&gt;），用于唯一标识该隐藏类&lt;/p&gt;
&lt;p&gt;举个例子，假设我们有以下两个对象：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let obj1 = &amp;#123; name: 1, age: 2 &amp;#125;;
let obj2 = &amp;#123; name: 1, age: 2, address: 3 &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这两个对象具有相同的形状，即都有属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，但&lt;code&gt;obj2&lt;/code&gt;还额外有一个属性&lt;code&gt;address&lt;/code&gt;。V8 会为它们生成两个不同的隐藏类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;// 隐藏类1：包含属性name和age
HiddenClass_1
├── map_id: 1
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]
├── transitions: &amp;#123;&amp;#125;
└── prototype: Object.prototype

// 隐藏类2：包含属性name、age和address
HiddenClass_2
├── map_id: 2
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;address&amp;#39;]
├── transitions:
│   ├── a: HiddenClass_1
│   ├── b: HiddenClass_1
│   └── c: null
└── prototype: Object.prototype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，隐藏类 1 包含属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，没有过渡表；而隐藏类 2 包含属性&lt;code&gt;name&lt;/code&gt;、&lt;code&gt;age&lt;/code&gt;和&lt;code&gt;address&lt;/code&gt;，其中属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;的过渡表指向隐藏类 1，属性&lt;code&gt;address&lt;/code&gt;没有过渡表，表示该属性是新添加的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果两个对象属性一样呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果两个对象具有相同的属性，它们将共享同一个隐藏类。具体来说，当两个对象的属性顺序和类型都相同时，V8 会为它们生成一个共享的隐藏类。&lt;/p&gt;
&lt;p&gt;举个例子，假设我们有以下两个对象：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;let obj1 = &amp;#123; name: 1, age: 2 &amp;#125;;
let obj2 = &amp;#123; name: 1, age: 2 &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这两个对象具有相同的形状，即都有属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，且属性的顺序和类型完全一致。V8 会为它们生成一个共享的隐藏类，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;HiddenClass_1
├── map_id: 1
├── property_names: [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]
├── transitions: &amp;#123;&amp;#125;
└── prototype: Object.prototype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，隐藏类 1 包含属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;，没有过渡表，而且两个对象都&lt;code&gt;共享&lt;/code&gt;这个隐藏类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种共享隐藏类的机制可以节省内存空间，因为不同的对象可以共享相同的隐藏类结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-05-28_21-49-19.png&#34; alt=&#34;JavaScript隐藏类机制&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;v8引擎垃圾回收&#34;&gt;&lt;a href=&#34;#v8引擎垃圾回收&#34; class=&#34;headerlink&#34; title=&#34;v8引擎垃圾回收&#34;&gt;&lt;/a&gt;v8引擎垃圾回收&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先垃圾回收机制是对于&lt;code&gt;引用数据类型而言的&lt;/code&gt;,普通数据类型由于不知道后续是否会引用某个变量导致不能轻易将变量进行销毁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;标记清除法&#34;&gt;&lt;a href=&#34;#标记清除法&#34; class=&#34;headerlink&#34; title=&#34;标记清除法&#34;&gt;&lt;/a&gt;标记清除法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;标记清除法是目前在JS引擎中最常用的算法,该算法分为&lt;code&gt;标记&lt;/code&gt;和&lt;code&gt;清除&lt;/code&gt;两个阶段,标记阶段将所有&lt;code&gt;活动对象做上标记&lt;/code&gt;,默认标记为0,清除阶段将&lt;code&gt;没有标记的活动对象进行清除&lt;/code&gt;,也就是销毁掉标记为0的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点: 实现简单&lt;/li&gt;
&lt;li&gt;缺点: 清除之后由于剩余对象的内存位置不变,就会出现&lt;code&gt;内存碎片&lt;/code&gt;,这时候为了分配到合适的位置就要进行内存利用的算法判断,&lt;code&gt;导致分配效率慢&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引用计数法&#34;&gt;&lt;a href=&#34;#引用计数法&#34; class=&#34;headerlink&#34; title=&#34;引用计数法&#34;&gt;&lt;/a&gt;引用计数法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;引用计数法的策略是跟踪每个对象被使用的次数,当对象被其他变量引用时,它的&lt;code&gt;引用次数就会加1&lt;/code&gt;,引用次数为0就表示没有变量在使用它,就可以将其清除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点: 清晰,并且可以立即回收垃圾&lt;/li&gt;
&lt;li&gt;缺点: 需要一个计数器,同时计数器需要占很大的位置,因为&lt;code&gt;引用数量的上限可能会很大&lt;/code&gt;,同时最重要的是无法解决&lt;code&gt;循环引用而无法回收的问题&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分代式垃圾回收&#34;&gt;&lt;a href=&#34;#分代式垃圾回收&#34; class=&#34;headerlink&#34; title=&#34;分代式垃圾回收&#34;&gt;&lt;/a&gt;分代式垃圾回收&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;V8 中将堆内存分为新生代和老生代两区域，采用不同的策略管理垃圾回收&lt;br&gt;新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量，而老生代的对象为存活事件较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;新生代&#34;&gt;&lt;a href=&#34;#新生代&#34; class=&#34;headerlink&#34; title=&#34;新生代&#34;&gt;&lt;/a&gt;新生代&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;新生代堆内存一分为二:&lt;code&gt;使用区&lt;/code&gt;和&lt;code&gt;空闲区&lt;/code&gt;,新加入的对象就会放在使用区,当&lt;code&gt;使用区快写满时,就开始进行垃圾回收&lt;/code&gt;，新生代垃圾回收器会对使用区中的&lt;code&gt;活动对象做标记&lt;/code&gt;，标记完成之后&lt;code&gt;将使用区的 活动对象 复制进空闲区&lt;/code&gt;并进行排序，随后进入垃圾清理阶段，即&lt;code&gt;将非活动对象占用的空间清理掉&lt;/code&gt;。最后&lt;code&gt;进行角色互换&lt;/code&gt;，把原来的使用区变成空闲区，把原来的空闲区变成使用区.当一个对象经过&lt;code&gt;多次复制后依然存活&lt;/code&gt;，它将会被认为是生命周期较长的对象，随后&lt;code&gt;会被移动到老生代中&lt;/code&gt;，采用老生代的垃圾回收策略进行管理&lt;br&gt;另外还有一种情况，如果复制一个对象到空闲区时，空闲区空间占用超过了 25%，那么这个对象会被直接晋升到老生代空间中&lt;br&gt;新生代采用复制方式的原因是因为:新生代中的大多数对象都是很快变为垃圾(需要进行清除),如果直接原地清除就要频繁清理对象,&lt;code&gt;只复制活动对象到空闲区之后就可以直接清除整个使用区&lt;/code&gt;,提高了清除效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;老生代&#34;&gt;&lt;a href=&#34;#老生代&#34; class=&#34;headerlink&#34; title=&#34;老生代&#34;&gt;&lt;/a&gt;老生代&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;对于大多数占用空间大、存活时间长的对象会被分配到老生代里，因为老生代中的对象通常比较大，如果再如新生代一般分区然后复制来复制去就会非常耗时，从而导致回收执行效率不高，所以老生代垃圾回收器来管理其垃圾回收执行，它的整个流程就采用的就是&lt;code&gt;标记清除法&lt;/code&gt;了&lt;br&gt;而标记清除法造成的&lt;code&gt;内存碎片问题&lt;/code&gt;采用标记整理算法进行优化.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;分代式机制把一些新、小、存活时间短的对象作为新生代，采用一小块内存频率较高的快速清理，而一些大、老、存活时间长的对象作为老生代，使其很少接受检查，&lt;code&gt;新老生代的回收机制及频率是不同的&lt;/code&gt;，可以说此机制的出现很大程度&lt;code&gt;提高了垃圾回收机制的效率&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;并行回收&#34;&gt;&lt;a href=&#34;#并行回收&#34; class=&#34;headerlink&#34; title=&#34;并行回收&#34;&gt;&lt;/a&gt;并行回收&lt;/h3&gt;&lt;p&gt;新生代对象空间采用并行策略,在执行垃圾回收时,会启动多个线程来负责垃圾清理,以此增加效率&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;并行和并发: 并发是:一个处理器同时处理多个任务(并发是逻辑上同时发生),并行是:多个处理器同时处理多个不同任务(并行是物理上同时发生)&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="v8引擎编译原理" scheme="https://dmqweb.cn/categories/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" />
        <category term="v8引擎" scheme="https://dmqweb.cn/tags/v8%E5%BC%95%E6%93%8E/" />
        <category term="底层原理" scheme="https://dmqweb.cn/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/" />
        <updated>2024-05-21T10:36:10.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/</id>
        <title>Blob、File和FileReader</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/"/>
        <content type="html">&lt;h1 id=&#34;Blob&#34;&gt;&lt;a href=&#34;#Blob&#34; class=&#34;headerlink&#34; title=&#34;Blob&#34;&gt;&lt;/a&gt;Blob&lt;/h1&gt;&lt;p&gt;Blob的全称为：binary larget object（二进制大对象），blob的本质是一个js对象，里面可以存储大量的二进制编码的数据。&lt;/p&gt;
&lt;h3 id=&#34;特点：&#34;&gt;&lt;a href=&#34;#特点：&#34; class=&#34;headerlink&#34; title=&#34;特点：&#34;&gt;&lt;/a&gt;特点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不可修改&lt;/li&gt;
&lt;li&gt;只能使用FileReader读取内容&lt;/li&gt;
&lt;li&gt;存储大量二进制数据的 js 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用：&#34;&gt;&lt;a href=&#34;#使用：&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;new Blob(array,options)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;array是由ArrayBuffer、ArrayBufferView、Blob和DOMString对象构成的，将对被放进blob中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;options配置项有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type：默认值为：” “，表示将会被放入到blob中的数组内容的MIME类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;endings：默认值为：”transparent“，用于指定包含行结束符\n的字符串如何被写入，不常用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MIME类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;plain&lt;/td&gt;
&lt;td&gt;纯文本文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;html&lt;/td&gt;
&lt;td&gt;HTML文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;javascript&lt;/td&gt;
&lt;td&gt;JavaScript文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&amp;#x2F;css&lt;/td&gt;
&lt;td&gt;CSS文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;json&lt;/td&gt;
&lt;td&gt;JSON文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;pdf&lt;/td&gt;
&lt;td&gt;pdf文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&amp;#x2F;xml&lt;/td&gt;
&lt;td&gt;XML文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;jpeg&lt;/td&gt;
&lt;td&gt;JPEG文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;png&lt;/td&gt;
&lt;td&gt;PNG文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;gif&lt;/td&gt;
&lt;td&gt;GIF文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&amp;#x2F;svg+xml&lt;/td&gt;
&lt;td&gt;SVG+XML文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio&amp;#x2F;mpeg&lt;/td&gt;
&lt;td&gt;MP3文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video&amp;#x2F;mpeg&lt;/td&gt;
&lt;td&gt;MP4文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分片：&#34;&gt;&lt;a href=&#34;#分片：&#34; class=&#34;headerlink&#34; title=&#34;分片：&#34;&gt;&lt;/a&gt;分片：&lt;/h3&gt;&lt;p&gt;Blob 对象内置了 slice() 方法用来将 blob 对象分片&lt;/p&gt;
&lt;p&gt;其有三个参数：&lt;/p&gt;
&lt;p&gt;start：设置切片的起点，即切片开始位置。默认值为 0，这意味着切片应该从第一个字节开始；&lt;/p&gt;
&lt;p&gt;end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为blob.size；&lt;/p&gt;
&lt;p&gt;contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
let blob1 = blob.slice(0,2,&amp;quot;text/plain&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;读取：&#34;&gt;&lt;a href=&#34;#读取：&#34; class=&#34;headerlink&#34; title=&#34;读取：&#34;&gt;&lt;/a&gt;读取：&lt;/h3&gt;&lt;p&gt;blob对象只能通过FileReader读取内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let blob = new Blob([&amp;#39;hello world&amp;#39;],&amp;#123;type:&amp;quot;text/plain&amp;quot;&amp;#125;);
let reader = new fileReader();
reader.readAsText(blob);
console.log(reader.result);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;File&#34;&gt;&lt;a href=&#34;#File&#34; class=&#34;headerlink&#34; title=&#34;File&#34;&gt;&lt;/a&gt;File&lt;/h1&gt;&lt;h3 id=&#34;介绍：&#34;&gt;&lt;a href=&#34;#介绍：&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;File对象是特殊的Blob对象。是基于Blob对象的进一步封装，js中主要有两种方式获得FIle对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;input元素选择后返回的FileList对象（通过change事件的event.target.files获取）&lt;/li&gt;
&lt;li&gt;文件拖放操作生成的DataTransfer对象（通过ondrop事件的event.dataTransfer.files获取）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FileReader&#34;&gt;&lt;a href=&#34;#FileReader&#34; class=&#34;headerlink&#34; title=&#34;FileReader&#34;&gt;&lt;/a&gt;FileReader&lt;/h1&gt;&lt;h3 id=&#34;介绍：-1&#34;&gt;&lt;a href=&#34;#介绍：-1&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;FileReader用于读取Blob对象（包含File对象）内容的方法，通过result属性获取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;readAsArrayBuffer方法：读取为ArrayBuffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsDataURL方法：读取为data:URL的Base64字符串表示文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsText方法：读取为原始text文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readAsBinaryString方法：读取为原始二进制数据&lt;/p&gt;
&lt;p&gt;但是直接使用此方法还是会得到原始的文本内容，因为二进制数据需要使用ArrayBuffer对象来进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ArrayBuffer&#34;&gt;&lt;a href=&#34;#ArrayBuffer&#34; class=&#34;headerlink&#34; title=&#34;ArrayBuffer&#34;&gt;&lt;/a&gt;ArrayBuffer&lt;/h1&gt;&lt;h3 id=&#34;介绍：-2&#34;&gt;&lt;a href=&#34;#介绍：-2&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;ArrayBuffer可以理解为一个特殊的数组，其本身是一个黑盒，不能直接读写所存储的数据，需要借助视图对象来读写。它只是一个用于存储二进制数据的缓冲区，创建时只能传一个空间大小biteLength。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读写ArrayBuffer的方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TypedArray&lt;/li&gt;
&lt;li&gt;DataView&lt;/li&gt;
&lt;li&gt;TextDecoder&lt;/li&gt;
&lt;li&gt;用Blob存储，然后用FileReader读写&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法：&#34;&gt;&lt;a href=&#34;#方法：&#34; class=&#34;headerlink&#34; title=&#34;方法：&#34;&gt;&lt;/a&gt;方法：&lt;/h3&gt;&lt;p&gt;ArrayBuffer提供了一个slice方法用于切片。参数为：开始位置，结束位置和解析类型。&lt;/p&gt;
&lt;h3 id=&#34;使用：-1&#34;&gt;&lt;a href=&#34;#使用：-1&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const buffer = new ArrayBuffer(32);
buffer.slice(0,4,&amp;#39;text/plain&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;TypedArray&#34;&gt;&lt;a href=&#34;#TypedArray&#34; class=&#34;headerlink&#34; title=&#34;TypedArray&#34;&gt;&lt;/a&gt;TypedArray&lt;/h1&gt;&lt;p&gt;TypedArray只是一个概念，提供了一种机制来解读ArrayBuffer中的数据（相当于一个视图，将ArrayBuffer中的数据进行展示和操作），实际上是那九个类型对象（每个类型对应一个特定的数据类型和大小）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int8Array&lt;/code&gt;：8位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint8Array&lt;/code&gt;：8位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int16Array&lt;/code&gt;：16位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint16Array&lt;/code&gt;：16位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int32Array&lt;/code&gt;：32位有符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uint32Array&lt;/code&gt;：32位无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float32Array&lt;/code&gt;：32位浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float64Array&lt;/code&gt;：64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用：-2&#34;&gt;&lt;a href=&#34;#使用：-2&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const buffer = new ArrayBuffer(32);
const slice = buffer.slice(0,4,&amp;#39;text/plain&amp;#39;);
const sliceView = new Int8Array(slice);
sliceView.set([10,20,30]);
sliceView.forEach((value,index)=&amp;gt;&amp;#123;
    console.log(value,index);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;DataView&#34;&gt;&lt;a href=&#34;#DataView&#34; class=&#34;headerlink&#34; title=&#34;DataView&#34;&gt;&lt;/a&gt;DataView&lt;/h1&gt;&lt;h3 id=&#34;读取：-1&#34;&gt;&lt;a href=&#34;#读取：-1&#34; class=&#34;headerlink&#34; title=&#34;读取：&#34;&gt;&lt;/a&gt;读取：&lt;/h3&gt;&lt;p&gt;DataView数据视图可以用于读写buffer,DataView实例提供了许多方法来读取内存，他们呢的参数都是一个字节序号。表示开始读取的字节位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getInt8：读取1个字节，返回一个8位整数&lt;/li&gt;
&lt;li&gt;getUint8：读取1个字节，返回一个无符号8位整数&lt;/li&gt;
&lt;li&gt;getInt16：读取2个字节，返回一个16位整数&lt;/li&gt;
&lt;li&gt;getUnit16：读取2个字节，返回一个无符号16位整数&lt;/li&gt;
&lt;li&gt;getInt32：读取4个字节，返回一个32位整数&lt;/li&gt;
&lt;li&gt;getUnit32：读取4个字节，返回一个无符号32位整数&lt;/li&gt;
&lt;li&gt;getFloat32：读取4个字节，返回一个32位浮点数&lt;/li&gt;
&lt;li&gt;getUnit64：读取8个字节，返回一个64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写入：&#34;&gt;&lt;a href=&#34;#写入：&#34; class=&#34;headerlink&#34; title=&#34;写入：&#34;&gt;&lt;/a&gt;写入：&lt;/h3&gt;&lt;p&gt;DataView实例提供以下方法写入内存，他们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setInt8：写入1个字节的8位整数&lt;/li&gt;
&lt;li&gt;setUint8：写入1个字节的8位无符号整数&lt;/li&gt;
&lt;li&gt;setInt16：写入2个字节的16位整数&lt;/li&gt;
&lt;li&gt;setUint16：写入2个字节的16位无符号整数&lt;/li&gt;
&lt;li&gt;setInt32：写入4个字节的32位整数&lt;/li&gt;
&lt;li&gt;setUnit32：写入4个字节的32位无符号整数&lt;/li&gt;
&lt;li&gt;setFloat32：写入4个字节的32位浮点数&lt;/li&gt;
&lt;li&gt;setFloat64：写入8个自己的64位浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Object-URL&#34;&gt;&lt;a href=&#34;#Object-URL&#34; class=&#34;headerlink&#34; title=&#34;Object URL&#34;&gt;&lt;/a&gt;Object URL&lt;/h1&gt;&lt;p&gt;Object URL是一个用于表示File Object或者Blob Object的URL，可以将&lt;strong&gt;Blob对象（包括File对象）&lt;/strong&gt;变为一个URL地址。&lt;/p&gt;
&lt;h3 id=&#34;使用：-3&#34;&gt;&lt;a href=&#34;#使用：-3&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;使用URL.createObjectURL来创建。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const blob = new Blob([&amp;#39;你好世界&amp;#39;],&amp;#123;type:&amp;#39;text/plain&amp;#39;&amp;#125;);
const newUrl = URL.createObjectURL(blob);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;base64编码&#34;&gt;&lt;a href=&#34;#base64编码&#34; class=&#34;headerlink&#34; title=&#34;base64编码&#34;&gt;&lt;/a&gt;base64编码&lt;/h1&gt;&lt;h3 id=&#34;介绍：-3&#34;&gt;&lt;a href=&#34;#介绍：-3&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;base64是一个保存二进制数据的工具，将多种形式的二进制数据或其构成的文件&lt;strong&gt;以ASCII的形式保存&lt;/strong&gt;，因为很多地方不支持直接的二进制文件保存或呈现，比如可以将图片直接转换成base64码嵌入HTML文档中，而避免使用网络http加载图片。另外，将数据编码为 base64 进行传输，然后解码获得数据，可以一定程度上保证数据的完整并且不用在传输过程中修改这些数据，避免在传输过程中可能出现的问题；&lt;/p&gt;
&lt;h3 id=&#34;组成：&#34;&gt;&lt;a href=&#34;#组成：&#34; class=&#34;headerlink&#34; title=&#34;组成：&#34;&gt;&lt;/a&gt;组成：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;A-Z a-z 0-9 + /&lt;/code&gt; 共64个字符组成;&lt;/p&gt;
&lt;h3 id=&#34;使用：-4&#34;&gt;&lt;a href=&#34;#使用：-4&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;p&gt;JS中有两个函数用于base64格式（ASCII码）的转换:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;btoa()：编码（Binary To ASCII  二进制转ASCII）&lt;/p&gt;
&lt;p&gt;该函数用于将二进制转为Base64字符串（ASCII码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;atob()：解码（ASCII To Binary  ASCII码转二进制）&lt;/p&gt;
&lt;p&gt;该函数用于将Base64字符串（ASCII码）解码为二进制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意：&#34;&gt;&lt;a href=&#34;#注意：&#34; class=&#34;headerlink&#34; title=&#34;注意：&#34;&gt;&lt;/a&gt;注意：&lt;/h3&gt;&lt;p&gt;btoa和atob方法有个弊端就是只能处理拉丁字符集内的字符，其不包括中文或非西欧语言的字符（&lt;strong&gt;只能处理单字节字符&lt;/strong&gt;）。要处理多字节字符需要使用TextEncoder API将字符串转为Uint8Array，然后手动将这些字节转为一个字符串（String.fromCharCode）。&lt;/p&gt;
&lt;h1 id=&#34;TextEncoder&#34;&gt;&lt;a href=&#34;#TextEncoder&#34; class=&#34;headerlink&#34; title=&#34;TextEncoder&#34;&gt;&lt;/a&gt;TextEncoder&lt;/h1&gt;&lt;h3 id=&#34;介绍：-4&#34;&gt;&lt;a href=&#34;#介绍：-4&#34; class=&#34;headerlink&#34; title=&#34;介绍：&#34;&gt;&lt;/a&gt;介绍：&lt;/h3&gt;&lt;p&gt;TextEncoder构造函数创建一个编码器，encode方法用于将字符串编码为一个UTF-8编码文本的Uint8Array视图。&lt;/p&gt;
&lt;h3 id=&#34;使用：-5&#34;&gt;&lt;a href=&#34;#使用：-5&#34; class=&#34;headerlink&#34; title=&#34;使用：&#34;&gt;&lt;/a&gt;使用：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const encoder = new TextEncoder();
const view = encoder.encode(&amp;quot;$&amp;quot;);
console.log(view)
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Blob" scheme="https://dmqweb.cn/categories/Blob/" />
        <category term="Blob" scheme="https://dmqweb.cn/tags/Blob/" />
        <category term="FileReader" scheme="https://dmqweb.cn/tags/FileReader/" />
        <updated>2024-05-17T02:22:13.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/17/esbuild/</id>
        <title>esbuild</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/17/esbuild/"/>
        <content type="html">&lt;p&gt;关于打包工具：esbuild、webpack和rollup三者的介绍推荐&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI0MDk4NDIyOTM5MjU0ODIx&#34;&gt;这里&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;简单来说就是esbuild打包更快；rollup打包产物更纯净、体积更小，但不支持热更新；webpack功能更全，生态更完善，支持文件类型更多。&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Esbuild是一个类webpack的打包工具，速度是webpack的几十倍。其底层基于go语言进行编写，不使用AST，优化了构建流程。js是单线程串行，esbuild是新开了一个进程，使用多线程并行，充分发挥了多核的优势。&lt;/p&gt;
&lt;h1 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;esbuild最显著的作用就是：快。它也是vite和snowpack底层的打包工具。同时也可以将esbuild打包工具集成到webpack中（使用plugin）。之所以esbuild没有流行起来是因为它绕过了AST，而直接进行构建，使没有很好的过渡到基于babel-loader这样通过AST进行打包的上层工具中。&lt;/p&gt;
&lt;h1 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const esbuild = require(&amp;#39;esbuild&amp;#39;);
/**
 * 利用esbuild生成文件
 */
esbuild.buildSync(&amp;#123;
    entryPoints:[&amp;#39;vite.config.js&amp;#39;],
    outfile: &amp;#39;out.js&amp;#39;
&amp;#125;)
/**
 * 利用esbuild处理jsx语法
 */
console.log(
    esbuild.transformSync(&amp;#39;&amp;lt;div&amp;gt;利用esbuild处理jsx语法&amp;lt;/div&amp;gt;&amp;#39;,&amp;#123;
        jsxFragment:&amp;#39;Fragment&amp;#39;,
        loader:&amp;#39;jsx&amp;#39;
    &amp;#125;)
);
/**
 * 利用esbuld压缩代码体积
 */
console.log(
    esbuild.transformSync(&amp;#39;const a = &amp;quot;你好世界&amp;quot;&amp;#39;,&amp;#123;
        minify: true
    &amp;#125;)
);
/**
 * esbuild内置了一些loader，使用时会根据文件后缀自动执行loader，也可以手动确定loader
 * 支持：js,jsx,ts,tsx,css,text,binary,dataurl,file
 */
console.log(
    esbuild.buildSync(&amp;#123;
        entryPoints: [&amp;#39;vite.config.js&amp;#39;],
        bundle:true,
        loader: &amp;#123;&amp;#39;.js&amp;#39;:&amp;#39;jsx&amp;#39;&amp;#125;, //默认使用js loader，手动改为jsx-loader
        outfile: &amp;#39;out.js&amp;#39;,
    &amp;#125;)
);
/**
 * 使用esbuild启动一个web server用于调试（热更新）
 */
esbuild.serve(&amp;#123;&amp;#125;,&amp;#123;
    entryPoints: [&amp;#39;vite.config.js&amp;#39;],
    bundle: true,
    outfile: &amp;#39;bundle.js&amp;#39;,
&amp;#125;).then(serve=&amp;gt;&amp;#123;
    serve.stop();
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="esbuild" scheme="https://dmqweb.cn/categories/esbuild/" />
        <category term="esbuild" scheme="https://dmqweb.cn/tags/esbuild/" />
        <category term="打包工具" scheme="https://dmqweb.cn/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/" />
        <updated>2024-05-17T01:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
        <title>eslint源码</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;eslint知识点&#34;&gt;&lt;a href=&#34;#eslint知识点&#34; class=&#34;headerlink&#34; title=&#34;eslint知识点&#34;&gt;&lt;/a&gt;eslint知识点&lt;/h1&gt;&lt;h3 id=&#34;extends与plugins&#34;&gt;&lt;a href=&#34;#extends与plugins&#34; class=&#34;headerlink&#34; title=&#34;extends与plugins&#34;&gt;&lt;/a&gt;extends与plugins&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;plugins本质是为了加强eslint的扩展性，使我们可以直接使用别人写好的eslint规则，方便快速用于项目中。&lt;/li&gt;
&lt;li&gt;官方规定npm包的扩展必须以eslint-config-开头，插件以eslint-plugin-开头，在使用过程中可以省略这个开头。&lt;/li&gt;
&lt;li&gt;eslint-config-文件是我们共享的一些配置文件，里面就是一个JS对象，其中包含一些配置信息，而eslint-plugin-文件是我们自定义的集合规则，可以导入和使用。&lt;/li&gt;
&lt;li&gt;一个插件能带来：&lt;ul&gt;
&lt;li&gt;额外的规则，如&lt;code&gt;&amp;#123;&amp;quot;rules&amp;quot;: &amp;#123;&amp;quot;react/boolean-prop-naming&amp;quot;: &amp;quot;warning&amp;quot;&amp;#125;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;环境，如&lt;code&gt;&amp;#123;&amp;quot;env&amp;quot;: &amp;#123;&amp;quot;jest/global&amp;quot;: true&amp;#125;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;配置，如&lt;code&gt;&amp;#123;&amp;quot;extends&amp;quot;: [&amp;quot;plugin:react/recommended&amp;quot;]&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;预处理器，如&lt;code&gt;&amp;#123;&amp;quot;process&amp;quot;: &amp;quot;a-plugin/a-processor&amp;quot;&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;eslint配置大全&#34;&gt;&lt;a href=&#34;#eslint配置大全&#34; class=&#34;headerlink&#34; title=&#34;eslint配置大全&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODU5NDg4MjkyODcx&#34;&gt;eslint配置大全&lt;/span&gt;&lt;/h1&gt;&lt;h1 id=&#34;eslint源码分析&#34;&gt;&lt;a href=&#34;#eslint源码分析&#34; class=&#34;headerlink&#34; title=&#34;eslint源码分析&#34;&gt;&lt;/a&gt;eslint源码分析&lt;/h1&gt;</content>
        <category term="eslint" scheme="https://dmqweb.cn/categories/eslint/" />
        <category term="eslint" scheme="https://dmqweb.cn/tags/eslint/" />
        <category term="源码" scheme="https://dmqweb.cn/tags/%E6%BA%90%E7%A0%81/" />
        <updated>2024-05-17T01:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/</id>
        <title>whistle抓包</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;whistle简单使用&#34;&gt;&lt;a href=&#34;#whistle简单使用&#34; class=&#34;headerlink&#34; title=&#34;whistle简单使用&#34;&gt;&lt;/a&gt;whistle简单使用&lt;/h1&gt;&lt;h3 id=&#34;whistle安装启动&#34;&gt;&lt;a href=&#34;#whistle安装启动&#34; class=&#34;headerlink&#34; title=&#34;whistle安装启动&#34;&gt;&lt;/a&gt;whistle安装启动&lt;/h3&gt;&lt;p&gt;安装：npm i -g whistle&lt;/p&gt;
&lt;p&gt;使用：w2 start&lt;/p&gt;
&lt;p&gt;访问：访问对应的页面&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何的链接都会经过工具转发一下，并记录下来&lt;/li&gt;
&lt;li&gt;使用前需要配置代理到whistle服务的地址和端口上（设置代理如下）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用步骤&#34;&gt;&lt;a href=&#34;#使用步骤&#34; class=&#34;headerlink&#34; title=&#34;使用步骤&#34;&gt;&lt;/a&gt;使用步骤&lt;/h3&gt;&lt;p&gt;设置代理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机端省略&lt;/li&gt;
&lt;li&gt;电脑端：&lt;ul&gt;
&lt;li&gt;网络偏好设置—高级—代理—网页代理、安全网页代理&lt;/li&gt;
&lt;li&gt;配置代理的ip地址和端口号（8899）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确认证书：&lt;/p&gt;
&lt;p&gt;一般会自动下载，也可以打开8899端口找到证书下载并确认信任&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看抓包情况和设置代理转发：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开127.0.0.1:8899端口进行设置&lt;/p&gt;
&lt;h1 id=&#34;whistle高级&#34;&gt;&lt;a href=&#34;#whistle高级&#34; class=&#34;headerlink&#34; title=&#34;whistle高级&#34;&gt;&lt;/a&gt;whistle高级&lt;/h1&gt;&lt;h3 id=&#34;mock数据&#34;&gt;&lt;a href=&#34;#mock数据&#34; class=&#34;headerlink&#34; title=&#34;mock数据&#34;&gt;&lt;/a&gt;mock数据&lt;/h3&gt;&lt;p&gt;设置线上地址转发到本地json文件（使用file路径），模拟请求数据。&lt;/p&gt;
&lt;h3 id=&#34;部分文件请求转发（重要）&#34;&gt;&lt;a href=&#34;#部分文件请求转发（重要）&#34; class=&#34;headerlink&#34; title=&#34;部分文件请求转发（重要）&#34;&gt;&lt;/a&gt;部分文件请求转发（重要）&lt;/h3&gt;&lt;p&gt;例如线上环境有某个文件报错，生产环境无法复现，可以将该文件地址转发到本地的js文件（使用file路径），方便进行调试，提高调试效率。&lt;/p&gt;
&lt;h3 id=&#34;请求转发&#34;&gt;&lt;a href=&#34;#请求转发&#34; class=&#34;headerlink&#34; title=&#34;请求转发&#34;&gt;&lt;/a&gt;请求转发&lt;/h3&gt;&lt;p&gt;可以作为跨域的一种方案，将本地的请求转发到线上的路径，这样就不会发生跨域问题&lt;/p&gt;
&lt;h3 id=&#34;注入html、css和-js&#34;&gt;&lt;a href=&#34;#注入html、css和-js&#34; class=&#34;headerlink&#34; title=&#34;注入html、css和 js&#34;&gt;&lt;/a&gt;注入html、css和 js&lt;/h3&gt;&lt;p&gt;whistle会自动根据响应内容的类型，判断是否注入相应的文本以及如何注入（是否用标签包裹）&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://www.baidu.com  css:///Users/dmq/Desktop/test.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这将会在百度的官网注入自定义的css样式。&lt;/p&gt;
&lt;h6 id=&#34;举例：&#34;&gt;&lt;a href=&#34;#举例：&#34; class=&#34;headerlink&#34; title=&#34;举例：&#34;&gt;&lt;/a&gt;举例：&lt;/h6&gt;&lt;p&gt;向百度网站注入vconsole.js源码，方便调试打印日志。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载vconsole到本地或者直接复制源码到whistle中的values中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地js文件创建VConsole实例，或者直接在whistle的values中创建js文件，文件中创建vconsole实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在rules中向百度网站注入两个js文件（以whistle中配置values为示例）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;www.baidu.com  jsPrepend://&amp;#123;vConsole.min.js&amp;#125;  #引入源码
www.baidu.com  jsPrepend://&amp;#123;vconsole.js&amp;#125;  #引入实例化js
www.baidu.com  log://  #在whistle中也打印log
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;同步抓包日志&#34;&gt;&lt;a href=&#34;#同步抓包日志&#34; class=&#34;headerlink&#34; title=&#34;同步抓包日志&#34;&gt;&lt;/a&gt;同步抓包日志&lt;/h3&gt;&lt;p&gt;在rules中配置网站的输出，可以将抓包的log日志同步到whistle中的log面板，配置例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;www.baidu.com   log:// #同步日志
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;解决跨域问题&#34;&gt;&lt;a href=&#34;#解决跨域问题&#34; class=&#34;headerlink&#34; title=&#34;解决跨域问题&#34;&gt;&lt;/a&gt;解决跨域问题&lt;/h3&gt;&lt;p&gt;可以单独设置网站允许跨域访问，例如在rules中配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://localhost:5500/list   resCors://*  #表示该网站允许跨域访问
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者使用前端转发代理来处理跨域：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;https://localhost:8080/list   https://localhost:5500/list  
#将请求的网址代理到同域名同端口的网址，就不会发生跨域。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NTc3NjU1L2FydGljbGUvZGV0YWlscy8xMTkyODMwMjg=&#34;&gt;本文学习自b站，原文档地址&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="whistle" scheme="https://dmqweb.cn/categories/whistle/" />
        <category term="whistle" scheme="https://dmqweb.cn/tags/whistle/" />
        <category term="抓包工具" scheme="https://dmqweb.cn/tags/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/" />
        <updated>2024-05-17T01:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
        <title>性能指标</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
        <content type="html">&lt;h1 id=&#34;常见浏览器性能指标&#34;&gt;&lt;a href=&#34;#常见浏览器性能指标&#34; class=&#34;headerlink&#34; title=&#34;常见浏览器性能指标&#34;&gt;&lt;/a&gt;常见浏览器性能指标&lt;/h1&gt;&lt;h1 id=&#34;TTFB-Time-To-First-Byte&#34;&gt;&lt;a href=&#34;#TTFB-Time-To-First-Byte&#34; class=&#34;headerlink&#34; title=&#34;TTFB(Time To First Byte)&#34;&gt;&lt;/a&gt;TTFB(Time To First Byte)&lt;/h1&gt;&lt;p&gt;发出页面请求到接收到应答数据第一个字节的时间总和，包含了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS解析时间&lt;/li&gt;
&lt;li&gt;TCP链接时间&lt;/li&gt;
&lt;li&gt;发送HTTP请求时间&lt;/li&gt;
&lt;li&gt;获得响应消息第一个字节的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FP（First-Paint）&#34;&gt;&lt;a href=&#34;#FP（First-Paint）&#34; class=&#34;headerlink&#34; title=&#34;FP（First Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FP&lt;/strong&gt;（First Paint）&lt;/h1&gt;&lt;p&gt;首次绘制时间，这个指标用于记录页面第一次绘制像素的时间。&lt;/p&gt;
&lt;h1 id=&#34;FCP（First-Contentful-Paint）&#34;&gt;&lt;a href=&#34;#FCP（First-Contentful-Paint）&#34; class=&#34;headerlink&#34; title=&#34;FCP（First Contentful Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FCP&lt;/strong&gt;（First Contentful Paint）&lt;/h1&gt;&lt;p&gt;首次内容绘制时间，这个指标用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。&lt;/p&gt;
&lt;h1 id=&#34;LCP（Largest-Contentful-Paint）&#34;&gt;&lt;a href=&#34;#LCP（Largest-Contentful-Paint）&#34; class=&#34;headerlink&#34; title=&#34;LCP（Largest Contentful Paint）&#34;&gt;&lt;/a&gt;&lt;strong&gt;LCP&lt;/strong&gt;（Largest Contentful Paint）&lt;/h1&gt;&lt;p&gt;最大内容绘制时间，用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。&lt;/p&gt;
&lt;h1 id=&#34;CLS（Cumulative-Layout-Shift）&#34;&gt;&lt;a href=&#34;#CLS（Cumulative-Layout-Shift）&#34; class=&#34;headerlink&#34; title=&#34;CLS（Cumulative Layout Shift）&#34;&gt;&lt;/a&gt;&lt;strong&gt;CLS&lt;/strong&gt;（Cumulative Layout Shift）&lt;/h1&gt;&lt;p&gt;累计位移偏移，记录了页面上非预期的位移波动。计算方式为：位移影响的面积 * 位移距离。&lt;/p&gt;
&lt;h1 id=&#34;TTI（Time-to-Interactive）&#34;&gt;&lt;a href=&#34;#TTI（Time-to-Interactive）&#34; class=&#34;headerlink&#34; title=&#34;TTI（Time to Interactive）&#34;&gt;&lt;/a&gt;&lt;strong&gt;TTI&lt;/strong&gt;（Time to Interactive）&lt;/h1&gt;&lt;p&gt;首次可交互时间。这个指标计算过程略微复杂，它需要满足以下几个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 FCP 指标后开始计算；&lt;/li&gt;
&lt;li&gt;持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求；&lt;/li&gt;
&lt;li&gt;往前回溯至 5 秒前的最后一个长任务结束的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;FID（First-Input-Delay）&#34;&gt;&lt;a href=&#34;#FID（First-Input-Delay）&#34; class=&#34;headerlink&#34; title=&#34;FID（First Input Delay）&#34;&gt;&lt;/a&gt;&lt;strong&gt;FID&lt;/strong&gt;（First Input Delay）&lt;/h1&gt;&lt;p&gt;首次输入延迟时间，记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。&lt;/p&gt;
&lt;h1 id=&#34;TBT（Total-Blocking-Time）&#34;&gt;&lt;a href=&#34;#TBT（Total-Blocking-Time）&#34; class=&#34;headerlink&#34; title=&#34;TBT（Total Blocking Time）&#34;&gt;&lt;/a&gt;&lt;strong&gt;TBT&lt;/strong&gt;（Total Blocking Time）&lt;/h1&gt;&lt;p&gt;阻塞总时间，记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。&lt;/p&gt;
</content>
        <category term="性能优化" scheme="https://dmqweb.cn/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
        <category term="性能指标" scheme="https://dmqweb.cn/tags/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/" />
        <updated>2024-05-11T01:14:12.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</id>
        <title>函数重载</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
        <content type="html">&lt;h1 id=&#34;概念&#34;&gt;&lt;a href=&#34;#概念&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;函数重载是指在编程语言中允许定义多个同名函数，但是他们的参数类型、参数个数或者返回类型不同，编译器或解析器会根据调用时提供的参数类型和个数来确定使用哪个函数&lt;/p&gt;
&lt;h1 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;函数重载的主要目的就是提高代码的可读性和灵活性，同时避免了为不同功能编写不同的函数名导致的变量命名冲突和混乱。&lt;/p&gt;
&lt;h1 id=&#34;实现函数重载&#34;&gt;&lt;a href=&#34;#实现函数重载&#34; class=&#34;headerlink&#34; title=&#34;实现函数重载&#34;&gt;&lt;/a&gt;实现函数重载&lt;/h1&gt;&lt;h2 id=&#34;ts&#34;&gt;&lt;a href=&#34;#ts&#34; class=&#34;headerlink&#34; title=&#34;ts&#34;&gt;&lt;/a&gt;ts&lt;/h2&gt;&lt;p&gt;ts中进行函数重载其实就是根据型参数组的个数和对变量进行typeof检测，然后根据不同的情况进行分支处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ts&#34;&gt;// 函数重载的声明
function average(numbers: number[]): number; // 函数签名1：接受数字数组并返回数字
function average(...numbers: number[]): number; // 函数签名2：接受可变数量的数字参数并返回数字
// 函数实现
function average(...args: any[]): number &amp;#123; // 实际函数实现
    let sum = 0;
    if (args.length === 1 &amp;amp;&amp;amp; Array.isArray(args[0])) &amp;#123; // 如果传入的是数组
        const numbers = args[0] as number[]; // 类型断言为数字数组
        for (const num of numbers) &amp;#123;
            sum += num;
        &amp;#125;
        return sum / numbers.length;
    &amp;#125; else if (args.length &amp;gt; 1) &amp;#123; // 如果传入的是多个数字
        for (const num of args) &amp;#123;
            sum += num;
        &amp;#125;
        return sum / args.length;
    &amp;#125; else &amp;#123;
        throw new Error(&amp;#39;Invalid arguments&amp;#39;); // 抛出错误，不支持的参数类型
    &amp;#125;
&amp;#125;

// 调用函数重载
console.log(average([1, 2, 3, 4, 5])); // 输出: 3
console.log(average(1, 2, 3, 4, 5)); // 输出: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;js&#34;&gt;&lt;a href=&#34;#js&#34; class=&#34;headerlink&#34; title=&#34;js&#34;&gt;&lt;/a&gt;js&lt;/h2&gt;&lt;p&gt;js中也可以通过typeof和形参数组进行函数重载，不过当然还有更好的做法，jQuery作者常用如下实现函数重载（进行重载之前要调用一次函数）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function addMethod(object,name,fn)&amp;#123;
    const old = object[name];
    object[name] = function (...args)&amp;#123;
        if(args.length === fn.length)&amp;#123;
            return fn.apply(this,args);
        &amp;#125;else if(typeof old === &amp;#39;function&amp;#39;)&amp;#123;
            return old.apply(this,args);
        &amp;#125;
    &amp;#125;
&amp;#125;;
const searcher = &amp;#123;&amp;#125;; //将对象中对应属性的重载方法全部存储起来
addMethod(searcher,&amp;#39;getUsers&amp;#39;,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;查询所有用户&amp;#39;);
&amp;#125;);
addMethod(searcher,&amp;#39;getUsers&amp;#39;,(name=&amp;#39;a&amp;#39;)=&amp;gt;&amp;#123; //注意默认参数的形参数量不与计数
    console.log(&amp;#39;按照姓名查询用户&amp;#39;);
&amp;#125;);

searcher.getUsers();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一种实现方法就是使用映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function createOverload()&amp;#123;
    const fnMap = new Map();
    function overload(...args)&amp;#123;
        const key = args.map((it) =&amp;gt; typeof it).join(&amp;#39;,&amp;#39;);
        const fn = fnMap.get(key);
        if(!fn)&amp;#123;
            throw new TypeError(&amp;#39;没有找到对应的实现&amp;#39;);
        &amp;#125;
        return fn.apply(this,args);
    &amp;#125;
    overload.addImpl = function(...args)&amp;#123;
        const fn = args.pop();
        if(typeof fn !== &amp;#39;function&amp;#39;)&amp;#123;
            throw new TypeError(&amp;#39;最后一个参数必须是函数&amp;#39;)
        &amp;#125;
        const key = args.join(&amp;#39;,&amp;#39;);
        fnMap.set(key,fn);
    &amp;#125;;
    return overload;
&amp;#125;
const getUsers = createOverload();
getUsers.addImpl(()=&amp;gt;&amp;#123;
    console.log(&amp;#39;查询所有用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;number&amp;#39;,(page,size=10)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照页码和数量查询用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;number&amp;#39;,&amp;#39;number&amp;#39;,(page,size=10)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照页码和数量查询用户&amp;#39;);
&amp;#125;)
getUsers.addImpl(&amp;#39;string&amp;#39;,(name)=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照姓名查询用户&amp;#39;);
&amp;#125;);
getUsers.addImpl(&amp;#39;string&amp;#39;,&amp;#39;string&amp;#39;,()=&amp;gt;&amp;#123;
    console.log(&amp;#39;按照性别查询用户&amp;#39;);
&amp;#125;);
getUsers(&amp;#39;asfsdf&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结一下实现思路，通过createOverload函数调用可以返回一个重载后的函数，createOverload函数中创建了一个map，map中将参数类型和个数与对应的函数相匹配，返回的重载函数在调用时会根据参数的类型去map中寻找对应的函数，通过apply绑定this作用域和参数执行即可。&lt;/p&gt;
</content>
        <category term="JS" scheme="https://dmqweb.cn/categories/JS/" />
        <category term="JS,函数重载" scheme="https://dmqweb.cn/tags/JS-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/" />
        <updated>2024-05-08T14:35:51.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
        <title>深拷贝</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
        <content type="html">&lt;h1 id=&#34;深拷贝&#34;&gt;&lt;a href=&#34;#深拷贝&#34; class=&#34;headerlink&#34; title=&#34;深拷贝&#34;&gt;&lt;/a&gt;深拷贝&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我们知道在javascript中有八种数据类型：其中number，string，undefined，null，boolean，symbol和bigint为基本数据类型，而object为复杂数据类型&lt;/p&gt;
&lt;h2 id=&#34;存储&#34;&gt;&lt;a href=&#34;#存储&#34; class=&#34;headerlink&#34; title=&#34;存储&#34;&gt;&lt;/a&gt;存储&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于基本数据类型，其值直接存储于栈中。&lt;/li&gt;
&lt;li&gt;对于复杂数据类型，其值存储于堆中，而栈中只存储堆中的地址。这样做的好处有：&lt;ul&gt;
&lt;li&gt;节省内存空间：存储在堆中的对象可以通过栈内的引用被访问和操作，意味着对象可以在不同的上下文中被共享和引用，从而节省内存。&lt;/li&gt;
&lt;li&gt;垃圾回收：堆内存中的对象不再被引用时，垃圾回收机制就会自动进行回收，从而避免了内存泄漏和资源浪费。&lt;/li&gt;
&lt;li&gt;动态分配内存：堆内存允许对象动态的增长和缩小，因此可以根据需要灵活地修改对象的结构和内容，使得js对象可以轻松地扩展以适应不同的应用需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深拷贝-1&#34;&gt;&lt;a href=&#34;#深拷贝-1&#34; class=&#34;headerlink&#34; title=&#34;深拷贝&#34;&gt;&lt;/a&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;而深拷贝和浅拷贝就是对于复杂数据类型object来说的，当拷贝了对象的一层（即堆的引用）时，就称之为浅拷贝，当拷贝了对象的两层（堆中创建新的对象）时，就称之为深拷贝。&lt;/p&gt;
&lt;h2 id=&#34;实现方案&#34;&gt;&lt;a href=&#34;#实现方案&#34; class=&#34;headerlink&#34; title=&#34;实现方案&#34;&gt;&lt;/a&gt;实现方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt;，第一种方法是使用JSON方法，但是这个方法有一些限制：JSON序列化时函数会被转为null，正则表达式会被转为空对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递归实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;

```javascript
function deepCopy(obj, parent = null) &amp;#123;
    // 创建一个新对象
    let result = &amp;#123;&amp;#125;;
    let keys = Object.keys(obj),
        key = null,
        temp = null,
        _parent = parent;
    // 该字段有父级则需要追溯该字段的父级
    while (_parent) &amp;#123;
        // 如果该字段引用了它的父级则为循环引用
        if (_parent.originalParent === obj) &amp;#123;
            // 循环引用直接返回同级的新对象
            return _parent.currentParent;
        &amp;#125;
        _parent = _parent.parent;
    &amp;#125;
    for (let i = 0; i &amp;lt; keys.length; i++) &amp;#123;
        key = keys[i];
        temp = obj[key];
        // 如果字段的值也是一个对象
        if (temp &amp;amp;&amp;amp; typeof temp === &amp;#39;object&amp;#39;) &amp;#123;
            // 递归执行深拷贝 将同级的待拷贝对象与新对象传递给 parent 方便追溯循环引用
            result[key] = DeepCopy(temp, &amp;#123;
                originalParent: obj,
                currentParent: result,
                parent: parent
            &amp;#125;);

        &amp;#125; else &amp;#123;
            result[key] = temp;
        &amp;#125;
    &amp;#125;
    return result;
&amp;#125;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MessageChannel实现深克隆：由于浏览器不能将一个函数正确的复制到另一个线程中，所以不能支持函数的深克隆。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function deepCopy(obj) &amp;#123;
  return new Promise((resolve) =&amp;gt; &amp;#123;
    const &amp;#123;port1, port2&amp;#125; = new MessageChannel();
    port2.onmessage = ev =&amp;gt; resolve(ev.data);
    port1.postMessage(obj);
  &amp;#125;);
&amp;#125;

deepCopy(obj).then((copy) =&amp;gt; &amp;#123;// 异步的
    let copyObj = copy;
    console.log(copyObj, obj)
    console.log(copyObj == obj)
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H5新增structuredClone&lt;br&gt;结构化克隆解决了该JSON.stringify()技术的许多（尽管不是全部）缺点。结构化克隆可以处理循环依赖，支持许多内置数据类型，并且更健壮且速度更快。&lt;br&gt;但是，它仍然有一些限制：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原型：如果你使用structuredClone()类实例，你将获得一个普通对象作为返回值，因为结构化克隆会丢弃对象的原型链。&lt;br&gt;函数：如果你的对象包含函数，它们将被悄悄丢弃。&lt;br&gt;不可克隆：有些值不是结构化可克隆的，尤其是Error、 DOM 节点 和 Function。尝试这样做将引发 DataCloneError 异常。&lt;br&gt;属性描述符：setter和getter(以及类似元数据的功能)不会被复制。例如，如果使用属性描述符将对象标记为只读，则复制后的对象中是可读写(默认配置)。&lt;br&gt;RegExp：RegExp对象的lastIndex字段不会保留。&lt;/p&gt;
&lt;h1 id=&#34;浅拷贝实现方案&#34;&gt;&lt;a href=&#34;#浅拷贝实现方案&#34; class=&#34;headerlink&#34; title=&#34;浅拷贝实现方案&#34;&gt;&lt;/a&gt;浅拷贝实现方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.assign(&amp;#123;&amp;#125;,obj)&lt;/code&gt;，第二方法是使用Object.assign()&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const obj1 = &amp;#123;...obj2&amp;#125;&lt;/code&gt;，使用扩展运算符&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="面试题" scheme="https://dmqweb.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/" />
        <category term="深拷贝,面试题" scheme="https://dmqweb.cn/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E9%9D%A2%E8%AF%95%E9%A2%98/" />
        <updated>2024-04-30T09:34:25.000Z</updated>
    </entry>
    <entry>
        <id>https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</id>
        <title>前端监控</title>
        <link rel="alternate" href="https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/"/>
        <content type="html">&lt;h1 id=&#34;前端监控&#34;&gt;&lt;a href=&#34;#前端监控&#34; class=&#34;headerlink&#34; title=&#34;前端监控&#34;&gt;&lt;/a&gt;前端监控&lt;/h1&gt;&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;为什么要进行前端监控：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面的访问行为，PV、UV、IP、PV 点击率、UV 点击率、停留时长&lt;/li&gt;
&lt;li&gt;用户的操作行为，模块曝光、&lt;/li&gt;
&lt;li&gt;模块点击&lt;/li&gt;
&lt;li&gt;页面的性能，首屏渲染时间、API 请求时间&lt;/li&gt;
&lt;li&gt;异常的监控，JS Error、API 异常、业务异常&lt;/li&gt;
&lt;li&gt;业务的监控，成交金额、每日消息数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见的应用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见的前端监控平台：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百度统计&lt;/li&gt;
&lt;li&gt;阿里云 ARMS&lt;/li&gt;
&lt;li&gt;友盟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前端监控的数据有什么作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量数据监控，如：PV、UV、点击率、页面停留时长等&lt;/li&gt;
&lt;li&gt;自定义事件监控，如：曝光事件、滑动事件、请求事件等&lt;/li&gt;
&lt;li&gt;交易指标监控，如：成交额、转化率等&lt;/li&gt;
&lt;li&gt;其他综合分析，如：用户画像分析、流量漏斗、销量预测等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前端监控的三个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初阶：使用第三方平台，百度、友盟、阿里云 ARMS 等&lt;/li&gt;
&lt;li&gt;中阶：自研前端监控库，缺乏完整的监控体系&lt;/li&gt;
&lt;li&gt;高阶：自研前端监控平台，具备完整的监控体系&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;百度统计接入&#34;&gt;&lt;a href=&#34;#百度统计接入&#34; class=&#34;headerlink&#34; title=&#34;百度统计接入&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==&#34;&gt;百度统计接入&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;流量分析免费，行为分析需要付费。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;官网创建网站，设置域名和首页&lt;/li&gt;
&lt;li&gt;保证域名公共可读&lt;/li&gt;
&lt;li&gt;复制统计代码，添加到要跟踪的网页中（加入到 head 标签之前）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;阿里云 ARM 和友盟分析方案较全，接入方案大致相同，但是当数据量较大时，有一定的成本，所以考虑自建前端统计系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候需要考虑自建前端监控系统？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不仅仅需要流量分析，还需要做行为分析&lt;/li&gt;
&lt;li&gt;自建成本小于或等于平台付费&lt;/li&gt;
&lt;li&gt;希望网站监控数据能存到自己数据库中，并且数据隐私化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;监控平台架构&#34;&gt;&lt;a href=&#34;#监控平台架构&#34; class=&#34;headerlink&#34; title=&#34;监控平台架构&#34;&gt;&lt;/a&gt;监控平台架构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前端监控平台的分层：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前端监控 JSSDK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集&lt;/li&gt;
&lt;li&gt;上报&lt;ul&gt;
&lt;li&gt;默认上报：页面 PV、性能等&lt;/li&gt;
&lt;li&gt;手动上报：页面操作行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端监控 API 和大数据仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收上报的数据&lt;/li&gt;
&lt;li&gt;数据仓库：MaxCompute&lt;ul&gt;
&lt;li&gt;数据查询&lt;/li&gt;
&lt;li&gt;数据存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端监控数据可视化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志大数据清洗&lt;/li&gt;
&lt;li&gt;大数据回流 RDS（非结构化数据 &amp;#x3D;&amp;gt; 结构化数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;监控平台架构说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-29_08-11-46.jpg&#34; alt=&#34;监控平台架构&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;JS-库的开发&#34;&gt;&lt;a href=&#34;#JS-库的开发&#34; class=&#34;headerlink&#34; title=&#34;JS 库的开发&#34;&gt;&lt;/a&gt;JS 库的开发&lt;/h2&gt;&lt;h4 id=&#34;JS-SDK&#34;&gt;&lt;a href=&#34;#JS-SDK&#34; class=&#34;headerlink&#34; title=&#34;JS SDK&#34;&gt;&lt;/a&gt;JS SDK&lt;/h4&gt;&lt;p&gt;monitor.js：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function collect() &amp;#123;
  console.log(&amp;quot;collect&amp;quot;);
&amp;#125;
function upload() &amp;#123;
  console.log(&amp;quot;upload&amp;quot;);
&amp;#125;
window.testMonitor = &amp;#123;
  collect,
  upload,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上传到服务器，在需要监控的页面引入脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、直接引入脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接使用 script 标签引入在线地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、异步加载（确保脚本加载完成后再使用 api）：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;script&amp;gt;
  (function()
      const script = document.createElement(&amp;#39;script&amp;#39;);
      script.src = &amp;#39;https://imooc.youbaobao.xyz/imooc-cli-monitor.js&amp;#39;
      const body = document.body;
      body.insertBefore(script,body.firstChild);
      script.onload = function()&amp;#123;
      var event = new CustomEvent(&amp;#39;onMonitorScriptLoad&amp;#39;);
      window.dispatchEvent(event);
  )()
&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
      window.addEventListener(&amp;#39;onMonitorScriptLoad&amp;#39;,function()&amp;#123;
      window.testMonitor.collect();
      window.testMonitor.upload();
  &amp;#125;):
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;PV-埋点&#34;&gt;&lt;a href=&#34;#PV-埋点&#34; class=&#34;headerlink&#34; title=&#34;PV 埋点&#34;&gt;&lt;/a&gt;PV 埋点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一、分包便于代码书写和维护&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设将项目分为：index.js、collect.js 和 upload.js 三个 js 文件，分别用于整合、收集和上报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、设置页面基本信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 meta 标签中设置变量，假设为：test-app-id，在 body 标签中设置 test-page-id，此变量用于区分不同的站点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、collect.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import &amp;#123; upload &amp;#125; from &amp;quot;./upload&amp;quot;;
//自定义一些钩子函数
let beforeCreateParams;
let beforeUpload;
let afterUpload;
let onError = (err) =&amp;gt; &amp;#123;
  console.error(err);
&amp;#125;;

export function collect() &amp;#123;
  console.log(&amp;quot;收集开始...&amp;quot;);
&amp;#125;
// 采集信息
function collection(customData, eventType) &amp;#123;
  let appId, pageId, timeStamp, ua;
  beforeCreateParams &amp;amp;&amp;amp; beforeCreateParams();
  const metaList = document.getElementsByTagName(&amp;quot;meta&amp;quot;);
  for (let i = 0; i &amp;lt; metaList.length; i++) &amp;#123;
    const meta = metaList[i];
    console.log(meta.getAttribute(&amp;quot;test-app-id&amp;quot;));
    if (meta.getAttribute(&amp;quot;test-app-id&amp;quot;)) &amp;#123;
      appId = meta.getAttribute(&amp;quot;test-app-id&amp;quot;);
    &amp;#125;
  &amp;#125;
  const body = document.body;
  pageId = body.getAttribute(&amp;quot;test-page-id&amp;quot;);
  if (!appId || !pageId) return;
  timeStamp = new Date().getTime();
  ua = window.navigator.userAgent;
  console.log(appId, pageId, timeStamp, ua);
  let data = `appId=$&amp;#123;appId&amp;#125;&amp;amp;pageId=$&amp;#123;pageId&amp;#125;&amp;amp;timeStamp=$&amp;#123;timeStamp&amp;#125;&amp;amp;ua=$&amp;#123;ua&amp;#125;`;
  if (beforeUpload) &amp;#123;
    data = beforeUpload(data); //允许定制数据
  &amp;#125;
  //日志上报
  // upload(&amp;#123; appId,pageId,timeStamp,ua &amp;#125;)  不常用
  let url, uploadData;
  try &amp;#123;
    data = &amp;#123; ...customData, ...data &amp;#125;;
    const ret = upload(data, &amp;#123; eventType &amp;#125;);
    url = ret.url;
    uploadData = ret.data;
  &amp;#125; catch (e) &amp;#123;
    onError(e);
  &amp;#125; finally &amp;#123;
    afterUpload &amp;amp;&amp;amp; afterUpload(url, uploadData);
  &amp;#125;
&amp;#125;
//发送PV日志
export function sendPV() &amp;#123;
  collection(&amp;#123;&amp;#125;, &amp;quot;PV&amp;quot;);
&amp;#125;
// 上报曝光埋点
export function sendExp(data = &amp;#123;&amp;#125;) &amp;#123;
  collection(data, &amp;quot;EXP&amp;quot;);
&amp;#125;
//注册钩子函数
export function registerBeforeCreateParams(fn) &amp;#123;
  beforeCreateParams = fn;
&amp;#125;
export function registerBeforeUpload(fn) &amp;#123;
  beforeUpload = fn;
&amp;#125;
export function registerAfterUpload(fn) &amp;#123;
  afterUpload = fn;
&amp;#125;
export function registerOnError(fn) &amp;#123;
  onError = fn;
&amp;#125;
export default &amp;#123;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;四、upload.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;export function upload(data) &amp;#123;
  const img = new Image(); //利用image标签跨域特性
  const &amp;#123; eventType = &amp;quot;PV&amp;quot; &amp;#125; = options;
  const params = encodeURIComponent(data) + &amp;quot;&amp;amp;eventType=&amp;quot; + eventType;
  const src = &amp;quot;http://dmqtest.com?data=&amp;quot; + params;
  console.log(params, src, eventType);
  img.src = src;
  img = null; //注意内存释放
  return &amp;#123;
    url: src,
    data: &amp;#123;
      params,
    &amp;#125;,
  &amp;#125;;
&amp;#125;
export default upload;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;五、index.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; sendPV , registerBeforeCreateParams,registerBeforeUpload,registerAfterUpload &amp;#125; from &amp;#39;./collect&amp;#39;;
import &amp;#123; upload &amp;#125; from &amp;#39;./upload&amp;#39;;
window.testMonitor = &amp;#123;
    upload,
    sendPV,
    registerBeforeCreateParams,
    registerBeforeUpload,
    registerAfterUpload,
    registerOnError
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;六、index.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; test-app-id=&amp;quot;app123456&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;script src=&amp;quot;https://dmqtest.com/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;body test-page-id=&amp;quot;page123456&amp;quot;&amp;gt;
    &amp;lt;script&amp;gt;
      window.onload = function () &amp;#123;
        window.testMonitor.registerBeforeCreateParams(() =&amp;gt; &amp;#123;
          console.log(&amp;quot;创建之前&amp;quot;);
        &amp;#125;);
        window.testMonitor.registerBrforeUpload((params) =&amp;gt; &amp;#123;
          return params + &amp;quot;&amp;amp;custom=1&amp;quot;; //添加自定义数据
        &amp;#125;);
        window.testMonitor.registerAfterUpload((url, data) =&amp;gt; &amp;#123;&amp;#125;);
        window.testMonitor.sendPV();
      &amp;#125;;
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;曝光埋点&#34;&gt;&lt;a href=&#34;#曝光埋点&#34; class=&#34;headerlink&#34; title=&#34;曝光埋点&#34;&gt;&lt;/a&gt;曝光埋点&lt;/h4&gt;&lt;p&gt;曝光埋点记录元素由不可变到可变的过程，需要浏览器 IntersectionObserver 这个 API 的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浏览器 5 种 Observer：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MutationObserver（用于监听 DOM 树的变化，一般为属性、子节点的增删改）&lt;/li&gt;
&lt;li&gt;IntersectionObserver（用于监听一个元素和可视区域相交部分的比列，然后在可视比列到达某一阈值的时候触发回调）&lt;/li&gt;
&lt;li&gt;PerformanceObserver（用于检测性能度量事件，在浏览器的性能事件轴记录下一个新的 performance entries 的时候将会被通知）&lt;/li&gt;
&lt;li&gt;ResizeObserver（用于监听 DOM 的变化，一般为节点的出现和隐藏，节点大小的变化）&lt;/li&gt;
&lt;li&gt;ReportingObserver（用于监听过时的 api、浏览器的一些干预行为的预告）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IntersectionObserver：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;observe：开始监听一个目标元素&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.disconnect();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;disconnect：停止监听&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.observe(targetElement);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;takeRecords:返回所有观察目标的 IntersectionObserverEntry 对象数组。&lt;/p&gt;
&lt;p&gt;语法：intersectionObserverEntries &amp;#x3D; intersectionObserver.takeRecords();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unobserve:使 IntersectionObserver 停止监听特定目标元素&lt;/p&gt;
&lt;p&gt;语法：IntersectionObserver.unobserve(targetElement);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;配置项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;targetElement：目标 DOM&lt;/li&gt;
&lt;li&gt;root：指定根目录，也就就是当目标元素显示在这个元素中时会触发监控回调&lt;/li&gt;
&lt;li&gt;rootMargin：类似于 css 的 margin，设定 root 元素的边框区域。&lt;/li&gt;
&lt;li&gt;threhold：阈值，决定了什么时候触发回调函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;返回参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tIme:可见性发生变化的时间，是一个高精度时间戳，单位为毫秒&lt;/li&gt;
&lt;li&gt;rootBounds:是在根元素矩形区域的信息&lt;/li&gt;
&lt;li&gt;intersectionRatio:目标元素的可见比例&lt;/li&gt;
&lt;li&gt;intersectionRect:目标元素与根元素交叉区域的信息&lt;/li&gt;
&lt;li&gt;isIntersecting:判断元素是否符合 options 中的可见条件&lt;/li&gt;
&lt;li&gt;boundingClientRect:目标元素的矩形区域的信息&lt;/li&gt;
&lt;li&gt;target:被观察的目标元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;upload.js 文件中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// ....省略
// 上报曝光埋点
export function sendExp(data = &amp;#123;&amp;#125;) &amp;#123;
  collection(data, &amp;quot;EXP&amp;quot;);
&amp;#125;
// 最后在index.js中暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;collect.js 文件中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//....省略
export function collectAppear() &amp;#123;
  const appearEvent = new CustomEvent(&amp;quot;onAppear&amp;quot;);
  const disappearEvent = new CustomEvent(&amp;quot;onDisappear&amp;quot;);
  let ob;
  if (window.testMonitorObserver) &amp;#123;
    ob = window.testMonitorObserver;
  &amp;#125; else &amp;#123;
    ob = new IntersectionObserver(function (e) &amp;#123;
      e.forEach((item) =&amp;gt; &amp;#123;
        if (item.intersectionRatio &amp;gt; 0) &amp;#123;
          console.log(item.target.className + &amp;quot;appear&amp;quot;);
          item.target.dispatchEvent(appearEvent);
        &amp;#125; else &amp;#123;
          console.log(item.target.className + &amp;quot;disappear&amp;quot;);
          item.target.dispatchEvent(disappearEvent);
        &amp;#125;
      &amp;#125;);
    &amp;#125;);
  &amp;#125;
  let obList = [];
  const appear = document.querySelectorAll(&amp;quot;[appear]&amp;quot;);
  for (let i = 0; i &amp;lt; appear.length; i++) &amp;#123;
    if (obList.includes(appear[i])) &amp;#123;
      ob.observe(appear[i]);
      obList.push(appear[i]);
    &amp;#125;
  &amp;#125;
  window.testMonitorObserver = ob; //存起来防止重复
  window.monitorObserverList = obList;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;index.js 中使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//...省略
// import引入collectAppear函数。
window.onload = function () &amp;#123;
  collectAppear();
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;点击埋点&#34;&gt;&lt;a href=&#34;#点击埋点&#34; class=&#34;headerlink&#34; title=&#34;点击埋点&#34;&gt;&lt;/a&gt;&lt;strong&gt;点击埋点&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;collect.js 中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//...省略
//上报点击埋点
export function sendClick(data = &amp;#123;&amp;#125;) &amp;#123;
  collection(data, &amp;quot;CLICK&amp;quot;);
&amp;#125;
//暴露出去，index.js导入该方法并暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义埋点&#34;&gt;&lt;a href=&#34;#自定义埋点&#34; class=&#34;headerlink&#34; title=&#34;自定义埋点&#34;&gt;&lt;/a&gt;自定义埋点&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;collect.js 中添加：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自定义埋点行为就直接在内部添加 CUSTOM 对应的处理逻辑，可以使用其他的 Observer 实现更多功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//...省略
//上报自定义埋点
export function sendCustom(data = &amp;#123;&amp;#125;) &amp;#123;
  collection(data, &amp;quot;CUSTOM&amp;quot;);
&amp;#125;
//暴露出去，index.js导入该方法并暴露出去。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;大数据平台开发&#34;&gt;&lt;a href=&#34;#大数据平台开发&#34; class=&#34;headerlink&#34; title=&#34;大数据平台开发&#34;&gt;&lt;/a&gt;大数据平台开发&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vemgvbWF4Y29tcHV0ZS8jOn46dGV4dD0lRTQlQkElOTElRTUlOEUlOUYlRTclOTQlOUYlRTUlQTQlQTclRTYlOTUlQjAlRTYlOEQlQUUlRTglQUUlQTElRTclQUUlOTclRTYlOUMlOEQlRTUlOEElQTEsJTI4TWF4Q29tcHV0ZSUyOSVFNiU5OCVBRiVFNCVCOCU4MCVFNyVBNyU4RCVFNSVCRiVBQiVFOSU4MCU5RiVFMyU4MCU4MSVFNSVBRSU4QyVFNSU4NSVBOCVFNiU4OSU5OCVFNyVBRSVBMSVFNyU5QSU4NFRCJTJGUEIlRTclQkElQTclRTYlOTUlQjAlRTYlOEQlQUUlRTQlQkIlOTMlRTUlQkElOTMlRTglQTclQTMlRTUlODYlQjMlRTYlOTYlQjklRTYlQTElODglRTMlODAlODIlMjBNYXhDb21wdXRlJUU1JTkwJTkxJUU3JTk0JUE4JUU2JTg4JUI3JUU2JThGJTkwJUU0JUJFJTlCJUU0JUJBJTg2JUU1JUFFJThDJUU1JTk2JTg0JUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU1JUFGJUJDJUU1JTg1JUE1JUU2JTk2JUI5JUU2JUExJTg4JUU0JUJCJUE1JUU1JThGJThBJUU1JUE0JTlBJUU3JUE3JThEJUU3JUJCJThGJUU1JTg1JUI4JUU3JTlBJTg0JUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU4JUFFJUExJUU3JUFFJTk3JUU2JUE4JUExJUU1JTlFJThCJUVGJUJDJThDJUU4JTgzJUJEJUU1JUE0JTlGJUU2JTlCJUI0JUU1JUJGJUFCJUU5JTgwJTlGJUU3JTlBJTg0JUU4JUE3JUEzJUU1JTg2JUIzJUU3JTk0JUE4JUU2JTg4JUI3JUU2JUI1JUI3JUU5JTg3JThGJUU2JTk1JUIwJUU2JThEJUFFJUU4JUFFJUExJUU3JUFFJTk3JUU5JTk3JUFFJUU5JUEyJTk4JUVGJUJDJThDJUU2JTlDJTg5JUU2JTk1JTg4JUU5JTk5JThEJUU0JUJEJThFJUU0JUJDJTgxJUU0JUI4JTlBJUU2JTg4JTkwJUU2JTlDJUFDJUVGJUJDJThDJUU1JUI5JUI2JUU0JUJGJTlEJUU5JTlBJTlDJUU2JTk1JUIwJUU2JThEJUFFJUU1JUFFJTg5JUU1JTg1JUE4JUUzJTgwJTgy&#34;&gt;MaxCompute 阿里云原生大数据计算服务&lt;/span&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MaxCompute 是基于数据分析场景的企业级 SaaS 模式云数据仓库，以 Serverless 架构提供快速、全托管的在线数据仓库服务，消除了传统数据平台在资源扩展性和弹性方面的限制，最小化用户运维投入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 MaxCompute 创建数据库，在数据开发页面创建表进行记录前端监控数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 py 脚本对接（暂时没有 js 包），需要安装 python 和 pip（包管理工具）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 pyodps：&lt;code&gt;pip install pyodps&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;connect.py 文件中写入示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from odps import ODPS;

odps = ODPS(&amp;#39;LTAI5tBDj3HajwRVhc6me5KR&amp;#39;,&amp;#39;DJqWAI1IWUBZnZGE#FKDSFJDEJLet&amp;#39;,&amp;#39;test_monitor&amp;#39;,endpoint=&amp;#39;https://service-cn-hangzhou.odps.aliyun-inc.com&amp;#39;)

result = odps.executexecute_sql(&amp;#39;select * from test_monitor where datetime=&amp;quot;20240325&amp;quot;&amp;#39;)

with result.open_reader() as reader:
    for record in reader:
        print(record[0],record[1])
# 打印表名
for table in odps.list_tables():
    print(table)
data = [
    [&amp;#39;appid123&amp;#39;,&amp;#39;pageid123&amp;#39;,&amp;#39;123456&amp;#39;,&amp;#39;ua123&amp;#39;,&amp;#39;http://www.baidu.com&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;20240325&amp;#39;,&amp;#39;202403&amp;#39;]
]
# 写入数据
odps.write_table(&amp;#39;test_table&amp;#39;, data)
# ....等等后续操作
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;前端监控平台可视化架构图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Snipaste_2024-04-30_15-14-09.jpg&#34; alt=&#34;前端监控流程架构&#34;&gt;&lt;/p&gt;
</content>
        <category term="前端监控" scheme="https://dmqweb.cn/categories/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
        <category term="前端监控" scheme="https://dmqweb.cn/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
        <updated>2024-04-29T00:36:51.000Z</updated>
    </entry>
</feed>
