{
    "version": "https://jsonfeed.org/version/1",
    "title": "杜明清的个人博客",
    "subtitle": "👻欢迎一起交流学习👻",
    "icon": "https://dmqweb.cn/images/favicon.ico",
    "description": "",
    "home_page_url": "https://dmqweb.cn",
    "items": [
        {
            "id": "https://dmqweb.cn/2024/07/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "url": "https://dmqweb.cn/2024/07/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "title": "操作系统",
            "date_published": "2024-07-23T07:02:19.000Z",
            "content_html": "<h1 id=\"操作系统定义\"><a class=\"anchor\" href=\"#操作系统定义\">#</a> 操作系统定义</h1>\n<blockquote>\n<p>操作系统（Operating System）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件应用程序，同时也是计算机系统的内核和基石。<br />\n操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。</p>\n</blockquote>\n<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<blockquote>\n<p>进程是：操作系统进行 <code>资源分配</code> 的基本单位</p>\n</blockquote>\n<h1 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h1>\n<blockquote>\n<p>线程是：操作系统进行 <code>资源调度</code> 的基本单位</p>\n</blockquote>\n<h1 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h1>\n<blockquote>\n<p>内存是：计算机的随机访问存储器（RAM），是计算机的主要存储资源之一，用于存储计算机运行时正在使用或即将使用的数据和指令。<br />\n内存具有：易失性（计算机关闭时内存中的数据会丢失）、访问速度快等特点</p>\n</blockquote>\n<h1 id=\"虚拟内存地址空间\"><a class=\"anchor\" href=\"#虚拟内存地址空间\">#</a> 虚拟内存（地址空间）</h1>\n<blockquote>\n<p>虚拟内存是：虚拟内存是操作系统对物理内存的抽象，是一种内存管理技术，允许操作系统将硬盘空间用作临时的 RAM 来使用<br />\n虚拟内存能够运行比物理内存更多的内存的程序，同时也为操作系统提供了更大的地址空间，虚拟内存的关键有：</p>\n</blockquote>\n<ul>\n<li>地址转换</li>\n<li>分页</li>\n<li>页面置换算法</li>\n<li>硬盘空间使用</li>\n<li>性能影响</li>\n<li>内存管理</li>\n</ul>\n<h1 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h1>\n<blockquote>\n<p>文件是：操作系统对物理磁盘的抽象，是一个基本的数据存储单元，用于在计算机系统或存储设备上保存数据。</p>\n</blockquote>\n<h1 id=\"shell\"><a class=\"anchor\" href=\"#shell\">#</a> shell</h1>\n<blockquote>\n<p>shell 是：一个程序，可以从键盘中获取命令并将其提供给操作系统进行执行。</p>\n</blockquote>\n<h1 id=\"gui\"><a class=\"anchor\" href=\"#gui\">#</a> GUI</h1>\n<blockquote>\n<p>GUI 是：一个用户界面，用户可以通过图形或图标指示符与电子设备进行交互</p>\n</blockquote>\n<h1 id=\"计算机架构\"><a class=\"anchor\" href=\"#计算机架构\">#</a> 计算机架构</h1>\n<blockquote>\n<p>计算机架构是：计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法，主要包括：指令集、内存管理、I/O 和总线结构等。</p>\n</blockquote>\n<h1 id=\"多处理系统\"><a class=\"anchor\" href=\"#多处理系统\">#</a> 多处理系统</h1>\n<blockquote>\n<p>多处理系统是：指计算机同时运行多个程序的能力。</p>\n</blockquote>\n<h1 id=\"程序计数器\"><a class=\"anchor\" href=\"#程序计数器\">#</a> 程序计数器</h1>\n<blockquote>\n<p>程序计数器是：一个 CPU 中的寄存器，用于指示计算机在其程序序列中的位置。</p>\n</blockquote>\n<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<blockquote>\n<p>多线程是：指一个软件或硬件上实现多线程并发执行的技术。</p>\n</blockquote>\n<h1 id=\"cpu核心core\"><a class=\"anchor\" href=\"#cpu核心core\">#</a> CPU 核心（core）</h1>\n<blockquote>\n<p>CPU 核心是：CPU 的大脑，它接收指令，并执行计算或运算以满足这些指令，一个 CPU 可以有多个内核。</p>\n</blockquote>\n<h1 id=\"图形处理器视觉处理器\"><a class=\"anchor\" href=\"#图形处理器视觉处理器\">#</a> 图形处理器（视觉处理器）</h1>\n<blockquote>\n<p>图形处理器是：</p>\n</blockquote>\n<h1 id=\"缓存命中\"><a class=\"anchor\" href=\"#缓存命中\">#</a> 缓存命中</h1>\n<blockquote>\n<p>当应用程序或软件请求数据时，会首先发生缓存命中</p>\n</blockquote>\n<h1 id=\"ram随机存取存储器-主存\"><a class=\"anchor\" href=\"#ram随机存取存储器-主存\">#</a> RAM（随机存取存储器、主存）</h1>\n<blockquote>\n<p>RAM 是：与 CPU 直接交换数据的内存存储器</p>\n</blockquote>\n<h1 id=\"rom只读存储器\"><a class=\"anchor\" href=\"#rom只读存储器\">#</a> ROM（只读存储器）</h1>\n<blockquote>\n<p>ROM 是：一助攻半导体存储器，特点是一旦存储数据就无法改变或删除</p>\n</blockquote>\n<h1 id=\"驱动程序\"><a class=\"anchor\" href=\"#驱动程序\">#</a> 驱动程序</h1>\n<blockquote>\n<p>驱动程序是：一个允许高级别电脑软件与硬件交互的程序</p>\n</blockquote>\n<h1 id=\"usb\"><a class=\"anchor\" href=\"#usb\">#</a> USB</h1>\n<blockquote>\n<p>USB 是：连接计算机系统与外部设备的一种串口总线标准，也是一种输入输出接口的技术规范</p>\n</blockquote>\n<h1 id=\"地址空间\"><a class=\"anchor\" href=\"#地址空间\">#</a> 地址空间</h1>\n<blockquote>\n<p>地址空间是：内存中可供程序或进程使用的有效地址规范</p>\n</blockquote>\n<h1 id=\"进程间通信\"><a class=\"anchor\" href=\"#进程间通信\">#</a> 进程间通信</h1>\n<blockquote>\n<p>进程间通信是：指至少两个进程或线程间传送数据或信号的一些技术或方法<br />\n进程间的通信方式有：管道、消息队列、共享内存、信号量、信号、套接字</p>\n</blockquote>\n<ul>\n<li>管道<br />\n管道一种半双工的通信方式，数据只能单向流动，管道实质上是一个内核缓冲区，且以先进先出的方式存取数据。<br />\n管道分为命名管道和匿名管道<br />\n匿名管道它的优点是：简单方便；缺点是：<br />\n因为管道局限于单向通信且缓冲区有限，所以它的通信效率低，不适合进程间频繁地交换数据<br />\n只能在父子进程间使用<br />\n命名管道，和匿名管道相比，它的优点是：可以实现任意关系的进程间的通信；缺点是：<br />\n长期存在系统中，使用不当容易出错</li>\n<li>消息队列<br />\n消息队列是保存在内核中的消息链表<br />\n优点：可以实现任意进程间的通信，并且通过系统调用函数来实现消息发送和接收之间的同步，无需考虑同步问题<br />\n缺点：<br />\n消息队列不适合比较大数据的传输，因为每个消息体都有最大长度限制，同时全体消息也有总长度上限<br />\n通信过程中，存在用户态与内核态之间的数据拷贝开销</li>\n<li>共享内存<br />\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问<br />\n优点：进程可以直接读写这块内存而不需要进行数据拷贝，提高效率<br />\n缺点：<br />\n多个进程同时修改同一个共享内存，会发生冲突<br />\n共享内存只能在同一计算机系统中共享</li>\n<li>信号量<br />\n信号量是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据<br />\n优点：信号量解决了止多进程竞争共享资源，而造成数据的错乱的<br />\n缺点：信号量有限</li>\n<li>信号<br />\n信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生</li>\n<li>套接字<br />\n套接字通信不仅可以跨网络与不同主机的进程通信，还可以在同主机进程通信<br />\n优点：<br />\n传输数据为字节级，传输数据可自定义<br />\n适合客户端和服务端之间信息实时交互<br />\n可以加密，数据安全性强<br />\n缺点：需对传输的数据进行解析，转化成应用级的数据</li>\n</ul>\n<h1 id=\"目录文件夹\"><a class=\"anchor\" href=\"#目录文件夹\">#</a> 目录（文件夹）</h1>\n<blockquote>\n<p>目录或文件夹是：指一个装有数字文件系统的虚拟容器</p>\n</blockquote>\n<h1 id=\"路径\"><a class=\"anchor\" href=\"#路径\">#</a> 路径</h1>\n<blockquote>\n<p>路径是：一种电脑文件或目录的名称的通用表现形式，它指向文件系统上的一个唯一位置</p>\n</blockquote>\n<h1 id=\"根目录\"><a class=\"anchor\" href=\"#根目录\">#</a> 根目录</h1>\n<blockquote>\n<p>根目录是：</p>\n</blockquote>\n<h1 id=\"文件描述符\"><a class=\"anchor\" href=\"#文件描述符\">#</a> 文件描述符</h1>\n<blockquote>\n<p>文件描述符是一个用于表述指向文件的引用的抽象化概念</p>\n</blockquote>\n<h1 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h1>\n<blockquote>\n<p>客户端是：访问服务器提供的服务的计算硬件或软件</p>\n</blockquote>\n<h1 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h1>\n<blockquote>\n<p>服务端是：为其他程序或设备提供功能的计算机程序或设备</p>\n</blockquote>\n",
            "tags": [
                "操作系统",
                "操作系统"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/07/08/docker/",
            "url": "https://dmqweb.cn/2024/07/08/docker/",
            "title": "Docker",
            "date_published": "2024-07-08T02:26:39.000Z",
            "content_html": "<p><img data-src=\"https://dmqweb.cn/images/Docker.pdf\" alt=\"Docker\" /><br />\n<img data-src=\"https://dmqweb.cn/images/Docker%E6%96%87%E6%A1%A3.pdf\" alt=\"Docker文档\" /><br />\n<img data-src=\"https://dmqweb.cn/images/Docker%E5%A4%A7%E7%BA%B2.pdf\" alt=\"Docker大纲\" /></p>\n<h1 id=\"虚拟化技术\"><a class=\"anchor\" href=\"#虚拟化技术\">#</a> 虚拟化技术</h1>\n<blockquote>\n<p>虚拟化是一种计算机资源管理的技术，是将计算机的各种硬件资源，比如服务器、网络、CPU、内存、以及存储等，通过抽象和转换后呈现出的一套新的硬件资源环境，在这套资源环境中可以按照操作系统，部署应用环境等<br />\n虚拟化技术打破了计算机硬件资源不可切割的障碍，提高了计算机硬件资源的利用率</p>\n</blockquote>\n<h1 id=\"虚拟机硬件级虚拟化技术\"><a class=\"anchor\" href=\"#虚拟机硬件级虚拟化技术\">#</a> 虚拟机 (硬件级虚拟化技术)</h1>\n<blockquote>\n<p>虚拟机是使用虚拟化的技术，使用抽象逻辑对物理计算机的模拟，包含整个操作系统和其中的应用程式。</p>\n</blockquote>\n<ul>\n<li>缺点是：启动慢、使用空间很大、性能通常不高，无法完全使用计算机的性能。</li>\n</ul>\n<h1 id=\"容器操作系统级虚拟化技术\"><a class=\"anchor\" href=\"#容器操作系统级虚拟化技术\">#</a> 容器 (操作系统级虚拟化技术)</h1>\n<blockquote>\n<p>容器是包含在任何环境中的运行所需的所有元素的软件包，这样容器就可以模拟化应用程序，并可以在任何地方运行。它直接调用原操作系统的能力，并屏蔽了操作系统之间的差异。</p>\n</blockquote>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> docker</h1>\n<blockquote>\n<p>docker 是一个用于构建、运行和传送应用程序的平台，docker 是容器的一种实现方式。<br />\ndocker 和虚拟机的区别在于：是否模拟构建整个操作系统的能力。</p>\n</blockquote>\n<h2 id=\"image-镜像\"><a class=\"anchor\" href=\"#image-镜像\">#</a> image 镜像</h2>\n<blockquote>\n<p>image 镜像就相当于是一个菜谱，对应用程序的执行进行模板化。参照同一个 image 镜像运行的应用程序是相同的。它包含了运行容器所需的所有那日容（代码、运行时、库、环境变量和配置文件）<br />\nimage 镜像打包了：</p>\n</blockquote>\n<ul>\n<li>配置文件、启动命令</li>\n<li>应用程序、环境变量</li>\n<li>第三方软件库和依赖包</li>\n<li>运行时环境</li>\n<li>操作系统</li>\n</ul>\n<h2 id=\"docker-容器\"><a class=\"anchor\" href=\"#docker-容器\">#</a> docker 容器</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJzLnBsYXktd2l0aC1kb2NrZXIuY29tLw==\">https://labs.play-with-docker.com/</span> , 在线运行各种 docker 容器<br />\n docker 容器就相当于是一个根据 image 镜像创建的运行实例，在 docker 容器中包含了运行时的全部环境，它屏蔽了操作系统之间的差异，使得应用程序的可移植性非常强。</p>\n</blockquote>\n<h1 id=\"docker-的优势\"><a class=\"anchor\" href=\"#docker-的优势\">#</a> docker 的优势</h1>\n<blockquote>\n<p>如果不使用 docker，在开发环境和测试环境中都需要对应用程序的运行环境进行配置。尤其是当应用程序十分复杂时，配置运行环境的工作就十分复杂，使用 docker 之后就相当于封装了应用程序及其对应的运行环境，并且屏蔽了操作系统之间的差异，它直接调用主机操作系统的能力运行 docker 容器。<br />\n例如：使用 docker 之后，我们开发环境配置好运行环境，打包成镜像之后，测试环境中直接使用镜像构建 docker 容器，运行应用程序即可，无需重新配置环境。</p>\n</blockquote>\n<h1 id=\"docker-命令\"><a class=\"anchor\" href=\"#docker-命令\">#</a> docker 命令</h1>\n<blockquote>\n<p>安装 docker 之后，就可以使用 docker 对应的命令（windows 安装后需要开启 Hyper 选项），命令行中输入对应的命令之后会交给内部的 docker daemon 进行执行，docker daemon 会将执行结果返回给命令行。</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># docker run：运行一个新的容器实例。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> IMAGE <span class=\"token punctuation\">[</span>COMMAND<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARG<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># docker start：启动一个或多个已经停止运行的容器。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> start <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># docker stop：停止一个或多个正在运行的容器。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> stop <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># docker pause：暂停容器内的所有进程。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> pause <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># docker unpause：恢复之前被暂停的容器。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">docker</span> unpause <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># docker restart：重启容器。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">docker</span> restart <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># docker rm：删除一个或多个容器。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># docker rmi：删除一个或多个镜像。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">docker</span> rmi <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> IMAGE <span class=\"token punctuation\">[</span>IMAGE<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># docker ps：列出当前正在运行的容器。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># docker images：列出本地的镜像。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">docker</span> images <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>REPOSITORY<span class=\"token punctuation\">[</span>:TAG<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># docker build：根据 Dockerfile 构建镜像。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token environment constant\">PATH</span> <span class=\"token operator\">|</span> URL <span class=\"token operator\">|</span> -</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># docker pull：从远程仓库拉取镜像或仓库到本地。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">docker</span> pull <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> NAME<span class=\"token punctuation\">[</span>:TAG<span class=\"token operator\">|</span>@DIGEST<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># docker push：将本地的镜像或仓库推送到远程仓库。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">docker</span> push <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> NAME<span class=\"token punctuation\">[</span>:TAG<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># docker login：登录到一个 Docker 远程仓库。</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">docker</span> login <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>SERVER<span class=\"token punctuation\">]</span> USERNAME</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># docker logout：从 Docker 远程仓库登出。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">logout</span> <span class=\"token punctuation\">[</span>SERVER<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># docker exec：在运行的容器中执行命令。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER COMMAND <span class=\"token punctuation\">[</span>ARG<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># docker logs：获取容器的日志。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">docker</span> logs <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># docker network：管理 Docker 网络设置。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function\">docker</span> network <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># docker volume：管理 Docker 数据卷。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">docker</span> volume <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># docker inspect：获取容器、镜像、网络或数据卷的详细信息。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token function\">docker</span> inspect <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> NAME<span class=\"token operator\">|</span>ID <span class=\"token punctuation\">[</span>NAME<span class=\"token operator\">|</span>ID<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># docker prune：删除未使用的 Docker 对象，如容器、镜像、网络、数据卷。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">docker</span> prune <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># docker stats：实时显示容器的资源使用情况。</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token function\">docker</span> stats <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># docker-compose：使用 Docker Compose 工具管理多容器 Docker 应用程序。</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token function\">docker-compose</span> <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>COMMAND<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARGS<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"容器化\"><a class=\"anchor\" href=\"#容器化\">#</a> 容器化</h1>\n<blockquote>\n<p>如何将应用程序和运行时的环境打包成一个镜像呢（）容器化？这时候就需要配置 dockerfile 定义容器的构建过程，构建镜像。最后使用 docker 命令镜像创建和运行容器（docker build -t app-name . 和 docker run -p 8080:8080 app-name）</p>\n</blockquote>\n<h1 id=\"dockerfile\"><a class=\"anchor\" href=\"#dockerfile\">#</a> Dockerfile</h1>\n<blockquote>\n<p>dockerfile 文件用于定义软件依赖的构建过程，确保应用程序的依赖项得到满足。alpine 是一个轻量的 linx 发行版。</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Docker 镜像是一层一层进行构建的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 指定对应的操作系统和版本，alpine 是 linx 轻量级的发行版</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:14-alpine</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 COPY 命令，将文件复制到镜像中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> index.js /index.js</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 运行应用程序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># CMD [\"node\",\"/index.js\"] 或者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> node /index.js</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 此时使用 docker build -t docker-name: 版本号。就可以构建 docker 镜像，不指定版本号默认是 latest</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 docker image ls 可以查看所有的镜像</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 使用 docker run docker-name 运行镜像</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 将容器推送到远程镜像仓库：docker push your-dockerhub-username/your-app-name:tag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 如果想要根据这个镜像创建 docker 容器，只需要拿到 Dockerfile 文件，运行上述命令即可</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 通常将应用程序上传到 docker hub 中，后面通过 docker pull docker-name 进行拉取</span></pre></td></tr></table></figure><h1 id=\"volumes-逻辑卷\"><a class=\"anchor\" href=\"#volumes-逻辑卷\">#</a> volumes 逻辑卷</h1>\n<blockquote>\n<p>volumes 逻辑卷是 Docker 中用于存储数据的，因为 docker 中的数据是不会进行持久化的。它通常以一个干净的文件开始，容器启动之后，可以在容器中创建文件和修改文件，但是当容器停止之后，数据并不会持久化，从而丢失，这时候就要在 Docker Compose 中使用 volumes 逻辑卷<br />\n volumes 逻辑卷可以将容器中的目录或者指定路径映射到宿主机的某一个目录或者位置上，从而实现数据的持久化。</p>\n</blockquote>\n<h1 id=\"dev-environments\"><a class=\"anchor\" href=\"#dev-environments\">#</a> Dev Environments</h1>\n<blockquote>\n<p>docker desktop 中的一个功能，可以将自己当前环境分享给其他人，从而共享开发环境。</p>\n</blockquote>\n<h1 id=\"docker-compose\"><a class=\"anchor\" href=\"#docker-compose\">#</a> Docker Compose</h1>\n<p>容器编排工具</p>\n<blockquote>\n<p>一个项目中需要的应用程序和应用程序（容器）间的逻辑是十分复杂的，统一管理他们的启动和停止非常麻烦，Docker Compose 用一个 YAML 文件，定义和运行多容器 Docker 应用程序，其中可以配置多个容器、网络和数据卷等，以便在隔离的环境中快速启动和停止整个应用程序。</p>\n</blockquote>\n<p><strong>Docker Compose 的作用：</strong></p>\n<ul>\n<li>多容器管理：Docker Compose 允许你在一个文件中定义多个容器，统一管理它们的启动和停止。</li>\n<li>环境一致性：通过使用 Compose，你可以在不同的机器和环境中保持应用程序的一致性，因为它定义了应用程序的完整运行环境。</li>\n<li>配置简化：Compose 使用 YAML 格式，使得配置更加简洁和易于理解。</li>\n<li>服务依赖管理：Compose 可以处理容器之间的依赖关系，确保在启动和停止时按正确的顺序操作。</li>\n<li>网络配置：Compose 允许定义自定义网络，使容器之间能够相互发现和通信。</li>\n<li>数据卷管理：可以配置数据卷，以便在容器之间共享数据或持久化数据。</li>\n<li>扩展性：Compose 支持扩展服务，允许你指定服务运行的容器数量。</li>\n<li>自动化：通过简单的命令，Compose 可以自动构建、启动或停止整个应用程序。</li>\n</ul>\n<p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.8\"</span> <span class=\"token comment\"># 指定 docker-compose 的版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>alpine <span class=\"token comment\"># 使用官方的 nginx 镜像（基于 Alpine 版本）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80:80\"</span> <span class=\"token comment\"># 将容器的 80 端口映射到宿主机的 80 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./src<span class=\"token punctuation\">:</span>/usr/share/nginx/html <span class=\"token comment\"># 挂载当前目录下的 src 文件夹到容器的 nginx HTML 目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> app <span class=\"token comment\"># 表示 web 服务依赖于 app 服务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./app <span class=\"token comment\"># 构建当前目录下 app 文件夹中的 Dockerfile</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9000\"</span> <span class=\"token comment\"># 暴露容器内部的 9000 端口，供其他服务访问，但不映射到宿主机</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> APP_ENV=production <span class=\"token comment\"># 设置环境变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./app<span class=\"token punctuation\">:</span>/var/www <span class=\"token comment\"># 挂载当前目录下的 app 文件夹到容器的 /var/www 目录</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span> <span class=\"token comment\"># 使用官方的 MySQL 5.7 镜像</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">-</span> db<span class=\"token punctuation\">-</span>data<span class=\"token punctuation\">:</span>/var/lib/mysql <span class=\"token comment\"># 挂载卷 db-data 到容器的 MySQL 数据目录</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=rootpassword <span class=\"token comment\"># 设置 MySQL root 用户的密码</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_DATABASE=myappdb <span class=\"token comment\"># 创建并使用名为 myappdb 的数据库</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">db-data</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 定义一个名为 db-data 的卷，用于持久化 MySQL 数据</span></pre></td></tr></table></figure><p><code>docker-compose.yml</code>  文件将一组互相关联的容器组合在一起，然后使用 <code>docker compose up</code>  命令（包含 docker-compose.yml 的文件中执行）即可启动整个应用程序。</p>\n<p>docker-compose.yml 可以结合 CI/CD 工具，集成到自动化工作流中，实现从开发到部署的自动化。</p>\n<h1 id=\"kubernetes\"><a class=\"anchor\" href=\"#kubernetes\">#</a> Kubernetes</h1>\n<p>Kubernetes 和 Docker Compose 类似，是一种容器编排工具，用于管理和部署容器化应用程序。但是 Kubernetes 相比之下更适合大规模的生产环境和复杂的容器编排需求。</p>\n<h3 id=\"比较\"><a class=\"anchor\" href=\"#比较\">#</a> 比较</h3>\n<p>k8s 和 Docker Compose 的区别</p>\n<ol>\n<li>功能和规模：\n<ul>\n<li>Docker Compose 是一个简单的工具，用于定义和运行多个 Docker 容器组成的应用程序。它适用于单机或简单的多机环境，并提供了一种简化的方式来定义容器之间的依赖关系和配置。</li>\n<li>Kubernetes 是一个更强大和复杂的容器编排平台，用于管理大规模的容器集群。它可以自动化容器的部署、扩展、负载均衡、故障恢复等操作，并提供了更丰富的功能和管理能力。</li>\n</ul>\n</li>\n<li>架构和部署方式：\n<ul>\n<li>Docker Compose 使用单个 YAML 文件来定义整个应用程序的配置和服务之间的关系。它可以在单个主机上使用 <code>docker-compose</code>  命令进行部署和管理。</li>\n<li>Kubernetes 使用一组 YAML 文件来定义应用程序的各个组件和资源，并通过 Kubernetes API 进行管理。它需要一个 Kubernetes 集群来部署和运行应用程序。</li>\n</ul>\n</li>\n<li>可扩展性和弹性：\n<ul>\n<li>Docker Compose 适用于小型应用程序或开发 / 测试环境，它的扩展性和弹性有限。它可以在单个主机上运行多个容器，但无法自动进行水平扩展或故障恢复。</li>\n<li>Kubernetes 设计用于大规模的生产环境，具有强大的扩展性和弹性。它可以自动进行容器的水平扩展、负载均衡和故障恢复，以确保应用程序的高可用性和性能。</li>\n</ul>\n</li>\n<li>社区和生态系统：\n<ul>\n<li>Docker Compose 是 Docker 官方提供的工具，拥有庞大的用户社区和丰富的生态系统。它与 Docker Engine 紧密集成，并且易于上手和使用。</li>\n<li>Kubernetes 是由 Google 开源并托管在 Cloud Native Computing Foundation（CNCF）下的项目，也拥有庞大的用户社区和活跃的开发者社区。它有许多第三方工具和插件，可以扩展其功能和集成其他系统。</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，Docker Compose 适用于简单的应用程序部署和开发 / 测试环境，而 Kubernetes 适用于大规模的生产环境和复杂的容器编排需求。根据实际需求和规模选择合适的工具</p>\n",
            "tags": [
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/07/07/gitlab-cicd/",
            "url": "https://dmqweb.cn/2024/07/07/gitlab-cicd/",
            "title": "gitlab cicd",
            "date_published": "2024-07-07T06:26:39.000Z",
            "content_html": "<h1 id=\"cicd\"><a class=\"anchor\" href=\"#cicd\">#</a> CICD</h1>\n<p>CI：持续集成</p>\n<p>CD：持续交付</p>\n<p>CD：持续部署</p>\n<h3 id=\"上线流程\"><a class=\"anchor\" href=\"#上线流程\">#</a> 上线流程</h3>\n<blockquote>\n<p>发布上线流程举例：git 上传，开始跑测试，进行打包，使用 docker 容器化镜像打包，推送到 dev 开发环境，部署到 staging 测试环境，最后部署到 production 生产环境</p>\n</blockquote>\n<h3 id=\"pipeline\"><a class=\"anchor\" href=\"#pipeline\">#</a> pipeline</h3>\n<blockquote>\n<p>一次 pipeline 就相当于一次构建任务，里面可以包含多个流程，如：安装依赖，跑测试代码，eslint 校验，编译，部署测试服务器，部署生产服务器等流程，任何提交或者 Merge Request 的合并都可以触发 Pipeline。</p>\n</blockquote>\n<h3 id=\"runner\"><a class=\"anchor\" href=\"#runner\">#</a> runner</h3>\n<blockquote>\n<p>一个 runner 就相当于一个打工仔，可以下载 gitlab runner 之后注册多个 runner，并且指定对应的 runner 执行任务。</p>\n</blockquote>\n<h1 id=\"gitlab-ciyml-文件\"><a class=\"anchor\" href=\"#gitlab-ciyml-文件\">#</a> .gitlab-ci.yml 文件</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 一项代表一个 pipeline 作业</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">helloworld</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> linter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"hello world<span class=\"token punctuation\">,</span>Gitlab<span class=\"token tag\">!</span>\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> chmod +x ./run.sh <span class=\"token comment\"># 将 run.sh 文件添加可执行权限</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">-</span> ./run.sh <span class=\"token comment\"># 将执行过程提取成可执行文件进行执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 私密使用（不想暴露到代码中）的环境变量，可以在平台上进行设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 全局的环境变量，还有一些内置的环境变量，例如：$CI_PIPELINE_SOURCE 详见文档</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">my_password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"全局的配置变量\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">run_unit_tests</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 任务中配置变量，使用时加上 $ 符号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">my_password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"iamsomepassword...\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> testing</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"执行单元测试\"</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 配置运行的容器镜像</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> alpine<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>3.1.2<span class=\"token punctuation\">-</span>alpine3.16 <span class=\"token comment\"># 配置单项作业运行的容器镜像</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 同一个 stage 中，通过 needs 来指定工作的相依性</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">-</span> bad_job</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"安装套件\"</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"设定资料链接\"</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">workflow</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 配置工作流</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 当 main 分支 commit 时，才启动工作流程</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $CI_COMMIT_BRANCH == \"main\" <span class=\"token comment\"># $CI_COMMIT_BRANCH 是内置的环境变量</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> never</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token key atrule\">after_script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deplpy</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"删除不必要的文件\"</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">build_docker_image</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定只有推送到 main 分支上才会执行，指定哪些分支不执行使用：except</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">-</span> main</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">state</span><span class=\"token punctuation\">:</span> build</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">-</span> echo \"building docker image\"</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token key atrule\">bad_job</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 假设错误的任务，则会中断当前工作的执行，每个工作独立执行</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定 runner (打工仔) 进行执行，在注册 runner 时会创建一个 tags</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">-</span> runner_tags</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">-</span> uname <span class=\"token comment\"># 验证当前在 runner 中执行</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> script<span class=\"token punctuation\">:</span>no_script</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># 建立舞台，使得工作按照指定先后顺序执行</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">-</span> linter</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">-</span> testing</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">-</span> build</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">-</span> deploy</pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># 服务端去官网安装 gitlab runner，使用 runner（打工仔）分配工作</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># 接着启动服务</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 然后将这个服务进行注册（配置在 gitlab runner 的配置中）</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\"># runner 分为：shared runner、 group runners 和 specific runners 三种</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 可以为某个群组设置 runner，例如在群组中设置 runner 配置，服务中注册一个 runner 进行配置</span></pre></td></tr></table></figure>",
            "tags": [
                "gitlab cicd",
                "gitlab cicd"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/",
            "url": "https://dmqweb.cn/2024/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/",
            "title": "设计模式与设计原则",
            "date_published": "2024-07-07T06:26:39.000Z",
            "content_html": "<p>注：本教程总结自《设计模式之争》和《大话设计模式》，对设计模式感兴趣的同学强烈推荐这两本书。</p>\n<h1 id=\"23-种设计模式\"><a class=\"anchor\" href=\"#23-种设计模式\">#</a> 23 种设计模式</h1>\n<h2 id=\"创建型\"><a class=\"anchor\" href=\"#创建型\">#</a> 创建型</h2>\n<ul>\n<li>\n<p>单例模式</p>\n</li>\n<li>\n<p>原型模式</p>\n</li>\n<li>\n<p>工厂模式</p>\n</li>\n<li>\n<p>抽象工厂模式</p>\n</li>\n<li>\n<p>建造者模式</p>\n</li>\n</ul>\n<h2 id=\"结构型\"><a class=\"anchor\" href=\"#结构型\">#</a> 结构型</h2>\n<ul>\n<li>\n<p>适配器模式</p>\n</li>\n<li>\n<p>装饰器模式</p>\n</li>\n<li>\n<p>代理模式</p>\n</li>\n<li>\n<p>外观模式</p>\n</li>\n<li>\n<p>桥接模式</p>\n</li>\n<li>\n<p>组合模式</p>\n</li>\n<li>\n<p>享元模式</p>\n</li>\n</ul>\n<h2 id=\"行为型\"><a class=\"anchor\" href=\"#行为型\">#</a> 行为型</h2>\n<ul>\n<li>\n<p>观察者模式</p>\n</li>\n<li>\n<p>迭代器模式</p>\n</li>\n<li>\n<p>策略模式</p>\n</li>\n<li>\n<p>模板方法模式</p>\n</li>\n<li>\n<p>职责链模式</p>\n</li>\n<li>\n<p>命令模式</p>\n</li>\n<li>\n<p>备忘录模式</p>\n</li>\n<li>\n<p>状态模式</p>\n</li>\n<li>\n<p>访问者模式</p>\n</li>\n<li>\n<p>中介者模式</p>\n</li>\n<li>\n<p>解释器模式</p>\n</li>\n</ul>\n<h1 id=\"工厂模式\"><a class=\"anchor\" href=\"#工厂模式\">#</a> 工厂模式</h1>\n<p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// use</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>适用场景</li>\n</ul>\n<p>如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择<br />\n将 new 操作简单封装，遇到 new 的时候就应该考虑是否用工厂模式；<br />\n需要依赖具体环境创建不同实例，这些实例都有相同的行为，这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>创建对象的过程可能很复杂，但我们只需要关心创建结果。<br />\n构造函数和创建者分离，符合 “开闭原则”<br />\n 一个调用者想创建一个对象，只要知道其名称就可以了。<br />\n扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>添加新产品时，需要编写新的具体产品类，一定程度上增加了系统的复杂度<br />\n考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度</p>\n<ul>\n<li>什么时候不用<br />\n当被应用到错误的问题类型上时，这一模式会给应用程序引入大量不必要的复杂性。除非为创建对象提供一个接口是我们编写的库或者框架的一个设计上目标，否则我会建议使用明确的构造器，以避免不必要的开销。<br />\n由于对象的创建过程被高效的抽象在一个接口后面的事实，这也会给依赖于这个过程可能会有多复杂的单元测试带来问题。<br />\n例子</li>\n</ul>\n<p>曾经我们熟悉的 JQuery 的 $() 就是一个工厂函数，它根据传入参数的不同创建元素或者去寻找上下文中的元素，创建成相应的 jQuery 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">jQuery</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 此处省略若干 API</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">jQuery</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>vue 的异步组件</li>\n</ul>\n<p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async-example\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 向 `resolve` 回调传递组件定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>I am async!&lt;/div>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"单例模式\"><a class=\"anchor\" href=\"#单例模式\">#</a> 单例模式</h1>\n<p>一个类只有一个实例，并提供一个访问它的全局访问点。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginForm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"hide\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经显示\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录框显示成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"hide\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经隐藏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"hide\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录框隐藏成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>LoginForm<span class=\"token punctuation\">.</span>getInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">let</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> LoginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>obj1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> LoginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>obj2<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优点</li>\n</ul>\n<p>划分命名空间，减少全局变量<br />\n增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护<br />\n且只会实例化一次。简化了代码的调试和维护</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>由于单例模式提供的是一种单点访问，所以它有可能导致模块间的强耦合 从而不利于单元测试。无法单独测试一个调用了来自单例的方法的类，而只能把它与那个单例作为一个单元一起测试。</p>\n<ul>\n<li>场景例子</li>\n</ul>\n<p>定义命名空间和实现分支型方法<br />\n登录框<br />\n vuex 和 redux 中的 store</p>\n<h1 id=\"适配器模式0\"><a class=\"anchor\" href=\"#适配器模式0\">#</a> 适配器模式 0</h1>\n<p>将一个类的接口转化为另外一个接口，以满足用户需求，使类之间接口不兼容问题通过适配器得以解决。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plug</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"iphone 充电头\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plug <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Plug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plug<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 适配器 Type-c 充电头\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>target<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iphone 充电头 适配器转 Type-c 充电头</span></pre></td></tr></table></figure><ul>\n<li>优点</li>\n</ul>\n<p>可以让任何两个没有关联的类一起运行。<br />\n提高了类的复用。<br />\n适配对象，适配库，适配数据</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>额外对象的创建，非直接调用，存在一定的开销（且不像代理模式在某些功能点上可实现性能优化)<br />\n 如果没必要使用适配器模式的话，可以考虑重构，如果使用的话，尽量把文档完善</p>\n<ul>\n<li>场景</li>\n</ul>\n<p>整合第三方 SDK<br />\n 封装旧接口</p>\n<p>自己封装的 ajax， 使用方式如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/getData\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 因为历史原因，代码中全都是：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// $.ajax(&#123;....&#125;)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 做一层适配器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function-variable function\">ajax</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>vue 的 computed</p>\n<pre><code>&lt;template&gt;\n  &lt;div id=&quot;example&quot;&gt;\n    &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;\n    &lt;!-- Hello --&gt;\n    &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;\n    &lt;!-- olleH --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nexport default &#123;\n  name: &quot;demo&quot;,\n  data() &#123;\n    return &#123;\n      message: &quot;Hello&quot;,\n    &#125;;\n  &#125;,\n  computed: &#123;\n    reversedMessage: function () &#123;\n      return this.message.split(&quot;&quot;).reverse().join(&quot;&quot;);\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nexport default &#123;\n  name: &quot;demo&quot;,\n  data() &#123;\n    return &#123;\n      message: &quot;Hello&quot;,\n    &#125;;\n  &#125;,\n  computed: &#123;\n    reversedMessage: function () &#123;\n      return this.message.split(&quot;&quot;).reverse().join(&quot;&quot;);\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<p>原有 data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式<br />\n不同点<br />\n适配器与代理模式相似</p>\n<p>适配器模式： 提供一个不同的接口（如不同版本的插头）<br />\n代理模式： 提供一模一样的接口</p>\n<h1 id=\"装饰者模式\"><a class=\"anchor\" href=\"#装饰者模式\">#</a> 装饰者模式</h1>\n<p>动态地给某个对象添加一些额外的职责，，是一种实现继承的替代方案<br />\n在不改变原对象的基础上，通过对其进行包装扩展，使原有对象可以满足用户的更复杂需求，而不会影响从这个类中派生的其他对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cellphone</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生成一个手机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Decorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cellphone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cellphone <span class=\"token operator\">=</span> cellphone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cellphone<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createShell</span><span class=\"token punctuation\">(</span>cellphone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">createShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生成手机壳\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 测试代码</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> cellphone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cellphone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cellphone<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">let</span> dec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Decorator</span><span class=\"token punctuation\">(</span>cellphone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>dec<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景例子</li>\n</ul>\n<p>比如现在有 4 种型号的自行车，我们为每种自行车都定义了一个单<br />\n独的类。现在要给每种自行车都装上前灯、尾<br />\n灯和铃铛这 3 种配件。如果使用继承的方式来给<br />\n每种自行车创建子类，则需要 4×3 = 12 个子类。<br />\n但是如果把前灯、尾灯、铃铛这些对象动态组<br />\n合到自行车上面，则只需要额外增加 3 个类<br />\n ES7 Decorator 阮一峰<br />\n core-decorators</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>装饰类和被装饰类都只关心自身的核心业务，实现了解耦。<br />\n方便动态的扩展功能，且提供了比继承更多的灵活性。</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>多层装饰比较复杂。<br />\n常常会引入许多小对象，看起来比较相似，实际功能大相径庭，从而使得我们的应用程序架构变得复杂起来</p>\n<h1 id=\"代理模式\"><a class=\"anchor\" href=\"#代理模式\">#</a> 代理模式</h1>\n<blockquote>\n<p>代理模式和中介者模式的区别在于：代理模式往往是一对一的，但中介模式往往是一对多。<br />\n是为一个对象提供一个代用品或占位符，以便控制对它的访问</p>\n</blockquote>\n<p>假设当 A 在心情好的时候收到花，小明表白成功的几率有<br />\n 60%，而当 A 在心情差的时候收到花，小明表白的成功率无限趋近于 0。<br />\n小明跟 A 刚刚认识两天，还无法辨别 A 什么时候心情好。如果不合时宜地把花送给 A，花<br />\n被直接扔掉的可能性很大，这束花可是小明吃了 7 天泡面换来的。<br />\n但是 A 的朋友 B 却很了解 A，所以小明只管把花交给 B，B 会监听 A 的心情变化，然后选<br />\n择 A 心情好的时候把花转交给 A，代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Flower</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> xiaoming <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">sendFlower</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> flower <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    target<span class=\"token punctuation\">.</span><span class=\"token function\">receiveFlower</span><span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">receiveFlower</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flower</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenGoodMood</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">receiveFlower</span><span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function-variable function\">receiveFlower</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flower</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到花\"</span> <span class=\"token operator\">+</span> flower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function-variable function\">listenGoodMood</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>xiaoming<span class=\"token punctuation\">.</span><span class=\"token function\">sendFlower</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景</li>\n</ul>\n<p>HTML 元 素事件代理</p>\n<pre><code>&lt;template&gt;\n  &lt;ul id=&quot;ul&quot;&gt;\n    &lt;li&gt;1&lt;/li&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li&gt;3&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n&lt;script&gt;\nlet ul = document.querySelector(&quot;#ul&quot;);\nul.addEventListener(&quot;click&quot;, (event) =&gt; &#123;\n  console.log(event.target);\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<p>ES6 的 proxy 阮一峰 Proxy<br />\njQuery.proxy () 方法</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用<br />\n代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；</p>\n<ul>\n<li>\n<p>缺点<br />\n处理请求速度可能有差别，非直接访问存在开销</p>\n</li>\n<li>\n<p>不同点<br />\n装饰者模式实现上和代理模式类似</p>\n</li>\n</ul>\n<p>装饰者模式： 扩展功能，原有功能不变且可直接使用<br />\n代理模式： 显示原有功能，但是经过限制之后的</p>\n<h1 id=\"外观模式\"><a class=\"anchor\" href=\"#外观模式\">#</a> 外观模式</h1>\n<p>为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使子系统更加容易使用<br />\n兼容浏览器事件绑定</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addMyEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>attachEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    el<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> ev<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    el<span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> ev<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 封装接口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> myEvent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function-variable function\">stop</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>场景</p>\n<p>设计初期，应该要有意识地将不同的两个层分离，比如经典的三层结构，在数据访问层和业务逻辑层、业务逻辑层和表示层之间建立外观 Facade<br />\n 在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade 可以提供一个简单的接口，减少他们之间的依赖。<br />\n在维护一个遗留的大型系统时，可能这个系统已经很难维护了，这时候使用外观 Facade 也是非常合适的，为系系统开发一个外观 Facade 类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和 Facade 对象交互，Facade 与遗留代码交互所有的复杂工作。</p>\n<p>参考： 大话设计模式</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>减少系统相互依赖。<br />\n提高灵活性。<br />\n提高了安全性</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>\n<p>观察者模式<br />\n定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使它们能够自动更新自己，当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。</p>\n<h1 id=\"发布-订阅\"><a class=\"anchor\" href=\"#发布-订阅\">#</a> 发布 &amp; 订阅</h1>\n<ul>\n<li>一对多</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 主题 保存状态，状态变化之后触发所有观察者对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAllObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">notifyAllObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      observer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 观察者</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> subject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> update, state: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"02\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景</li>\n</ul>\n<p>DOM 事件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>vue 响应式</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>支持简单的广播通信，自动通知所有已经订阅过的对象<br />\n目标对象与观察者之间的抽象耦合关系能单独扩展以及重用<br />\n增加了灵活性<br />\n观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。</p>\n<ul>\n<li>缺点<br />\n过度使用会导致对象与对象之间的联系弱化，会导致程序难以跟踪维护和理解</li>\n</ul>\n<h1 id=\"状态模式\"><a class=\"anchor\" href=\"#状态模式\">#</a> 状态模式</h1>\n<p>允许一个对象在其内部状态改变的时候改变它的行为，对象看起来似乎修改了它的类</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 状态 （弱光、强光、关灯）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> light</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">let</span> weak <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">let</span> strong <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">let</span> off <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 弱光</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>weak<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 强光</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>strong<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 关闭</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>off<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>场景</p>\n<p>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为<br />\n一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>定义了状态与行为之间的关系，封装在一个类里，更直观清晰，增改方便<br />\n状态与状态间，行为与行为间彼此独立互不干扰<br />\n用对象代替字符串来记录当前状态，使得状态的切换更加一目了然</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>会在系统中定义许多状态类<br />\n逻辑分散</p>\n<h1 id=\"迭代器模式\"><a class=\"anchor\" href=\"#迭代器模式\">#</a> 迭代器模式</h1>\n<p>提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">conatiner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> conatiner<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 测试代码</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>场景例子</li>\n</ul>\n<p>Array.prototype.forEach<br />\njQuery 中的 $.each ()<br />\nES6 Iterator</p>\n<ul>\n<li>特点</li>\n</ul>\n<p>访问一个聚合对象的内容而无需暴露它的内部表示。<br />\n为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作</p>\n<ul>\n<li>总结<br />\n对于集合内部结果常常变化各异，不想暴露其内部结构的话，但又想让客户代码透明的访问其中的元素，可以使用迭代器模式</li>\n</ul>\n<h1 id=\"桥接模式\"><a class=\"anchor\" href=\"#桥接模式\">#</a> 桥接模式</h1>\n<p>桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> red <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> yellow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">let</span> triangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"triangle\"</span><span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>triangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优点</li>\n</ul>\n<p>有助于独立地管理各组成部分， 把抽象化与实现化解耦<br />\n提高可扩充性</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>大量的类将导致开发成本的增加，同时在性能方面可能也会有所减少。</p>\n<h1 id=\"组合模式\"><a class=\"anchor\" href=\"#组合模式\">#</a> 组合模式</h1>\n<p>将对象组合成树形结构，以表示 “整体 - 部分” 的层次结构。<br />\n通过对象的多态表现，使得用户对单个对象和组合对象的使用具有一致性。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TrainOrder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建火车票订单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HotelOrder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建酒店订单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TotalOrder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">addOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      item<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 可以在购票网站买车票同时也订房间</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">let</span> train <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrainOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> hotel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HotelOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TotalOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>total<span class=\"token punctuation\">.</span><span class=\"token function\">addOrder</span><span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOrder</span><span class=\"token punctuation\">(</span>hotel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景</li>\n</ul>\n<p>表示对象 - 整体层次结构<br />\n希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）</p>\n<ul>\n<li>缺点<br />\n如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。</li>\n</ul>\n<h1 id=\"原型模式\"><a class=\"anchor\" href=\"#原型模式\">#</a> 原型模式</h1>\n<p>原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello， My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaoming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>student<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>原型模式，就是创建一个共享的原型，通过拷贝这个原型来创建新的类，用于创建重复的对象，带来性能上的提升。</p>\n<h1 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h1>\n<p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>策略模式-校验表单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>registerForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xxxx.com/api/register<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      用户名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> 密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      手机号码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phoneNumber<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提交<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 策略对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">const</span> strategies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function-variable function\">isNoEmpty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function-variable function\">isNoSpace</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function-variable function\">minLength</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function-variable function\">maxLength</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function-variable function\">isMobile</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> errorMsg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>              value</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// 验证类</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">class</span> <span class=\"token class-name\">Validator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> rules</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>rule <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">let</span> strategyAry <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span>strategy<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span>errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>              <span class=\"token keyword\">let</span> strategy <span class=\"token operator\">=</span> strategyAry<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>              strategyAry<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>              strategyAry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>              <span class=\"token keyword\">return</span> strategies<span class=\"token punctuation\">[</span>strategy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> strategyAry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> validatorFunc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>validatorFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> <span class=\"token function\">validatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>              <span class=\"token keyword\">return</span> errorMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token comment\">// 调用代码</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token keyword\">let</span> registerForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"registerForm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">validataFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">let</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"isNoEmpty\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"用户名不可为空\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"isNoSpace\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"不允许以空白字符命名\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minLength:2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"用户名长度不能小于2位\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minLength:6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"密码长度不能小于6位\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        validator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registerForm<span class=\"token punctuation\">.</span>phoneNumber<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token literal-property property\">strategy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"isMobile\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token literal-property property\">errorMsg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入正确的手机号码格式\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      registerForm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">let</span> errorMsg <span class=\"token operator\">=</span> <span class=\"token function\">validataFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>errorMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n如果在一个系统里面有许多类，它们之间的区别仅在于它们的 ' 行为 '，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br />\n一个系统需要动态地在几种算法中选择一种。<br />\n表单验证</li>\n<li>优点<br />\n利用组合、委托、多态等技术和思想，可以有效的避免多重条件选择语句<br />\n提供了对开放 - 封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，理解，易于扩展<br />\n利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的代替方案</li>\n<li>缺点<br />\n会在程序中增加许多策略类或者策略对象<br />\n要使用策略模式，必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，这样才能选择一个合适的 strategy</li>\n</ul>\n<h1 id=\"享元模式\"><a class=\"anchor\" href=\"#享元模式\">#</a> 享元模式</h1>\n<p>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> examCarNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 驾考车总数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">///_ 驾考车对象 _/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExamCar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>examCarNum<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carId <span class=\"token operator\">=</span> examCarNum</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carType <span class=\"token operator\">=</span> carType <span class=\"token operator\">?</span> <span class=\"token string\">'手动档'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'自动档'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usingState <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 是否正在使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 在本车上考试 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">examine</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">candidateId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usingState <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">考生- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> candidateId <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 开始在</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carType <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">驾考车- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carId <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 上考试</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usingState <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%c考生- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> candidateId <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 在</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carType <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">驾考车- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carId <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 上考试完毕</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color:#f40'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// 0~2 秒后考试完毕</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">///_ 手动档汽车对象池 _/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ManualExamCarPool <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\\_pool<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 驾考车对象池</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\\_candidateQueue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 考生队列</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 注册考生 ID 列表 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">registCandidates</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">candidateList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  candidateList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">candidateId</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registCandidate</span><span class=\"token punctuation\">(</span>candidateId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/* 注册手动档考生 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">registCandidate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">candidateId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">const</span> examCar <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getManualExamCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 找一个未被占用的手动档驾考车</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>examCar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      examCar<span class=\"token punctuation\">.</span><span class=\"token function\">examine</span><span class=\"token punctuation\">(</span>candidateId<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 开始考试，考完了让队列中的下一个考生开始考试</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">const</span> nextCandidateId <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_candidateQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_candidateQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            nextCandidateId <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registCandidate</span><span class=\"token punctuation\">(</span>nextCandidateId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_candidateQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>candidateId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/* 注册手动档车 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">initManualExamCar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">manualExamCarNum</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> manualExamCarNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_pool<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ExamCar</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/* 获取状态为未被占用的手动档车 */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token function\">getManualExamCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_pool<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>car<span class=\"token punctuation\">.</span>usingState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>ManualExamCarPool<span class=\"token punctuation\">.</span><span class=\"token function\">initManualExamCar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 一共有 3 个驾考车</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>ManualExamCarPool<span class=\"token punctuation\">.</span><span class=\"token function\">registCandidates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 个考生来考试</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n文件上传需要创建多个文件实例的时候<br />\n如果一个应用程序使用了大量的对象，而这些大量的对象造成了很大的存储开销时就应该考虑使用享元模式</li>\n<li>优点<br />\n大大减少对象的创建，降低系统的内存，使效率提高。</li>\n<li>缺点</li>\n</ul>\n<p>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，<br />\n不应该随着内部状态的变化而变化，否则会造成系统的混乱</p>\n<h1 id=\"模板方法模式\"><a class=\"anchor\" href=\"#模板方法模式\">#</a> 模板方法模式</h1>\n<p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法和封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> brewDrink<span class=\"token punctuation\">,</span> addCondiment <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brewDrink <span class=\"token operator\">=</span> brewDrink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addCondiment <span class=\"token operator\">=</span> addCondiment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">///_ 烧开水，共用方法 _/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">boilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"水已经煮沸=== 共用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">///_ 倒杯子里，共用方法 _/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">pourCup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"倒进杯子里===共用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">///_ 模板方法 _/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">boilWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">brewDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pourCup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addCondiment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">_ 咖啡 _</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> coffee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Beverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">///_ 冲泡咖啡，覆盖抽象方法 _/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function-variable function\">brewDrink</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冲泡咖啡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">///_ 加调味品，覆盖抽象方法 _/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function-variable function\">addCondiment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加点奶和糖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>coffee<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现<br />\n子类中公共的行为应被提取出来并集中到一个公共父类中的避免代码重复</li>\n<li>优点<br />\n提取了公共代码部分，易于维护</li>\n<li>缺点<br />\n增加了系统复杂度，主要是增加了的抽象类和类间联系</li>\n</ul>\n<h1 id=\"职责链模式\"><a class=\"anchor\" href=\"#职责链模式\">#</a> 职责链模式</h1>\n<p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 请假审批，需要组长审批、经理审批、总监审批</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextAction <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">setNextAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextAction <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 审批</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextAction <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextAction<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"组长\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> a2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> a3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总监\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1<span class=\"token punctuation\">.</span><span class=\"token function\">setNextAction</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a2<span class=\"token punctuation\">.</span><span class=\"token function\">setNextAction</span><span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a1<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n JS 中的事件冒泡<br />\n作用域链<br />\n原型链</li>\n<li>优点<br />\n降低耦合度。它将请求的发送者和接收者解耦。<br />\n简化了对象。使得对象不需要知道链的结构<br />\n增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任<br />\n增加新的请求处理类很方便。</li>\n<li>缺点<br />\n不能保证某个请求一定会被链中的节点处理，这种情况可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。<br />\n使程序中多了很多节点对象，可能再一次请求的过程中，大部分的节点并没有起到实质性的作用。他们的作用仅仅是让请求传递下去，从性能当面考虑，要避免过长的职责链到来的性能损耗。</li>\n</ul>\n<h1 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h1>\n<p>将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收者类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Receiver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收者执行请求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 命令者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命令\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 触发者</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Invoker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 仓库</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">const</span> warehouse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Receiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 订单</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span>warehouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优点<br />\n对命令进行封装，使命令易于扩展和修改<br />\n命令发出者和接受者解耦，使发出者不需要知道命令的具体执行过程即可执行</li>\n<li>缺点<br />\n使用命令模式可能会导致某些系统有过多的具体命令类。</li>\n</ul>\n<h1 id=\"备忘录模式\"><a class=\"anchor\" href=\"#备忘录模式\">#</a> 备忘录模式</h1>\n<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 备忘类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Memento</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 备忘列表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CareTaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">memento</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>memento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 编辑器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Editor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token function\">saveContentToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">getContentFromMemento</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">memento</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 测试代码</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">let</span> editor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Editor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">let</span> careTaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CareTaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">saveContentToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">saveContentToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"444\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//444</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getContentFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//333</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getContentFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//222</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n分页控件<br />\n撤销组件</li>\n<li>优点<br />\n给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li>\n<li>缺点<br />\n消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</li>\n</ul>\n<h1 id=\"中介者模式\"><a class=\"anchor\" href=\"#中介者模式\">#</a> 中介者模式</h1>\n<blockquote>\n<p>代理模式和中介者模式的区别在于：代理模式往往是一对一的，但中介模式往往是一对多。<br />\n解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的 相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知 中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者<br />\n模式使网状的多对多关系变成了相对简单的一对多关系（类似于观察者模式，但是单向的，由中介者统一管理。）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      m<span class=\"token punctuation\">.</span><span class=\"token function\">setB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      m<span class=\"token punctuation\">.</span><span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mediator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">setB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mediator</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象<br />\n想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li>\n<li>优点<br />\n使各对象之间耦合松散，而且可以独立地改变它们之间的交互<br />\n中介者和对象一对多的关系取代了对象之间的网状多对多的关系<br />\n如果对象之间的复杂耦合度导致维护很困难，而且耦合度随项目变化增速很快，就需要中介者重构代码</li>\n<li>缺点<br />\n系统中会新增一个中介者对象，因 为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介 者对象自身往往就是一个难以维护的对象。</li>\n</ul>\n<h1 id=\"解释器模式\"><a class=\"anchor\" href=\"#解释器模式\">#</a> 解释器模式</h1>\n<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放 终结符表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放 非终结符表达式 (运算结果)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">set</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_sum <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PlusExpression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>context <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    context<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>context<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MinusExpression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>context <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    context<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>context<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/** 以下是测试代码 **/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 依次添加：加法 | 加法 | 减法 表达式</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>context<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PlusExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>context<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PlusExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>context<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MinusExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 依次执行：加法 | 加法 | 减法 表达式</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>context<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优点<br />\n易于改变和扩展文法。<br />\n由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法</li>\n<li>缺点<br />\n执行效率较低，在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度慢<br />\n对于复杂的文法比较难维护</li>\n</ul>\n<h1 id=\"访问者模式\"><a class=\"anchor\" href=\"#访问者模式\">#</a> 访问者模式</h1>\n<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 访问者</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Visitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">visitConcreteElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ConcreteElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ConcreteElement<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 元素类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteElement</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcreteElement.operation invoked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitConcreteElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// client</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Visitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>element<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>场景例子<br />\n对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作<br />\n需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作 &quot;污染&quot; 这些对象的类，也不希望在增加新操作时修改这些类。</li>\n<li>优点<br />\n符合单一职责原则<br />\n优秀的扩展性<br />\n灵活性</li>\n<li>缺点<br />\n具体元素对访问者公布细节，违反了迪米特原则<br />\n违反了依赖倒置原则，依赖了具体类，没有依赖抽象。<br />\n具体元素变更比较困难</li>\n</ul>\n<h1 id=\"设计原则\"><a class=\"anchor\" href=\"#设计原则\">#</a> 设计原则</h1>\n<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<h4 id=\"开放封闭原则\"><a class=\"anchor\" href=\"#开放封闭原则\">#</a> 开放封闭原则</h4>\n<blockquote>\n<p>开放封闭原则的核心是：对扩展开放，对修改封闭。</p>\n</blockquote>\n<ul>\n<li>对扩展开放意味着：软件实体（如类、模块、函数等）应该易于扩展，即：不修改现有代码的基础上添加新的功能</li>\n<li>对修改封闭意味着：软件实体应该避免修改，尤其是已经经过测试并被证明是稳定的代码</li>\n</ul>\n<h4 id=\"单一功能原则\"><a class=\"anchor\" href=\"#单一功能原则\">#</a> 单一功能原则</h4>\n<blockquote>\n<p>单一功能原则的核心是：一个类应该只有一个引起他变化的原因，它强调的是类的职责应该清晰明确，一个类只负责一项任务或功能，这样做的目的是为了降低类的复杂性，增加代码的可维护性和可复用性。</p>\n</blockquote>\n<h4 id=\"里氏替换原则\"><a class=\"anchor\" href=\"#里氏替换原则\">#</a> 里氏替换原则</h4>\n<blockquote>\n<p>里氏替换原则是实现开放封闭原则的方式之一，里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>\n</blockquote>\n<h4 id=\"最少知识原则\"><a class=\"anchor\" href=\"#最少知识原则\">#</a> 最少知识原则</h4>\n<blockquote>\n<p>最少知识原则又称迪米特法则，意思是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。<br />\n最少知识原则降低了类的耦合性，提高了模块的独立性，从而提升了模块的可复用率和系统的扩展性。但是过度使用则会使系统产生大量的中介类，从而增加系统的复杂性。</p>\n</blockquote>\n<h4 id=\"合成复用原则\"><a class=\"anchor\" href=\"#合成复用原则\">#</a> 合成复用原则</h4>\n<blockquote>\n<p>类的复用分为两种：继承复用和合成复用</p>\n</blockquote>\n<ul>\n<li>继承复用的优点：简单清晰，易于实现</li>\n<li>继承复用的缺点：破坏了类的封装性（继承会将父类的实现细节暴露给子类，因此这种复用又称为白箱复用）、子类与父类的耦合度高，父类的实现改变会导致子类的实现改变。</li>\n<li>合成复用的优点：维持了类的封装性（对象内部细节对外部是不可见的，因此又称为黑盒复用）、新类和旧类之间耦合度低、复用的灵活性高</li>\n<li>合成复用的缺点：实现复杂、代码量多</li>\n</ul>\n<blockquote>\n<p>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</p>\n</blockquote>\n<h2 id=\"面向接口\"><a class=\"anchor\" href=\"#面向接口\">#</a> 面向接口</h2>\n<h4 id=\"依赖倒置原则\"><a class=\"anchor\" href=\"#依赖倒置原则\">#</a> 依赖倒置原则</h4>\n<blockquote>\n<p>依赖倒置原则：程序要依赖于抽象接口，而不要依赖于具体的实现，也就是说高层模块不应该依赖于底层模块，两者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖抽象。<br />\n依赖倒置原则的核心是：通过面向接口的编程来降低类之间的耦合性。<br />\n <code>依赖倒置</code> 是面向接口领域的软件设计原则， <code>依赖反转</code> 是遵守依赖倒置原则而提出的一种设计模式，而 <code>依赖注入</code> 是为了实现依赖反转的一种手段和方式。</p>\n</blockquote>\n<h4 id=\"接口隔离原则\"><a class=\"anchor\" href=\"#接口隔离原则\">#</a> 接口隔离原则</h4>\n<blockquote>\n<p>接口隔离原则要求将臃肿庞大的接口进行拆分，拆分为更小的更具体的接口，小的接口之间相互隔离。<br />\n接口隔离原则的核心是：提高内聚，减少对外交互，使接口用最少的方法完成最多的事情。</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中：</p>\n<ul>\n<li>开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</li>\n<li>里氏替换原则告诉我们不要破坏继承体系；</li>\n<li>依赖倒置原则告诉我们要面向接口编程；</li>\n<li>单一职责原则告诉我们实现类要职责单一；</li>\n<li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li>\n<li>最少知识原则告诉我们要降低耦合度；</li>\n<li>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。</li>\n</ul>\n",
            "tags": [
                "设计模式与设计原则",
                "设计模式与设计原则"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/",
            "url": "https://dmqweb.cn/2024/05/27/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/",
            "title": "OSI七层网络模型",
            "date_published": "2024-05-27T10:16:27.000Z",
            "content_html": "<h1 id=\"osi七层网络模型\"><a class=\"anchor\" href=\"#osi七层网络模型\">#</a> OSI 七层网络模型</h1>\n<p><img data-src=\"/images/e3cc1860482648d5a2b2f6bac23280d3~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp\" alt=\"images\" /></p>\n<h1 id=\"七-应用层应用\"><a class=\"anchor\" href=\"#七-应用层应用\">#</a> 七、应用层（应用）</h1>\n<p>应用层就是我们最接近我们、最常用的一层，例如：</p>\n<ul>\n<li>ajax 调用接口发送<strong> http 请求</strong></li>\n<li>使用<strong> DNS 域名查询</strong>系统</li>\n<li><strong>邮件协议 SMTP</strong></li>\n<li><strong>websock 长连接</strong></li>\n<li><strong>SSH 协议</strong></li>\n<li>等。</li>\n</ul>\n<h1 id=\"六-表示层安全-压缩-翻译\"><a class=\"anchor\" href=\"#六-表示层安全-压缩-翻译\">#</a> 六、表示层（安全、压缩、翻译）</h1>\n<p>表示层做了几件重要的事情如：</p>\n<ul>\n<li>压缩</li>\n<li>安全（数据发送前进行加密，在接受者的表示层进行解密）</li>\n<li>程序在网络中的翻译官（对图片文件等格式进行解码和编码）</li>\n</ul>\n<h1 id=\"五-会话层检查点机制\"><a class=\"anchor\" href=\"#五-会话层检查点机制\">#</a> 五、会话层（检查点机制）</h1>\n<ul>\n<li>会话层是在发送方和接收方之间进行通信时创建、维持、之后终止或断开连接的地方</li>\n<li>会话层定义了一种机制，允许发送方和接收方启动或停止请求会话，当及当双方发生拥塞时仍然能保持对话</li>\n<li>会话层包含了一种<strong>检查点的机制</strong>来维持可靠会话，检查点定义了一个最接近成功通信的点，并且定义了当发生内容丢失或者损坏时需要回滚以便回复丢失或损坏数据的点，即断点下载的原理</li>\n</ul>\n<h1 id=\"四-传输层tcp-udp连接\"><a class=\"anchor\" href=\"#四-传输层tcp-udp连接\">#</a> 四、传输层（TCP、UDP 连接）</h1>\n<ul>\n<li>传输层主要就是定义端口号，以及控流和校验</li>\n<li>TCP（面向连接的协议并且 TCP 是可靠的），因为 TCP 会进行三报文握手和四报文挥手，所以是可靠的，但是这样会降低速度</li>\n<li>UDP（UDP 没有三报文握手和四报文挥手，因此不够稳定，但是速度快，常用于直播和游戏）</li>\n</ul>\n<h1 id=\"三-网络层ip地址\"><a class=\"anchor\" href=\"#三-网络层ip地址\">#</a> 三、网络层（IP 地址）</h1>\n<ul>\n<li>网络层是最复杂的一层，在网络层定义了 IP</li>\n<li>网络层控制数据链路层与传输层之间的信息转发，建立，维持和终止网络的连接。</li>\n<li>数据链路层的数据在网络层被转换为数据包，然后通过路径选择、分段组合、顺序、进 / 出路由等控制，将信息从一个网络设备传送到另一个网络设备</li>\n<li>寻址：对网络层而言使用 IP 地址来唯一标识互联网上的设备，网络层依靠 IP 地址进行相互通信（类似于数据链路层的 MAC 地址）</li>\n<li>路由：在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。</li>\n<li>如果所有的使用互联网的用户在同一个网段中，<strong>会产生广播风暴，所以要将用户进行划分</strong>，让他们在不同的网段中，自己在自己的小网段中广播。而<strong>互联网就是这无数的子网络构成的一个巨型网络</strong>。</li>\n<li>在网络层中引入了一套新的地址，让我们能够区分不同的网段。这套地址就叫做 “网络地址”，简称 “网址”。于是，<strong>” 网络层” 出现以后，每台计算机有了两种地址</strong>，<strong>一种是 MAC 地址，另一种是网络地址</strong>。两种地址之间没有任何联系，MAC 地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。** 网络地址帮助我们确定计算机所在的子网络，MAC 地址则将数据包送到该子网络中的目标网卡。** 因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理 MAC 地址。</li>\n<li>这一层中有一个<strong>规定网络地址的协议，叫做 IP 协议</strong>，它所定义的地址，就被称为 IP 地址。</li>\n<li>目前，广泛采用的是 IP 协议第四版，简称 IPv4。这个版本规定，网络地址由 32 个二进制位组成。因为 IPv4 的地址已经不够用了，所以现在推广 IPv6，</li>\n</ul>\n<h1 id=\"二-数据链路层mac地址\"><a class=\"anchor\" href=\"#二-数据链路层mac地址\">#</a> 二、数据链路层（MAC 地址）</h1>\n<ul>\n<li>建立逻辑连接、进行硬件地址寻址、差错校验等功能（底层网络定义协议）</li>\n<li>及比特组合成字节进而组合成帧，用 MAC 地址访问介质，此时可以发现错误但不能纠正。</li>\n<li>MAC 地址是每个网卡的唯一标识，有了 MAC 地址就能知道谁是接收者，谁是发送者，并且知道了数据的内容，并且进行分组。</li>\n<li>传播数据是通过广播的方式进行传输，在局域网中的所有计算机都能接收到消息</li>\n</ul>\n<h1 id=\"一-物理层物理信道\"><a class=\"anchor\" href=\"#一-物理层物理信道\">#</a> 一、物理层（物理信道）</h1>\n<ul>\n<li>\n<p>物理层是直接和物理介质打交道的。</p>\n</li>\n<li>\n<p>物理层的设备 网卡，网线，集线器，中继器，调制解调器</p>\n</li>\n</ul>\n<p><strong>物理层信道：</strong></p>\n<ul>\n<li>\n<p>有线信道</p>\n<ul>\n<li>明线（平行架设在电线杆上的架空线路）</li>\n<li>对称电缆（对多双绞线组成）</li>\n<li>同轴电缆（具有外层屏蔽层）</li>\n<li>光纤（利用光在纤维中的反射原理进行传输）</li>\n</ul>\n</li>\n<li>\n<p>无线信道</p>\n<p>以辐射无线电波为传输方式无线信道主要有地波传输，天波传输和视距传输 例如：卫星通讯，电台广播</p>\n</li>\n</ul>\n<p>物理层通过以上的方式，会获取他们对应的传送信号，电压，转换成 010101010101 但是数据还未组织，仅作为原始的电气电压处理 <code>单位为bit</code></p>\n",
            "tags": [
                "OSI七层网络模型",
                "OSI七层网络模型"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/24/node/",
            "url": "https://dmqweb.cn/2024/05/24/node/",
            "title": "Node学习笔记",
            "date_published": "2024-05-24T09:02:28.000Z",
            "content_html": "<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> Node.js</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<ul>\n<li>Node.js 并不是 JavaScript 应用，也不是编程语言，而是 JavaScript 的运行时。</li>\n<li>Node.js 是构建在 V8 引擎之上的，V8 引擎由 C / C<ins> 编写，因此 JavaScript 语言需要编译为 C / C</ins> 代码之后才能执行。</li>\n<li>Node.js 采用异步 IO 和事件驱动的设计理念，可以高效的处理大量并发请求，提供了非阻塞 IO 接口和事件循环机制，使其可以编写出高性能、高扩展的应用程序。（异步 IO 通过 libuv 库来实现）</li>\n<li>Node.js 使用 npm 作为包管理工具</li>\n<li>Node.js 适合做一些 IO 密集型应用，不适合做一些 CPU 密集型应用（事件循环机制和异步 IO 使得 Node.js 有很强的处理能力，但是因为 Node.js 单线程的原因，容易造成 CPU 占用率过高）</li>\n<li>如果非要用 Node.js 做 CPU 密集型应用，需要编写 C++ 插件，或者 Node 提供的 cluster 模块。</li>\n</ul>\n<h2 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h2>\n<ul>\n<li>npm 是 Node.js 的包管理工具，它基于命令行，用于帮助开发者在自己的项目中安装、升级、移除和管理依赖项。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaWF4aWFveGlhby5uZXRsaWZ5LmFwcC8yMDE5LzA3LzMwL25vZGUvbm9kZS1ucG0v\">npm 命令大全</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTQ1NzU5ODY4MDEwMzY0OTU5\">package.json 配置详解</span></li>\n</ul>\n<h4 id=\"npm-install\"><a class=\"anchor\" href=\"#npm-install\">#</a> npm install</h4>\n<p>执行 <code>npm install</code>  时，npm 会通过广度优先遍历算法遍历依赖树，npm 会首先处理项目根目录下的依赖，然后逐层处理每个依赖包的依赖，直到所有的依赖被处理完成。在处理每个依赖时，npm 会检查该依赖的版本号是否符合依赖树中其他依赖的版本要求，如果不符合，则会尝试安装适合的版本。</p>\n<p><img data-src=\"/images/Snipaste_2024-05-28_18-35-31.png\" alt=\"images\" /></p>\n<h4 id=\"npmrc文件\"><a class=\"anchor\" href=\"#npmrc文件\">#</a> .npmrc 文件</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">registry</span><span class=\"token operator\">=</span>http://registry.npmjs.org/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 定义 npm 的 registry，即 npm 的包下载源</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">proxy</span><span class=\"token operator\">=</span>http://proxy.example.com:8080/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义 npm 的代理服务器，用于访问网络</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>https-proxy<span class=\"token operator\">=</span>http://proxy.example.com:8080/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 定义 npm 的 https 代理服务器，用于访问网络</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>strict-ssl<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 是否在 SSL 证书验证错误时退出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">cafile</span><span class=\"token operator\">=</span>/path/to/cafile.pem</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 定义自定义 CA 证书文件的路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>user-agent<span class=\"token operator\">=</span>npm/<span class=\"token punctuation\">&#123;</span>npm-version<span class=\"token punctuation\">&#125;</span> node/<span class=\"token punctuation\">&#123;</span>node-version<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>platform<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 自定义请求头中的 User-Agent</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">save</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 安装包时是否自动保存到 package.json 的 dependencies 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>save-dev<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 安装包时是否自动保存到 package.json 的 devDependencies 中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>save-exact<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 安装包时是否精确保存版本号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>engine-strict<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 是否在安装时检查依赖的 node 和 npm 版本是否符合要求</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>scripts-prepend-node-path<span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 是否在运行脚本时自动将 node 的路径添加到 PATH 环境变量中</span></pre></td></tr></table></figure><h4 id=\"package-lockjson\"><a class=\"anchor\" href=\"#package-lockjson\">#</a> package-lock.json</h4>\n<p>文件的作用：</p>\n<ul>\n<li>\n<p>锁定版本号、记录依赖树详细信息</p>\n</li>\n<li>\n<p>package-lock.json 帮我们做了缓存，他会通过  <code>name + version + integrity</code>  信息生成一个唯一的 key，这个 key 能找到对应的 index-v5 下的缓存记录 （npm cache 文件夹下），如果发现有缓存记录，就会找到 tar 包的 hash 值，然后将对应的二进制文件解压到 node_modeules</p>\n</li>\n</ul>\n<h4 id=\"npm-run\"><a class=\"anchor\" href=\"#npm-run\">#</a> npm run</h4>\n<p>读取 package.json 的 scripts 对应的脚本命令，查找的规则是：</p>\n<ol>\n<li>当前项目 node_modules/.bin 查找</li>\n<li>全局 node_modules/.bin 查找</li>\n<li>环境变量查找</li>\n<li>找不到，报错</li>\n</ol>\n<p>node_modules/.bin 中有三个文件（Node 作为跨平台工具，需要处理平台兼容性）</p>\n<ul>\n<li>.sh 文件是给 Linux unix Macos 使用</li>\n<li>.cmd 给 windows 的 cmd 使用</li>\n<li>.ps1 给 windows 的 powerShell 使用</li>\n</ul>\n<h4 id=\"npm-生命周期\"><a class=\"anchor\" href=\"#npm-生命周期\">#</a> npm 生命周期</h4>\n<p>在 package.json 中的 scripts 字段中，我们可以利用 npm 脚本命名规范使用 npm 的生命周期特性，例如：</p>\n<pre><code class=\"language-javascripton\">    &quot;pretest&quot;: &quot;node prev.js&quot;,\n    &quot;test&quot;: &quot;node index.js&quot;,\n    &quot;posttest&quot;: &quot;node post.js&quot;\n</code></pre>\n<p>则执行：npm run test 时，会最先执行 pretest，最后执行 posttest。</p>\n<h4 id=\"npx\"><a class=\"anchor\" href=\"#npx\">#</a> npx</h4>\n<p>npx 是一个命令行工具，它是 npm 5.2.0 版本中新增的功能。它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。</p>\n<p>npx 的作用是在命令行中运行 node 包中的可执行文件，而不需要全局安装这些包。这可以使开发人员更轻松地管理包的依赖关系，并且可以避免全局污染的问题。它还可以帮助开发人员在项目中使用不同版本的包，而不会出现版本冲突的问题。</p>\n<p><strong>npx 的优势</strong></p>\n<ol>\n<li>避免全局安装： <code>npx</code>  允许你执行 npm package，而不需要你先全局安装它。</li>\n<li>总是使用最新版本：如果你没有在本地安装相应的 npm package， <code>npx</code>  会从 npm 的 package 仓库中下载并使用最新版。</li>\n<li>执行任意 npm 包： <code>npx</code>  不仅可以执行在 <code>package.json</code>  的 <code>scripts</code>  部分定义的命令，还可以执行任何 npm package。</li>\n<li>执行 GitHub gist： <code>npx</code>  甚至可以执行 GitHub gist 或者其他公开的 JavaScript 文件。</li>\n</ol>\n<p><strong>npm 和 npx 区别</strong></p>\n<ul>\n<li>\n<p><code>npx</code>  侧重于执行命令的，执行某个模块命令。虽然会自动安装模块，但是重在执行某个命令</p>\n</li>\n<li>\n<p><code>npm</code>  侧重于安装或者卸载某个模块的。重在安装，并不具备执行某个模块的功能。</p>\n</li>\n</ul>\n<h4 id=\"npm私服\"><a class=\"anchor\" href=\"#npm私服\">#</a> npm 私服</h4>\n<p><strong>优势：</strong></p>\n<ul>\n<li><strong>可以离线使用</strong>，你可以将 npm 私服部署到内网集群，这样离线也可以访问私有的包。</li>\n<li><strong>提高包的安全性</strong>，使用私有的 npm 仓库可以更好的管理你的包，避免在使用公共的 npm 包的时候出现漏洞。</li>\n<li><strong>提高包的下载速度</strong>，使用私有 npm 仓库，你可以将经常使用的 npm 包缓存到本地，从而显著提高包的下载速度，减少依赖包的下载时间。这对于团队内部开发和持续集成、部署等场景非常</li>\n</ul>\n<p><strong>搭建：</strong></p>\n<ul>\n<li>可以克隆 npm 或 cnpm 仓库，更改 yaml 配置文件为自己想要的设置即可</li>\n<li>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly92ZXJkYWNjaW8ub3JnL3poLWNuLw==\"> verdaccio 工具</span>\n<ul>\n<li><code>npm install verdaccio -g</code></li>\n<li><code>verdaccio</code></li>\n<li>访问 localhost:4873</li>\n<li>使用 npm 操作时，加上 <code>--registry http://localhost:4873</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"node模块化\"><a class=\"anchor\" href=\"#node模块化\">#</a> Node 模块化</h2>\n<h4 id=\"commonjs\"><a class=\"anchor\" href=\"#commonjs\">#</a> CommonJS</h4>\n<ul>\n<li>\n<p>支持引入内置模块例如  <code>http</code>   <code>os</code>   <code>fs</code>   <code>child_process</code>  等 nodejs 内置模块</p>\n</li>\n<li>\n<p>支持引入第三方模块 <code>express</code>   <code>md5</code>   <code>koa</code>  等</p>\n</li>\n<li>\n<p>支持引入自己编写的模块 ./../ 等</p>\n</li>\n<li>\n<p>支持引入 addon C++ 扩展模块 .node 文件</p>\n</li>\n</ul>\n<h4 id=\"esm\"><a class=\"anchor\" href=\"#esm\">#</a> ESM</h4>\n<ul>\n<li>import 静态导入需要在顶层调用</li>\n<li>import 导入 json 文件需要添加断言（低版本 node 不可用）</li>\n<li>支持函数式动态导入</li>\n</ul>\n<h4 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h4>\n<ol>\n<li>CommonJS 基于运行时的同步加载，ESM 基于编译时的异步加载</li>\n<li>CommonJS 是可以修改值的，ESM 值并且不可修改（可读的）</li>\n<li>CommonJS 不可以 tree shaking，ESM 支持 tree shaking</li>\n<li>CommonJS 中顶层的 this 指向这个模块本身，而 ESM 中顶层 this 指向 undefined</li>\n</ol>\n<h4 id=\"require执行顺序\"><a class=\"anchor\" href=\"#require执行顺序\">#</a> require 执行顺序</h4>\n<ol>\n<li>.js 文件，调用 compile 函数进行执行。</li>\n<li>.json 文件，读取文件内容，调用 JSON.parse 方法处理。</li>\n<li>.node 文件，通过 process.dlopen 方法进行处理。</li>\n</ol>\n<h2 id=\"全局变量\"><a class=\"anchor\" href=\"#全局变量\">#</a> 全局变量</h2>\n<h4 id=\"global\"><a class=\"anchor\" href=\"#global\">#</a> global</h4>\n<ul>\n<li>浏览器端的全局对象是 window</li>\n<li>Node 环境的全局对象是 global</li>\n<li>global 上定义的变量在当前环境执行任何文件时都可以访问到</li>\n<li>ES2020 推出 globalThis 用于兼容 window 和 global（自动切换）</li>\n</ul>\n<h4 id=\"__dirname\"><a class=\"anchor\" href=\"#__dirname\">#</a> __dirname</h4>\n<p>当前模块所在目录的绝对路径</p>\n<h4 id=\"__filename\"><a class=\"anchor\" href=\"#__filename\">#</a> __filename</h4>\n<p>当前模块文件所在的绝对路径，包括文件名和文件扩展名</p>\n<h4 id=\"require\"><a class=\"anchor\" href=\"#require\">#</a> require</h4>\n<h4 id=\"module\"><a class=\"anchor\" href=\"#module\">#</a> module</h4>\n<h4 id=\"process\"><a class=\"anchor\" href=\"#process\">#</a> process</h4>\n<ul>\n<li>\n<p><code>process.argv</code></p>\n<ul>\n<li>第一个参数是当前执行环境的路径</li>\n<li>第二个参数是当前执行的文件的路径</li>\n<li>剩余的参数是传递给脚本文件的命令行参数</li>\n</ul>\n</li>\n<li>\n<p><code>process.env</code>  环境变量</p>\n</li>\n<li>\n<p><code>process.cwd()</code>  返回当前工作目录路径</p>\n</li>\n<li>\n<p><code>process.on(event,listener)</code> ，监听进程变化</p>\n</li>\n<li>\n<p><code>process.exit([code])</code> ，退出 Node 进程，提供退出码</p>\n</li>\n<li>\n<p><code>process.pid</code>  返回进程 id</p>\n</li>\n</ul>\n<h4 id=\"buffer类\"><a class=\"anchor\" href=\"#buffer类\">#</a> Buffer 类</h4>\n<p>Node.js 6.0 版本开始， <code>Buffer</code>  构造函数的使用已被弃用，推荐使用 <code>Buffer.alloc()</code> 、 <code>Buffer.from()</code>  等方法来创建 <code>Buffer</code>  实例。</p>\n<h4 id=\"dom-bom\"><a class=\"anchor\" href=\"#dom-bom\">#</a> DOM、BOM</h4>\n<p>Node 环境中无法操作 DOM 和 BOM，不过可以借助一些工具进行模拟，例如： <code>jsdom</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsdom'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//jsdom 模拟浏览器环境</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSDOM</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;!DOCTYPE html>&lt;div id='app'>&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> document <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">.</span>document</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> window <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>window</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.thecatapi.com/v1/images/search?limit=10&amp;page=1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>url</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       img<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">'200px'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       img<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">'200px'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       app<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"path模块\"><a class=\"anchor\" href=\"#path模块\">#</a> path 模块</h2>\n<p>path 模块在 windows 和 posix 系统中是有差异的。</p>\n<ul>\n<li>posix 表示可移植操作系统接口，也就是定义了一套标准，遵守这套标准的操作系统有 (unix,like unix,linux,macOs,windows wsl)，用于多个平台间相互兼容</li>\n<li>Windows 并没有完全遵循 POSIX 标准，在 Windows 系统中，路径使用反斜杠（ <code>\\</code> ）作为路径分隔符。这与 POSIX 系统使用的正斜杠（ <code>/</code> ）是不同的</li>\n</ul>\n<p><strong>差异举例：</strong></p>\n<pre><code>path.basename('C:\\temp\\myfile.html'); \n// 在posix中 返回: 'C:\\temp\\myfile.html'\n// 在windows中 返回 empmyfile.html\n</code></pre>\n<ul>\n<li>path.basename 返回文件名（包括后缀）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:/fs/dmq/MI/index.html'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 index.html</span></pre></td></tr></table></figure><ul>\n<li><code>path.extname</code>  返回扩展名</li>\n<li><code>path.join</code>  路径拼接（路径拼接）</li>\n<li><code>path.resolve</code>  解析绝对路径并且返回绝对路径（路径解析）</li>\n<li><code>path.parse</code>  将路径解析为对象</li>\n<li><code>path.format</code>  将对象解析为路径</li>\n</ul>\n<h2 id=\"os模块\"><a class=\"anchor\" href=\"#os模块\">#</a> os 模块</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>API</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><strong>os.type()</strong></td>\n<td>它在 Linux 上返回  <code>'Linux'</code> ，在 macOS 上返回  <code>'Darwin'</code> ，在 Windows 上返回  <code>'Windows_NT'</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>os.platform()</strong></td>\n<td>返回标识为其编译 Node.js 二进制文件的操作系统平台的字符串。 该值在编译时设置。 可能的值为  <code>'aix'</code> 、 <code>'darwin'</code> 、 <code>'freebsd'</code> 、 <code>'linux'</code> 、 <code>'openbsd'</code> 、 <code>'sunos'</code> 、以及  <code>'win32'</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>os.release()</strong></td>\n<td>返回操作系统的版本例如 10.xxxx win10</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>os.homedir()</strong></td>\n<td>返回用户目录 例如 c:\\user\\xiaoman 原理就是 windows  <code>echo %USERPROFILE% </code> posix $HOME</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>os.arch()</strong></td>\n<td>返回 cpu 的架构  可能的值为  <code>'arm'</code> 、 <code>'arm64'</code> 、 <code>'ia32'</code> 、 <code>'mips'</code> 、 <code>'mipsel'</code> 、 <code>'ppc'</code> 、 <code>'ppc64'</code> 、 <code>'s390'</code> 、 <code>'s390x'</code> 、以及  <code>'x64'</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><strong>os.cups()</strong></td>\n<td>获取 <code>cpu线程</code> 和 cpu 详细信息</td>\n</tr>\n<tr>\n<td>7</td>\n<td><strong>os.networkInterfaces()</strong></td>\n<td>获取 <code>网络信息</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"process模块\"><a class=\"anchor\" href=\"#process模块\">#</a> process 模块</h2>\n<ul>\n<li>\n<p><code>process.argv</code></p>\n<ul>\n<li>第一个参数是当前执行环境的路径</li>\n<li>第二个参数是当前执行的文件的路径</li>\n<li>剩余的参数是传递给脚本文件的命令行参数</li>\n</ul>\n</li>\n<li>\n<p><code>process.env</code>  环境变量</p>\n</li>\n<li>\n<p><code>process.cwd()</code>  返回当前工作目录路径</p>\n</li>\n<li>\n<p><code>process.on(event,listener)</code> ，监听进程变化</p>\n</li>\n<li>\n<p><code>process.exit([code])</code> ，退出 Node 进程，提供退出码</p>\n</li>\n<li>\n<p><code>process.pid</code>  返回进程 id</p>\n</li>\n<li>\n<p><code>process.arch</code>  返回操作系统 CPU 架构</p>\n</li>\n<li>\n<p><code>process.memoryUsage</code>  获取当前进程内存使用情况</p>\n</li>\n<li>\n<p><code>process.kill(process.pid)</code>  用于杀死一个进程</p>\n</li>\n</ul>\n<h2 id=\"child_process模块\"><a class=\"anchor\" href=\"#child_process模块\">#</a> child_process 模块</h2>\n<p>子进程是 Nodejs 核心 API，如果你会 shell 命令，他会有非常大的帮助，或者你喜欢编写前端工程化工具之类的，他也有很大的用处，以及处理 CPU 密集型应用。</p>\n<h4 id=\"创建子进程\"><a class=\"anchor\" href=\"#创建子进程\">#</a> 创建子进程</h4>\n<p>Nodejs 创建子进程共有 <code>7个</code>  API Sync 同步 API ，不加是异步 API</p>\n<ol>\n<li>spawn  执行命令</li>\n<li>exec   执行命令</li>\n<li>execFile   执行可执行文件</li>\n<li>fork   创建 node 子进程</li>\n<li><code>execSync</code>  执行命令 同步执行</li>\n<li><code>execFileSync</code>  执行可执行文件 同步执行</li>\n<li><code>spawnSync</code>  执行命令 同步执行</li>\n</ol>\n<h2 id=\"cluster模块\"><a class=\"anchor\" href=\"#cluster模块\">#</a> cluster 模块</h2>\n<ul>\n<li>\n<p>cluster 模块也用于创建 node 子进程</p>\n</li>\n<li>\n<p>相比较于 child_process 模块，cluster 模块主要用于利用多核 CPU 的优势，通过创建多个工作进程来提高应用程序的并发处理能力。</p>\n</li>\n<li>\n<p>cluster 模块创建的每个工作进程都是独立地 node.js 进程，他们共享一个端口和监听器，由主进程负责分配请求到各个工作进程。</p>\n</li>\n<li>\n<p>cluster 模块自动实现请求的负载均衡，主进程会根据工作进程的负载请情况将请求分配给不同的工作进程。</p>\n</li>\n<li>\n<p>进程通过 process.send 方法进行通信，但常用于工作进程和主进程之间的通信。</p>\n</li>\n<li>\n<p>cluster 模块支持优雅关闭工作进程，允许工作进程在关闭之前完成当前正在处理的请求。</p>\n</li>\n</ul>\n<h2 id=\"ffmpeg工具\"><a class=\"anchor\" href=\"#ffmpeg工具\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcucDJocC5jb20vZG93bmxvYWQuaHRtbA==\">ffmpeg 工具</span></h2>\n<p>FFmpeg 是一个开源的跨平台多媒体处理工具，可以用于处理音频、视频和多媒体流。它提供了一组强大的命令行工具和库，可以进行视频转码、视频剪辑、音频提取、音视频合并、流媒体传输等操作。</p>\n<h2 id=\"events模块\"><a class=\"anchor\" href=\"#events模块\">#</a> events 模块</h2>\n<p>Node.js 的事件模型采用发布订阅的设计思想，将发布者和订阅者之间解耦合，使得双方能够独立地扩展自己。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 监听 test</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'data数据'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 派发事件</span></pre></td></tr></table></figure><p>event 实例默认监听 10 个为上限，可以通过 <code>setMaxListeners()</code>  方法来设置监听上限。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxListeners</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>event.once方法</code> 可以只订阅一次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'once取代on，只监听一次'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>event.off</code>  方法取消订阅</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 订阅事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>event<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取消事件订阅</span></pre></td></tr></table></figure><h4 id=\"sse\"><a class=\"anchor\" href=\"#sse\">#</a> SSE</h4>\n<ul>\n<li>\n<p>SSE（server send events）服务端推送事件</p>\n</li>\n<li>\n<p>是一种实现服务端向客户端推送数据的技术，也被称为事件流</p>\n</li>\n<li>\n<p>它是基于 HTTP 协议，利用 HTTP 协议长连接的优势，实现服务端向客户端推送实时数据。</p>\n</li>\n<li>\n<p>浏览器端需要使用 <code>EventSource</code>  注册 api 地址，服务端需要对该地址的响应头中设置 Content-Type 为  <code>text/event-stream </code></p>\n</li>\n</ul>\n<p><strong>node 后端：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/sse'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 核心返回数据流</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string-property property\">'Connection'</span><span class=\"token operator\">:</span> <span class=\"token string\">'close'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//mock sse 数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">>=</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 返回自定义事件名</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">event:name\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 返回数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        current<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on port 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>客户端：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/api/sse'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sse<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> EventSource<span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECTING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在连接服务器...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sse<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> EventSource<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'已经连接上服务器！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sse<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> EventSource<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接已经关闭。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sse<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sse<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sse<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 对应后端 nodejs 自定义的事件名 lol</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"util模块\"><a class=\"anchor\" href=\"#util模块\">#</a> util 模块</h2>\n<p>Node.js 内部提供的工具集模块，方便快速开发</p>\n<ul>\n<li>\n<p><code>util.promisify</code>  将函数改为 promise 类型的形式</p>\n</li>\n<li>\n<p><code>util.callbackify</code>  将 promise 类型的 api 改为函数形式</p>\n</li>\n<li>\n<p><code>util.format</code>  用于格式化文本</p>\n<ul>\n<li><code>%s</code> :  <code>String</code>  将用于转换除  <code>BigInt</code> 、 <code>Object</code>  和  <code>-0</code>  之外的所有值。  <code>BigInt</code>  值将用  <code>n</code>  表示，没有用户定义的  <code>toString</code>  函数的对象使用具有选项  <code>&#123; depth: 0, colors: false, compact: 3 &#125;</code>  的  <code>util.inspect()</code>  进行检查。</li>\n<li><code>%d</code> :  <code>Number</code>  将用于转换除  <code>BigInt</code>  和  <code>Symbol</code>  之外的所有值。</li>\n<li><code>%i</code> :  <code>parseInt(value, 10)</code>  用于除  <code>BigInt</code>  和  <code>Symbol</code>  之外的所有值。</li>\n<li><code>%f</code> :  <code>parseFloat(value)</code>  用于除  <code>Symbol</code>  之外的所有值。</li>\n<li><code>%j</code> : JSON。 如果参数包含循环引用，则替换为字符串  <code>'[Circular]'</code> 。</li>\n<li><code>%o</code> :  <code>Object</code> . 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于具有选项  <code>&#123; showHidden: true, showProxy: true &#125;</code>  的  <code>util.inspect()</code> 。 这将显示完整的对象，包括不可枚举的属性和代理。</li>\n<li><code>%O</code> :  <code>Object</code> . 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于没有选项的  <code>util.inspect()</code> 。 这将显示完整的对象，但不包括不可枚举的属性和代理。</li>\n<li><code>%c</code> :  <code>CSS</code> . 此说明符被忽略，将跳过任何传入的 CSS。</li>\n<li><code>%%</code> : 单个百分号 ( <code>'%'</code> )。 这不消费参数。</li>\n</ul>\n</li>\n<li>\n<p>其他工具函数省略</p>\n</li>\n</ul>\n<h2 id=\"pngquant工具\"><a class=\"anchor\" href=\"#pngquant工具\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbmdxdWFudC5vcmcv\">pngquant 工具</span></h2>\n<p><code>pngquant</code>  是一个用于压缩 PNG 图像文件的工具。它可以显著减小 PNG 文件的大小，同时保持图像质量和透明度。通过减小文件大小，可以提高网页加载速度，并节省存储空间。 <code>pngquant</code>  提供命令行接口和库，可轻松集成到各种应用程序和脚本中。</p>\n<h2 id=\"fs模块\"><a class=\"anchor\" href=\"#fs模块\">#</a> fs 模块</h2>\n<p>在 Node.js 中， <code>fs</code>  模块是文件系统模块（File System module）的缩写，它提供了与文件系统进行交互的各种功能。通过  <code>fs</code>  模块，你可以执行诸如读取文件、写入文件、更改文件权限、创建目录等操作， <code>Node.js 核心API之一</code> 。</p>\n<h4 id=\"同步与异步\"><a class=\"anchor\" href=\"#同步与异步\">#</a> 同步与异步</h4>\n<ul>\n<li>\n<p>fs 支持同步和异步两种模式 增加了 <code>Sync</code>  fs 就会采用同步的方式运行代码，会阻塞下面的代码，不加 Sync 就是异步的模式不会阻塞。</p>\n</li>\n<li>\n<p>fs 新增了 promise 版本，只需要在引入包后面增加 /promise 即可，fs 便可支持 promise 回调。</p>\n</li>\n<li>\n<p>fs 返回的是一个 buffer 二进制数据 每两个十六进制数字表示一个字节</p>\n</li>\n</ul>\n<h4 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> api</h4>\n<ul>\n<li><code>fs.readFile</code>  异步读取文件</li>\n<li><code>fs.writeFile</code>  异步写入文件</li>\n<li><code>fs.appendFile</code>  文件异步追加写入内容</li>\n<li><code>fs.copyFile</code>  文件异步拷贝写入</li>\n<li><code>fs.open</code>  异步打开文件</li>\n<li><code>fs.close</code>  异步关闭文件</li>\n<li><code>fs.read</code>  异步读取文件</li>\n<li><code>fs.write</code>  异步将 Buffer 中的数据写入文件</li>\n<li><code>fs.access</code>  异步检查文件是否可读可写</li>\n<li><code>fs.stat</code>  异步获取文件目录的 stats 对象（文件夹信息）</li>\n<li><code>fs.mkdir</code>  异步创建文件夹</li>\n<li><code>fs.readdir</code>  异步读取文件夹</li>\n<li><code>fs.rmdir</code>  异步删除目录</li>\n<li><code>fs.unlink</code>  异步删除文件</li>\n<li>以上方法都有对应的同步执行的方法，在方法名后面加上 Sync 后缀即可。</li>\n</ul>\n<h4 id=\"fspromises\"><a class=\"anchor\" href=\"#fspromises\">#</a> fs/promises</h4>\n<p>node 中 fs 模块的方法提供了 Promise 版本的调用形式，导入即可使用 promise 的使用方式调用 api</p>\n<h4 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码</h4>\n<p>Node.js 中 fs 模块是由 libuv 来进行调度的，文件读取完成之后 libuv 才会将 fs 的结果推入 V8 的队列。</p>\n<h4 id=\"writefilesync\"><a class=\"anchor\" href=\"#writefilesync\">#</a> writeFileSync</h4>\n<ul>\n<li>第一个参数是要写入的文件</li>\n<li>第二个参数是写入的内容</li>\n<li>第三个参数是写入方式配置项，其 flag 有以下配置：\n<ul>\n<li><code>'a'</code> : 打开文件进行追加。 如果文件不存在，则创建该文件。</li>\n<li><code>'ax'</code> : 类似于  <code>'a'</code>  但如果路径存在则失败。</li>\n<li><code>'a+'</code> : 打开文件进行读取和追加。 如果文件不存在，则创建该文件。</li>\n<li><code>'ax+'</code> : 类似于  <code>'a+'</code>  但如果路径存在则失败。</li>\n<li><code>'as'</code> : 以同步模式打开文件进行追加。 如果文件不存在，则创建该文件。</li>\n<li><code>'as+'</code> : 以同步模式打开文件进行读取和追加。 如果文件不存在，则创建该文件。</li>\n<li><code>'r'</code> : 打开文件进行读取。 如果文件不存在，则会发生异常。</li>\n<li><code>'r+'</code> : 打开文件进行读写。 如果文件不存在，则会发生异常。</li>\n<li><code>'rs+'</code> : 以同步模式打开文件进行读写。 指示操作系统绕过本地文件系统缓存。</li>\n<li><code>'w'</code> : 打开文件进行写入。 创建（如果它不存在）或截断（如果它存在）该文件。</li>\n<li><code>'wx'</code> : 类似于  <code>'w'</code>  但如果路径存在则失败。</li>\n<li><code>'w+'</code> : 打开文件进行读写。 创建（如果它不存在）或截断（如果它存在）该文件。</li>\n<li><code>'wx+'</code> : 类似于  <code>'w+'</code>  但如果路径存在则失败。</li>\n</ul>\n</li>\n</ul>\n<p>例如追加文件内容除了可以使用 <code>appendFileSync</code>  之外，还可以：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'追加的内容'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">flag</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token comment\">// 配置 options 中的 flag</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"可写流\"><a class=\"anchor\" href=\"#可写流\">#</a> 可写流</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> verse <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'待到秋来九月八'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'我花开后百花杀'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'冲天香阵透长安'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'满城尽带黄金甲'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> writeStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建写入流</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>verse<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 写入内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 监听写入完成事件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入完成'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以创建一个可写流 打开一个通道，可以一直写入数据，用于处理大量的数据写入，写入完成之后调用 end 关闭可写流，监听 finish 事件 写入完成</p>\n<h4 id=\"硬链接-软连接\"><a class=\"anchor\" href=\"#硬链接-软连接\">#</a> 硬链接、软连接</h4>\n<h6 id=\"inode\"><a class=\"anchor\" href=\"#inode\">#</a> inode</h6>\n<ul>\n<li>文件存储在磁盘上，磁盘的最小存储单位叫做 <code>扇区</code> ，每个扇区存储 512 字节</li>\n<li>操作系统读取磁盘时，不会一个扇区一个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，多个扇区称之为 <code>块</code></li>\n<li><code>块</code> 是文件读取的最小单位</li>\n<li>文件数据都存储在 <code>块</code> 中，因此需要一个地方存储文件的元信息，这中存储文件元信息的区域就叫做 <code>inode</code> ，索引节点</li>\n<li>创建软链接时生成了新的 <code>inode</code> ，创建硬链接时没有。</li>\n</ul>\n<p><img data-src=\"/images/Snipaste_2024-05-29_14-07-39.png\" alt=\"扇区、块和inode\" /></p>\n<p><strong>inode 中包含信息：</strong></p>\n<ul>\n<li>文件的字节数</li>\n<li>文件拥有者 ID</li>\n<li>文件的 Group ID</li>\n<li>文件读、写、执行权限</li>\n<li>文件的时间戳</li>\n<li>链接数</li>\n<li>文件数据 block 的位置</li>\n</ul>\n<p>每一个  <code>inode</code>  都有一个唯一的标识码 ，上面的输出信息中  <code>ino</code>  就是  <code>inode</code>  的唯一标识码，在  <code>linux</code>  系统内部使用  <code>inode</code>  的标识码来识别文件，并不使用文件名。之前系的</p>\n<p>在  <code>linux</code>  系统中，目录也是一种文件。目录文件包含一系列目录项，每一个目录项由两部分组成：所包含文件的文件名，以及文件名对应的  <code>inode</code>  标识码。我们可以使用  <code>ls -i</code>  来列出目录中的文件以及所有的  <code>inde</code>  标识码。这里也可以解释可能小伙伴们觉得说不通的问题，仅修改目录的读权限，并不能实现读取目录下所有文件内容的原因，最后需要通过递归目录下的文件来进行修改。</p>\n<h6 id=\"软链接\"><a class=\"anchor\" href=\"#软链接\">#</a> 软链接</h6>\n<p>软链接类似于  <code>Window</code>  中的 “快捷方式” 。创建软链接会创建一个新的  <code>inode</code> ，比如为文件  <code>a</code>  创建了软链接文件 b，文件  <code>b</code>  内部会指向  <code>a</code>  的  <code>inode</code> 。当我们读取文件 <code>b</code>  的时候，系统会自动导向文件  <code>a</code>  ，文件  <code>b</code>  就是文件  <code>a</code>  软连接 (或者叫符号链接)。</p>\n<ul>\n<li>访问：创建了软链接后我们就可以使用不同的文件名访问相同的内容，</li>\n<li>修改：修改文件  <code>a</code>  的内容，文件  <code>b</code>  的内容也会发生改变，对文件内容的修改向放映到所有文件。</li>\n<li>删除：当我们删除源文件  <code>a</code>  时，在访问软连接文件 b 是，会报错  <code>&quot;No such file or directory&quot;</code></li>\n</ul>\n<p>可以直接使用  <code>linux</code>  命令  <code>ln -s source target</code>  来创建软链接 (注意：表示  <code>target</code>  “指向”  <code>source</code> ）</p>\n<p><img data-src=\"/images/Snipaste_2024-05-29_14-12-05.png\" alt=\"软链接\" /></p>\n<h6 id=\"硬链接\"><a class=\"anchor\" href=\"#硬链接\">#</a> 硬链接</h6>\n<p>一般情况，一个文件名 &quot;唯一&quot; 对应一个  <code>inode</code> 。但是  <code>linux</code>  允许多个文件名都指向同一个  <code>inode</code> 。表示我们可以使用不同对文件名访问同样的内容；对文件内容进行修改将放映到所有文件；删除一个文件不影响另一个文件对访问。这种机制就被称为 &quot;硬链接&quot;</p>\n<p>硬链接的创建 可以直接使用  <code>linux</code>  命令  <code>ln source target</code>  来创建硬链接（注意： <code>source</code>  已存在的文件，target 是将要建立的链接）</p>\n<p><img data-src=\"/images/Snipaste_2024-05-29_14-14-11.png\" alt=\"硬链接\" /></p>\n<h6 id=\"创建链接\"><a class=\"anchor\" href=\"#创建链接\">#</a> 创建链接</h6>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">linkSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./index2.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 硬链接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">symlinkSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./index3.txt'</span> <span class=\"token punctuation\">,</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 软连接</span></pre></td></tr></table></figure><h6 id=\"用途\"><a class=\"anchor\" href=\"#用途\">#</a> 用途</h6>\n<p><strong>硬链接的作用和用途如下：</strong></p>\n<ol>\n<li>文件共享：硬链接允许多个文件名指向同一个文件，这样可以在不同的位置使用不同的文件名引用相同的内容。这样的共享文件可以节省存储空间，并且在多个位置对文件的修改会反映在所有引用文件上。</li>\n<li>文件备份：通过创建硬链接，可以在不复制文件的情况下创建文件的备份。如果原始文件发生更改，备份文件也会自动更新。这样可以节省磁盘空间，并确保备份文件与原始文件保持同步。</li>\n<li>文件重命名：通过创建硬链接，可以为文件创建一个新的文件名，而无需复制或移动文件。这对于需要更改文件名但保持相同内容和属性的场景非常有用。</li>\n</ol>\n<p><strong>软链接的一些特点和用途如下：</strong></p>\n<ol>\n<li>软链接可以创建指向文件或目录的引用。这使得你可以在不复制或移动文件的情况下引用它们，并在不同位置使用不同的文件名访问相同的内容。</li>\n<li>软链接可以用于创建快捷方式或别名，使得你可以通过一个简短或易记的路径来访问复杂或深层次的目录结构。</li>\n<li>软链接可以用于解决文件或目录的位置变化问题。如果目标文件或目录被移动或重命名，只需更新软链接的目标路径即可，而不需要修改引用该文件或目录的其他代码。</li>\n</ol>\n<h2 id=\"crypto模块\"><a class=\"anchor\" href=\"#crypto模块\">#</a> crypto 模块</h2>\n<p>crypto 模块的目的是为了提供通用的 <code>加密和哈希算法</code> 。用纯 JavaScript 代码实现这些功能不是不可能，但速度会非常慢。nodejs 用 C/C++ 实现这些算法后，通过 crypto 这个模块暴露为 JavaScript 接口，这样用起来方便，运行速度也快。</p>\n<p>密码学是计算机科学中的一个重要领域，它涉及到加密、解密、哈希函数和数字签名等技术。Node.js 是一个流行的服务器端 JavaScript 运行环境，它提供了强大的密码学模块，使开发人员能够轻松地在其应用程序中实现各种密码学功能。本文将介绍密码学的基本概念，并探讨 Node.js 中常用的密码学 API。</p>\n<h4 id=\"对称加密\"><a class=\"anchor\" href=\"#对称加密\">#</a> 对称加密</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>js复制代码<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 生成一个随机的 16 字节的初始化向量 (IV)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> iv <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 生成一个随机的 32 字节的密钥</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 创建加密实例，使用 AES-256-CBC 算法，提供密钥和初始化向量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> cipher <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createCipheriv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aes-256-cbc\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 对输入数据进行加密，并输出加密结果的十六进制表示</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cipher<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小满zs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">final</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 解密</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> de <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createDecipheriv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aes-256-cbc\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>de<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> decrypted <span class=\"token operator\">=</span> de<span class=\"token punctuation\">.</span><span class=\"token function\">final</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decrypted:\"</span><span class=\"token punctuation\">,</span> decrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对称加密是一种简单而快速的加密方式，它使用相同的密钥（称为对称密钥）来进行加密和解密。这意味着发送者和接收者在加密和解密过程中都使用相同的密钥。对称加密算法的加密速度很快，适合对大量数据进行加密和解密操作。然而，对称密钥的安全性是一个挑战，因为需要确保发送者和接收者都安全地共享密钥，否则有风险被未授权的人获取密钥并解密数据。</p>\n<h4 id=\"非对称加密\"><a class=\"anchor\" href=\"#非对称加密\">#</a> 非对称加密</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>js复制代码<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:crypto'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 生成 RSA 密钥对</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> privateKey<span class=\"token punctuation\">,</span> publicKey <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rsa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">modulusLength</span><span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 要加密的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'小满zs'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 使用公钥进行加密</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> encrypted <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">publicEncrypt</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 使用私钥进行解密</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> decrypted <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">privateDecrypt</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">,</span> encrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decrypted<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>非对称加密使用一对密钥，分别是公钥和私钥。发送者使用接收者的公钥进行加密，而接收者使用自己的私钥进行解密。公钥可以自由分享给任何人，而私钥必须保密。非对称加密算法提供了更高的安全性，因为即使公钥泄露，只有持有私钥的接收者才能解密数据。然而，非对称加密算法的加密速度相对较慢，不适合加密大量数据。因此，在实际应用中，通常使用非对称加密来交换对称密钥，然后使用对称加密算法来加密实际的数据。</p>\n<h4 id=\"哈希函数\"><a class=\"anchor\" href=\"#哈希函数\">#</a> 哈希函数</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 要计算哈希的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建哈希对象，并使用 MD5 算法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 更新哈希对象的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hash<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 计算哈希值，并以十六进制字符串形式输出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> hashValue <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Text:'</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hash:'</span><span class=\"token punctuation\">,</span> hashValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>哈希函数具有以下特点：</p>\n<ol>\n<li>固定长度输出：不论输入数据的大小，哈希函数的输出长度是固定的。例如，常见的哈希函数如 MD5 和 SHA-256 生成的哈希值长度分别为 128 位和 256 位。</li>\n<li>不可逆性：哈希函数是单向的，意味着从哈希值推导出原始输入数据是非常困难的，几乎不可能。即使输入数据发生微小的变化，其哈希值也会完全不同。</li>\n<li>唯一性：哈希函数应该具有较低的碰撞概率，即不同的输入数据生成相同的哈希值的可能性应该非常小。这有助于确保哈希值能够唯一地标识输入数据。</li>\n</ol>\n<p>使用场景</p>\n<ol>\n<li>我们可以避免密码明文传输 使用 md5 加密或者 sha256</li>\n<li>验证文件完整性，读取文件内容生成 md5 如果前端上传的 md5 和后端的读取文件内部的 md5 匹配说明文件是完整的</li>\n</ol>\n<h2 id=\"md转html\"><a class=\"anchor\" href=\"#md转html\">#</a> md 转 html</h2>\n<h4 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h4>\n<ul>\n<li>ejs：模板渲染库，使用特定语法填充内容，进行模板渲染</li>\n<li>marked：用于将 Markdown 语法转为 HTML</li>\n<li>browserSync：用于在浏览器实时预览和同步刷新</li>\n</ul>\n<h4 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h4>\n<p>index.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ejs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入 ejs 库，用于渲染模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入 fs 模块，用于文件系统操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> marked <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入 marked 库，用于将 Markdown 转换为 HTML</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> readme <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'README.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取 README.md 文件的内容，直接 read 的结果是 buffer 中的数据，通过 toString 方法变为原始内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> browserSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'browser-sync'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入 browser-sync 库，用于实时预览和同步浏览器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">openBrowser</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 创建浏览器服务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> browserSync<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 初始化浏览器服务 ，传入目录和主页</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    browser<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">server</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token literal-property property\">baseDir</span><span class=\"token operator\">:</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> browser</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//ejs 模板进行渲染，传入变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> marked<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>readme<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">'markdown to html'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 将文件内容写入到 index.html</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">let</span> writeStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    writeStream<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//index.html 写入完毕之后，打开浏览器实时预览</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">openBrowser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>template.ejs</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= title %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 引入 css 样式 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &lt;%- content %></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>index.css</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Markdown 通用样式 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 设置全局字体样式 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* 设置标题样式 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token selector\">h1,h2,h3,h4,h5,h6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 1.3em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 0.6em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2.2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token selector\">h2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.8em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token selector\">h3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.6em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token selector\">h4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.4em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token selector\">h5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token selector\">h6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">/* 设置段落样式 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token selector\">p</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 1.3em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">/* 设置链接样式 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token selector\">a</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #337ab7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token selector\">a:hover</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">/* 设置列表样式 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token selector\">ul,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  ol</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 1.3em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">/* 设置代码块样式 */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token selector\">pre</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f7f7f7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token selector\">code</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Consolas<span class=\"token punctuation\">,</span> Monaco<span class=\"token punctuation\">,</span> Courier<span class=\"token punctuation\">,</span> monospace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.9em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f7f7f7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.2em 0.4em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">/* 设置引用样式 */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token selector\">blockquote</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 4px solid #ddd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #777<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">/* 设置表格样式 */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token selector\">table</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token property\">border-collapse</span><span class=\"token punctuation\">:</span> collapse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 1.3em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token selector\">table th,</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  table td</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">/* 添加一些额外的样式，如图片居中显示 */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token selector\">img</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token comment\">/* 设置代码行号样式 */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token selector\">pre code .line-numbers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token property\">pointer-events</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 1px solid #ddd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 0.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">/* 设置代码行样式 */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token selector\">pre code .line</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 1.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">/* 设置代码高亮样式 */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token selector\">pre code .line.highlighted</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f7f7f7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">/* 添加一些响应式样式，适应移动设备 */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.8em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token selector\">h2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token selector\">h3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.3em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token selector\">h4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token selector\">h5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token selector\">h6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.9em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token selector\">table</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"zlib模块\"><a class=\"anchor\" href=\"#zlib模块\">#</a> zlib 模块</h2>\n<h4 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍</h4>\n<ul>\n<li>Node.js 中 zlib 模块用于对数据提供压缩和解压缩的功能，以便在应用程序中减少数据的传输大小、节省带宽和提高性能</li>\n<li>该模块包含各种压缩算法，包含 Deflate、Gzip 和 Raw Deflate 等</li>\n</ul>\n<h4 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h4>\n<ul>\n<li>\n<p>数据压缩，减少数据的大小，这在网络传输和磁盘存储中很有用，可以节省带宽和存储空间</p>\n</li>\n<li>\n<p>数据解压缩</p>\n</li>\n<li>\n<p>流压缩，zlib 模块支持流式的方式进行数据的压缩和解压缩，使得可以对大型文件或者网络数据流进行逐步处理，而不需要将整个数据加载到内存中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 压缩文件（以 Gzip 为例）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> zlib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zlib'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> readStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> writeStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.txt.gz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将 readStream 利用 zlib 进行压缩，pipe 到下一个管道，最后 pipe 到写入流</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>readStream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>zlib<span class=\"token punctuation\">.</span><span class=\"token function\">createGzip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writeStream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 解压缩文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> reStr <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.txt.gz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> wrStr <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./t.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> gunzip <span class=\"token operator\">=</span> zlib<span class=\"token punctuation\">.</span><span class=\"token function\">createGunzip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>reStr<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gunzip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>wrStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>gunzip<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Gunzip error:'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  reStr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input file has been read.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  wrStr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Output file has been written.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"对比-2\"><a class=\"anchor\" href=\"#对比-2\">#</a> 对比</h4>\n<ol>\n<li>压缩算法：Gzip 使用的是 Deflate 压缩算法，该算法结合了 LZ77 算法和哈夫曼编码。LZ77 算法用于数据的重复字符串的替换和引用，而哈夫曼编码用于进一步压缩数据。</li>\n<li>压缩效率：Gzip 压缩通常具有更高的压缩率，因为它使用了哈夫曼编码来进一步压缩数据。哈夫曼编码根据字符的出现频率，将较常见的字符用较短的编码表示，从而减小数据的大小。</li>\n<li>压缩速度：相比于仅使用 Deflate 的方式，Gzip 压缩需要更多的计算和处理时间，因为它还要进行哈夫曼编码的步骤。因此，在压缩速度方面，Deflate 可能比 Gzip 更快。</li>\n<li>应用场景：Gzip 压缩常用于文件压缩、网络传输和 HTTP 响应的内容编码。它广泛应用于 Web 服务器和浏览器之间的数据传输，以减小文件大小和提高网络传输效率。</li>\n<li>deflate 是一种过时的压缩方式，现代浏览器对其支持并不友好</li>\n</ol>\n</li>\n</ul>\n<p><strong>zlib 模块可以用于对发送网络请求返回的数据进行压缩，节省带宽和传输速率。</strong></p>\n<h4 id=\"brotli\"><a class=\"anchor\" href=\"#brotli\">#</a> brotli</h4>\n<ul>\n<li>针对常见的 Web 资源内容，Brotli 的性能比 Gzip 提高了 17-25%；</li>\n<li>当 Brotli 压缩级别为 1 时，压缩率比 Gzip 的最高级别 9 还要高；</li>\n<li>在处理不同的 HTML 文档时，Brotli 依然能提供非常高的压缩率。</li>\n<li>除了 IE 和 Opera Mini 之外，几乎所有主流浏览器都已支持 Brotli 算法。</li>\n<li>尽管 Brotli 在压缩方面表现出色，但随着压缩级别的提高，Brotli 压缩所需的时间也会相应增加。换句话说，Brotli 需要更多的计算能力，这可能意味着更高的设备和软件成本。</li>\n<li>Brotli 要求浏览器必须支持 HTTPS 才能使用。</li>\n</ul>\n<h2 id=\"http模块\"><a class=\"anchor\" href=\"#http模块\">#</a> http 模块</h2>\n<h4 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍</h4>\n<ul>\n<li>http 模块是 Node.js 中用于创建和处理 HTTP 服务器和客户端的核心模块</li>\n<li>http 模块使得基于 HTTP 协议的应用程序更加简单和灵活</li>\n<li>http 模块也可以用于创建代理服务器，用于转发客户端的请求到其他服务器，代理服务器可以用于负载均衡、缓存、安全过滤或跨域请求等场景。通过在代理服务器上添加逻辑，可以对请求和响应进行修改、记录或过滤。</li>\n<li>http 模块也可以创建文件服务器，用于提供静态文件，通过读取文件并将其作为响应发送给客户端。</li>\n</ul>\n<h4 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> httpServer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>httpServer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动，端口：98'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"url模块\"><a class=\"anchor\" href=\"#url模块\">#</a> url 模块</h4>\n<p>可以通过 url 模块来解析 req 的请求路径，来进一步精细化响应内容。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入 url 模块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 HTTP 服务器，并传入回调函数用于处理请求和生成响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> pathname<span class=\"token punctuation\">,</span> query <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析请求的 URL，获取路径和查询参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查请求方法是否为 POST</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'/post'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查路径是否为 '/post'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        data <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 POST 请求的数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应头的 Content-Type 为 'application/json'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应状态码为 200</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将获取到的数据作为响应体返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应头的 Content-Type 为 'application/json'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应状态码为 404</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 'Not Found' 作为响应体</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查请求方法是否为 GET</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'/get'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查路径是否为 '/get'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印查询参数中的键名为 'a' 的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 'get success' 作为响应体</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running on port 98'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印服务器启动的信息</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"net模块\"><a class=\"anchor\" href=\"#net模块\">#</a> net 模块</h2>\n<p><strong>介绍：</strong></p>\n<ul>\n<li>net 模块是 Node.js 的核心模块之一，提供了用于创建基于网络的应用程序的 API</li>\n<li>net 模块主要用于<strong>创建 TCP 服务器和 TCP 客户端，以及处理网络通信</strong></li>\n</ul>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>\n<p>服务端之间的通讯</p>\n<ul>\n<li>\n<p>服务端之间的通讯可以直接使用 TCP 通讯，而不需要上升到 http 层</p>\n</li>\n<li>\n<p>server.js（TCP 层面的服务端）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">client</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  client<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送TCP内容'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000端口启动服务'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>connection.js（TCP 层面的客户端）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span><span class=\"token number\">3000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>从传输层实现 http 协议</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1>TCP Server&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> reposneHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'HTTP/1.1 200 OK'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'Content-Type: text/html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'Content-Length: '</span> <span class=\"token operator\">+</span> html<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'Server: Nodejs'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'\\r\\n'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    html</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">connect</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  connect<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      connect<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>reposneHeader<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\r\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 向 TCP 连接中写入 html 响应</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      connect<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>http<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务启动'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h2>\n<ul>\n<li>动静分离是 Web 服务器架构中常用的优化技术，用于提高网站的性能和可伸缩性</li>\n<li>原理就是将静态资源的请求和动态内容分开处理（通过 url，例如加上 static 后缀表示静态）</li>\n<li>好处在于：\n<ul>\n<li>性能优化（静态资源内容不变，可以利用缓存）</li>\n<li>负载均衡（动态内容请求分发到不同的服务器或服务上，平衡服务器的负载）</li>\n<li>安全性（动态内容往往涉及敏感信息，动静分离可以更好地管理访问控制和安全策略）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'node:http'</span> <span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'node:fs'</span> <span class=\"token comment\">// 导入文件系统模块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'node:path'</span> <span class=\"token comment\">// 导入路径处理模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> mime <span class=\"token keyword\">from</span> <span class=\"token string\">'mime'</span> <span class=\"token comment\">// 导入 mime 模块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> req</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 处理静态资源</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span> <span class=\"token operator\">&amp;&amp;</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取文件路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> mimeType <span class=\"token operator\">=</span> mime<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取文件的 MIME 类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 打印 MIME 类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token comment\">// 设置响应头为纯文本类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not found'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 404 Not Found</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> mimeType<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置响应头为对应的 MIME 类型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token string-property property\">\"Cache-Control\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public, max-age=3600\"</span> <span class=\"token comment\">// 设置缓存控制头</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回文件内容</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 处理动态资源</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//... 处理动态资源的逻辑</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 监听端口 80</span></pre></td></tr></table></figure><h2 id=\"邮件服务\"><a class=\"anchor\" href=\"#邮件服务\">#</a> 邮件服务</h2>\n<p>邮件服务可以用于给成员发送邮件、通知成员信息，在 node.js 上创建邮件服务，需要提供授权码。</p>\n<p><strong>工具：</strong></p>\n<ul>\n<li>js-yaml：用于将 yaml 转为 js 对象</li>\n<li>nodemailer：用于创建邮件服务</li>\n</ul>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//node.js 发送邮件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> yamlTrans <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js-yaml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> nodemailer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nodemailer'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> yamlCode <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data.yaml'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> dataObj <span class=\"token operator\">=</span> yamlTrans<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>yamlCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//nodemailer.createTransport 创建 transPort 服务，传入 auth 信息和配置项</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 授权码需要到对应官网生成</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> transPort <span class=\"token operator\">=</span> nodemailer<span class=\"token punctuation\">.</span><span class=\"token function\">createTransport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">serviece</span><span class=\"token operator\">:</span><span class=\"token string\">'qq'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span><span class=\"token number\">587</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span><span class=\"token string\">'smtp.qq.cmo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">pass</span><span class=\"token operator\">:</span>dataObj<span class=\"token punctuation\">.</span>pass<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 授权码需要去官网申请生成</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span>dataObj<span class=\"token punctuation\">.</span>user</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//sendMail 方法发送邮件，传入接收方信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>transPort<span class=\"token punctuation\">.</span><span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> send<span class=\"token punctuation\">.</span>qq<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> dataObj<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">subject</span><span class=\"token operator\">:</span> <span class=\"token string\">'邮件标题'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'邮件内容'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链</h2>\n<p>防盗链是指在网页或其他资源中，通过直接链接的方式链接到其他网站上的图片、视频或者其他媒体文件，显示在自己的网页上，这种行为通常会给被链接的网站带来额外的带宽消耗和资源浪费，而且可能侵犯了原始网站的版权。采用措施有：</p>\n<ul>\n<li><strong>通过 HTTP 引用检查</strong>：（查看请求来源地址，不匹配则不提供资源）</li>\n<li><strong>使用 Referrer 检查</strong>：检查 HTTP 请求中的 Referrer 字段，该字段指示了请求资源的来源页面（不匹配则不提供服务）</li>\n<li><strong>使用访问控制列表</strong>（ACL）：网站管理员可以配置服务器的访问控制列表，只允许特定的域名或 IP 地址访问资源，其他来源的请求将被拒绝。</li>\n<li><strong>使用防盗链插件或脚本</strong>：一些网站平台和内容管理系统提供了专门的插件或脚本来防止盗链。这些工具可以根据需要配置，阻止来自未经授权的网站的盗链请求。</li>\n<li><strong>使用水印技术</strong>：在图片或视频上添加水印可以帮助识别盗链行为，并提醒用户资源的来源。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> whitelist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 防盗链中间件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preventHotLinking</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> referer <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'referer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求中的 referrer 字段标识请求来源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>referer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>hostname<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>referer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>whistlist<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我不允许你访问我的资源'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>preventHotLinking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000端口启动'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"响应头和请求头\"><a class=\"anchor\" href=\"#响应头和请求头\">#</a> 响应头和请求头</h2>\n<p><strong>响应头：</strong></p>\n<ul>\n<li>\n<p>HTTP 响应头（HTTP response headers）是在 HTTP 响应中发送的元数据信息，用于描述响应的特性、内容和行为。他们以键值对的形式出现。每个键值对由一个标头字段和响应值组成。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">*</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">public, max-age=0, must-revalidate</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">text/html; charset=utf-8</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">nginx</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">Mon, 08 Jan 2024 18:32:47 GMT</span></span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>cors：</strong></p>\n<ul>\n<li>\n<p>跨域资源共享（CORS）是一种机制，用于在浏览器中实现跨域请求访问资源的权限控制。</p>\n</li>\n<li>\n<p>当一个网页通过 XMLHttpRequest 或者 Fetch Api 进行跨域请求时，浏览器会根据同源策略进行限制。</p>\n</li>\n<li>\n<p>同源策略要求请求的协议、域名和端口号必须一致。</p>\n</li>\n</ul>\n<p><strong>请求头：</strong></p>\n<ul>\n<li>\n<p>Accept：指定客户端能够处理的内容类型。</p>\n</li>\n<li>\n<p>Accept-Language：指定客户端偏好的自然语言。</p>\n</li>\n<li>\n<p>Content-Language：指定请求或响应实体的自然语言。</p>\n</li>\n<li>\n<p>Content-Type：指定请求或响应实体的媒体类型。</p>\n</li>\n<li>\n<p>DNT (Do Not Track)：指示客户端不希望被跟踪。</p>\n</li>\n<li>\n<p>Origin：指示请求的源（协议、域名和端口）。</p>\n</li>\n<li>\n<p>User-Agent：包含发起请求的用户代理的信息。</p>\n</li>\n<li>\n<p>Referer：指示当前请求的源 URL。</p>\n</li>\n<li>\n<p>Content-type: application/x-www-form-urlencoded | multipart/form-data |  text/plain</p>\n</li>\n</ul>\n<p><strong>请求方法支持：</strong></p>\n<p>服务端默认只支持 GET、POST、HEAD、OPTIONS 请求，使用其他 restful api 请求方法需要添加响应头 <code>Access-Control-Allow-Methods: *</code></p>\n<h2 id=\"sse-2\"><a class=\"anchor\" href=\"#sse-2\">#</a> SSE</h2>\n<ul>\n<li>\n<p>SSE（Server-Sent-Events）是一种在客户端和服务器之间实现单向事件流的机制，允许服务器主动向客户端发送事件数据，在 SSE 中可以自定义事件来完成。</p>\n</li>\n<li>\n<p>SSE 核心就是：</p>\n<ul>\n<li>前端通过 <code>EventSource</code>  来注册事件源，监听对应事件。</li>\n<li>后端通过设置响应头 <code>Content-Type</code>  为： <code>text/event-stream</code>  之后 发送具有特定类型的事件数据。</li>\n</ul>\n</li>\n</ul>\n<p><strong>前端：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/sse'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>后端：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sse'</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置事件响应头</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event: test\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送对应的事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"orm框架\"><a class=\"anchor\" href=\"#orm框架\">#</a> ORM 框架</h2>\n<ul>\n<li>ORM (Object Relation Map)：对象关系映射，常用于为关系型数据库提供类型安全的支持。</li>\n</ul>\n<h4 id=\"knex\"><a class=\"anchor\" href=\"#knex\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rbmV4anMub3JnL2d1aWRlL3F1ZXJ5LWJ1aWxkZXIuaHRtbCNzZWxlY3Q=\">knex</span></h4>\n<ul>\n<li>knex 是一个基于 JavaScript 的查询生成器</li>\n<li>knex 允许使用 JavaScript 代码来生成和执行 SQL 查询语句</li>\n<li>knex 提供了一种简单和直观的方式来与关系型数据库进行交互，而无需编写 SQL 语句</li>\n<li>可以使用 knex 来定义表结构，执行查询、插入、更新和删除等操作。</li>\n</ul>\n<p><strong>连接数据库：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> knex <span class=\"token keyword\">from</span> <span class=\"token string\">'knex'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">knex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">client</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mysql2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">connection</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span>localhost<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span>test</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>增删改查详见官网。</p>\n<p><strong>事务：</strong></p>\n<p>事务相当于分组的一个概念，可以使用事务来确保一组数据库操作的原子性，要么全部成功提交，要么全部回滚。</p>\n<h4 id=\"prisma\"><a class=\"anchor\" href=\"#prisma\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWEueW9nYS9nZXR0aW5nLXN0YXJ0ZWQ=\">prisma</span></h4>\n<p>Prisma 和 Knex 都是现代的 Node.js ORM（对象关系映射）库，它们可以帮助开发者以面向对象的方式来操作数据库。尽管它们的目标相似，但它们在设计理念、功能特性和使用方式上存在一些区别：</p>\n<ul>\n<li>prisma 和 TypeScript 联系紧密</li>\n<li>prisma 提供强大的类型安全</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJpc21h\">prisma CLI</span></p>\n<p>prisma 对应的脚手架可以快速创建模板结构。</p>\n<h2 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h2>\n<h4 id=\"mvc\"><a class=\"anchor\" href=\"#mvc\">#</a> MVC</h4>\n<p><strong>概念：</strong></p>\n<ul>\n<li>\n<p>MVC 是一种常用的软件架构模式，用于设计和组织应用程序的代码</p>\n</li>\n<li>\n<p>它将应用程序分为三个主要的组件：模型 (Model)、视图 (view) 和控制器 (Controller)，各自负责不同的模块</p>\n</li>\n</ul>\n<p><strong>作用：</strong></p>\n<ul>\n<li>MVC 将应用程序的逻辑数据等和界面相分离，以提高代码的可维护性、可扩展性和可重用性。</li>\n<li>通过将不同职责分配给不同组件，MVC 提供了一种清晰的结构使得开发人员更好的管理应用程序的各个部分</li>\n</ul>\n<h4 id=\"loc控制反转\"><a class=\"anchor\" href=\"#loc控制反转\">#</a> loC 控制反转</h4>\n<p><strong>概念：</strong></p>\n<ul>\n<li>\n<p>控制反转（IoC）是一种设计原则，它将组件的控制权从组件自身转移到外部容器。</p>\n</li>\n<li>\n<p>传统上，组件负责自己的创建和管理，而控制反转则将这个责任转给了一个外部的容器或框架。容器负责创建组件实例并管理它们的生命周期，组件只需声明自己所需的依赖关系，并通过容器获取这些依赖。</p>\n</li>\n<li>\n<p>loC 控制反转使得组件更加松耦合、可测试和可维护。</p>\n</li>\n</ul>\n<p><strong>依赖注入：</strong></p>\n<ul>\n<li>\n<p>依赖注入（DI）是实现控制反转的一种具体技术。</p>\n</li>\n<li>\n<p>它通过将组件的依赖关系从组件内部移动到外部容器来实现松耦合。</p>\n</li>\n<li>\n<p>组件不再负责创建或管理它所依赖的其他组件，而是通过构造函数、属性或方法参数等方式将依赖关系注入到组件中。</p>\n</li>\n<li>\n<p>依赖注入可以通过构造函数注入（Constructor Injection）、属性注入（Property Injection）或方法注入（Method Injection）等方式实现。</p>\n</li>\n</ul>\n<p><strong>工具包：</strong></p>\n<p>可以使用 inversify、reflect-metadata、inversify-express-utils 来实现。</p>\n<h2 id=\"jwt\"><a class=\"anchor\" href=\"#jwt\">#</a> JWT</h2>\n<p><strong>介绍：</strong></p>\n<p>JWT（JSON Web Token）是一种开放的标准，是一种基于 JSON 的安全令牌，用于在客户端和服务端之间传输信息。</p>\n<p><strong>组成：</strong></p>\n<p>JWT 由三部分组成，它们通过点（.）进行分隔：</p>\n<ol>\n<li>Header（头部）：包含了令牌的类型和使用的加密算法等信息。通常采用 Base64 编码表示。</li>\n<li>Payload（负载）：包含了身份验证和授权等信息，如用户 ID、角色、权限等。也可以自定义其他相关信息。同样采用 Base64 编码表示。</li>\n<li>Signature（签名）：使用指定的密钥对头部和负载进行签名，以确保令牌的完整性和真实性。</li>\n</ol>\n<p><strong>工作流程：</strong></p>\n<ol>\n<li>用户通过提供有效的凭证（例如用户名和密码）进行身份验证。</li>\n<li>服务器验证凭证，并生成一个 JWT 作为响应。JWT 包含了用户的身份信息和其他必要的数据。</li>\n<li>服务器将 JWT 发送给客户端。</li>\n<li>客户端在后续的请求中，将 JWT 放入请求的头部或其他适当的位置。</li>\n<li>服务器在接收到请求时，验证 JWT 的签名以确保其完整性和真实性。如果验证通过，服务器使用 JWT 中的信息进行授权和身份验证。</li>\n</ol>\n<h2 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h2>\n<p><strong>内存存储系统</strong></p>\n<p><strong>介绍：</strong></p>\n<p>Redis（Remote Dictionary Server）是一个开源的内存数据结构存储系统，提供了一个高效的键值存储解决方案，并支持多种数据结构，如：string 字符串、hashes 哈希、lists 列表、sets 集合和 sorted sets 有序集合等等。</p>\n<p><strong>应用：</strong></p>\n<p>Redis 被广泛应用于缓存、消息队列和实时统计等场景。</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>内存存储，因此具有快速的读写功能，能持久化数据到硬盘，以便在重新启动后恢复数据</li>\n<li>多种数据结构，Redis 支持多种数据结构</li>\n<li>发布 / 订阅，Redis 支持发布订阅模式，允许多个客户端订阅同一个或多个频道，以接收实时发布的消息，这使得 Redis 可以用于实时消息系统</li>\n<li>事务支持，Redis 支持事务，可以将多个命令打包成一个原子操作执行，确保命令要么全部成功，要么全部失败</li>\n<li>持久化，Redis 提供两种持久化数据的方式：\n<ul>\n<li>RDB（Redis Database），RDB 是将数据以快照的形式保存到磁盘。</li>\n<li>AOF（Append Only File），AOF 是将每个写操作追加到文件中，确保数据在意外宕机或重启后的持久性</li>\n</ul>\n</li>\n<li>高可用性，Redis 支持主从复制和 Sentine 哨兵机制，通过主从复制可以创建多个 Redis 实例的副本，以提高读取性和容错能力。 <code>sentinel</code>  是一个用于监控和自动故障转移的系统，可以在主节点宕机时自动将节点提升为主节点。</li>\n<li>缓存，Redis 的快速读写能力和灵活的数据结构使其被广泛应用于缓存层，它可以将常用的数据存储在内存中，以加快数据访问速度，减轻后端数据库的负载。</li>\n<li>实时统计，Redis 的计数器和有序集合等数据结构使其非常适合实时统计的场景，可以存储和更新计数器，并对有序集合进行排名和范围查询，用于统计和排行榜功能。</li>\n</ul>\n<p><strong>安装</strong></p>\n<p>安装文件，配置环境变量，然后启动即可。</p>\n<p>连接 redis 服务可以使用 Navicate 或者在 vscode 中下载对应的插件。</p>\n<p><strong>发布订阅模式：</strong></p>\n<p>在 redis 中，发布订阅模式通过命令：publish、subscribe、unsubscribe、psubscribe 命令和 punsubscribe 命令来进行操作。</p>\n<p><strong>事务：</strong></p>\n<ul>\n<li>redis 支持事务，允许用户将多个命令打包在一起作为一个单元进行执行，事务提供了一种原子性操作的机制，要么所有命令都执行成功，要么所有命令都不成功。</li>\n<li>Redis 的事务不支持回滚操作，如果在事务执行期间发生错误，事务会继续执行，而不会会回滚已执行的命令。</li>\n<li>Redis 事务常用命令：\n<ul>\n<li>multi：开启一个事务</li>\n<li>exec：执行事务中所有命令</li>\n<li>watch：对一个或多个键进行监视</li>\n<li>discard：取消事务，清空事务队列中的命令。</li>\n</ul>\n</li>\n</ul>\n<p><strong>redis 持久化：</strong></p>\n<ul>\n<li>RDB（Redis Database）持久化\n<ul>\n<li>RDB 持久化是一种快照的形式，会将内存中的数据定期保存到磁盘上。</li>\n<li>可以通过配置 Redis 服务器，设置自动触发 RDB 快照的条件，比如指定时间间隔或指定操作次数自动保存。</li>\n<li>RDB 持久化生成的快照文件是二进制文件，包含了 Redis 数据的完整状态。</li>\n<li>在恢复数据时，可以通过加载快照文件将数据重新加载到内存中。</li>\n</ul>\n</li>\n<li>RDB 使用：\n<ul>\n<li>找到 redis 的 redis.conf 文件，配置其中的 save 字段。</li>\n<li>或者在 redis 启动的命令行中输入 save，手动保存快照。</li>\n</ul>\n</li>\n<li>AOF（Append Only File）持久化\n<ul>\n<li>AOF 持久化记录了 Redis 服务器执行的所有写操作命令，在文件中以追加的方式保存</li>\n<li>当 redis 重启时，可以重新执行 AOF 文件中保存的命令，以重新构建数据集。相比于 RDB 持久化，AOF 持久化提供了更好的数据恢复保证，因为它记录了每个写操作，而不是快照的形式。</li>\n<li>AOF 文件相对于 RDB 文件更大，恢复数据的速度可能会比较慢。</li>\n</ul>\n</li>\n<li>AOF 使用：\n<ul>\n<li>redus.conf 文件的 appendonly 字段设置为 yes。</li>\n</ul>\n</li>\n</ul>\n<p><strong>redis 主从复制：</strong></p>\n<ul>\n<li>redis 主从复制是一种数据复制和同步机制，其中一个 redis 服务器（主服务器）将其数据复制到一个或多个其他 Redis 服务器（从服务器）中，主从复制提供了数据冗余备份、读写分离和故障恢复等功能。</li>\n</ul>\n<p><strong>ioredis：在 node.js 中与 Redis 进行交互的三方库。</strong></p>\n<h2 id=\"lua\"><a class=\"anchor\" href=\"#lua\">#</a> lua</h2>\n<p>轻量级、可嵌入的脚本语言。</p>\n<p><strong>介绍：</strong></p>\n<ul>\n<li>lua 是一种轻量级、高效、可嵌入的脚本语言，被广泛应用于嵌入式系统、游戏开发、Web 应用和脚本编写等领域。</li>\n<li>其设计目标之一就是作为扩展和嵌入式脚本语言，可以与其他编程语言无缝集成。</li>\n<li>在 redius 中可以直接执行 lua 脚本（.lua 文件）。</li>\n<li>web 应用为了增强性能和可扩展性，通常将 Lua、Redis 和 Nginx 结合使用，以构建高性能的 Web 应用程序或 API 服务。</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVhLm9yZy8=\">安装</span></p>\n<h2 id=\"corn表达式\"><a class=\"anchor\" href=\"#corn表达式\">#</a> corn 表达式</h2>\n<p>corn 表达式是一种用汉语指定定时任务执行时间的字符串表示形式，由 6 个或 7 个字段组成，每个字段表示任务执行的时间单位和范围。</p>\n<p><strong>格式为：</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hr punctuation\">*    *    *    *    *    *</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>┬    ┬    ┬    ┬    ┬    ┬</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│    │    │    │    │    │</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│    │    │    │    │    └── 星期（0 - 6，0表示星期日）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│    │    │    │    └───── 月份（1 - 12）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│    │    │    └────────── 日（1 - 31）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│    │    └─────────────── 小时（0 - 23）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│    └──────────────────── 分钟（0 - 59）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>└───────────────────────── 秒（0 - 59）</pre></td></tr></table></figure><p>常见的 Cron 表达式示例：</p>\n<ul>\n<li><code>* * * * * *</code> ：每秒执行一次任务。</li>\n<li><code>0 * * * * *</code> ：每分钟的整点执行一次任务。</li>\n<li><code>0 0 * * * *</code> ：每小时的整点执行一次任务。</li>\n<li><code>0 0 * * * *</code> ：每天的午夜执行一次任务。</li>\n<li><code>0 0 * * 1 *</code> ：每周一的午夜执行一次任务。</li>\n<li><code>0 0 1 * * *</code> ：每月的 1 号午夜执行一次任务。</li>\n<li><code>0 0 1 1 * *</code> ：每年的 1 月 1 日午夜执行一次任务。</li>\n</ul>\n<p><strong>掘金定时自动签到：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> schedule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-schedule'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> aid <span class=\"token operator\">=</span> <span class=\"token string\">'******'</span> <span class=\"token comment\">// 输入掘金账号的 aid</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> uid <span class=\"token operator\">=</span> <span class=\"token string\">'******'</span> <span class=\"token comment\">// 输入掘金账号的 uid</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> cookie <span class=\"token operator\">=</span> <span class=\"token string\">'******'</span> <span class=\"token comment\">// 输入在掘金的 cookie</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>schedule<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">'48 15 * * *'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//corn 表达式表示 43 分钟 15 小时每天每月每星期（每天 15 点 43 分）点执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.juejin.cn/growth_api/v1/check_in?aid=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>aid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;uid=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token literal-property property\">referer</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://juejin.cn/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> `sessionid<span class=\"token operator\">=</span>$<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>`</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'签到成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出现错误'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"serverless\"><a class=\"anchor\" href=\"#serverless\">#</a> serverLess</h2>\n<p><strong>介绍：</strong></p>\n<ul>\n<li>serverLess 并不是一项技术，而是一个架构模型（无服务器架构）。</li>\n<li>在传统模式下，部署一个服务需要选择服务器（linux、windows 等），并且需要安装环境，熟悉操作系统命令，知晓安全知识等，都需要一定的成本，serverLess 的核心思想就是让开发者更多关注业务本身而不是服务器运行成本。</li>\n</ul>\n<p><strong>Faas：函数即服务</strong></p>\n<p>FaaS 是一种 Serverless 计算模型，它允许开发人员编写和部署函数代码，而无需关心底层的服务器管理。在 FaaS 中，开发人员只需关注函数的实现和逻辑，将其上传到云平台上，平台会负责函数的运行和扩展。当有请求触发函数时，云平台会自动为函数提供所需的计算资源，并根据请求量进行弹性扩展。这种按需计算的模式使开发人员可以更专注于业务逻辑的实现，同时实现了资源的高效利用。</p>\n<p>每个函数即一个服务，函数内只需处理业务，可以使用 BASS 层提供的服务已完成业务，无需关心背后计算资源的问题。</p>\n<p><strong>Baas：后端即服务</strong></p>\n<p>后端即服务是一种提供面向移动应用和 Web 应用的后端功能的云服务模型。BaaS 为开发人员提供了一组预构建的后端服务，如用户身份验证、数据库存储、文件存储、推送通知等，以简化应用程序的开发和管理。开发人员可以使用 BaaS 平台提供的 API 和 SDK，直接集成这些功能到他们的应用中，而无需自己构建和维护后端基础设施。</p>\n<p>对后端的资源当成一种服务，如文件存储，数据存储，推送服务，身份验证。该层只需提供对应的服务，无需关心业务。定义为底层基础服务，由其他服务调用，正常不触及用户终端。</p>\n<p><strong>脚手架快速编写：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHNlcnZlcmxlc3MtZGV2cy9z\">https://www.npmjs.com/package/@serverless-devs/s</span></strong></p>\n<h2 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> webSocket</h2>\n<p><strong>传统 HTTP 的不足：</strong></p>\n<ul>\n<li>\n<p>传统 HTTP 是一种单向请求 -- 响应协议，客户端发送请求之后，服务器才会响应并返回相应的数据。</p>\n</li>\n<li>\n<p>在传统 HTTP 中，客户端需要主动发送请求才能获取服务器上的资源，而且每次请求都需要重新建立连接，这种方式在实时通信和持续获取资源的场景下效率较低。</p>\n</li>\n</ul>\n<p><strong>Socket：</strong></p>\n<p>socket 提供了实时的双向通信能力，可以实时地传输数据。客户端和服务器之间的通信是即时的，数据的传输和响应几乎是实时完成的，不需要轮询或定时发送请求。</p>\n<p><strong>node 中使用 webSocket：</strong></p>\n<ul>\n<li><strong>客户端：</strong></li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">html,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        body,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        .room</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token selector\">.room</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 0.5px solid #f5f5f5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #1c1c1c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token selector\">.header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #8d0eb0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token selector\">.main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token selector\">.main-chat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token selector\">.footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 1px solid green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token selector\">.footer .ipt</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token selector\">.groupList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token selector\">.groupList-items</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #131313<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>room<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>groupList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>聊天室<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ipt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">contenteditable</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            div<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'main-chat'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            div<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token punctuation\">.</span>user<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token punctuation\">.</span>text<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            main<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">const</span> groupEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.groupList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> io <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://cdn.socket.io/4.7.4/socket.io.esm.min.js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你的名字'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">const</span> room <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入房间号'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">// 键盘按下发送消息</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">const</span> ipt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ipt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> ipt<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                    <span class=\"token literal-property property\">room</span><span class=\"token operator\">:</span> room<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> name</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> ipt<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                ipt<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">// 连接成功 socket</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'join'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> room <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 加入一个房间</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupList'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">groupList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>groupList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                groupEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>groupList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'groupList-items'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">房间名称:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 房间人数:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>groupList<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                    groupEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li><strong>服务端：</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Server <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'socket.io'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">cors</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 允许跨域</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> groupList <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * [&#123;1008:[&#123;name,room,id&#125;]&#125;]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 加入房间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'join'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> room <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>groupList<span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            groupList<span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> room<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            groupList<span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> room<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'管理员'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">进入了房间</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupList'</span><span class=\"token punctuation\">,</span> groupList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupList'</span><span class=\"token punctuation\">,</span> groupList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> text<span class=\"token punctuation\">,</span> room<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            text<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            user</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 断开链接内置事件</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>groupList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">let</span> leval <span class=\"token operator\">=</span> groupList<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                socket<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>leval<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'管理员'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>leval<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">离开了房间</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            groupList<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groupList<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupList'</span><span class=\"token punctuation\">,</span> groupList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on :3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"爬虫\"><a class=\"anchor\" href=\"#爬虫\">#</a> 爬虫</h2>\n<p><strong>介绍：</strong></p>\n<ul>\n<li>爬虫也称为网络爬虫或网络蜘蛛，是指一种自动化程序或脚本，用于在互联网上浏览和提取信息。</li>\n<li>爬虫模拟人类在网页上的行为，通过 HTTP 协议发送请求，获取网页内容，然后解析并提取需要的内容。</li>\n<li>在 node 中使用爬虫需要借助模拟浏览器环境的包（如 puppeteer）来模拟浏览器环境。</li>\n</ul>\n<p><strong>工具：</strong></p>\n<ul>\n<li>puppeteer（模拟浏览器环境）</li>\n</ul>\n<p><strong>使用：</strong></p>\n<p>npm 包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i puppeteer</pre></td></tr></table></figure><p>index.js：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> puppeteer <span class=\"token keyword\">from</span> <span class=\"token string\">\"puppeteer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> btnText <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">headless</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 取消无头模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打开一个页面</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>page<span class=\"token punctuation\">.</span><span class=\"token function\">setViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span><span class=\"token number\">1920</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span><span class=\"token number\">1080</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置页面宽高</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://juejin.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳转</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForSelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.side-navigator-wrap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待元素出现</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> elements <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">$$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.side-navigator-wrap .nav-item-wrap span'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> articleList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">collectFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForSelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.entry-list'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> elements <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">$$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.entry-list .title-row a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerText'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">jsonValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        articleList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>articleList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerText'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取 span 的属性</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">jsonValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>btnText <span class=\"token operator\">||</span> <span class=\"token string\">'前端'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">await</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自动点击对应的菜单</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">collectFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>可以结合 node 子进程跑 python 脚本，使用 pip 仓库中相应的包和功能。</strong></p>\n<h2 id=\"c扩展\"><a class=\"anchor\" href=\"#c扩展\">#</a> C++ 扩展</h2>\n<p>Node.js 在 IO 方面具有极强的能力，但是对 CPU 密集型的任务有所不足，为了填补这部分缺点，node.js 支持 C/C++ 为其编写原生的 nodejs 插件，补充这方面能力。</p>\n<p><strong>node.js 中 C++ 扩展：</strong></p>\n<p>c++ 编写的代码能够被编译成一个动态链接库 (dll), 可以被 nodejs require 引入使用，后缀是 <code>.node</code></p>\n<p>.node 文件的原理就是 ( <code>window dll</code> ) ( <code>Mac dylib</code> ) ( <code>Linux so</code> )</p>\n<p>c++ 扩展编写语法</p>\n<ul>\n<li>\n<p>NAN (Native Abstractions for Nodejs) 一次编写，到处编译</p>\n<ul>\n<li>因为 Nodejs 和 V8 都更新的很快所有每个版本的方法名也不一样，对我们开发造成了很大的问题例如</li>\n<li>0.50 版本  <code>Echo(const Prototype&amp;proto)</code></li>\n<li>3.00 版本  <code>Echo(Object&lt;Prototype&gt;&amp; proto)</code></li>\n</ul>\n</li>\n<li>\n<p>NAN 的就是一堆宏判断，判断各种版本的 API，用来实现兼容所以他会到处编译</p>\n<ul>\n<li>N-API (node-api) 无需重新编译</li>\n<li>基于 C 的 API</li>\n<li>c++ 封装 node-addon-api</li>\n</ul>\n</li>\n</ul>\n<p>N-API 是一个更现代的选择，它提供了一个稳定的、跨版本的 API，使得你的插件可以在不同版本的 Node.js 上运行，而无需修改代码。这大大简化了编写和维护插件的过程。</p>\n<p>对于 C++，可以使用 node-addon-api，这是 N-API 的一个封装，提供了一个更易于使用的 C++ API。这将使你的代码更易于阅读和维护。</p>\n<p><strong>使用场景</strong></p>\n<ol>\n<li>使用 C++ 编写的 Nodejs 库如 <code>node-sass</code>   <code>node-jieba</code>  等</li>\n<li>CPU 密集型应用</li>\n<li>代码保护</li>\n</ol>\n<p><strong>需要安装 C++ 编辑器：</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--production</span> windows-build-tools <span class=\"token comment\">#管理员运行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#如果安装过 python 以及 c++ 开发软件就不需要装这个了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> node-gyp <span class=\"token parameter variable\">-g</span> <span class=\"token comment\">#全局安装</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> node-addon-api <span class=\"token parameter variable\">-D</span> <span class=\"token comment\">#装到项目里</span></pre></td></tr></table></figure><p><strong>使用：</strong></p>\n<p><strong>cpu.cpp：</strong></p>\n<pre><code class=\"language-c++\">#define NAPI_VERSION 3  //指定addon版本\n#define NAPI_CPP_EXCEPTIONS //启用 Node.js N-API 中的 C++ 异常支持\n#include &lt;napi.h&gt;  //addon API\n#include &lt;windows.h&gt; //windwos API\n\nNapi::Value GetScreenSize(const Napi::CallbackInfo&amp; info) &#123;\n    Napi::Env env = info.Env(); //指定环境\n\n    int cx = GetSystemMetrics(SM_CXSCREEN); //获取设备宽\n    int cy = GetSystemMetrics(SM_CYSCREEN); //获取设备高\n\n    Napi::Object result = Napi::Object::New(env); //创建一个对象\n    result.Set(&quot;width&quot;, cx);\n    result.Set(&quot;height&quot;, cy);\n\n    return result; //返回对象\n&#125;\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) &#123;\n    //抛出一个函数  getScreenSize \n    exports.Set(&quot;getScreenSize&quot;, Napi::Function::New(env, GetScreenSize));\n    return exports;\n&#125;\n//addon固定语法 必须抛出这个方法\nNODE_API_MODULE(NODE_GYP_MODULE_NAME, Init)\n</code></pre>\n<p><strong>binding.gyp：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"targets\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token string\">\"target_name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span>名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token string\">\"sources\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"cpu.cpp\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span>指定文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"include_dirs\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                 <span class=\"token string\">\"&lt;!@(node -p \\\"require('node-addon-api').include\\\")\"</span> <span class=\"token operator\">//</span>引入addon</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>index.js：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> addon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./build/Release/cpu.node'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>addon<span class=\"token punctuation\">.</span><span class=\"token function\">getScreenSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>命令行中打包 addon：</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node-gyp configure <span class=\"token comment\">#生成配置文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node-gyp build  <span class=\"token comment\">#打包 addon</span></pre></td></tr></table></figure><h2 id=\"大文件上传\"><a class=\"anchor\" href=\"#大文件上传\">#</a> 大文件上传</h2>\n<p>大文件上传方案：</p>\n<ul>\n<li>大文件分片：将大文件切分成较小的片段（通常称为分片或者块），然后逐个上传这些分片\n<ul>\n<li>优点是：提高上传的稳定性，因为上传失败时只需要重新上传该分片而不需要重新上传整个文件，同时分片上传还可以利用多个网络连接并行上传多个分片，提高上传速度。</li>\n</ul>\n</li>\n<li>断点续传：如果上传中止，断点传输可以记录已成功上传的分片信息，以便在恢复上传时继续上传未完成的任务，而不是重新上传整个文件\n<ul>\n<li>优点是可以大大减少上传失败的影响，并节省时间和带宽。</li>\n</ul>\n</li>\n</ul>\n<p>前端：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> fileDOM <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fileDOM<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 对文件进行分片</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> <span class=\"token function\">sliceFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 上传分片数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">postChunksData</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">sliceFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> chunks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">postChunksData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>chunks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 使用 formData 上传所有分片</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'total'</span><span class=\"token punctuation\">,</span>chunks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fileName'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'分片文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span>chunks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/up'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 上传完所有分片之后将文件合并</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/merge'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"application/json\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token literal-property property\">fileName</span><span class=\"token operator\">:</span><span class=\"token string\">\"分片上传文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>服务端：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> multer <span class=\"token keyword\">from</span> <span class=\"token string\">'multer'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> cors <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'node:fs'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'node:path'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> multer<span class=\"token punctuation\">.</span><span class=\"token function\">diskStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">destination</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uploads/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">filename</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>index<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>fileName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> upload <span class=\"token operator\">=</span> <span class=\"token function\">multer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> storage <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 使用 multer 将数据存到服务器磁盘中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/up'</span><span class=\"token punctuation\">,</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">single</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 使用 fs.appendFileSync 将切片文件进行合成</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/merge'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> uploadPath <span class=\"token operator\">=</span> <span class=\"token string\">'./uploads'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    files <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">const</span> writePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">video</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>fileName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.mp4</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFileSync</span><span class=\"token punctuation\">(</span>writePath<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uploadPath<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uploadPath<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server is running on port 3000'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"文件流下载\"><a class=\"anchor\" href=\"#文件流下载\">#</a> 文件流下载</h2>\n<ul>\n<li>\n<p>文件流下载是一种将文件内容通过流的形式发送给客户端，实现文件下载的方法，适用于处理大型文件或者需要实时生成文件内容的情况。</p>\n</li>\n<li>\n<p>核心知识响应头：</p>\n<ul>\n<li>Content-Type 指定下载文件的 MIME 类型\n<ul>\n<li><code>application/octet-stream</code> （二进制流数据）</li>\n<li><code>application/pdf</code> ：Adobe PDF 文件。</li>\n<li><code>application/json</code> ：JSON 数据文件</li>\n<li><code>image/jpeg</code> ：JPEG 图像文件</li>\n</ul>\n</li>\n<li><code>Content-Disposition</code>  指定服务器返回的内容在浏览器中的处理方式。它可以用于控制文件下载、内联显示或其他处理方式\n<ul>\n<li><code>attachment</code> ：指示浏览器将响应内容作为附件下载。通常与  <code>filename</code>  参数一起使用，用于指定下载文件的名称</li>\n<li><code>inline</code> ：指示浏览器直接在浏览器窗口中打开响应内容，如果内容是可识别的文件类型（例如图片或 PDF），则在浏览器中内联显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>前端：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/download'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token literal-property property\">fileName</span><span class=\"token operator\">:</span><span class=\"token string\">'1.png'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"application/json\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span>res<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 请求到 stream 流式数据后，通过 res.arrayBuffer 方法获得 Buffer 数据，用 Blob 容器存储二进制缓冲数据，通过 URL.createObjectURL 创建 URL 地址，赋给 a 标签进行下载。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'image/png'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'1.png'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>服务端：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> cors <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/download'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当请求 download 路径时，通过 fs 读取文件数据，设置响应头后返回文件数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>fileName</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./static'</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/octet-stream'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'attachment;filename='</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"http缓存\"><a class=\"anchor\" href=\"#http缓存\">#</a> HTTP 缓存</h2>\n<p>HTTP 缓存分为两大类：强缓存和协商缓存。这两种缓存都是通过 HTTP 响应头来控制，目的是提高网站的性能。</p>\n<ul>\n<li>\n<p>强缓存</p>\n<ul>\n<li>\n<p>强缓存之后则不需要重新向服务器发送请求，而是从浏览器缓存（内存缓存或者硬盘缓存中）读取。</p>\n<ul>\n<li>memory cache (内存缓存) 内存缓存存储在浏览器内存当中，一般刷新网页的时候会发现很多内存缓存</li>\n<li>disk cache (硬盘缓存) 硬盘缓存是存储在计算机硬盘中，空间大，但是读取效率比内存缓存慢</li>\n</ul>\n</li>\n<li>\n<p>强缓存设置需要服务端设置对应的响应头 Cache-Control，响应头含义如下：</p>\n<ul>\n<li><code>max-age</code> ：浏览器资源缓存的时长 (秒)。</li>\n<li><code>no-cache</code> ：不走强缓存，<strong>走协商缓存</strong>。</li>\n<li><code>no-store</code> ：禁止任何缓存策略。</li>\n<li><code>public</code> ：资源即可以被浏览器缓存也可以被代理服务器缓存 (CDN)。</li>\n<li><code>private</code> ：资源只能被客户端缓存。</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'public, max-age=20'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"cache\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span><span class=\"token string\">'1.0.0'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务启动'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>协商缓存</p>\n<ul>\n<li>\n<p>当涉及到缓存机制时，强缓存优先于协商缓存。当资源的强缓存生效时，客户端可以直接从本地缓存中获取资源，而无需与服务器进行通信。</p>\n<p>如果强缓存未命中（例如 <code>max-age</code>  过期），或者服务器响应中设置了 <code>Cache-Control: no-cache</code> ，则客户端会发起协商缓存的请求。在协商缓存中，客户端会发送带有缓存数据标识的请求头部字段，以向服务器验证资源的有效性。</p>\n<p>服务器会根据客户端发送的协商缓存字段（如 <code>If-Modified-Since</code>  和 <code>If-None-Match</code> ）来判断资源是否发生变化。如果资源未发生修改，服务器会返回状态码 304（Not Modified），通知客户端可以使用缓存的版本。如果资源已经发生变化，服务器将返回最新的资源，状态码为 200。</p>\n</li>\n<li>\n<blockquote>\n<p>服务端通过设置响应头 <code>Last-Modified</code>  和 <code>If-Modified-Since</code>  来通知客户端最后修改时间，客户端在后续请求中通过 <code>If-Modified-Since</code>  请求头携带该时间，服务器判断资源是否有更新，如何没有返回 304 状态码。</p>\n</blockquote>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> cors <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'node:fs'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getModifyTime</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mtime<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取文件最后修改时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no-cache, max-age=2592000'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 表示走协商缓存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> ifModifiedSince <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'if-modified-since'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 获取浏览器上次修改时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Last-Modified'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getModifyTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ifModifiedSince <span class=\"token operator\">&amp;&amp;</span> ifModifiedSince <span class=\"token operator\">===</span> <span class=\"token function\">getModifyTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'304'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">304</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port 3000!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>ETag：</p>\n<p>ETag 和 If-None-Match：服务器通过 ETag 响应头给资源生成一个唯一标识符。客户端在后续请求中通过 If-None-Match 请求头携带该标识符，服务器根据标识符判断资源是否有更新。如果没有更新，返回 304 状态码。</p>\n<blockquote>\n<p>ETag 优先级比 Last-Modified 高</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http2\"><a class=\"anchor\" href=\"#http2\">#</a> HTTP2</h2>\n<ul>\n<li>\n<p>HTTP2 是超文本传输协议的下一个主要版本，是对 HTTP/1.1 协议的重大改进。目标是改善性能、效率和安全性，提供更快更高效的网络通信。</p>\n</li>\n<li>\n<p>多路复用</p>\n</li>\n<li>\n<p>HTTP/2 支持在单个 TCP 连接上同时发送多个请求和响应，这意味着可以避免建立多个连接，减少网络延迟，提高效率。</p>\n</li>\n<li>\n<p>二进制分帧</p>\n<ul>\n<li>在 HTTP2 应用层和传输层之间增加了二进制分帧层，将请求和响应拆分为多个帧，这种二进制格式的设计使得协议更加高效，并且容易解析和处理。\n<ul>\n<li>数据帧（Data Frame）：用于传输请求和响应的实际数据。</li>\n<li>头部帧（Headers Frame）：包含请求或响应的头部信息。</li>\n<li>优先级帧（Priority Frame）：用于指定请求的优先级。</li>\n<li>设置帧（Settings Frame）：用于传输通信参数的设置。</li>\n<li>推送帧（Push Promise Frame）：用于服务器主动推送资源。</li>\n<li>PING 帧（PING Frame）：用于检测连接的活跃性。</li>\n<li>重置帧（RST_STREAM Frame）：用于重置数据流或通知错误。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>头部压缩</p>\n<ul>\n<li>HTTP2 采用首部表和动态压缩算法来减少头部的大小，这减少了每个请求和响应的开销，提高了传输效率。</li>\n</ul>\n</li>\n<li>\n<p>node 中实现</p>\n<ul>\n<li>\n<blockquote>\n<p>可以使用 openssl 生成 tls 证书：</p>\n<p>生成私钥</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl genrsa <span class=\"token parameter variable\">-out</span> server.key <span class=\"token number\">1024</span></pre></td></tr></table></figure><p>生成证书请求文件 (用完可以删掉也可以保留)</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> server.key <span class=\"token parameter variable\">-out</span> server.csr</pre></td></tr></table></figure><p>生成证书</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-in</span> server.csr <span class=\"token parameter variable\">-out</span> server.crt <span class=\"token parameter variable\">-signkey</span> server.key <span class=\"token parameter variable\">-days</span> <span class=\"token number\">3650</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> http2 <span class=\"token keyword\">from</span> <span class=\"token string\">'node:http2'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'node:fs'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http2<span class=\"token punctuation\">.</span><span class=\"token function\">createSecureServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server.key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">cert</span><span class=\"token operator\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server.crt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stream<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html; charset=utf-8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string-property property\">':status'</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      &lt;h1>http2&lt;/h1></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running on port 80'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"node中事件循环\"><a class=\"anchor\" href=\"#node中事件循环\">#</a> Node 中事件循环</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ29sb3ZpbmcvcC8xNjUyMzY0OC5odG1s\">https://www.cnblogs.com/goloving/p/16523648.html</span></p>\n<blockquote>\n<p>本篇出于学习<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vY29sdW1uLzcyNzQ4OTM3MTQ5NzA5MTg5Njk=\"> node.js 教程</span>后所整理，内容中有大量引用和参照，详细可点击前去了解</p>\n</blockquote>\n",
            "tags": [
                "Node.js",
                "node.js"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/",
            "url": "https://dmqweb.cn/2024/05/24/%E5%BE%AE%E5%89%8D%E7%AB%AF/",
            "title": "微前端",
            "date_published": "2024-05-24T06:26:39.000Z",
            "content_html": "<h1 id=\"微前端\"><a class=\"anchor\" href=\"#微前端\">#</a> 微前端</h1>\n<h2 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h2>\n<p>核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，这样才能确保微应用真正具备独立开发、独立运行的能力（防止巨石应用）</p>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>微前端按业务功能将一整块前端应用分解成一系列更小的、更内聚的微前端应用，同时通过明确的交互协议来管理这些应用间的依赖关系，实现不同业务的解耦合。并将每个前端应用交给独立团队负责，各自独立开发、独立部署、充分利用并行性。</p>\n<ul>\n<li>微前端是一种架构风格，monorepo 是一种开发策略，模块联邦是一种打包和部署方式\n<ul>\n<li>微前端将大型的前端应用分解成一组小的、独立的前端服务，每一个小的前端服务可以由不同的团队独立开发、部署和维护。微前端的目标是提高大型前端项目的可维护性、可扩展性和灵活性</li>\n<li>monorepo 是一种开发策略（技巧），它将多个项目或服务的代码放在一个单一的版本控制系统仓库中，有助于简化依赖管理、代码共享和团队协作。对于工具库能更好的暴露单独模块。</li>\n<li>模块联邦是 Webpack5 引入的一个特性，允许将多个 Webpack 项目远程接入、联合起来，形成一个单一的应用，每个模块可以独立开发和部署，同时共享彼此的代码，模块联邦是一种新的打包和部署前端应用的方式。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"微前端应用\"><a class=\"anchor\" href=\"#微前端应用\">#</a> 微前端应用</h1>\n<h2 id=\"emp\"><a class=\"anchor\" href=\"#emp\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbXAyLm5ldGxpZnkuYXBwLw==\">EMP</span></h2>\n<p>模块联邦技术，微前端构建方案，是基于 webpack 5 module federation 的微前端方案。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>webpack 联邦编译可以保证所有子应用依赖解耦；</li>\n<li>应用间去中心化的调用、共享模块；</li>\n<li>模块远程 ts 支持；</li>\n</ol>\n<p><strong>不足</strong></p>\n<ol>\n<li>对 webpack 强依赖，老旧项目不友好；</li>\n<li>没有有效的 css 沙箱和 js 沙箱，需要靠用户自觉；</li>\n<li>子应用保活、多应用激活无法实现；</li>\n<li>主、子应用的路由可能发生冲突；</li>\n</ol>\n<p>底层原理 这个东西有点类似于拆包，也可以叫模块共享，例如 React 有个模块可以共享给 Vue 项目用 Vue2 的组件可以共享给 Vue3 用。</p>\n<h2 id=\"single-spa\"><a class=\"anchor\" href=\"#single-spa\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnNpbmdsZS1zcGEuanMub3JnL2RvY3MvZ2V0dGluZy1zdGFydGVkLW92ZXJ2aWV3\">single-spa</span></h2>\n<p>single-spa 是微前端的基础框架，乾坤框架就是基于 single-spa 来实现的，在 single-spa 的基础上做了一层封装，也解决了 single-spa 的一些缺陷。</p>\n<p><strong>原理</strong></p>\n<ol>\n<li>single-spa 原理是通过网络请求请求到文件资源（使用 import 导入语法时，需要在 importmap 中注册包名称和地址）</li>\n<li>对于样式隔离，single-spa 推荐的方法有：Scoped CSS 和 shadow DOM</li>\n</ol>\n<p><strong>分析</strong></p>\n<p>single-spa 实现了一个微前端框架需要具备的各种功能，但是实现的又不够彻底，遗留了很多需要解决的问题。</p>\n<h2 id=\"乾坤\"><a class=\"anchor\" href=\"#乾坤\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGcWlhbmt1bi51bWlqcy5vcmclMkZ6aCUyRg==\">乾坤</span></h2>\n<p>乾坤是在 single-spa 的基础之上进行的进一步封装</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>html entry 的方式引入子应用，相比 js entry 极大的降低了应用改造的成本；</li>\n<li>完备的沙箱方案，js 沙箱做了 SnapshotSandbox、LegacySandbox、ProxySandbox 三套渐进增强方案，css 沙箱做了 strictStyleIsolation、experimentalStyleIsolation 两套适用不同场景的方案；</li>\n<li>做了静态资源预加载能力；</li>\n</ol>\n<p><strong>不足</strong></p>\n<ol>\n<li>适配成本比较高，工程化、生命周期、静态资源路径、路由等都要做一系列的适配工作；</li>\n<li>css 沙箱采用严格隔离会有各种问题，js 沙箱在某些场景下执行性能下降严重；</li>\n<li>无法同时激活多个子应用，也不支持子应用保活；</li>\n<li>无法支持 vite 等 esmodule 脚本运行；</li>\n</ol>\n<h2 id=\"无界\"><a class=\"anchor\" href=\"#无界\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3VqaWUtbWljcm8uZ2l0aHViLmlvJTJGZG9jJTJGYXBpJTJGYnVzLmh0bWw=\">无界</span></h2>\n<p><strong>特点</strong></p>\n<ol>\n<li>接入简单只需要四五行代码</li>\n<li>不需要针对 vite 额外处理</li>\n<li>预加载</li>\n<li>应用保活机制</li>\n</ol>\n<p><strong>不足</strong></p>\n<ol>\n<li>隔离 js 使用一个空的 iframe 进行隔离</li>\n<li>子应用 axios 需要自行适配</li>\n<li>iframe 沙箱的 src 设置了主应用的 host，初始化 iframe 的时候需要等待 iframe 的 location.orign 从 'about:blank' 初始化为主应用的 host，这个采用的计时器去等待的不是很悠亚。</li>\n</ol>\n<p>底层原理 使用 shadowDom 隔离 css，js 使用空的 iframe 隔离，通讯使用的是 proxy</p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<p>无界的原理就是使用开启影子 dom 来进行样式的隔离，通过使用 attachShadow 方法开启影子 dom（继承 HTMLElement），获得的 shadow 影子 dom 添加 template（无界的初始模板）为子元素，这样就进行了样式隔离，最后通过 window.customElement.define 注册 dom 元素 wu-jie，使用标签即可。</p>\n<p>index.js：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">WuJie</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"open\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启影子 dom 也就是样式隔离</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#wu-jie'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLTemplateElement</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">getAttr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取参数'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 生命周期自动触发有东西插入</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">connectedCallback</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类似于vue 的mounted'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 生命周期卸载</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">disconnectedCallback</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类似于vue 的destory'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 跟 watch 类似</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">attributeChangedCallback</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">oldVal</span><span class=\"token operator\">:</span>any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">newVal</span><span class=\"token operator\">:</span>any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'跟vue 的watch 类似 有属性发生变化自动触发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wu-jie'</span><span class=\"token punctuation\">,</span> WuJie<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>index.html：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 外层写一个 div 测试隔离 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>我是div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>wu-jie</span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxxxxx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>wu-jie</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wu-jie<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token comment\">&lt;!--div 的样式是作用于全局的 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            样式隔离的</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"预加载\"><a class=\"anchor\" href=\"#预加载\">#</a> 预加载</h4>\n<p>使用：</p>\n<p>需要从 wujie 的实例导出 <code>preloadApp</code> , 参数跟 <code>startApp</code>  一致，预加载必须开启 exec 选项</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">preloadApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue3\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:5174/\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">exec</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">preloadApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:5175/\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">exec</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>exec 代表是否进行预加载，默认值是 true</li>\n<li>js 的执行模式，由于子应用的执行会阻塞主应用的渲染线程，当设置为 true 时 js 采取类似于 react fiber 的模式方式间断执行，每个 js 文件的执行都包裹在 <code>requestidlecallback</code>  中，每执行一个 js 文件后就可以返回去响应外部的输入，不会造成浏览器渲染和加载之间的冲突从而造成卡顿，但是这个颗粒度是 js 文件，所以应该保证 js 文件不应过大。</li>\n</ul>\n<p>浏览器一帧之内要做的事情：</p>\n<ul>\n<li>处理用于输入（事件）</li>\n<li>执行定时任务</li>\n<li>执行 requestAnimationFrame</li>\n<li>执行 dom 的回流和重绘</li>\n<li>计算更新涂层的更新指令</li>\n<li>绘制指令合并主线程，如果有空余时间执行 requestidlecallbask</li>\n</ul>\n<p>react 也有该机制 但是 react 并没有用  <code>requestidlecallback</code> ，说是这个东西经过测试可能会超过 16ms，超过 16ms 绘制就会看起来很卡 所以 react16 是用的  <code>requestAnimationFrame + postMessage</code>  实现的那为什么不用 <code>setTimeOut</code>  setTimeOut 及时为 0 也会有一个最小毫秒延迟 4ms，所以是用了 postMessage，react18 又换成了 <code>MessageChannel</code>  实现了队列方式去执行任务。</p>\n<h2 id=\"micro-app\"><a class=\"anchor\" href=\"#micro-app\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGemVyb2luZy5qZC5jb20lMkZtaWNyby1hcHAlMkZkb2NzLmh0bWwlMjMlMkY=\">micro-app</span></h2>\n<p>micro-app 是基于 webcomponent + qiankun sandbox 的微前端方案。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>使用 webcomponet 加载子应用相比 single-spa 这种注册监听方案更加优雅；</li>\n<li>复用经过大量项目验证过 qiankun 的沙箱机制也使得框架更加可靠；</li>\n<li>组件式的 api 更加符合使用习惯，支持子应用保活；</li>\n<li>降低子应用改造的成本，提供静态资源预加载能力；</li>\n</ol>\n<p><strong>不足</strong></p>\n<ol>\n<li>css 沙箱依然无法绝对的隔离，js 沙箱做全局变量查找缓存，性能有所优化；</li>\n<li>支持 vite 运行，但必须使用 plugin 改造子应用，且 js 代码没办法做沙箱隔离；</li>\n<li>对于不支持 webcompnent 的浏览器没有做降级处理；</li>\n</ol>\n<p>底层原理 js 隔离跟 qiankun 类似也是使用 proxy + with，css 隔离自定义前缀类似于 scoped</p>\n<h1 id=\"模块联邦\"><a class=\"anchor\" href=\"#模块联邦\">#</a> 模块联邦</h1>\n<p>模块联邦是跟 <code>webpack5</code>  强耦合的，是基于 webpack5 内置插件的 无须安装</p>\n<p>它相当于是一个去中心化技术，它可以让多个独立构建的应用之间，动态的调用彼此的模块。这种运行机制，可以让我们轻松的拆分应用，真正做到跨应用的模块共享。</p>\n<p>配置过程就是在 webpack.config.js 中配置 ModuleFederationPlugin 插件，打完包之后观察会发现其实就是 import 函数动态加载，使用模块联邦的好处就在于之前当多个项目共有的模块改变时，每一个项目都需要重新 install 一下，而使用模块联邦之后，就相当于动态导入，免去了重新 install 的过程（由项目的克隆转为类似软链接的过程）。</p>\n",
            "tags": [
                "微前端",
                "微前端"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "url": "https://dmqweb.cn/2024/05/23/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "title": "网络安全",
            "date_published": "2024-05-23T08:47:30.000Z",
            "content_html": "<h1 id=\"前端网络安全\"><a class=\"anchor\" href=\"#前端网络安全\">#</a> 前端网络安全</h1>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzEteHNzLSVFOCVCNyVBOCVFNyVBQiU5OSVFOCU4NCU5QSVFNiU5QyVBQyVFNiU5NCVCQiVFNSU4NyVCQg==\">#</span>1. XSS 跨站脚本攻击</h2>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>XSS 是常见的 Web 攻击技术之一。所谓的跨站脚本攻击指得是：恶意攻击者往 Web 页面里注入恶意 Script 代码，用户浏览这些网页时，就会执行其中的恶意代码，可对用户进行盗取 cookie 信息、会话劫持等各种攻击。</p>\n</blockquote>\n<p><strong>危害</strong></p>\n<p>1、<strong>盗取各类用户帐号</strong>，如机器登录帐号、用户网银帐号、各类管理员帐号</p>\n<p>2、<strong>控制企业数据</strong>，包括读取、篡改、添加、删除企业敏感数据的能力</p>\n<p>3、<strong>盗窃企业重要的具有商业价值的资料</strong></p>\n<p>4、<strong>非法转账</strong></p>\n<p>5、<strong>强制发送电子邮件</strong></p>\n<p>6、<strong>网站挂马</strong></p>\n<p>7、<strong>控制受害者机器向其它网站发起攻击</strong></p>\n<p><strong>前端如何处理</strong></p>\n<ul>\n<li>过滤用户的输入信息，禁止用户在输入的过程中输入 &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;引号&quot;, &quot;$&quot;, &quot;_&quot;</li>\n<li>核心的用户身份标示或 token 保存在 Cookie 中，Cookie 中一定要加 “HTTPOnly” 在结尾，保证只有在 html 操作时才能将 cookie 中的内容发送出去，在 JS 中无法获得用户的 Cookie 信息</li>\n</ul>\n<h2 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzItY3NyZi0lRTclQkQlOTElRTclQkIlOUMlRTYlOTQlQkIlRTUlODclQkI=\">#</span>2. CSRF 网络攻击</h2>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。</p>\n</blockquote>\n<p><strong>前端如何处理</strong></p>\n<ul>\n<li>减少在 cookie 中存储客户核心内容比如用户的 token、ID、access_token 等</li>\n<li>GET 请求不对数据进行修改</li>\n<li>不让第三方网站访问到 Cookie</li>\n<li>阻止第三方网站请求接口</li>\n<li>请求时附带验证信息，比如验证码或者 Token</li>\n</ul>\n<h2 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96eHBzdXBlci5naXRodWIuaW8vYWR2YW5jZWRfZnJvbnRfZW5kL2Jvb2svYnJvd3Nlci9zYWZlLmh0bWwjXzMtZGRvcy0lRTYlOTQlQkIlRTUlODclQkI=\">#</span>3. DDOS 攻击</h2>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>DDOS 攻击，它在短时间内发起大量请求，耗尽服务器的资源，无法响应正常的访问，造成网站实质下线。</p>\n</blockquote>\n<p><strong>前端如何处理</strong></p>\n<ul>\n<li>防范 DDOS 的第一步，就是你要有一个备份网站，或者最低限度有一个临时主页。生产服务器万一下线了，可以立刻切换到备份网站，不至于毫无办法。</li>\n</ul>\n<p><strong>后端如何处理</strong></p>\n<ul>\n<li>HTTP 请求的拦截，恶意请求都是从某个 IP 段发出的，那么把这个 IP 段封掉就行了。或者，它们的 User Agent 字段有特征（包含某个特定的词语），那就把带有这个词语的请求拦截。</li>\n<li>带宽扩容，或者使用 CDN</li>\n</ul>\n",
            "tags": [
                "网络安全",
                "网络安全"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/21/electron/",
            "url": "https://dmqweb.cn/2024/05/21/electron/",
            "title": "electron",
            "date_published": "2024-05-21T11:35:27.000Z",
            "content_html": "<p><strong>Electron 中 preload 模块最为重要，它的源码逻辑如下：</strong></p>\n<ul>\n<li>首先 electron 中封装了 c++ 模块对接 node.js 的 addon 模块，方法是：在头文件中标注了：#include &lt;node/addon.h&gt;</li>\n<li>此 c++ 模块将 app 实例绑定 (linkedBinding) 到 process 上，app 实例中有 <code>exposeAPIInWorld</code>  方法</li>\n<li>接着 <code>contextBridge</code>  中的 <code>expostInMainWorld</code>  方法返回的是 <code>process.linkedBinding.exposeAPIInWorld</code>  方法。<br />\n<img data-src=\"https://dmqweb.cn/images/Electron.pdf\" alt=\"Electron.pdf\" /><br />\n<a href=\"https://dmqweb.cn/images/Electron.pdf\">Electron pdf 笔记</a></li>\n</ul>\n<h1 id=\"最近有些忙未完待续哈\"><a class=\"anchor\" href=\"#最近有些忙未完待续哈\">#</a> 最近有些忙，未完待续哈</h1>\n",
            "tags": [
                "electron",
                "electron"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/",
            "url": "https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/",
            "title": "v8引擎编译原理",
            "date_published": "2024-05-21T10:36:10.000Z",
            "content_html": "<h1 id=\"v8-执行-js\"><a class=\"anchor\" href=\"#v8-执行-js\">#</a> v8 执行 JS</h1>\n<p><img data-src=\"/images/image123.png\" alt=\"alt text\" /></p>\n<h1 id=\"v8-引擎介绍\"><a class=\"anchor\" href=\"#v8-引擎介绍\">#</a> v8 引擎介绍</h1>\n<p>Blink 内核用于解析 HTML、DOM、CSS 渲染、嵌入了 v8 引擎用于解析 Javascript</p>\n<p>V8 是谷歌的开源高性能 JavaScript 和 WebAssembly 引擎，用 C++ 编写。它被用于 Chrome 和 Node.js 等。<strong>用于解析并执行 JavaScript 代码。</strong></p>\n<h1 id=\"执行过程\"><a class=\"anchor\" href=\"#执行过程\">#</a> 执行过程</h1>\n<ul>\n<li>初始化运行环境\n<ul>\n<li>堆栈空间</li>\n<li>全局执行上下文</li>\n<li>全局作用域</li>\n<li>事件循环系统</li>\n</ul>\n</li>\n<li>利用 Scanner 扫描器将输入的代码词法分析成 tokens\n<ul>\n<li>分析的结果就是一个个的 tokens 对象组成的数组</li>\n<li>分析的过程利用了有限自动状态机的概念</li>\n</ul>\n</li>\n<li>利用 parser 解析器将 tokens 转化为抽象语法树\n<ul>\n<li>根据分析 tokens 构造出一种树形关系结构</li>\n<li><strong>预解析</strong>：在 JS 代码执行之前对代码进行可选的预处理，用于提高执行效率</li>\n<li><strong>延迟解析</strong>：只有代码执行到的部分才会去解析，节省了不必要的时间和开销，提高了 JavaScript 的执行效率，其中 vite 脚手架就是利用了这个优点（还有 esbuild 打包快的优势），提高了效率。</li>\n</ul>\n</li>\n<li>利用  <code>ignation解释器</code> 将 AST（抽象语法树）转为字节码（不直接转为机器码？）\n<ul>\n<li>当年 v8 以超越同行 10 倍的运行速度而备受青睐，其本质原因是当时 v8 将 JS 源码直接编译为机器码，使得首次运行速度和后续执行速度都很快，但也存在一个问题就是内存占用太大，并且编译时占用太多时间</li>\n<li>字节码使得 v8 能够很好的进行优化与反优化，当执行代码时，对机器码的存储和复用等操作时都十分繁琐 (存储占用大，分析繁琐等), 但是分析字节码就更加容易一些</li>\n<li>字节码跨平台能力强</li>\n<li>字节码更快的加载和解析执行</li>\n<li>动态优化易操作</li>\n<li>代码安全性</li>\n</ul>\n</li>\n<li>利用  <code>TurboFan编译器</code> 将字节码转为 CPU 和 ARM 识别的机器码</li>\n</ul>\n<h1 id=\"v8-中的对象结构\"><a class=\"anchor\" href=\"#v8-中的对象结构\">#</a> v8 中的对象结构</h1>\n<h3 id=\"常规属性和排序属性\"><a class=\"anchor\" href=\"#常规属性和排序属性\">#</a> 常规属性和排序属性</h3>\n<ul>\n<li>v8 中的对象主要分为三个指针构成的，分别是：隐藏类、常规属性和排序属性。</li>\n<li>对象的属性数字会从小到大排列，字符串会按照原创建顺序</li>\n<li>对象中数字属性被称为排序属性，字符串属性被称为常规属性</li>\n</ul>\n<h3 id=\"快属性和慢属性\"><a class=\"anchor\" href=\"#快属性和慢属性\">#</a> 快属性和慢属性</h3>\n<ul>\n<li>JS 对象很多属性是在原型链上进行查找，这样就会很慢，v8 将部分常规属性（10 个）直接存储到对象本身（对象内属性），以提高属性的查询效率。</li>\n<li>快属性容量是 10 个。</li>\n</ul>\n<h3 id=\"封装-继承-多态\"><a class=\"anchor\" href=\"#封装-继承-多态\">#</a> 封装、继承、多态</h3>\n<ul>\n<li>封装就是将抽象出来的数据和对数据的操作封装在一起，数据在内部被保护，程序其他部分只有通过成员才能对数据进行操作</li>\n<li>继承：有原型链继承、寄生继承和 call、apply 借用法继承。</li>\n<li>多态就是函数重载：同一个函数可以根据调用的情况（参数类型和数量等）来进行不同的操作。</li>\n</ul>\n<h1 id=\"隐藏类\"><a class=\"anchor\" href=\"#隐藏类\">#</a> 隐藏类</h1>\n<p>JavaScript 是一门动态语言，其各种不确定性导致 JavaScript 的执行效率要远低于静态语言，V8 为了提升 JavaScript 的执行效率，借鉴了很多静态语言的特性，比如：JIT 机制，为了加速运算而引入了内联缓存，为了提升对象的属性访问速度而引入了隐藏类。</p>\n<p>隐藏类是 V8 引擎在运行时自动生成和管理的数据结构，用于跟踪对象的属性和方法，相当于提前定义好对象的形状，以便于提高操作对象的效率。</p>\n<h3 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h3>\n<ul>\n<li>当 JavaScript 运行时，例如查找对象上的某一个属性，V8 引擎会通过快慢属性去查找，整个过程非常耗时，因为 V8 在使用一个对象时，并不知道对象的具体形状（属性方法等）</li>\n<li>而 C<ins> 在声明一个对象前就需要定义该对象的结构，C</ins> 代码执行前是需要被编译的，编译时对象的结构就已经固定，也就是当代码执行时，对象的形状是无法改变</li>\n<li>所以 V8 引入了隐藏类的概念，用于跟踪对象的属性和方法以此在内存中快速查找对象属性</li>\n</ul>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>隐藏类就是把 JavaScript 的对象也进行静态化， <code>我们假设这个对象不会删除和新增</code> ，这样形状就固定了</p>\n<p>满足条件之后 V8 就会创建隐藏类，在这个隐藏类会创建对象的基础属性</p>\n<p>在 V8 引擎中，每个隐藏类都有一个编号（ <code>map id</code> ），用于唯一标识该隐藏类</p>\n<p>举个例子，假设我们有以下两个对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这两个对象具有相同的形状，即都有属性 <code>name</code>  和 <code>age</code> ，但 <code>obj2</code>  还额外有一个属性 <code>address</code> 。V8 会为它们生成两个不同的隐藏类</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 隐藏类1：包含属性name和age</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HiddenClass_1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── map_id: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── property_names: <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span>, <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── transitions: <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>└── prototype: Object.prototype</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// 隐藏类2：包含属性name、age和address</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HiddenClass_2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>├── map_id: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>├── property_names: <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span>, <span class=\"token string\">'age'</span>, <span class=\"token string\">'address'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>├── transitions:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│   ├── a: HiddenClass_1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│   ├── b: HiddenClass_1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>│   └── c: null</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>└── prototype: Object.prototype</pre></td></tr></table></figure><p>可以看到，隐藏类 1 包含属性 <code>name</code>  和 <code>age</code> ，没有过渡表；而隐藏类 2 包含属性 <code>name</code> 、 <code>age</code>  和 <code>address</code> ，其中属性 <code>name</code>  和 <code>age</code>  的过渡表指向隐藏类 1，属性 <code>address</code>  没有过渡表，表示该属性是新添加的</p>\n<p><strong>如果两个对象属性一样呢？</strong></p>\n<p>如果两个对象具有相同的属性，它们将共享同一个隐藏类。具体来说，当两个对象的属性顺序和类型都相同时，V8 会为它们生成一个共享的隐藏类。</p>\n<p>举个例子，假设我们有以下两个对象：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">let obj1</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">&#123; name: 1, age: 2 &#125;;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">let obj2</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">&#123; name: 1, age: 2 &#125;;</span></pre></td></tr></table></figure><p>这两个对象具有相同的形状，即都有属性 <code>name</code>  和 <code>age</code> ，且属性的顺序和类型完全一致。V8 会为它们生成一个共享的隐藏类，如下所示：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HiddenClass_1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── map_id<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── property_names<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── transitions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>└── prototype<span class=\"token operator\">:</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</pre></td></tr></table></figure><p>可以看到，隐藏类 1 包含属性 <code>name</code>  和 <code>age</code> ，没有过渡表，而且两个对象都 <code>共享</code> 这个隐藏类。</p>\n<blockquote>\n<p>这种共享隐藏类的机制可以节省内存空间，因为不同的对象可以共享相同的隐藏类结构。</p>\n</blockquote>\n<p><img data-src=\"/images/Snipaste_2024-05-28_21-49-19.png\" alt=\"JavaScript隐藏类机制\" /></p>\n",
            "tags": [
                "v8引擎编译原理",
                "v8引擎",
                "底层原理"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/",
            "url": "https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/",
            "title": "Blob、File和FileReader",
            "date_published": "2024-05-17T02:22:13.000Z",
            "content_html": "<h1 id=\"blob\"><a class=\"anchor\" href=\"#blob\">#</a> Blob</h1>\n<p>Blob 的全称为：binary larget object（二进制大对象），blob 的本质是一个 js 对象，里面可以存储大量的二进制编码的数据。</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点：</h3>\n<ul>\n<li>不可修改</li>\n<li>只能使用 FileReader 读取内容</li>\n<li>存储大量二进制数据的 js 对象</li>\n</ul>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用：</h3>\n<p><strong>new Blob(array,options)</strong></p>\n<ul>\n<li>\n<p>array 是由 ArrayBuffer、ArrayBufferView、Blob 和 DOMString 对象构成的，将对被放进 blob 中</p>\n</li>\n<li>\n<p>options 配置项有：</p>\n<ul>\n<li>\n<p>type：默认值为：” “，表示将会被放入到 blob 中的数组内容的 MIME 类型。</p>\n</li>\n<li>\n<p>endings：默认值为：”transparent“，用于指定包含行结束符 \\n 的字符串如何被写入，不常用。</p>\n<table>\n<thead>\n<tr>\n<th>MIME 类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text/plain</td>\n<td>纯文本文档</td>\n</tr>\n<tr>\n<td>text/html</td>\n<td>HTML 文档</td>\n</tr>\n<tr>\n<td>text/javascript</td>\n<td>JavaScript 文档</td>\n</tr>\n<tr>\n<td>text/css</td>\n<td>CSS 文件</td>\n</tr>\n<tr>\n<td>application/json</td>\n<td>JSON 文件</td>\n</tr>\n<tr>\n<td>application/pdf</td>\n<td>pdf 文件</td>\n</tr>\n<tr>\n<td>application/xml</td>\n<td>XML 文件</td>\n</tr>\n<tr>\n<td>image/jpeg</td>\n<td>JPEG 文件</td>\n</tr>\n<tr>\n<td>image/png</td>\n<td>PNG 文件</td>\n</tr>\n<tr>\n<td>image/gif</td>\n<td>GIF 文件</td>\n</tr>\n<tr>\n<td>image/svg+xml</td>\n<td>SVG+XML 文件</td>\n</tr>\n<tr>\n<td>audio/mpeg</td>\n<td>MP3 文件</td>\n</tr>\n<tr>\n<td>video/mpeg</td>\n<td>MP4 文件</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"分片\"><a class=\"anchor\" href=\"#分片\">#</a> 分片：</h3>\n<p>Blob 对象内置了 slice () 方法用来将 blob 对象分片</p>\n<p>其有三个参数：</p>\n<p>start：设置切片的起点，即切片开始位置。默认值为 0，这意味着切片应该从第一个字节开始；</p>\n<p>end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为 blob.size；</p>\n<p>contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> blob1 <span class=\"token operator\">=</span> blob<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取\"><a class=\"anchor\" href=\"#读取\">#</a> 读取：</h3>\n<p>blob 对象只能通过 FileReader 读取内容。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"file\"><a class=\"anchor\" href=\"#file\">#</a> File</h1>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h3>\n<p>File 对象是特殊的 Blob 对象。是基于 Blob 对象的进一步封装，js 中主要有两种方式获得 FIle 对象：</p>\n<ol>\n<li>input 元素选择后返回的 FileList 对象（通过 change 事件的 event.target.files 获取）</li>\n<li>文件拖放操作生成的 DataTransfer 对象（通过 ondrop 事件的 event.dataTransfer.files 获取）</li>\n</ol>\n<h1 id=\"filereader\"><a class=\"anchor\" href=\"#filereader\">#</a> FileReader</h1>\n<h3 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍：</h3>\n<p>FileReader 用于读取 Blob 对象（包含 File 对象）内容的方法，通过 result 属性获取。</p>\n<ul>\n<li>\n<p>readAsArrayBuffer 方法：读取为 ArrayBuffer</p>\n</li>\n<li>\n<p>readAsDataURL 方法：读取为 data:URL 的 Base64 字符串表示文件内容</p>\n</li>\n<li>\n<p>readAsText 方法：读取为原始 text 文件内容</p>\n</li>\n<li>\n<p>readAsBinaryString 方法：读取为原始二进制数据</p>\n<p>但是直接使用此方法还是会得到原始的文本内容，因为二进制数据需要使用 ArrayBuffer 对象来进行处理。</p>\n</li>\n</ul>\n<h1 id=\"arraybuffer\"><a class=\"anchor\" href=\"#arraybuffer\">#</a> ArrayBuffer</h1>\n<h3 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍：</h3>\n<p>ArrayBuffer 可以理解为一个特殊的数组，其本身是一个黑盒，不能直接读写所存储的数据，需要借助视图对象来读写。它只是一个用于存储二进制数据的缓冲区，创建时只能传一个空间大小 biteLength。</p>\n<p><strong>读写 ArrayBuffer 的方式：</strong></p>\n<ol>\n<li>TypedArray</li>\n<li>DataView</li>\n<li>TextDecoder</li>\n<li>用 Blob 存储，然后用 FileReader 读写</li>\n</ol>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h3>\n<p>ArrayBuffer 提供了一个 slice 方法用于切片。参数为：开始位置，结束位置和解析类型。</p>\n<h3 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用：</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"typedarray\"><a class=\"anchor\" href=\"#typedarray\">#</a> TypedArray</h1>\n<p>TypedArray 只是一个概念，提供了一种机制来解读 ArrayBuffer 中的数据（相当于一个视图，将 ArrayBuffer 中的数据进行展示和操作），实际上是那九个类型对象（每个类型对应一个特定的数据类型和大小）：</p>\n<ul>\n<li><code>Int8Array</code> ：8 位有符号整数</li>\n<li><code>Uint8Array</code> ：8 位无符号整数</li>\n<li><code>Int16Array</code> ：16 位有符号整数</li>\n<li><code>Uint16Array</code> ：16 位无符号整数</li>\n<li><code>Int32Array</code> ：32 位有符号整数</li>\n<li><code>Uint32Array</code> ：32 位无符号整数</li>\n<li><code>Float32Array</code> ：32 位浮点数</li>\n<li><code>Float64Array</code> ：64 位浮点数</li>\n</ul>\n<h3 id=\"使用-3\"><a class=\"anchor\" href=\"#使用-3\">#</a> 使用：</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> sliceView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int8Array</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sliceView<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sliceView<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"dataview\"><a class=\"anchor\" href=\"#dataview\">#</a> DataView</h1>\n<h3 id=\"读取-2\"><a class=\"anchor\" href=\"#读取-2\">#</a> 读取：</h3>\n<p>DataView 数据视图可以用于读写 buffer,DataView 实例提供了许多方法来读取内存，他们呢的参数都是一个字节序号。表示开始读取的字节位置：</p>\n<ul>\n<li>getInt8：读取 1 个字节，返回一个 8 位整数</li>\n<li>getUint8：读取 1 个字节，返回一个无符号 8 位整数</li>\n<li>getInt16：读取 2 个字节，返回一个 16 位整数</li>\n<li>getUnit16：读取 2 个字节，返回一个无符号 16 位整数</li>\n<li>getInt32：读取 4 个字节，返回一个 32 位整数</li>\n<li>getUnit32：读取 4 个字节，返回一个无符号 32 位整数</li>\n<li>getFloat32：读取 4 个字节，返回一个 32 位浮点数</li>\n<li>getUnit64：读取 8 个字节，返回一个 64 位浮点数</li>\n</ul>\n<h3 id=\"写入\"><a class=\"anchor\" href=\"#写入\">#</a> 写入：</h3>\n<p>DataView 实例提供以下方法写入内存，他们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：</p>\n<ul>\n<li>setInt8：写入 1 个字节的 8 位整数</li>\n<li>setUint8：写入 1 个字节的 8 位无符号整数</li>\n<li>setInt16：写入 2 个字节的 16 位整数</li>\n<li>setUint16：写入 2 个字节的 16 位无符号整数</li>\n<li>setInt32：写入 4 个字节的 32 位整数</li>\n<li>setUnit32：写入 4 个字节的 32 位无符号整数</li>\n<li>setFloat32：写入 4 个字节的 32 位浮点数</li>\n<li>setFloat64：写入 8 个自己的 64 位浮点数</li>\n</ul>\n<h1 id=\"object-url\"><a class=\"anchor\" href=\"#object-url\">#</a> Object URL</h1>\n<p>Object URL 是一个用于表示 File Object 或者 Blob Object 的 URL，可以将 **Blob 对象（包括 File 对象）** 变为一个 URL 地址。</p>\n<h3 id=\"使用-4\"><a class=\"anchor\" href=\"#使用-4\">#</a> 使用：</h3>\n<p>使用 URL.createObjectURL 来创建。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'你好世界'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"base64编码\"><a class=\"anchor\" href=\"#base64编码\">#</a> base64 编码</h1>\n<h3 id=\"介绍-4\"><a class=\"anchor\" href=\"#介绍-4\">#</a> 介绍：</h3>\n<p>base64 是一个保存二进制数据的工具，将多种形式的二进制数据或其构成的文件<strong>以 ASCII 的形式保存</strong>，因为很多地方不支持直接的二进制文件保存或呈现，比如可以将图片直接转换成 base64 码嵌入 HTML 文档中，而避免使用网络 http 加载图片。另外，将数据编码为 base64 进行传输，然后解码获得数据，可以一定程度上保证数据的完整并且不用在传输过程中修改这些数据，避免在传输过程中可能出现的问题；</p>\n<h3 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成：</h3>\n<p><code>A-Z a-z 0-9 + /</code>  共 64 个字符组成；</p>\n<h3 id=\"使用-5\"><a class=\"anchor\" href=\"#使用-5\">#</a> 使用：</h3>\n<p>JS 中有两个函数用于 base64 格式（ASCII 码）的转换:</p>\n<ul>\n<li>\n<p>btoa ()：编码（Binary To ASCII  二进制转 ASCII）</p>\n<p>该函数用于将二进制转为 Base64 字符串（ASCII 码）</p>\n</li>\n<li>\n<p>atob ()：解码（ASCII To Binary  ASCII 码转二进制）</p>\n<p>该函数用于将 Base64 字符串（ASCII 码）解码为二进制</p>\n</li>\n</ul>\n<h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h3>\n<p>btoa 和 atob 方法有个弊端就是只能处理拉丁字符集内的字符，其不包括中文或非西欧语言的字符（<strong>只能处理单字节字符</strong>）。要处理多字节字符需要使用 TextEncoder API 将字符串转为 Uint8Array，然后手动将这些字节转为一个字符串（String.fromCharCode）。</p>\n<h1 id=\"textencoder\"><a class=\"anchor\" href=\"#textencoder\">#</a> TextEncoder</h1>\n<h3 id=\"介绍-5\"><a class=\"anchor\" href=\"#介绍-5\">#</a> 介绍：</h3>\n<p>TextEncoder 构造函数创建一个编码器，encode 方法用于将字符串编码为一个 UTF-8 编码文本的 Uint8Array 视图。</p>\n<h3 id=\"使用-6\"><a class=\"anchor\" href=\"#使用-6\">#</a> 使用：</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Blob",
                "Blob",
                "FileReader"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "url": "https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "title": "eslint源码",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<h1 id=\"eslint知识点\"><a class=\"anchor\" href=\"#eslint知识点\">#</a> eslint 知识点</h1>\n<h3 id=\"extends与plugins\"><a class=\"anchor\" href=\"#extends与plugins\">#</a> extends 与 plugins</h3>\n<ol>\n<li>plugins 本质是为了加强 eslint 的扩展性，使我们可以直接使用别人写好的 eslint 规则，方便快速用于项目中。</li>\n<li>官方规定 npm 包的扩展必须以 eslint-config - 开头，插件以 eslint-plugin - 开头，在使用过程中可以省略这个开头。</li>\n<li>eslint-config - 文件是我们共享的一些配置文件，里面就是一个 JS 对象，其中包含一些配置信息，而 eslint-plugin - 文件是我们自定义的集合规则，可以导入和使用。</li>\n<li>一个插件能带来：\n<ul>\n<li>额外的规则，如 <code>&#123;&quot;rules&quot;: &#123;&quot;react/boolean-prop-naming&quot;: &quot;warning&quot;&#125;&#125;</code> 。</li>\n<li>环境，如 <code>&#123;&quot;env&quot;: &#123;&quot;jest/global&quot;: true&#125;&#125;</code> 。</li>\n<li>配置，如 <code>&#123;&quot;extends&quot;: [&quot;plugin:react/recommended&quot;]&#125;</code> 。</li>\n<li>预处理器，如 <code>&#123;&quot;process&quot;: &quot;a-plugin/a-processor&quot;&#125;</code> 。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"eslint配置大全\"><a class=\"anchor\" href=\"#eslint配置大全\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODU5NDg4MjkyODcx\">eslint 配置大全</span></h1>\n<h1 id=\"eslint源码分析\"><a class=\"anchor\" href=\"#eslint源码分析\">#</a> eslint 源码分析</h1>\n",
            "tags": [
                "eslint",
                "eslint",
                "源码"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/esbuild/",
            "url": "https://dmqweb.cn/2024/05/17/esbuild/",
            "title": "esbuild",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<p>关于打包工具：esbuild、webpack 和 rollup 三者的介绍推荐<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI0MDk4NDIyOTM5MjU0ODIx\">这里</span>：</p>\n<p>简单来说就是 esbuild 打包更快；rollup 打包产物更纯净、体积更小，但不支持热更新；webpack 功能更全，生态更完善，支持文件类型更多。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>Esbuild 是一个类 webpack 的打包工具，速度是 webpack 的几十倍。其底层基于 go 语言进行编写，不使用 AST，优化了构建流程。js 是单线程串行，esbuild 是新开了一个进程，使用多线程并行，充分发挥了多核的优势。</p>\n<h1 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h1>\n<p>esbuild 最显著的作用就是：快。它也是 vite 和 snowpack 底层的打包工具。同时也可以将 esbuild 打包工具集成到 webpack 中（使用 plugin）。之所以 esbuild 没有流行起来是因为它绕过了 AST，而直接进行构建，使没有很好的过渡到基于 babel-loader 这样通过 AST 进行打包的上层工具中。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> esbuild <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'esbuild'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 利用 esbuild 生成文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">buildSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'out.js'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 利用 esbuild 处理 jsx 语法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">transformSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>利用esbuild处理jsx语法&lt;/div>'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">jsxFragment</span><span class=\"token operator\">:</span><span class=\"token string\">'Fragment'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span><span class=\"token string\">'jsx'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 利用 esbuld 压缩代码体积</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">transformSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const a = \"你好世界\"'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * esbuild 内置了一些 loader，使用时会根据文件后缀自动执行 loader，也可以手动确定 loader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * 支持：js,jsx,ts,tsx,css,text,binary,dataurl,file</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">buildSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token literal-property property\">bundle</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'.js'</span><span class=\"token operator\">:</span><span class=\"token string\">'jsx'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认使用 js loader，手动改为 jsx-loader</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'out.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * 使用 esbuild 启动一个 web server 用于调试（热更新）</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token literal-property property\">bundle</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    serve<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "esbuild",
                "esbuild",
                "打包工具"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/",
            "url": "https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/",
            "title": "whistle抓包",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<h1 id=\"whistle简单使用\"><a class=\"anchor\" href=\"#whistle简单使用\">#</a> whistle 简单使用</h1>\n<h3 id=\"whistle安装启动\"><a class=\"anchor\" href=\"#whistle安装启动\">#</a> whistle 安装启动</h3>\n<p>安装：npm i -g whistle</p>\n<p>使用：w2 start</p>\n<p>访问：访问对应的页面</p>\n<p>作用：</p>\n<ul>\n<li>任何的链接都会经过工具转发一下，并记录下来</li>\n<li>使用前需要配置代理到 whistle 服务的地址和端口上（设置代理如下）</li>\n</ul>\n<h3 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h3>\n<p>设置代理：</p>\n<ul>\n<li>手机端省略</li>\n<li>电脑端：\n<ul>\n<li>网络偏好设置 --- 高级 --- 代理 --- 网页代理、安全网页代理</li>\n<li>配置代理的 ip 地址和端口号（8899）</li>\n</ul>\n</li>\n</ul>\n<p>确认证书：</p>\n<p>一般会自动下载，也可以打开 8899 端口找到证书下载并确认信任</p>\n<p><strong>查看抓包情况和设置代理转发：</strong></p>\n<p>打开 127.0.0.1:8899 端口进行设置</p>\n<h1 id=\"whistle高级\"><a class=\"anchor\" href=\"#whistle高级\">#</a> whistle 高级</h1>\n<h3 id=\"mock数据\"><a class=\"anchor\" href=\"#mock数据\">#</a> mock 数据</h3>\n<p>设置线上地址转发到本地 json 文件（使用 file 路径），模拟请求数据。</p>\n<h3 id=\"部分文件请求转发重要\"><a class=\"anchor\" href=\"#部分文件请求转发重要\">#</a> 部分文件请求转发（重要）</h3>\n<p>例如线上环境有某个文件报错，生产环境无法复现，可以将该文件地址转发到本地的 js 文件（使用 file 路径），方便进行调试，提高调试效率。</p>\n<h3 id=\"请求转发\"><a class=\"anchor\" href=\"#请求转发\">#</a> 请求转发</h3>\n<p>可以作为跨域的一种方案，将本地的请求转发到线上的路径，这样就不会发生跨域问题</p>\n<h3 id=\"注入html-css和-js\"><a class=\"anchor\" href=\"#注入html-css和-js\">#</a> 注入 html、css 和 js</h3>\n<p>whistle 会自动根据响应内容的类型，判断是否注入相应的文本以及如何注入（是否用标签包裹）</p>\n<p>例如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//www.baidu.com  css<span class=\"token punctuation\">:</span>///Users/dmq/Desktop/test.css</pre></td></tr></table></figure><p>这将会在百度的官网注入自定义的 css 样式。</p>\n<h6 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例：</h6>\n<p>向百度网站注入 vconsole.js 源码，方便调试打印日志。</p>\n<ol>\n<li>\n<p>下载 vconsole 到本地或者直接复制源码到 whistle 中的 values 中</p>\n</li>\n<li>\n<p>本地 js 文件创建 VConsole 实例，或者直接在 whistle 的 values 中创建 js 文件，文件中创建 vconsole 实例。</p>\n</li>\n<li>\n<p>在 rules 中向百度网站注入两个 js 文件（以 whistle 中配置 values 为示例）</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>www.baidu.com  jsPrepend<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">&#123;</span>vConsole.min.js<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#引入源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>www.baidu.com  jsPrepend<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">&#123;</span>vconsole.js<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#引入实例化 js</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>www.baidu.com  log<span class=\"token punctuation\">:</span>//  <span class=\"token comment\">#在 whistle 中也打印 log</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"同步抓包日志\"><a class=\"anchor\" href=\"#同步抓包日志\">#</a> 同步抓包日志</h3>\n<p>在 rules 中配置网站的输出，可以将抓包的 log 日志同步到 whistle 中的 log 面板，配置例如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>www.baidu.com   log<span class=\"token punctuation\">:</span>// <span class=\"token comment\">#同步日志</span></pre></td></tr></table></figure><h3 id=\"解决跨域问题\"><a class=\"anchor\" href=\"#解决跨域问题\">#</a> 解决跨域问题</h3>\n<p>可以单独设置网站允许跨域访问，例如在 rules 中配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>5500/list   resCors<span class=\"token punctuation\">:</span>//*  <span class=\"token comment\">#表示该网站允许跨域访问</span></pre></td></tr></table></figure><p>或者使用前端转发代理来处理跨域：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/list   https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>5500/list  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#将请求的网址代理到同域名同端口的网址，就不会发生跨域。</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NTc3NjU1L2FydGljbGUvZGV0YWlscy8xMTkyODMwMjg=\">本文学习自 b 站，原文档地址</span></p>\n",
            "tags": [
                "whistle",
                "whistle",
                "抓包工具"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/",
            "url": "https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/",
            "title": "性能指标",
            "date_published": "2024-05-11T01:14:12.000Z",
            "content_html": "<h1 id=\"常见浏览器性能指标\"><a class=\"anchor\" href=\"#常见浏览器性能指标\">#</a> 常见浏览器性能指标</h1>\n<h1 id=\"ttfbtime-to-first-byte\"><a class=\"anchor\" href=\"#ttfbtime-to-first-byte\">#</a> TTFB(Time To First Byte)</h1>\n<p>发出页面请求到接收到应答数据第一个字节的时间总和，包含了：</p>\n<ol>\n<li>DNS 解析时间</li>\n<li>TCP 链接时间</li>\n<li>发送 HTTP 请求时间</li>\n<li>获得响应消息第一个字节的时间。</li>\n</ol>\n<h1 id=\"fpfirst-paint\"><a class=\"anchor\" href=\"#fpfirst-paint\">#</a> <strong>FP</strong>（First Paint）</h1>\n<p>首次绘制时间，这个指标用于记录页面第一次绘制像素的时间。</p>\n<h1 id=\"fcpfirst-contentful-paint\"><a class=\"anchor\" href=\"#fcpfirst-contentful-paint\">#</a> <strong>FCP</strong>（First Contentful Paint）</h1>\n<p>首次内容绘制时间，这个指标用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。</p>\n<h1 id=\"lcplargest-contentful-paint\"><a class=\"anchor\" href=\"#lcplargest-contentful-paint\">#</a> <strong>LCP</strong>（Largest Contentful Paint）</h1>\n<p>最大内容绘制时间，用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。</p>\n<h1 id=\"clscumulative-layout-shift\"><a class=\"anchor\" href=\"#clscumulative-layout-shift\">#</a> <strong>CLS</strong>（Cumulative Layout Shift）</h1>\n<p>累计位移偏移，记录了页面上非预期的位移波动。计算方式为：位移影响的面积 * 位移距离。</p>\n<h1 id=\"ttitime-to-interactive\"><a class=\"anchor\" href=\"#ttitime-to-interactive\">#</a> <strong>TTI</strong>（Time to Interactive）</h1>\n<p>首次可交互时间。这个指标计算过程略微复杂，它需要满足以下几个条件：</p>\n<ol>\n<li>从 FCP 指标后开始计算；</li>\n<li>持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求；</li>\n<li>往前回溯至 5 秒前的最后一个长任务结束的时间。</li>\n</ol>\n<h1 id=\"fidfirst-input-delay\"><a class=\"anchor\" href=\"#fidfirst-input-delay\">#</a> <strong>FID</strong>（First Input Delay）</h1>\n<p>首次输入延迟时间，记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。</p>\n<h1 id=\"tbttotal-blocking-time\"><a class=\"anchor\" href=\"#tbttotal-blocking-time\">#</a> <strong>TBT</strong>（Total Blocking Time）</h1>\n<p>阻塞总时间，记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。</p>\n",
            "tags": [
                "性能优化",
                "性能指标"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "url": "https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "title": "函数重载",
            "date_published": "2024-05-08T14:35:51.000Z",
            "content_html": "<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<p>函数重载是指在编程语言中允许定义多个同名函数，但是他们的参数类型、参数个数或者返回类型不同，编译器或解析器会根据调用时提供的参数类型和个数来确定使用哪个函数</p>\n<h1 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h1>\n<p>函数重载的主要目的就是提高代码的可读性和灵活性，同时避免了为不同功能编写不同的函数名导致的变量命名冲突和混乱。</p>\n<h1 id=\"实现函数重载\"><a class=\"anchor\" href=\"#实现函数重载\">#</a> 实现函数重载</h1>\n<h2 id=\"ts\"><a class=\"anchor\" href=\"#ts\">#</a> ts</h2>\n<p>ts 中进行函数重载其实就是根据型参数组的个数和对变量进行 typeof 检测，然后根据不同的情况进行分支处理</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数重载的声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数签名 1：接受数字数组并返回数字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数签名 2：接受可变数量的数字参数并返回数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 函数实现</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 实际函数实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果传入的是数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型断言为数字数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果传入的是多个数字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出错误，不支持的参数类型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 调用函数重载</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 3</span></pre></td></tr></table></figure><h2 id=\"js\"><a class=\"anchor\" href=\"#js\">#</a> js</h2>\n<p>js 中也可以通过 typeof 和形参数组进行函数重载，不过当然还有更好的做法，jQuery 作者常用如下实现函数重载（进行重载之前要调用一次函数）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> old <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    object<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> old <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">old</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> searcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将对象中对应属性的重载方法全部存储起来</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span>searcher<span class=\"token punctuation\">,</span><span class=\"token string\">'getUsers'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询所有用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span>searcher<span class=\"token punctuation\">,</span><span class=\"token string\">'getUsers'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意默认参数的形参数量不与计数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照姓名查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>searcher<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另一种实现方法就是使用映射：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createOverload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> fnMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> fnMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'没有找到对应的实现'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    overload<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addImpl</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'最后一个参数必须是函数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fnMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> overload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> getUsers <span class=\"token operator\">=</span> <span class=\"token function\">createOverload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询所有用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照页码和数量查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照页码和数量查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照姓名查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照性别查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'asfsdf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结一下实现思路，通过 createOverload 函数调用可以返回一个重载后的函数，createOverload 函数中创建了一个 map，map 中将参数类型和个数与对应的函数相匹配，返回的重载函数在调用时会根据参数的类型去 map 中寻找对应的函数，通过 apply 绑定 this 作用域和参数执行即可。</p>\n",
            "tags": [
                "JS",
                "JS,函数重载"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "url": "https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "title": "深拷贝",
            "date_published": "2024-04-30T09:34:25.000Z",
            "content_html": "<h1 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>我们知道在 javascript 中有八种数据类型：其中 number，string，undefined，null，boolean，symbol 和 bigint 为基本数据类型，而 object 为复杂数据类型</p>\n<h2 id=\"存储\"><a class=\"anchor\" href=\"#存储\">#</a> 存储</h2>\n<ul>\n<li>对于基本数据类型，其值直接存储于栈中。</li>\n<li>对于复杂数据类型，其值存储于堆中，而栈中只存储堆中的地址。这样做的好处有：\n<ul>\n<li>节省内存空间：存储在堆中的对象可以通过栈内的引用被访问和操作，意味着对象可以在不同的上下文中被共享和引用，从而节省内存。</li>\n<li>垃圾回收：堆内存中的对象不再被引用时，垃圾回收机制就会自动进行回收，从而避免了内存泄漏和资源浪费。</li>\n<li>动态分配内存：堆内存允许对象动态的增长和缩小，因此可以根据需要灵活地修改对象的结构和内容，使得 js 对象可以轻松地扩展以适应不同的应用需求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"深拷贝-2\"><a class=\"anchor\" href=\"#深拷贝-2\">#</a> <strong>深拷贝</strong></h2>\n<p>而深拷贝和浅拷贝就是对于复杂数据类型 object 来说的，当拷贝了对象的一层（即堆的引用）时，就称之为浅拷贝，当拷贝了对象的两层（堆中创建新的对象）时，就称之为深拷贝。</p>\n<h2 id=\"实现方案\"><a class=\"anchor\" href=\"#实现方案\">#</a> 实现方案</h2>\n<ol>\n<li>\n<p><code>JSON.parse(JSON.stringify(obj))</code> ，第一种方法是使用 JSON 方法，但是这个方法有一些限制：JSON 序列化时函数会被转为 null，正则表达式会被转为空对象。</p>\n</li>\n<li>\n<p>递归实现：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">javascript</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function deepCopy(obj, parent = null) &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    // 创建一个新对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    let result = &#123;&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    let keys = Object.keys(obj),</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        key = null,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        temp = null,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        _parent = parent;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    // 该字段有父级则需要追溯该字段的父级</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    while (_parent) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        // 如果该字段引用了它的父级则为循环引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        if (_parent.originalParent === obj) &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            // 循环引用直接返回同级的新对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            return _parent.currentParent;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        _parent = _parent.parent;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    for (let i = 0; i &lt; keys.length; i++) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        key = keys[i];</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        temp = obj[key];</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        // 如果字段的值也是一个对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        if (temp &amp;&amp; typeof temp === 'object') &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            // 递归执行深拷贝 将同级的待拷贝对象与新对象传递给 parent 方便追溯循环引用</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            result[key] = DeepCopy(temp, &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                originalParent: obj,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                currentParent: result,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                parent: parent</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        &#125; else &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            result[key] = temp;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    return result;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>MessageChannel 实现深克隆：由于浏览器不能将一个函数正确的复制到另一个线程中，所以不能支持函数的深克隆。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>port1<span class=\"token punctuation\">,</span> port2<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    port2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    port1<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">copy</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 异步的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> copyObj <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copyObj<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copyObj <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>H5 新增 structuredClone<br />\n 结构化克隆解决了该 JSON.stringify () 技术的许多（尽管不是全部）缺点。结构化克隆可以处理循环依赖，支持许多内置数据类型，并且更健壮且速度更快。<br />\n但是，它仍然有一些限制：</p>\n</li>\n</ol>\n<p>原型：如果你使用 structuredClone () 类实例，你将获得一个普通对象作为返回值，因为结构化克隆会丢弃对象的原型链。<br />\n函数：如果你的对象包含函数，它们将被悄悄丢弃。<br />\n不可克隆：有些值不是结构化可克隆的，尤其是 Error、 DOM 节点 和 Function。尝试这样做将引发 DataCloneError 异常。<br />\n属性描述符：setter 和 getter (以及类似元数据的功能) 不会被复制。例如，如果使用属性描述符将对象标记为只读，则复制后的对象中是可读写 (默认配置)。<br />\nRegExp：RegExp 对象的 lastIndex 字段不会保留。</p>\n<h1 id=\"浅拷贝实现方案\"><a class=\"anchor\" href=\"#浅拷贝实现方案\">#</a> 浅拷贝实现方案</h1>\n<ol>\n<li><code>Object.assign(&#123;&#125;,obj)</code> ，第二方法是使用 Object.assign ()</li>\n<li><code>const obj1 = &#123;...obj2&#125;</code> ，使用扩展运算符</li>\n</ol>\n",
            "tags": [
                "面试题",
                "深拷贝,面试题"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/",
            "url": "https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/",
            "title": "前端监控",
            "date_published": "2024-04-29T00:36:51.000Z",
            "content_html": "<h1 id=\"前端监控\"><a class=\"anchor\" href=\"#前端监控\">#</a> 前端监控</h1>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p><strong>为什么要进行前端监控：</strong></p>\n<ul>\n<li>页面的访问行为，PV、UV、IP、PV 点击率、UV 点击率、停留时长</li>\n<li>用户的操作行为，模块曝光、</li>\n<li>模块点击</li>\n<li>页面的性能，首屏渲染时间、API 请求时间</li>\n<li>异常的监控，JS Error、API 异常、业务异常</li>\n<li>业务的监控，成交金额、每日消息数</li>\n</ul>\n<p><strong>常见的应用场景：</strong></p>\n<ul>\n<li>流量分析</li>\n</ul>\n<p><strong>常见的前端监控平台：</strong></p>\n<ul>\n<li>百度统计</li>\n<li>阿里云 ARMS</li>\n<li>友盟</li>\n</ul>\n<p><strong>前端监控的数据有什么作用</strong></p>\n<ul>\n<li>流量数据监控，如：PV、UV、点击率、页面停留时长等</li>\n<li>自定义事件监控，如：曝光事件、滑动事件、请求事件等</li>\n<li>交易指标监控，如：成交额、转化率等</li>\n<li>其他综合分析，如：用户画像分析、流量漏斗、销量预测等</li>\n</ul>\n<p><strong>前端监控的三个阶段</strong></p>\n<ul>\n<li>初阶：使用第三方平台，百度、友盟、阿里云 ARMS 等</li>\n<li>中阶：自研前端监控库，缺乏完整的监控体系</li>\n<li>高阶：自研前端监控平台，具备完整的监控体系</li>\n</ul>\n<h1 id=\"百度统计接入\"><a class=\"anchor\" href=\"#百度统计接入\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==\">百度统计接入</span></h1>\n<p><strong>流量分析免费，行为分析需要付费。</strong></p>\n<ol>\n<li>官网创建网站，设置域名和首页</li>\n<li>保证域名公共可读</li>\n<li>复制统计代码，添加到要跟踪的网页中（加入到 head 标签之前）</li>\n</ol>\n<p><strong>阿里云 ARM 和友盟分析方案较全，接入方案大致相同，但是当数据量较大时，有一定的成本，所以考虑自建前端统计系统。</strong></p>\n<p><strong>什么时候需要考虑自建前端监控系统？</strong></p>\n<ol>\n<li>不仅仅需要流量分析，还需要做行为分析</li>\n<li>自建成本小于或等于平台付费</li>\n<li>希望网站监控数据能存到自己数据库中，并且数据隐私化。</li>\n</ol>\n<h1 id=\"监控平台架构\"><a class=\"anchor\" href=\"#监控平台架构\">#</a> 监控平台架构</h1>\n<p><strong>前端监控平台的分层：</strong></p>\n<ul>\n<li>\n<p>前端监控 JSSDK</p>\n<ul>\n<li>采集</li>\n<li>上报\n<ul>\n<li>默认上报：页面 PV、性能等</li>\n<li>手动上报：页面操作行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>前端监控 API 和大数据仓库</p>\n<ul>\n<li>接收上报的数据</li>\n<li>数据仓库：MaxCompute\n<ul>\n<li>数据查询</li>\n<li>数据存储</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>前端监控数据可视化</p>\n<ul>\n<li>日志大数据清洗</li>\n<li>大数据回流 RDS（非结构化数据 =&gt; 结构化数据）</li>\n</ul>\n</li>\n</ul>\n<p><strong>监控平台架构说明：</strong></p>\n<p><img data-src=\"/images/Snipaste_2024-04-29_08-11-46.jpg\" alt=\"监控平台架构\" /></p>\n<h2 id=\"js-库的开发\"><a class=\"anchor\" href=\"#js-库的开发\">#</a> JS 库的开发</h2>\n<h4 id=\"js-sdk\"><a class=\"anchor\" href=\"#js-sdk\">#</a> JS SDK</h4>\n<p>monitor.js：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>window<span class=\"token punctuation\">.</span>testMonitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  collect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  upload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上传到服务器，在需要监控的页面引入脚本。</p>\n<p><strong>一、直接引入脚本：</strong></p>\n<p>直接使用 script 标签引入在线地址。</p>\n<p><strong>二、异步加载（确保脚本加载完成后再使用 api）：</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://imooc.youbaobao.xyz/imooc-cli-monitor.js'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      body<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span>body<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      script<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMonitorScriptLoad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMonitorScriptLoad'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"pv-埋点\"><a class=\"anchor\" href=\"#pv-埋点\">#</a> PV 埋点</h4>\n<p><strong>一、分包便于代码书写和维护</strong></p>\n<p>假设将项目分为：index.js、collect.js 和 upload.js 三个 js 文件，分别用于整合、收集和上报。</p>\n<p><strong>二、设置页面基本信息</strong></p>\n<p>在 meta 标签中设置变量，假设为：test-app-id，在 body 标签中设置 test-page-id，此变量用于区分不同的站点。</p>\n<p><strong>三、collect.js</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> upload <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./upload\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 自定义一些钩子函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> beforeCreateParams<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> beforeUpload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> afterUpload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收集开始...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 采集信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">customData<span class=\"token punctuation\">,</span> eventType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> appId<span class=\"token punctuation\">,</span> pageId<span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">,</span> ua<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  beforeCreateParams <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">beforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> metaList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> metaList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> metaList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-app-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-app-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      appId <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-app-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  pageId <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-page-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>appId <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>pageId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  ua <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">,</span> pageId<span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">,</span> ua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">appId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>appId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;pageId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;timeStamp=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>timeStamp<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;ua=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ua<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beforeUpload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token function\">beforeUpload</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许定制数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// 日志上报</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">//upload (&#123;appId,pageId,timeStamp,ua&#125;)  不常用</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">let</span> url<span class=\"token punctuation\">,</span> uploadData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>customData<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> eventType <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    url <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    uploadData <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    afterUpload <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">afterUpload</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> uploadData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 发送 PV 日志</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendPV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 上报曝光埋点</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"EXP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 注册钩子函数</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerBeforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  beforeCreateParams <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerBeforeUpload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  beforeUpload <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerAfterUpload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  afterUpload <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerOnError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  onError <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>四、upload.js</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用 image 标签跨域特性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> eventType <span class=\"token operator\">=</span> <span class=\"token string\">\"PV\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;eventType=\"</span> <span class=\"token operator\">+</span> eventType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token string\">\"http://dmqtest.com?data=\"</span> <span class=\"token operator\">+</span> params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  img <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意内存释放</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> upload<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>五、index.js</strong></p>\n<pre><code>import &#123; sendPV , registerBeforeCreateParams,registerBeforeUpload,registerAfterUpload &#125; from './collect';\nimport &#123; upload &#125; from './upload';\nwindow.testMonitor = &#123;\n\tupload,\n\tsendPV,\n\tregisterBeforeCreateParams,\n\tregisterBeforeUpload,\n\tregisterAfterUpload,\n\tregisterOnError\n&#125;\n</code></pre>\n<p><strong>六、index.html</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">test-app-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app123456<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://dmqtest.com/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">test-page-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerBrforeUpload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">return</span> params <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;custom=1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加自定义数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerAfterUpload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">sendPV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"曝光埋点\"><a class=\"anchor\" href=\"#曝光埋点\">#</a> 曝光埋点</h4>\n<p>曝光埋点记录元素由不可变到可变的过程，需要浏览器 IntersectionObserver 这个 API 的支持。</p>\n<p><strong>浏览器 5 种 Observer：</strong></p>\n<ul>\n<li>MutationObserver（用于监听 DOM 树的变化，一般为属性、子节点的增删改）</li>\n<li>IntersectionObserver（用于监听一个元素和可视区域相交部分的比列，然后在可视比列到达某一阈值的时候触发回调）</li>\n<li>PerformanceObserver（用于检测性能度量事件，在浏览器的性能事件轴记录下一个新的 performance entries 的时候将会被通知）</li>\n<li>ResizeObserver（用于监听 DOM 的变化，一般为节点的出现和隐藏，节点大小的变化）</li>\n<li>ReportingObserver（用于监听过时的 api、浏览器的一些干预行为的预告）</li>\n</ul>\n<p><strong>IntersectionObserver：</strong></p>\n<p><strong>方法：</strong></p>\n<ul>\n<li>\n<p>observe：开始监听一个目标元素</p>\n<p>语法：IntersectionObserver.disconnect ();</p>\n</li>\n<li>\n<p>disconnect：停止监听</p>\n<p>语法：IntersectionObserver.observe (targetElement);</p>\n</li>\n<li>\n<p>takeRecords: 返回所有观察目标的 IntersectionObserverEntry 对象数组。</p>\n<p>语法：intersectionObserverEntries = intersectionObserver.takeRecords ();</p>\n</li>\n<li>\n<p>unobserve: 使 IntersectionObserver 停止监听特定目标元素</p>\n<p>语法：IntersectionObserver.unobserve (targetElement);</p>\n</li>\n</ul>\n<p><strong>配置项：</strong></p>\n<ul>\n<li>targetElement：目标 DOM</li>\n<li>root：指定根目录，也就就是当目标元素显示在这个元素中时会触发监控回调</li>\n<li>rootMargin：类似于 css 的 margin，设定 root 元素的边框区域。</li>\n<li>threhold：阈值，决定了什么时候触发回调函数。</li>\n</ul>\n<p><strong>返回参数：</strong></p>\n<ul>\n<li>tIme: 可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li>\n<li>rootBounds: 是在根元素矩形区域的信息</li>\n<li>intersectionRatio: 目标元素的可见比例</li>\n<li>intersectionRect: 目标元素与根元素交叉区域的信息</li>\n<li>isIntersecting: 判断元素是否符合 options 中的可见条件</li>\n<li>boundingClientRect: 目标元素的矩形区域的信息</li>\n<li>target: 被观察的目标元素</li>\n</ul>\n<p><strong>upload.js 文件中添加：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//.... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报曝光埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"EXP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 最后在 index.js 中暴露出去。</span></pre></td></tr></table></figure><p><strong>collect.js 文件中添加：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//.... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">collectAppear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> appearEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onAppear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> disappearEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onDisappear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> ob<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>testMonitorObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ob <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>testMonitorObserver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\"appear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>appearEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\"disappear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>disappearEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">let</span> obList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">const</span> appear <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[appear]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> appear<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      ob<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      obList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  window<span class=\"token punctuation\">.</span>testMonitorObserver <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存起来防止重复</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  window<span class=\"token punctuation\">.</span>monitorObserverList <span class=\"token operator\">=</span> obList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>index.js 中使用：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//import 引入 collectAppear 函数。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">collectAppear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"点击埋点\"><a class=\"anchor\" href=\"#点击埋点\">#</a> <strong>点击埋点</strong></h4>\n<p><strong>collect.js 中添加：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报点击埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CLICK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 暴露出去，index.js 导入该方法并暴露出去。</span></pre></td></tr></table></figure><h4 id=\"自定义埋点\"><a class=\"anchor\" href=\"#自定义埋点\">#</a> 自定义埋点</h4>\n<p><strong>collect.js 中添加：</strong></p>\n<p>自定义埋点行为就直接在内部添加 CUSTOM 对应的处理逻辑，可以使用其他的 Observer 实现更多功能。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报自定义埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendCustom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CUSTOM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 暴露出去，index.js 导入该方法并暴露出去。</span></pre></td></tr></table></figure><h2 id=\"大数据平台开发\"><a class=\"anchor\" href=\"#大数据平台开发\">#</a> 大数据平台开发</h2>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vemgvbWF4Y29tcHV0ZS8jOn46dGV4dD0lRTQlQkElOTElRTUlOEUlOUYlRTclOTQlOUYlRTUlQTQlQTclRTYlOTUlQjAlRTYlOEQlQUUlRTglQUUlQTElRTclQUUlOTclRTYlOUMlOEQlRTUlOEElQTEsJTI4TWF4Q29tcHV0ZSUyOSVFNiU5OCVBRiVFNCVCOCU4MCVFNyVBNyU4RCVFNSVCRiVBQiVFOSU4MCU5RiVFMyU4MCU4MSVFNSVBRSU4QyVFNSU4NSVBOCVFNiU4OSU5OCVFNyVBRSVBMSVFNyU5QSU4NFRCJTJGUEIlRTclQkElQTclRTYlOTUlQjAlRTYlOEQlQUUlRTQlQkIlOTMlRTUlQkElOTMlRTglQTclQTMlRTUlODYlQjMlRTYlOTYlQjklRTYlQTElODglRTMlODAlODIlMjBNYXhDb21wdXRlJUU1JTkwJTkxJUU3JTk0JUE4JUU2JTg4JUI3JUU2JThGJTkwJUU0JUJFJTlCJUU0JUJBJTg2JUU1JUFFJThDJUU1JTk2JTg0JUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU1JUFGJUJDJUU1JTg1JUE1JUU2JTk2JUI5JUU2JUExJTg4JUU0JUJCJUE1JUU1JThGJThBJUU1JUE0JTlBJUU3JUE3JThEJUU3JUJCJThGJUU1JTg1JUI4JUU3JTlBJTg0JUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU4JUFFJUExJUU3JUFFJTk3JUU2JUE4JUExJUU1JTlFJThCJUVGJUJDJThDJUU4JTgzJUJEJUU1JUE0JTlGJUU2JTlCJUI0JUU1JUJGJUFCJUU5JTgwJTlGJUU3JTlBJTg0JUU4JUE3JUEzJUU1JTg2JUIzJUU3JTk0JUE4JUU2JTg4JUI3JUU2JUI1JUI3JUU5JTg3JThGJUU2JTk1JUIwJUU2JThEJUFFJUU4JUFFJUExJUU3JUFFJTk3JUU5JTk3JUFFJUU5JUEyJTk4JUVGJUJDJThDJUU2JTlDJTg5JUU2JTk1JTg4JUU5JTk5JThEJUU0JUJEJThFJUU0JUJDJTgxJUU0JUI4JTlBJUU2JTg4JTkwJUU2JTlDJUFDJUVGJUJDJThDJUU1JUI5JUI2JUU0JUJGJTlEJUU5JTlBJTlDJUU2JTk1JUIwJUU2JThEJUFFJUU1JUFFJTg5JUU1JTg1JUE4JUUzJTgwJTgy\">MaxCompute 阿里云原生大数据计算服务</span>：</strong></p>\n<p>MaxCompute 是基于数据分析场景的企业级 SaaS 模式云数据仓库，以 Serverless 架构提供快速、全托管的在线数据仓库服务，消除了传统数据平台在资源扩展性和弹性方面的限制，最小化用户运维投入。</p>\n<p><strong>使用：</strong></p>\n<ol>\n<li>\n<p>使用 MaxCompute 创建数据库，在数据开发页面创建表进行记录前端监控数据</p>\n</li>\n<li>\n<p>使用 py 脚本对接（暂时没有 js 包），需要安装 python 和 pip（包管理工具）</p>\n</li>\n<li>\n<p>安装 pyodps： <code>pip install pyodps</code></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Nvbm5lY3QucHk=\">connect.py</span> 文件中写入示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> odps <span class=\"token keyword\">import</span> ODPS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>odps <span class=\"token operator\">=</span> ODPS<span class=\"token punctuation\">(</span><span class=\"token string\">'LTAI5tBDj3HajwRVhc6me5KR'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DJqWAI1IWUBZnZGE#FKDSFJDEJLet'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'test_monitor'</span><span class=\"token punctuation\">,</span>endpoint<span class=\"token operator\">=</span><span class=\"token string\">'https://service-cn-hangzhou.odps.aliyun-inc.com'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>result <span class=\"token operator\">=</span> odps<span class=\"token punctuation\">.</span>executexecute_sql<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from test_monitor where datetime=\"20240325\"'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">with</span> result<span class=\"token punctuation\">.</span>open_reader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 打印表名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> table <span class=\"token keyword\">in</span> odps<span class=\"token punctuation\">.</span>list_tables<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'appid123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pageid123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ua123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'202403'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 写入数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>odps<span class=\"token punctuation\">.</span>write_table<span class=\"token punctuation\">(</span><span class=\"token string\">'test_table'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># .... 等等后续操作</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>前端监控平台可视化架构图：</strong></p>\n<p><img data-src=\"/images/Snipaste_2024-04-30_15-14-09.jpg\" alt=\"前端监控流程架构\" /></p>\n",
            "tags": [
                "前端监控",
                "前端监控"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/",
            "url": "https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/",
            "title": "三方库",
            "date_published": "2024-04-16T08:33:16.000Z",
            "content_html": "<h1 id=\"脚手架开发\"><a class=\"anchor\" href=\"#脚手架开发\">#</a> <strong>脚手架开发</strong></h1>\n<p><strong>常见工具包</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29tbWFuZGVy\">Commander</span></strong></th>\n<th><strong>提供一个连贯的  <code>API</code> ，用于定义  <code>CLI</code>  应用程序的各个方面，如命令、选项、别名和帮助。简化了命令行应用程序的创建。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveWFyZ3M=\">yargs</span></strong></td>\n<td><strong>脚手架开发框架，通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGVybmE=\">lerna</span></strong></td>\n<td><strong>多 package 管理</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW5xdWlyZXI=\">Inquirer</span></strong></td>\n<td><strong>一个易于嵌入且美观的  <code>Node.js</code>  命令行界面。 提供了很棒的查询会话流程。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hhbGs=\">Chalk</span></strong></td>\n<td><strong> <code>Chalk</code>  是一个非常简单的库，创建它的目的很简单 —— 给你的终端字符串添加样式。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29sb3Jz\">colors</span></strong></td>\n<td><strong>打印 <code>不同颜色的log信息</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb3Jh\">ora</span></strong></td>\n<td><strong>命令行 <code>中高级的</code> 、 <code>功能丰富的高可定制化加载动画</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xpLXNwaW5uZXI=\">cli-spinner</span></strong></td>\n<td><strong>命令行中 <code>轻量的符号加载动画</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtbG9n\">npmlog</span></strong></td>\n<td><strong>执行 npm 的日志记录。它支持 <code>自定义级别和彩色输出</code> 。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1wb3J0LWxvY2Fs\">import-local</span></strong></td>\n<td><strong>当与全局冲突的时候，比如全局和本地都有这个脚手架时可以使用， <code>判断使用的是否是本地版本</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmluZHVw\">findup</span></strong></td>\n<td><strong> <code>向上查找指定文件</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGF0aC1leGlzdHM=\">path-exists</span></strong></td>\n<td><strong> <code>判断文件是否存在</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVidWc=\">Debug</span></strong></td>\n<td><strong>一个很小的  <code>JavaScript</code>  调试实用程序。 只需将一个函数的名称传递给模块，它就会返回一个经过修饰的  <code>console.error</code>  版本，以便你将调试语句传递给该模块</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=\">fs-extra</span></strong></td>\n<td><strong>fs 模块的扩展，支持更多文件操作功能</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VtdmVy\">semver</span></strong></td>\n<td><strong> <code>版本比对工具</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmlnbGV0\">figlet</span></strong></td>\n<td><strong>输出一些独特的大型 <code>ASCII文本横幅</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXNlci1ob21l\">user-home</span></strong></td>\n<td><strong>获取 <code>用户主目录</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG90ZW52\">dotenv</span></strong></td>\n<td><strong>获取 <code>环境变量</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcm9vdC1jaGVjaw==\">root-check</span></strong></td>\n<td><strong>检查是否是 <code>管理员权限启动并自动降级</code> ，防止后续因普通权限导致无法使用。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGtnLWRpcg==\">pkg-dir</span></strong></td>\n<td><strong>从某个目录开始向上查找，直到找到存在 <code>package.json</code>  的目录，并返回该目录。如果未找到则返回 null</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWluaW1pc3Q=\">minimist</span></strong></td>\n<td><strong>用来 <code>解析命令行参数和选项的库</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtaW5zdGFsbA==\">npminstall</span></strong></td>\n<td><strong> <code>安装npm上的包</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG93bmxvYWQtZ2l0LXJlcG8=\">download-git-repo</span></strong></td>\n<td><strong> <code>安装git仓库中的包</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz\">ejs</span></strong></td>\n<td><strong> <code>xml模板数据动态渲染</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2xvYg==\">glob</span></strong></td>\n<td><strong>根据 <code>文件路径进行遍历和匹配文件</code> ，拿到文件的内容。</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>底层原理包</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>readline（node 内置库）</strong></th>\n<th><strong>命令行的输入输出</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>events（node 内置库）</strong></td>\n<td><strong>事件驱动</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3RyZWFt\">stream</span></strong></td>\n<td><strong>输入输出流</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW5zaS1lc2NhcGVz\">ansi-escapes</span></strong></td>\n<td><strong>自定义 <code>命令行文字样式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcnhqcw==\">rxjs</span></strong></td>\n<td><strong> <code>处理异步事件流</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYnVzYm95\">busboy</span></strong></td>\n<td><strong> <code>多文件上传底层库</code> ，尤其用于流式文件上传。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=\">styled-components</span></strong></td>\n<td><strong>css-in-js 理论工具，在 <code>js中书写css样式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWpzeA==\">styled-jsx</span></strong></td>\n<td><strong>css-in-js 理论工具，在 <code>js中书写css样式</code> （ts 支持不友好）</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZW1vdGlvbg==\">emotion</span></strong></td>\n<td><strong>css-in-js 理论工具，在 <code>js中书写css样式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3Qtcm91dGVyLWRvbQ==\">react-router-dom</span></strong></td>\n<td><strong>react 在 dom 环境下的 <code>路由工具</code> </strong></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h1 id=\"vue\"><a class=\"anchor\" href=\"#vue\">#</a> <strong>Vue</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQG53c2VlL2NvcmU=\">https://www.npmjs.com/package/@nwsee/core</span></strong></th>\n<th><strong>vue 项目插件，用于页面性能监控</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"react\"><a class=\"anchor\" href=\"#react\">#</a> <strong>React</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGV4Y2FsaWRyYXcvZXhjYWxpZHJhdw==\">excalidraw</span></strong></th>\n<th><strong> <code>画板、流程图和思维导图</code> 等</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZDM=\">d3</span></strong></td>\n<td><strong> <code>可视化数据图表库</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1tZXI=\">immer</span></strong></td>\n<td><strong>改变了 react <code>设置state状态的方式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xhc3NuYW1lcw==\">classnames</span></strong></td>\n<td><strong>有条件地将  <code>classNames 连接</code> 在一起</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWhvb2tz\">ahooks</span></strong></td>\n<td><strong>国内常用的 <code>react-hooks函数集</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JhY28=\">craco</span></strong></td>\n<td><strong>用于 <code>create-react-app项目中的各种配置和重写</code> </strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> <strong>Node.js</strong></h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcw==\">Express</span></strong></th>\n<th style=\"text-align:left\"><strong>轻量级 web 框架</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGhhcGkvaGFwaQ==\">Hapi</span></strong></td>\n<td style=\"text-align:left\"><strong>以最小的开销和完全开箱急用的功能构建强大的、拓展性强的应用程序</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2FpbHM=\">Sails</span></strong></td>\n<td style=\"text-align:left\"><strong>最流行的 Node.js 的 MVC 框架</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua29hanMubmV0Lw==\">Koa</span></strong></td>\n<td style=\"text-align:left\"><strong>下一代 web 开发框架</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=\">Fs-extra</span></strong></td>\n<td style=\"text-align:left\"><strong>fs -extra <code>包含了</code>  Node.js <code> </code> fs <code>包中没有包含的方法，比如</code>  copy () <code>, </code> remove() <code>, </code> mkdirs()</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1jYWNoZQ==\">Node-cache</span></strong></td>\n<td style=\"text-align:left\"><strong>一个简单的缓存模块，具有设置，获取和删除方法的功能，类似于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZW1jYWNoZWQub3JnLw==\"> memcached</span>。 key 值可以具有一个超时设置（ttl），在此时间之后它们将过期并从缓存中删除。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2hhcnA=\">sharp</span></strong></td>\n<td style=\"text-align:left\"><strong> <code>node图片处理</code> 解决方案</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9hZHRlc3Q=\">Loadtest</span></strong></td>\n<td style=\"text-align:left\"><strong>node.js <code>压力测试工具</code> ，模拟高并发场景。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1zY2hlZHVsZQ==\">node-schedule</span></strong></td>\n<td style=\"text-align:left\"><strong>node.js 中进行定时任务</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"vite\"><a class=\"anchor\" href=\"#vite\">#</a> <strong>Vite</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cC1wcm94eQ==\">http-proxy</span></strong></th>\n<th><strong>vite 代理服务器的底层，用于转发 http 请求到响应给客户端</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"html\"><a class=\"anchor\" href=\"#html\">#</a> <strong>HTML</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdzMuanM=\">w3.js</span></strong></th>\n<th><strong>w3.js 是 solidity abi 的 method_id 和 param 解释器，可用于直接操作 DOM 元素</strong></th>\n</tr>\n</thead>\n</table>\n<h1 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> <strong>css</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGFpbHdpbmRjc3M=\">Tailwind</span></strong></th>\n<th><strong>原子化 css</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=\">Styled-components</span></strong></td>\n<td><strong>css-in-js，js 中书写 css</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"ai\"><a class=\"anchor\" href=\"#ai\">#</a> <strong>AI</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3NlYXJjaD9xPSU0MG1lZGlhcGlwZQ==\">@mediapipe</span></strong></th>\n<th><strong>ai 识别模型集</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3NlYXJjaD9xPSU0MHhlbm92YQ==\">@xenova</span></strong></td>\n<td><strong>ai 识别模型</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"编辑器\"><a class=\"anchor\" href=\"#编辑器\">#</a> 编辑器</h1>\n<table>\n<thead>\n<tr>\n<th><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uYWNvLWVkaXRvcg==\">monaco-editor</span></th>\n<th>web 端 vscode 编辑器，各技术栈都有对应的接入包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> <strong>日志</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9yZ2Fu\">Morgan</span></strong></th>\n<th><strong>具体来说，它是一个  <code>HTTP</code>  请求记录器，存储  <code>HTTP</code>  请求，并为你提供有关应用程序如何使用以及可能存在潜在错误的简要信息。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2luc3Rvbg==\">Winston</span></strong></td>\n<td><strong>一个几乎所有内容的日志记录器，支持多种传输方式。它存储的时间比  <code>Morgan</code>  长，它也有一个更大的维护者社区和更多的下载。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9nNGpz\">log4js</span></strong></td>\n<td><strong>用于在 js 中生成日志信息，可以输出到终端，也可以生成日志文件</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> <strong>数据库</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2U=\">Mongoose</span></strong></th>\n<th><strong> <code>Mongoose</code>  是一个  <code>MongoDB</code>  对象建模工具，设计用于在异步环境中工作。 <code>Mongoose</code>  支持  <code>Promise</code>  和回调。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VxdWVsaXpl\">Sequelize</span></strong></td>\n<td><strong> <code>Sequelize</code>  是一个基于  <code>Promise</code>  的  <code>Node.js</code>   <code>ORM</code>  工具，适用于  <code>Postgres</code> 、MySQL、MariaDB、SQLite 和 Microsoft SQL Server。它具有可靠的事务支持、关系、即时和延迟加载、读取复制等特性。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYnJvd3Nlci1zeW5j\">browser-sync</span></strong></td>\n<td><strong> <code>开启浏览器服务</code> ，打开文件（html）, 当执行文件改变时，自动刷新浏览器</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwy\">mysql2</span></strong></td>\n<td><strong>用于连接 mysql 和编写 sql 语句</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uva25leA==\">knex</span></strong></td>\n<td><strong>node 中 ORM 库，使用 JavaScript 代码来与关系型数据库进行交互</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWEueW9nYS9nZXR0aW5nLXN0YXJ0ZWQv\">prisma</span></strong></td>\n<td><strong>node 中 ORM 库，与 TypeScript 紧密集成，提供强大的类型安全保证</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcw==\">ioredis</span></strong></td>\n<td><strong>在 node.js 中与 Redis 客户端进行交互。</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"浏览器\"><a class=\"anchor\" href=\"#浏览器\">#</a> <strong>浏览器</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcHRyLmRldi8=\">Puppeteer</span></strong></th>\n<th><strong>通过 DevTools 协议控制浏览器，默认以无头模式运行（Chrome 的无头版本），同时可以用于编写网络怕中和数据抓取脚本。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNkb20=\">jsdom</span></strong></td>\n<td><strong>许多 Web 标准的纯 JavaScript 实现，用于 <code>node.js中模拟浏览器环境</code> </strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> <strong>授权</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGFzc3BvcnQ=\">Passport</span></strong></th>\n<th><strong> <code>Passport</code>  的目的是通过一组可扩展的插件 (称为策略) 对请求进行身份验证。向 <code>Passport</code>  提供一个身份验证请求， <code>Passport</code>  提供钩子来控制身份验证成功或失败时发生的操作。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGFzc3BvcnQtand0\">Passport-jwt</span></strong></td>\n<td><strong>Passport 库的一个插件，用于支持使用 JSON Web Token (JWT) 进行身份验证和授权</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmNyeXB0\">Bcrypt</span></strong></td>\n<td><strong>它是可以帮助你生成哈希密码的库。 <code>Bcrypt</code>  是由  <code>Niels Provos</code>  和  <code>David Mazieres</code>  基于  <code>Blowfish cipher</code>  设计的密码哈希函数，并于 1999 年在 USENIX 上展出。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbndlYnRva2Vu\">JSONWebToken</span></strong></td>\n<td><strong> <code>JSON Web</code>  令牌 (JWT) 是一种开放的、行业标准的  <code>RFC 7519</code>  方法，用于在双方之间安全地表示声明。这个包允许你解码、验证和生成 JWT。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"静态网站生成\"><a class=\"anchor\" href=\"#静态网站生成\">#</a> <strong>静态网站生成</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2F0c2J5\">Gatsby</span></strong></th>\n<th><strong>一个现代的网站生成器，可以创建快速，高质量，动态的  <code>React</code>  应用程序，从博客到电子商务网站再到用户仪表板。具有很棒的插件生态系统和模板。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmV4dA==\">NextJS</span></strong></td>\n<td><strong> <code>NextJS</code>  首先支持服务器渲染以及静态生成的内容。 你还可以将  <code>serverless</code>  功能定义为  <code>API</code>  端点。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnV4dA==\">NuxtJS</span></strong></td>\n<td><strong>在  <code>Vue</code>  的生态系统中， <code>NuxtJS</code>  基本上是  <code>NextJS</code>  的替代品。 <code>NuxtJS</code>  的目标是让  <code>web</code>  开发功能强大，并且让开发者具有良好的开发意识。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"模板语法\"><a class=\"anchor\" href=\"#模板语法\">#</a> <strong>模板语法</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVzdGFjaGU=\">Mustache</span></strong></th>\n<th><strong> <code>Mustache</code>  是一种无逻辑的模板语法。它可以用于  <code>HTML</code> ，配置文件，源代码等任何东西。它的工作原理是使用 hash 或对象中提供的值在模板中展开标记。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGFuZGxlYmFycw==\">Handlebars</span></strong></td>\n<td><strong>使用模板和输入对象生成  <code>HTML</code>  或其他文本格式。 <code>Handlebars</code>  模板看起来像一个嵌入了把手表达式的正则文本。 <code>Handlebars</code>  很大程度上与  <code>Mustache</code>  模板兼容。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz\">EJS</span></strong></td>\n<td><strong> <code>EJS</code>  是一种简单的模板语言，可让你使用简单的语法，快速的执行和简单的调试  <code>JavaScript</code>  来生成  <code>HTML</code>  标记。  <code>EJS</code>  拥有大量的活跃用户社区，并且该库正在积极开发中。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"mock数据\"><a class=\"anchor\" href=\"#mock数据\">#</a> <strong>mock 数据</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXVpZA==\">Uuid</span></strong></th>\n<th><strong>方便而且体积小的包，可以快速、轻松地生成更复杂的通用惟一标识符 (UUIDs)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFrZXI=\">Faker</span></strong></td>\n<td><strong>实用的  <code>npm</code>  包，用于在浏览器和  <code>Node.js</code>  中制造大量假数据。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbi1zZXJ2ZXI=\">jsonServer</span></strong></td>\n<td><strong>mock 开发服务器数据</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmFub2lk\">nanoid</span></strong></td>\n<td><strong> <code>字符串 ID 生成器</code> ，没有其余依赖。</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"表单文件和邮件\"><a class=\"anchor\" href=\"#表单文件和邮件\">#</a> <strong>表单文件和邮件</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdmFsaWRhdG9y\">Validator</span></strong></th>\n<th><strong>便捷的字符串验证器，使程序更加健壮的库。许多有用方法，例如  <code>isEmail()</code> ，  <code>isCreditCard()</code> ， <code>isDate()</code>  和  <code>isURL()</code> 。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybWlr\">Formik</span></strong></td>\n<td><strong> <code>Formik</code>  是  <code>React</code>  和  <code>React Native</code>  的一个流行开源表单库。它具有易于使用、声明性和适应性的特点。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVsdGVy\">Multer</span></strong></td>\n<td><strong> <code>Multer</code>  是用于  <code>multipart/form-data</code>  数据格式的  <code>Node.js</code>  中间件，主要用于上传文件。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1haWxlcg==\">Nodemailer</span></strong></td>\n<td><strong> <code>Nodemailer</code>  是  <code>Node.js</code>  应用程序的一个模块，允许轻松发送电子邮件。这个项目从 2010 年就开始了，现在它是大多数  <code>Node.js</code>  用户默认使用的解决方案。</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"pdf\"><a class=\"anchor\" href=\"#pdf\">#</a> <strong>pdf</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGRma2l0\">pdfkit</span></strong></th>\n<th><strong>适用于 node 和浏览器的 <code>pdf生成库</code> </strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGRmLWxpYg==\">pdf-lib</span></strong></td>\n<td><strong>任何 JavaScript 环境中 <code>创建和修改pdf</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNwZGY=\">jspdf</span></strong></td>\n<td><strong>用 <code>JavaScript生成pdf</code>  的库</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"富文本编辑器\"><a class=\"anchor\" href=\"#富文本编辑器\">#</a> <strong>富文本编辑器</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ucG1kb2Mub3JnL3RpbnltY2V6aG9uZ3dlbndlbmRhbmd0aW55bWNlLWpzemhvbmd3ZW5qaWFvY2hlbmdqaWV4aS5odG1s\">tinymce</span></strong></th>\n<th><strong>富文本编辑，可商用，具有美感</strong></th>\n</tr>\n</thead>\n</table>\n<h1 id=\"图表可视化\"><a class=\"anchor\" href=\"#图表可视化\">#</a> <strong>图表可视化</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWNoYXJ0cw==\">echarts</span></strong></th>\n<th><strong>图表可视化</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZDM=\">d3</span></strong></td>\n<td><strong>轻量的图表可视化</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWFwYm94\">mapbox</span></strong></td>\n<td><strong>地图框架可视化</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY29tZmUuZ2l0aHViLmlvL3pyZW5kZXIv\">zrender</span></strong></td>\n<td><strong>提供给 echarts 使用的轻量级图形库</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> <strong>测试</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvamVzdA==\">Jest</span></strong></th>\n<th><strong> <code>Jest</code>  是一个令人愉快的  <code>JavaScript</code>  测试框架，专注于简洁明快。它允许你使用易于使用、熟悉且功能丰富的  <code>API</code>  编写测试，从而快速获得结果。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9jaGE=\">Mocha</span></strong></td>\n<td><strong> <code>Mocha</code>  是一个  <code>JavaScript</code>  测试框架，使得异步测试简单而有趣。 <code>Mocha</code>  测试是串行运行的，在将未捕获的异常映射到正确的测试用例的同时，允许进行灵活和准确的报告。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码规范\"><a class=\"anchor\" href=\"#代码规范\">#</a> <strong>代码规范</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50\">ESLint</span></strong></th>\n<th><strong> <code>ESLint</code>  是用于识别和报告  <code>ECMAScript / JavaScript</code>  代码中的书写方式的工具。  <code>ESLint</code>  是完全插件化的，每个规则都是一个插件，你可以在运行时添加更多内容。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJldHRpZXI=\">Prettier</span></strong></td>\n<td><strong> <code>Prettier</code>  是一种固执己见的代码格式化程序。它通过解析代码并使用自己的规则 (考虑到最大行的长度) 重新打印代码，以及在必要时包装代码，来强制执行一致的样式。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveWVvbWFu\">yeoman</span></strong></td>\n<td><strong> <code>生成eslint插件开发模板</code> 的工具</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"打包和压缩\"><a class=\"anchor\" href=\"#打包和压缩\">#</a> <strong>打包和压缩</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2VicGFjaw==\">Webpack</span></strong></th>\n<th><strong>一个著名的功能强大的模块打包器。它的主要目的是将  <code>JavaScript</code>  文件打包以便在浏览器中使用，但它也能够转换、捆绑或打包任何资源。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHRtbC1taW5pZmllcg==\">HTML-Minifier</span></strong></td>\n<td><strong>轻巧，高度可配置且经过良好测试的基于  <code>Javascript</code>  的  <code>HTML</code>  压缩器 / 压缩器（支持  <code>Node.js</code> ）。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xlYW4tY3Nz\">Clean-CSS</span></strong></td>\n<td><strong>适用于  <code>Node.js</code>  平台和任何现代浏览器的快速高效的  <code>CSS</code>  优化器。 具有高度可配置和多种兼容模式。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdWdsaWZ5LWpz\">UglifyJS2</span></strong></td>\n<td><strong> <code>JavaScript</code>  解析器，压缩程序和美化工具包。 它可以使用多个输入文件，并支持许多配置选项。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"进程管理\"><a class=\"anchor\" href=\"#进程管理\">#</a> <strong>进程管理</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1vbg==\">Nodemon</span></strong></th>\n<th><strong>在  <code>Node.js</code>  应用程序的开发过程中使用的简单的监控脚本。对于开发非常有用，因为它非常容易重启，并且默认启用了文件监听</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG0y\">PM2</span></strong></td>\n<td><strong>带有内置负载均衡的  <code>Node.JS</code>  应用程序的生产进程管理器。 更全面，更适合生产，给你很多参数以进行调整功能</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29uY3VycmVudGx5\">Concurrently</span></strong></td>\n<td><strong>简单而直接 —— 这是同时运行多个命令的有用工具。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"桌面端\"><a class=\"anchor\" href=\"#桌面端\">#</a> <strong>桌面端</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JlYXRlLXRhdXJpLWFwcA==\">create-tauri-app</span></strong></th>\n<th><strong>创建 <code>桌面端应用程序</code> </strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"跨语言通信\"><a class=\"anchor\" href=\"#跨语言通信\">#</a> <strong>跨语言通信</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ncnBjLmlvLw==\">grpc</span></strong></th>\n<th><strong>跨语言通信库</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"orm\"><a class=\"anchor\" href=\"#orm\">#</a> <strong>ORM</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvZ2V0dGluZy1zdGFydGVk\">Prisma ORM</span></strong></th>\n<th><strong>下一代 Node.js 和 TypeScript ORM（对象关系映射）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb25nb29zZS5ub2RlanMuY24v\">Mongoose</span></strong></td>\n<td><strong>mongodb 数据库 ODM（对象文档映射）</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"解析和语法转换\"><a class=\"anchor\" href=\"#解析和语法转换\">#</a> <strong>解析和语法转换</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanMteWFtbA==\">js-yaml</span></strong></th>\n<th><strong>用于将 JavaScript 语言解析为 <code>yaml</code> </strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL3BhcnNlcg==\">@babel/parser</span></strong></td>\n<td><strong>将 <code>JavaScript代码转换为抽象语法树</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL3RyYXZlcnNl\">@babel/traverse</span></strong></td>\n<td><strong>用于遍历和 <code>操作抽象语法树</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGJhYmVsL2NvcmU=\">@babel/core</span></strong></td>\n<td><strong>babel 核心功能集，例如将抽象语法树转为 JavaScript 代码。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tbm9kZS1yZXNvbHZl\">@rollup/plugin-node-resolve</span></strong></td>\n<td><strong>rollup 插件，用于告诉 <code>rollup如何处理导入导出语句（路径补全）</code> 。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tY29tbW9uanM=\">@rollup/plugin-commonjs</span></strong></td>\n<td><strong>rollup 插件，用于 <code>允许rollup将CommonJS模块</code> 打包为 ES 语法</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJvbGx1cC9wbHVnaW4tdHlwZXNjcmlwdA==\">@rollup/plugin-typescript</span></strong></td>\n<td><strong>rollup 插件，用于 <code>rollup处理TypeScript文件</code> </strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"音视频\"><a class=\"anchor\" href=\"#音视频\">#</a> <strong>音视频</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGV4dC10by1zcGVlY2g=\">text-to-speech</span></strong></th>\n<th><strong>文本转语音</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> <strong>其他</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXhpb3M=\">Axios</span></strong></th>\n<th><strong>基于  <code>Promise</code>  的  <code>HTTP</code>  客户端，用于浏览器和  <code>Node.js</code> 。 与  <code>JS</code>  内置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSQ==\">Fetch API</span> 相比，它易于设置，直观且简化了很多工作。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><a href=\"https//www.npmjs.com/package/socket.io\">Socket.io</a></strong></td>\n<td><strong> <code>Socket.IO</code>  支持实时，双向和基于事件的通信。 它可以在每个平台，浏览器或其他设备上运行，并同时关注可靠性和速度。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd3M=\">WS</span></strong></td>\n<td><strong>简单易用，快速且经过全面测试的  <code>WebSocket</code>  客户端和服务器实现。 一个很好的，不太抽象的， <code>Socket.io</code>  的替代方案</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGF5anM=\">DayJS</span></strong></td>\n<td><strong> <code>DayJS</code>  是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9tZW50\">MomentJS</span> （自 2020 年 9 月起处于维护模式）的一种快速、轻巧的替代方案。它们的  <code>API</code>  使用类似，如果你使用过 <code>MomentJS</code> ，则已经知道如何使用大多数  <code>DayJS</code> 。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9kYXNo\">Lodash</span></strong></td>\n<td><strong>现代化的  <code>JavaScript</code>  实用程序库，提供模块化，高性能以及其他功能。 公开关于  <code>JavaScript</code>  数组，对象和其他数据结构的许多有用方法。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdW5kZXJzY29yZQ==\">Underscore</span></strong></td>\n<td><strong> <code>Underscore</code>  提供了许多常用的功能工具以及更专业的工具：函数绑定， <code>javascript</code>  模板，创建快速索引，深度相等测试等。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXN5bmM=\">Async</span></strong></td>\n<td><strong> <code>Async</code>  是一个实用模块，它为异步  <code>JavaScript</code>  提供了直接、强大的功能。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWFya2Vk\">Marked</span></strong></td>\n<td><strong>用于解析  <code>markdown</code>  而不需要缓存或长时间阻塞的低级编译器。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmFuZG9tY29sb3I=\">Randomcolor</span></strong></td>\n<td><strong>一个用于生成有吸引力的随机颜色的小脚本。 你可以传递选项对象从而决定其产生的颜色类型。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGx1cmFsaXpl\">Pluralize</span></strong></td>\n<td><strong>该模块使用预先定义的规则列表，按顺序应用这些规则给指定单词单数或复数。 在许多情况下这很有用，例如基于用户输入的任何自动化。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVkZW50\">dedent</span></strong></td>\n<td><strong>从多行字符串中去除缩进（空格）</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXM=\">ms</span></strong></td>\n<td><strong>将易理解的时间转换为毫秒数。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaG90a2V5cy1qcw==\">hotkeys-js</span></strong></td>\n<td><strong> <code>键盘事件</code> 使用库。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXM=\">qs</span></strong></td>\n<td><strong> <code>查询字符串解析和字符串化库</code> ，具有一些附加的安全性</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFjZS1hcGk=\">face-api</span></strong></td>\n<td><strong>用于 <code>人脸识别</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXJjb2RlanM=\">qrcode</span></strong></td>\n<td><strong>用于将 <code>文本转二维码</code> ，并用 canvas 绘制出来</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGxxcmNvZGU=\">llqrcode</span></strong></td>\n<td><strong>将扫描二维码，将二维码转为文本</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcucDJocC5jb20vZG93bmxvYWQuaHRtbA==\">FFmpeg</span></strong></td>\n<td><strong> <code>跨平台多媒体处理工具</code> ，可以采用命令行的方式 <code>解码、编码转码复用、流式、过滤</code> 和播放几乎任何机器创建的东西（如视频转码、剪辑、提取、合并）等。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbmdxdWFudC5vcmcv\">pngquant</span></strong></td>\n<td><strong>压缩 PNG 图像文件的工具，同时保持图像质量和透明度。 <code>pngquant</code>  提供命令行接口和库，可轻松集成到各种应用程序和脚本中。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cC1wcm94eS1taWRkbGV3YXJl\">http-proxy-middleware</span></strong></td>\n<td><strong>代理中间件， <code>用于将特定的请求进行转发</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWltZQ==\">mime</span></strong></td>\n<td><strong>用于根据文件或路径后缀， <code>得到对应的mime类型</code> 。</strong></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW52YXJpYW50\">invariant</span></td>\n<td>类型断言函数，不满足给定条件时抛出错误</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "三方库",
                "三方库"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/12/vue-router/",
            "url": "https://dmqweb.cn/2024/04/12/vue-router/",
            "title": "vue-router",
            "date_published": "2024-04-12T07:01:09.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n<h1 id=\"vue-router源码\"><a class=\"anchor\" href=\"#vue-router源码\">#</a> vue-router 源码</h1>\n<h3 id=\"vue-router路由模式\"><a class=\"anchor\" href=\"#vue-router路由模式\">#</a> vue-router 路由模式</h3>\n<h4 id=\"hash模式\"><a class=\"anchor\" href=\"#hash模式\">#</a> hash 模式（#）</h4>\n<p>SEO 不友好，资源不变，不会刷新。</p>\n<h4 id=\"history模式\"><a class=\"anchor\" href=\"#history模式\">#</a> history 模式（/）</h4>\n<p>SEO 友好，重新请求资源。</p>\n<p><strong>history 模式发布时出现的问题：</strong></p>\n<p>发布到服务器上时，点击路由跳转正常但是刷新后路由跳转 404，出现的原因刷新后跳转的根路径并不是当前项目的 index.html 导致资源路径不匹配单页面应用路由，采取的方法是<strong>每次请求资源都 fallback 到 index.html 文件</strong>，可以使用静态资源服务器的支持。（例如在 nginx 中 location 字段添加：<strong>try_files 字段</strong>）</p>\n<h3 id=\"vue-router内部处理\"><a class=\"anchor\" href=\"#vue-router内部处理\">#</a> vue-router 内部处理</h3>\n<h6 id=\"vue-router主体架构\"><a class=\"anchor\" href=\"#vue-router主体架构\">#</a> vue-router 主体架构：</h6>\n<p>当使用 vue.use (vue-router) 时，会执行 vue-router 导出的实例中的 install 方法，将 app 作为参数传入，内部会用 app.component 注册两个全局组件 RouterLink 和 RouterView，接着在 app.config.globalProperties 上设置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性，通过 app.provide 将 router 和 currentRoute 传递下去。</p>\n<h6 id=\"路由变化但不跳转原理\"><a class=\"anchor\" href=\"#路由变化但不跳转原理\">#</a> 路由变化但不跳转原理：</h6>\n<p>history.pushState 和 history.replaceState 方法，会改变地址栏的但不进行跳转。</p>\n<h6 id=\"history模式实现路由匹配\"><a class=\"anchor\" href=\"#history模式实现路由匹配\">#</a> history 模式实现路由匹配：</h6>\n<p>内部的 mather 函数会将 routes 中的 path 路径转为正则表达式，与当前的路由进行匹配，匹配成功就将对应的组件添加到 router-view 中。</p>\n<h6 id=\"router-view实现路由展示\"><a class=\"anchor\" href=\"#router-view实现路由展示\">#</a> router-view 实现路由展示：</h6>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> from vue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/Home'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 导入默认的全部组件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> routerView <span class=\"token operator\">=</span>  <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"routerView\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> slots <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">//return h ('div',&#123;        // 不使用组件默认的方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">//     class:'routerViewClass',</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//     onClick()&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">//         // 处理点击 逻辑</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">//     &#125;,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// &#125;,slots.default())</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Home<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\">// 处理对应的逻辑</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routerView<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>路由 provide 一个 currentRoute（shallowRef 对象）将当前的路由路径捆绑在一起，传递下去，当 currentRoute 发生变化的时候就会改变相应的 router-view。</p>\n",
            "tags": [
                "vue-router原理",
                "vue-router原理"
            ]
        }
    ]
}