{
    "version": "https://jsonfeed.org/version/1",
    "title": "杜明清的个人博客",
    "subtitle": "👻欢迎一起交流学习👻",
    "icon": "https://dmqweb.cn/images/favicon.ico",
    "description": "",
    "home_page_url": "https://dmqweb.cn",
    "items": [
        {
            "id": "https://dmqweb.cn/2024/05/21/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/",
            "url": "https://dmqweb.cn/2024/05/21/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/",
            "title": "桌面端开发",
            "date_published": "2024-05-21T11:35:27.000Z",
            "content_html": "<h1 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h1>\n<p>Electron 和 Tauri 两种桌面端优势对比：</p>\n<ul>\n<li>生态：Electron &gt; Tauri</li>\n<li>性能：Electron &gt; Tauri （Tauri 底层基于 Tust，并不具备 Electron 的多进程模型）</li>\n<li>扩展性：Electron &gt; Tauri（Tauri 基于 Web 技术栈，会受到浏览器的限制，而 Electron 可以直接访问操作系统的 API）</li>\n<li>打包：Tauri &gt; Electron（Tauri 基于 Rust 实现，打包产物更小）</li>\n<li>安全性：Tauri &gt; Electron（Tauri 打包生成二进制文件，而 Electron 会将 node_modules 打包进去，并且没有加密）</li>\n</ul>\n",
            "tags": [
                "桌面端开发",
                "桌面端开发",
                "electron",
                "tauri"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E/",
            "url": "https://dmqweb.cn/2024/05/21/v8%E5%BC%95%E6%93%8E/",
            "title": "v8引擎执行过程",
            "date_published": "2024-05-21T10:36:10.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n<h1 id=\"v8引擎介绍\"><a class=\"anchor\" href=\"#v8引擎介绍\">#</a> v8 引擎介绍</h1>\n<p>Blink 内核用于解析 HTML、DOM、CSS 渲染、嵌入了 v8 引擎用于解析 Javascript</p>\n<p>V8 是谷歌的开源高性能 JavaScript 和 WebAssembly 引擎，用 C++ 编写。它被用于 Chrome 和 Node.js 等。<strong>用于解析并执行 JavaScript 代码。</strong></p>\n<h1 id=\"执行过程\"><a class=\"anchor\" href=\"#执行过程\">#</a> 执行过程</h1>\n<ul>\n<li>初始化运行环境\n<ul>\n<li>堆栈空间</li>\n<li>全局执行上下文</li>\n<li>全局作用域</li>\n<li>事件循环系统</li>\n</ul>\n</li>\n<li>利用 Scanner 扫描器将输入的代码词法分析成 tokens\n<ul>\n<li>分析的结果就是一个个的 tokens 对象组成的数组</li>\n<li>分析的过程利用了有限自动状态机的概念</li>\n</ul>\n</li>\n<li>利用 parser 解析器将 tokens 转化为抽象语法树\n<ul>\n<li>根据分析 tokens 构造出一种树形关系结构</li>\n<li><strong>预解析</strong>：在 JS 代码执行之前对代码进行可选的预处理，用于提高执行效率</li>\n<li><strong>延迟解析</strong>：只有代码执行到的部分才会去解析，节省了不必要的时间和开销，提高了 JavaScript 的执行效率，其中 vite 脚手架就是利用了这个优点（还有 esbuild 打包快的优势），提高了效率。</li>\n</ul>\n</li>\n<li>利用 ignition 解释器将 AST（抽象语法树）转为字节码（不直接转为机器码？）\n<ul>\n<li>字节码跨平台能力强</li>\n<li>字节码更快的加载和解析执行</li>\n<li>动态优化易操作</li>\n<li>代码安全性</li>\n</ul>\n</li>\n<li>利用 TurboFan 编译器将字节码转为 CPU 和 ARM 识别的机器码</li>\n</ul>\n<h1 id=\"v8中的对象结构\"><a class=\"anchor\" href=\"#v8中的对象结构\">#</a> v8 中的对象结构</h1>\n<h3 id=\"常规属性和排序属性\"><a class=\"anchor\" href=\"#常规属性和排序属性\">#</a> 常规属性和排序属性</h3>\n<ul>\n<li>v8 中的对象主要分为三个指针构成的，分别是：隐藏类、常规属性和排序属性。</li>\n<li>对象的属性数字会从小到大排列，字符串会按照原创建顺序</li>\n<li>对象中数字属性被称为排序属性，字符串属性被称为常规属性</li>\n</ul>\n<h3 id=\"快属性和慢属性\"><a class=\"anchor\" href=\"#快属性和慢属性\">#</a> 快属性和慢属性</h3>\n<ul>\n<li>JS 对象很多属性是在原型链上进行查找，这样就会很慢，v8 将部分常规属性（10 个）直接存储到对象本身（对象内属性），以提高属性的查询效率。</li>\n<li>快属性容量是 10 个。</li>\n</ul>\n<h3 id=\"封装-继承-多态\"><a class=\"anchor\" href=\"#封装-继承-多态\">#</a> 封装、继承、多态</h3>\n<ul>\n<li>封装就是将抽象出来的数据和对数据的操作封装在一起，数据在内部被保护，程序其他部分只有通过成员才能对数据进行操作</li>\n<li>继承：有原型链继承、寄生继承和 call、apply 借用法继承。</li>\n<li>多态就是函数重载：同一个函数可以根据调用的情况（参数类型和数量等）来进行不同的操作。</li>\n</ul>\n",
            "tags": [
                "v8引擎",
                "v8引擎",
                "底层原理"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/",
            "url": "https://dmqweb.cn/2024/05/17/%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/",
            "title": "渲染模式",
            "date_published": "2024-05-17T09:18:14.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjMzNjk5NjgwNDkwNzk5MTYyLw==\">推荐一篇掘金大佬的文章，写的很详细</span></p>\n",
            "tags": [
                "渲染模式",
                "渲染模式"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/",
            "url": "https://dmqweb.cn/2024/05/17/Blob%E5%92%8CFile/",
            "title": "Blob、File和FileReader",
            "date_published": "2024-05-17T02:22:13.000Z",
            "content_html": "<h1 id=\"blob\"><a class=\"anchor\" href=\"#blob\">#</a> Blob</h1>\n<p>Blob 的全称为：binary larget object（二进制大对象），blob 的本质是一个 js 对象，里面可以存储大量的二进制编码的数据。</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点：</h3>\n<ul>\n<li>不可修改</li>\n<li>只能使用 FileReader 读取内容</li>\n<li>存储大量二进制数据的 js 对象</li>\n</ul>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用：</h3>\n<p><strong>new Blob(array,options)</strong></p>\n<ul>\n<li>\n<p>array 是由 ArrayBuffer、ArrayBufferView、Blob 和 DOMString 对象构成的，将对被放进 blob 中</p>\n</li>\n<li>\n<p>options 配置项有：</p>\n<ul>\n<li>\n<p>type：默认值为：” “，表示将会被放入到 blob 中的数组内容的 MIME 类型。</p>\n</li>\n<li>\n<p>endings：默认值为：”transparent“，用于指定包含行结束符 \\n 的字符串如何被写入，不常用。</p>\n<table>\n<thead>\n<tr>\n<th>MIME 类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text/plain</td>\n<td>纯文本文档</td>\n</tr>\n<tr>\n<td>text/html</td>\n<td>HTML 文档</td>\n</tr>\n<tr>\n<td>text/javascript</td>\n<td>JavaScript 文档</td>\n</tr>\n<tr>\n<td>text/css</td>\n<td>CSS 文件</td>\n</tr>\n<tr>\n<td>application/json</td>\n<td>JSON 文件</td>\n</tr>\n<tr>\n<td>application/pdf</td>\n<td>pdf 文件</td>\n</tr>\n<tr>\n<td>application/xml</td>\n<td>XML 文件</td>\n</tr>\n<tr>\n<td>image/jpeg</td>\n<td>JPEG 文件</td>\n</tr>\n<tr>\n<td>image/png</td>\n<td>PNG 文件</td>\n</tr>\n<tr>\n<td>image/gif</td>\n<td>GIF 文件</td>\n</tr>\n<tr>\n<td>image/svg+xml</td>\n<td>SVG+XML 文件</td>\n</tr>\n<tr>\n<td>audio/mpeg</td>\n<td>MP3 文件</td>\n</tr>\n<tr>\n<td>video/mpeg</td>\n<td>MP4 文件</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"分片\"><a class=\"anchor\" href=\"#分片\">#</a> 分片：</h3>\n<p>Blob 对象内置了 slice () 方法用来将 blob 对象分片</p>\n<p>其有三个参数：</p>\n<p>start：设置切片的起点，即切片开始位置。默认值为 0，这意味着切片应该从第一个字节开始；</p>\n<p>end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为 blob.size；</p>\n<p>contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> blob1 <span class=\"token operator\">=</span> blob<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取\"><a class=\"anchor\" href=\"#读取\">#</a> 读取：</h3>\n<p>blob 对象只能通过 FileReader 读取内容。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"file\"><a class=\"anchor\" href=\"#file\">#</a> File</h1>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h3>\n<p>File 对象是特殊的 Blob 对象。是基于 Blob 对象的进一步封装，js 中主要有两种方式获得 FIle 对象：</p>\n<ol>\n<li>input 元素选择后返回的 FileList 对象（通过 change 事件的 event.target.files 获取）</li>\n<li>文件拖放操作生成的 DataTransfer 对象（通过 ondrop 事件的 event.dataTransfer.files 获取）</li>\n</ol>\n<h1 id=\"filereader\"><a class=\"anchor\" href=\"#filereader\">#</a> FileReader</h1>\n<h3 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍：</h3>\n<p>FileReader 用于读取 Blob 对象（包含 File 对象）内容的方法，通过 result 属性获取。</p>\n<ul>\n<li>\n<p>readAsArrayBuffer 方法：读取为 ArrayBuffer</p>\n</li>\n<li>\n<p>readAsDataURL 方法：读取为 data:URL 的 Base64 字符串表示文件内容</p>\n</li>\n<li>\n<p>readAsText 方法：读取为原始 text 文件内容</p>\n</li>\n<li>\n<p>readAsBinaryString 方法：读取为原始二进制数据</p>\n<p>但是直接使用此方法还是会得到原始的文本内容，因为二进制数据需要使用 ArrayBuffer 对象来进行处理。</p>\n</li>\n</ul>\n<h1 id=\"arraybuffer\"><a class=\"anchor\" href=\"#arraybuffer\">#</a> ArrayBuffer</h1>\n<h3 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍：</h3>\n<p>ArrayBuffer 可以理解为一个特殊的数组，其本身是一个黑盒，不能直接读写所存储的数据，需要借助视图对象来读写。它只是一个用于存储二进制数据的缓冲区，创建时只能传一个空间大小 biteLength。</p>\n<p><strong>读写 ArrayBuffer 的方式：</strong></p>\n<ol>\n<li>TypedArray</li>\n<li>DataView</li>\n<li>TextDecoder</li>\n<li>用 Blob 存储，然后用 FileReader 读写</li>\n</ol>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h3>\n<p>ArrayBuffer 提供了一个 slice 方法用于切片。参数为：开始位置，结束位置和解析类型。</p>\n<h3 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用：</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"typedarray\"><a class=\"anchor\" href=\"#typedarray\">#</a> TypedArray</h1>\n<p>TypedArray 只是一个概念，提供了一种机制来解读 ArrayBuffer 中的数据（相当于一个视图，将 ArrayBuffer 中的数据进行展示和操作），实际上是那九个类型对象（每个类型对应一个特定的数据类型和大小）：</p>\n<ul>\n<li><code>Int8Array</code> ：8 位有符号整数</li>\n<li><code>Uint8Array</code> ：8 位无符号整数</li>\n<li><code>Int16Array</code> ：16 位有符号整数</li>\n<li><code>Uint16Array</code> ：16 位无符号整数</li>\n<li><code>Int32Array</code> ：32 位有符号整数</li>\n<li><code>Uint32Array</code> ：32 位无符号整数</li>\n<li><code>Float32Array</code> ：32 位浮点数</li>\n<li><code>Float64Array</code> ：64 位浮点数</li>\n</ul>\n<h3 id=\"使用-3\"><a class=\"anchor\" href=\"#使用-3\">#</a> 使用：</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> sliceView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int8Array</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sliceView<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sliceView<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"dataview\"><a class=\"anchor\" href=\"#dataview\">#</a> DataView</h1>\n<h3 id=\"读取-2\"><a class=\"anchor\" href=\"#读取-2\">#</a> 读取：</h3>\n<p>DataView 数据视图可以用于读写 buffer,DataView 实例提供了许多方法来读取内存，他们呢的参数都是一个字节序号。表示开始读取的字节位置：</p>\n<ul>\n<li>getInt8：读取 1 个字节，返回一个 8 位整数</li>\n<li>getUint8：读取 1 个字节，返回一个无符号 8 位整数</li>\n<li>getInt16：读取 2 个字节，返回一个 16 位整数</li>\n<li>getUnit16：读取 2 个字节，返回一个无符号 16 位整数</li>\n<li>getInt32：读取 4 个字节，返回一个 32 位整数</li>\n<li>getUnit32：读取 4 个字节，返回一个无符号 32 位整数</li>\n<li>getFloat32：读取 4 个字节，返回一个 32 位浮点数</li>\n<li>getUnit64：读取 8 个字节，返回一个 64 位浮点数</li>\n</ul>\n<h3 id=\"写入\"><a class=\"anchor\" href=\"#写入\">#</a> 写入：</h3>\n<p>DataView 实例提供以下方法写入内存，他们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：</p>\n<ul>\n<li>setInt8：写入 1 个字节的 8 位整数</li>\n<li>setUint8：写入 1 个字节的 8 位无符号整数</li>\n<li>setInt16：写入 2 个字节的 16 位整数</li>\n<li>setUint16：写入 2 个字节的 16 位无符号整数</li>\n<li>setInt32：写入 4 个字节的 32 位整数</li>\n<li>setUnit32：写入 4 个字节的 32 位无符号整数</li>\n<li>setFloat32：写入 4 个字节的 32 位浮点数</li>\n<li>setFloat64：写入 8 个自己的 64 位浮点数</li>\n</ul>\n<h1 id=\"object-url\"><a class=\"anchor\" href=\"#object-url\">#</a> Object URL</h1>\n<p>Object URL 是一个用于表示 File Object 或者 Blob Object 的 URL，可以将 **Blob 对象（包括 File 对象）** 变为一个 URL 地址。</p>\n<h3 id=\"使用-4\"><a class=\"anchor\" href=\"#使用-4\">#</a> 使用：</h3>\n<p>使用 URL.createObjectURL 来创建。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'你好世界'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"base64编码\"><a class=\"anchor\" href=\"#base64编码\">#</a> base64 编码</h1>\n<h3 id=\"介绍-4\"><a class=\"anchor\" href=\"#介绍-4\">#</a> 介绍：</h3>\n<p>base64 是一个保存二进制数据的工具，将多种形式的二进制数据或其构成的文件<strong>以 ASCII 的形式保存</strong>，因为很多地方不支持直接的二进制文件保存或呈现，比如可以将图片直接转换成 base64 码嵌入 HTML 文档中，而避免使用网络 http 加载图片。另外，将数据编码为 base64 进行传输，然后解码获得数据，可以一定程度上保证数据的完整并且不用在传输过程中修改这些数据，避免在传输过程中可能出现的问题；</p>\n<h3 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成：</h3>\n<p><code>A-Z a-z 0-9 + /</code>  共 64 个字符组成；</p>\n<h3 id=\"使用-5\"><a class=\"anchor\" href=\"#使用-5\">#</a> 使用：</h3>\n<p>JS 中有两个函数用于 base64 格式（ASCII 码）的转换:</p>\n<ul>\n<li>\n<p>btoa ()：编码（Binary To ASCII  二进制转 ASCII）</p>\n<p>该函数用于将二进制转为 Base64 字符串（ASCII 码）</p>\n</li>\n<li>\n<p>atob ()：解码（ASCII To Binary  ASCII 码转二进制）</p>\n<p>该函数用于将 Base64 字符串（ASCII 码）解码为二进制</p>\n</li>\n</ul>\n<h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h3>\n<p>btoa 和 atob 方法有个弊端就是只能处理拉丁字符集内的字符，其不包括中文或非西欧语言的字符（<strong>只能处理单字节字符</strong>）。要处理多字节字符需要使用 TextEncoder API 将字符串转为 Uint8Array，然后手动将这些字节转为一个字符串（String.fromCharCode）。</p>\n<h1 id=\"textencoder\"><a class=\"anchor\" href=\"#textencoder\">#</a> TextEncoder</h1>\n<h3 id=\"介绍-5\"><a class=\"anchor\" href=\"#介绍-5\">#</a> 介绍：</h3>\n<p>TextEncoder 构造函数创建一个编码器，encode 方法用于将字符串编码为一个 UTF-8 编码文本的 Uint8Array 视图。</p>\n<h3 id=\"使用-6\"><a class=\"anchor\" href=\"#使用-6\">#</a> 使用：</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Blob",
                "Blob",
                "FileReader"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/esbuild/",
            "url": "https://dmqweb.cn/2024/05/17/esbuild/",
            "title": "esbuild",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<p>关于打包工具：esbuild、webpack 和 rollup 三者的介绍推荐<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI0MDk4NDIyOTM5MjU0ODIx\">这里</span>：</p>\n<p>简单来说就是 esbuild 打包更快；rollup 打包产物更纯净、体积更小，但不支持热更新；webpack 功能更全，生态更完善，支持文件类型更多。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>Esbuild 是一个类 webpack 的打包工具，速度是 webpack 的几十倍。其底层基于 go 语言进行编写，不使用 AST，优化了构建流程。js 是单线程串行，esbuild 是新开了一个进程，使用多线程并行，充分发挥了多核的优势。</p>\n<h1 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h1>\n<p>esbuild 最显著的作用就是：快。它也是 vite 和 snowpack 底层的打包工具。同时也可以将 esbuild 打包工具集成到 webpack 中（使用 plugin）。之所以 esbuild 没有流行起来是因为它绕过了 AST，而直接进行构建，使没有很好的过渡到基于 babel-loader 这样通过 AST 进行打包的上层工具中。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> esbuild <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'esbuild'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 利用 esbuild 生成文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">buildSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'out.js'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 利用 esbuild 处理 jsx 语法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">transformSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>利用esbuild处理jsx语法&lt;/div>'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">jsxFragment</span><span class=\"token operator\">:</span><span class=\"token string\">'Fragment'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span><span class=\"token string\">'jsx'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 利用 esbuld 压缩代码体积</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">transformSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const a = \"你好世界\"'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * esbuild 内置了一些 loader，使用时会根据文件后缀自动执行 loader，也可以手动确定 loader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * 支持：js,jsx,ts,tsx,css,text,binary,dataurl,file</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">buildSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token literal-property property\">bundle</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'.js'</span><span class=\"token operator\">:</span><span class=\"token string\">'jsx'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认使用 js loader，手动改为 jsx-loader</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'out.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * 使用 esbuild 启动一个 web server 用于调试（热更新）</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>esbuild<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token literal-property property\">entryPoints</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token literal-property property\">bundle</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token literal-property property\">outfile</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    serve<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "esbuild",
                "esbuild",
                "打包工具"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "url": "https://dmqweb.cn/2024/05/17/eslint%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "title": "eslint源码",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<h1 id=\"eslint知识点\"><a class=\"anchor\" href=\"#eslint知识点\">#</a> eslint 知识点</h1>\n<h3 id=\"extends与plugins\"><a class=\"anchor\" href=\"#extends与plugins\">#</a> extends 与 plugins</h3>\n<ol>\n<li>plugins 本质是为了加强 eslint 的扩展性，使我们可以直接使用别人写好的 eslint 规则，方便快速用于项目中。</li>\n<li>官方规定 npm 包的扩展必须以 eslint-config - 开头，插件以 eslint-plugin - 开头，在使用过程中可以省略这个开头。</li>\n<li>eslint-config - 文件是我们共享的一些配置文件，里面就是一个 JS 对象，其中包含一些配置信息，而 eslint-plugin - 文件是我们自定义的集合规则，可以导入和使用。</li>\n<li>一个插件能带来：\n<ul>\n<li>额外的规则，如 <code>&#123;&quot;rules&quot;: &#123;&quot;react/boolean-prop-naming&quot;: &quot;warning&quot;&#125;&#125;</code> 。</li>\n<li>环境，如 <code>&#123;&quot;env&quot;: &#123;&quot;jest/global&quot;: true&#125;&#125;</code> 。</li>\n<li>配置，如 <code>&#123;&quot;extends&quot;: [&quot;plugin:react/recommended&quot;]&#125;</code> 。</li>\n<li>预处理器，如 <code>&#123;&quot;process&quot;: &quot;a-plugin/a-processor&quot;&#125;</code> 。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"eslint配置大全\"><a class=\"anchor\" href=\"#eslint配置大全\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODU5NDg4MjkyODcx\">eslint 配置大全</span></h1>\n<h1 id=\"eslint源码分析\"><a class=\"anchor\" href=\"#eslint源码分析\">#</a> eslint 源码分析</h1>\n",
            "tags": [
                "eslint",
                "eslint",
                "源码"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/",
            "url": "https://dmqweb.cn/2024/05/17/whistle%E4%BD%BF%E7%94%A8/",
            "title": "whistle抓包",
            "date_published": "2024-05-17T01:14:12.000Z",
            "content_html": "<h1 id=\"whistle简单使用\"><a class=\"anchor\" href=\"#whistle简单使用\">#</a> whistle 简单使用</h1>\n<h3 id=\"whistle安装启动\"><a class=\"anchor\" href=\"#whistle安装启动\">#</a> whistle 安装启动</h3>\n<p>安装：npm i -g whistle</p>\n<p>使用：w2 start</p>\n<p>访问：访问对应的页面</p>\n<p>作用：</p>\n<ul>\n<li>任何的链接都会经过工具转发一下，并记录下来</li>\n<li>使用前需要配置代理到 whistle 服务的地址和端口上（设置代理如下）</li>\n</ul>\n<h3 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h3>\n<p>设置代理：</p>\n<ul>\n<li>手机端省略</li>\n<li>电脑端：\n<ul>\n<li>网络偏好设置 --- 高级 --- 代理 --- 网页代理、安全网页代理</li>\n<li>配置代理的 ip 地址和端口号（8899）</li>\n</ul>\n</li>\n</ul>\n<p>确认证书：</p>\n<p>一般会自动下载，也可以打开 8899 端口找到证书下载并确认信任</p>\n<p><strong>查看抓包情况和设置代理转发：</strong></p>\n<p>打开 127.0.0.1:8899 端口进行设置</p>\n<h1 id=\"whistle高级\"><a class=\"anchor\" href=\"#whistle高级\">#</a> whistle 高级</h1>\n<h3 id=\"mock数据\"><a class=\"anchor\" href=\"#mock数据\">#</a> mock 数据</h3>\n<p>设置线上地址转发到本地 json 文件（使用 file 路径），模拟请求数据。</p>\n<h3 id=\"部分文件请求转发重要\"><a class=\"anchor\" href=\"#部分文件请求转发重要\">#</a> 部分文件请求转发（重要）</h3>\n<p>例如线上环境有某个文件报错，生产环境无法复现，可以将该文件地址转发到本地的 js 文件（使用 file 路径），方便进行调试，提高调试效率。</p>\n<h3 id=\"请求转发\"><a class=\"anchor\" href=\"#请求转发\">#</a> 请求转发</h3>\n<p>可以作为跨域的一种方案，将本地的请求转发到线上的路径，这样就不会发生跨域问题</p>\n<h3 id=\"注入html-css和-js\"><a class=\"anchor\" href=\"#注入html-css和-js\">#</a> 注入 html、css 和 js</h3>\n<p>whistle 会自动根据响应内容的类型，判断是否注入相应的文本以及如何注入（是否用标签包裹）</p>\n<p>例如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//www.baidu.com  css<span class=\"token punctuation\">:</span>///Users/dmq/Desktop/test.css</pre></td></tr></table></figure><p>这将会在百度的官网注入自定义的 css 样式。</p>\n<h6 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例：</h6>\n<p>向百度网站注入 vconsole.js 源码，方便调试打印日志。</p>\n<ol>\n<li>\n<p>下载 vconsole 到本地或者直接复制源码到 whistle 中的 values 中</p>\n</li>\n<li>\n<p>本地 js 文件创建 VConsole 实例，或者直接在 whistle 的 values 中创建 js 文件，文件中创建 vconsole 实例。</p>\n</li>\n<li>\n<p>在 rules 中向百度网站注入两个 js 文件（以 whistle 中配置 values 为示例）</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>www.baidu.com  jsPrepend<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">&#123;</span>vConsole.min.js<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#引入源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>www.baidu.com  jsPrepend<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">&#123;</span>vconsole.js<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#引入实例化 js</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>www.baidu.com  log<span class=\"token punctuation\">:</span>//  <span class=\"token comment\">#在 whistle 中也打印 log</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"同步抓包日志\"><a class=\"anchor\" href=\"#同步抓包日志\">#</a> 同步抓包日志</h3>\n<p>在 rules 中配置网站的输出，可以将抓包的 log 日志同步到 whistle 中的 log 面板，配置例如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>www.baidu.com   log<span class=\"token punctuation\">:</span>// <span class=\"token comment\">#同步日志</span></pre></td></tr></table></figure><h3 id=\"解决跨域问题\"><a class=\"anchor\" href=\"#解决跨域问题\">#</a> 解决跨域问题</h3>\n<p>可以单独设置网站允许跨域访问，例如在 rules 中配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>5500/list   resCors<span class=\"token punctuation\">:</span>//*  <span class=\"token comment\">#表示该网站允许跨域访问</span></pre></td></tr></table></figure><p>或者使用前端转发代理来处理跨域：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/list   https<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>5500/list  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#将请求的网址代理到同域名同端口的网址，就不会发生跨域。</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NTc3NjU1L2FydGljbGUvZGV0YWlscy8xMTkyODMwMjg=\">本文学习自 b 站，原文档地址</span></p>\n",
            "tags": [
                "whistle",
                "whistle",
                "抓包工具"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/",
            "url": "https://dmqweb.cn/2024/05/11/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/",
            "title": "性能指标",
            "date_published": "2024-05-11T01:14:12.000Z",
            "content_html": "<h1 id=\"常见浏览器性能指标\"><a class=\"anchor\" href=\"#常见浏览器性能指标\">#</a> 常见浏览器性能指标</h1>\n<h1 id=\"ttfbtime-to-first-byte\"><a class=\"anchor\" href=\"#ttfbtime-to-first-byte\">#</a> TTFB(Time To First Byte)</h1>\n<p>发出页面请求到接收到应答数据第一个字节的时间总和，包含了：</p>\n<ol>\n<li>DNS 解析时间</li>\n<li>TCP 链接时间</li>\n<li>发送 HTTP 请求时间</li>\n<li>获得响应消息第一个字节的时间。</li>\n</ol>\n<h1 id=\"fpfirst-paint\"><a class=\"anchor\" href=\"#fpfirst-paint\">#</a> <strong>FP</strong>（First Paint）</h1>\n<p>首次绘制时间，这个指标用于记录页面第一次绘制像素的时间。</p>\n<h1 id=\"fcpfirst-contentful-paint\"><a class=\"anchor\" href=\"#fcpfirst-contentful-paint\">#</a> <strong>FCP</strong>（First Contentful Paint）</h1>\n<p>首次内容绘制时间，这个指标用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。</p>\n<h1 id=\"lcplargest-contentful-paint\"><a class=\"anchor\" href=\"#lcplargest-contentful-paint\">#</a> <strong>LCP</strong>（Largest Contentful Paint）</h1>\n<p>最大内容绘制时间，用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。</p>\n<h1 id=\"clscumulative-layout-shift\"><a class=\"anchor\" href=\"#clscumulative-layout-shift\">#</a> <strong>CLS</strong>（Cumulative Layout Shift）</h1>\n<p>累计位移偏移，记录了页面上非预期的位移波动。计算方式为：位移影响的面积 * 位移距离。</p>\n<h1 id=\"ttitime-to-interactive\"><a class=\"anchor\" href=\"#ttitime-to-interactive\">#</a> <strong>TTI</strong>（Time to Interactive）</h1>\n<p>首次可交互时间。这个指标计算过程略微复杂，它需要满足以下几个条件：</p>\n<ol>\n<li>从 FCP 指标后开始计算；</li>\n<li>持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求；</li>\n<li>往前回溯至 5 秒前的最后一个长任务结束的时间。</li>\n</ol>\n<h1 id=\"fidfirst-input-delay\"><a class=\"anchor\" href=\"#fidfirst-input-delay\">#</a> <strong>FID</strong>（First Input Delay）</h1>\n<p>首次输入延迟时间，记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。</p>\n<h1 id=\"tbttotal-blocking-time\"><a class=\"anchor\" href=\"#tbttotal-blocking-time\">#</a> <strong>TBT</strong>（Total Blocking Time）</h1>\n<p>阻塞总时间，记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。</p>\n",
            "tags": [
                "性能优化",
                "性能指标"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "url": "https://dmqweb.cn/2024/05/08/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "title": "函数重载",
            "date_published": "2024-05-08T14:35:51.000Z",
            "content_html": "<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<p>函数重载是指在编程语言中允许定义多个同名函数，但是他们的参数类型、参数个数或者返回类型不同，编译器或解析器会根据调用时提供的参数类型和个数来确定使用哪个函数</p>\n<h1 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h1>\n<p>函数重载的主要目的就是提高代码的可读性和灵活性，同时避免了为不同功能编写不同的函数名导致的变量命名冲突和混乱。</p>\n<h1 id=\"实现函数重载\"><a class=\"anchor\" href=\"#实现函数重载\">#</a> 实现函数重载</h1>\n<h2 id=\"ts\"><a class=\"anchor\" href=\"#ts\">#</a> ts</h2>\n<p>ts 中进行函数重载其实就是根据型参数组的个数和对变量进行 typeof 检测，然后根据不同的情况进行分支处理</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数重载的声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数签名 1：接受数字数组并返回数字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数签名 2：接受可变数量的数字参数并返回数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 函数实现</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 实际函数实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果传入的是数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型断言为数字数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果传入的是多个数字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出错误，不支持的参数类型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 调用函数重载</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 3</span></pre></td></tr></table></figure><h2 id=\"js\"><a class=\"anchor\" href=\"#js\">#</a> js</h2>\n<p>js 中也可以通过 typeof 和形参数组进行函数重载，不过当然还有更好的做法，jQuery 作者常用如下实现函数重载（进行重载之前要调用一次函数）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> old <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    object<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> old <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">old</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> searcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将对象中对应属性的重载方法全部存储起来</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span>searcher<span class=\"token punctuation\">,</span><span class=\"token string\">'getUsers'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询所有用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span>searcher<span class=\"token punctuation\">,</span><span class=\"token string\">'getUsers'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意默认参数的形参数量不与计数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照姓名查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>searcher<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另一种实现方法就是使用映射：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createOverload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> fnMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> fnMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'没有找到对应的实现'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    overload<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addImpl</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'最后一个参数必须是函数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fnMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> overload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> getUsers <span class=\"token operator\">=</span> <span class=\"token function\">createOverload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询所有用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照页码和数量查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照页码和数量查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照姓名查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>getUsers<span class=\"token punctuation\">.</span><span class=\"token function\">addImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按照性别查询用户'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'asfsdf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结一下实现思路，通过 createOverload 函数调用可以返回一个重载后的函数，createOverload 函数中创建了一个 map，map 中将参数类型和个数与对应的函数相匹配，返回的重载函数在调用时会根据参数的类型去 map 中寻找对应的函数，通过 apply 绑定 this 作用域和参数执行即可。</p>\n",
            "tags": [
                "JS",
                "JS,函数重载"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/05/07/miniwebpack/",
            "url": "https://dmqweb.cn/2024/05/07/miniwebpack/",
            "title": "实现miniwebpack",
            "date_published": "2024-05-06T22:16:30.000Z",
            "content_html": "<h1 id=\"前置知识\"><a class=\"anchor\" href=\"#前置知识\">#</a> 前置知识</h1>\n<p>我们都知道 webpack 是基于 babel 进行语法转换的，因此我们需要提前了解一些 babel 的使用方法：</p>\n<ul>\n<li>@babel/parser 模块：用于将 js 代码转为抽象语法树</li>\n<li>@babel/traverse 模块：用于遍历和操作抽象语法树（处理导入的模块）</li>\n<li>@babel/core 模块：babel 的核心模块，用于将抽象语法树转换为代码信息对象（包含重要的 code 属性，表示转换后生成的代码）</li>\n<li>@babel/preset-env 模块：babel 中的一个预设，可以在 babel.transformFromAst 中第三个参数中 presets 字段传入，可以根据当前环境将代码转成相应的兼容版本。</li>\n</ul>\n<h1 id=\"流程图\"><a class=\"anchor\" href=\"#流程图\">#</a> 流程图</h1>\n<p><img data-src=\"/images/Snipaste_2024-05-07_07-23-59.jpg\" alt=\"miniwebpack\" /></p>\n<h1 id=\"开始编码\"><a class=\"anchor\" href=\"#开始编码\">#</a> 开始编码</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// @babel/parser 用于将 js 代码转化为抽象语法树</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@babel/parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// @babel/traverse 用于遍历和操作抽象语法树</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> traverse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@babel/traverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Babel 的核心功能包含在 @babel/core 模块中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> babel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@babel/core\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 1. 分析依赖</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">parseModules</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> <span class=\"token function\">getModuleInfo</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> depsGraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">getDeps</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  temp<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleInfo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历全部模块信息数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    depsGraph<span class=\"token punctuation\">[</span>moduleInfo<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 映射 file 路径和 code、deps</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">deps</span><span class=\"token operator\">:</span> moduleInfo<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> moduleInfo<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> depsGraph<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDeps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>deps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getModuleInfo</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">getDeps</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getModuleInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 读取文件</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 转化为 AST</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 获取 import 导入的模块</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">ImportDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>node<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">const</span> dirname <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 获取标准化路径</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">const</span> absPath <span class=\"token operator\">=</span> <span class=\"token string\">\"./\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      deps<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> absPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">.</span><span class=\"token function\">transformFromAst</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 使用预设</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">const</span> moduleInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>file<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">return</span> moduleInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 2. 实现 bundle</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// 将模块转为引用路径和映射 code、deps 的对象</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">const</span> depsGraph <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseModules</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(function (graph) &#123;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    function require(file) &#123;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      function absRequire(realPath) &#123;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        return require(graph[file].deps[realPath]);  //递归调用获取返回值</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      var exports = &#123;&#125;;   //exports对象，用于存储模块的返回值信息</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      (function (require, exports, code) &#123;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        eval(code);   //eval函数用于执行字符串的js代码，传入require，exports和code</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      &#125;)(absRequire, exports, graph[file].code);</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      return exports;</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    require('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>file<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">');</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  &#125;)(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>depsGraph<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">);</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 将内容写入到输出文件 </span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./dist/bundle.js\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">//webpack 打包后的 js 文件就是一个立即执行函数，传入的参数是一个对象，对象的键是模块路径，值是模块函数代码</span></pre></td></tr></table></figure>",
            "tags": [
                "webpack",
                "webpack,miniwebpack"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "url": "https://dmqweb.cn/2024/04/30/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "title": "深拷贝",
            "date_published": "2024-04-30T09:34:25.000Z",
            "content_html": "<h1 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>我们知道在 javascript 中有八种数据类型：其中 number，string，undefined，null，boolean，symbol 和 bigint 为基本数据类型，而 object 为复杂数据类型</p>\n<h2 id=\"存储\"><a class=\"anchor\" href=\"#存储\">#</a> 存储</h2>\n<ul>\n<li>对于基本数据类型，其值直接存储于栈中。</li>\n<li>对于复杂数据类型，其值存储于堆中，而栈中只存储堆中的地址。这样做的好处有：\n<ul>\n<li>节省内存空间：存储在堆中的对象可以通过栈内的引用被访问和操作，意味着对象可以在不同的上下文中被共享和引用，从而节省内存。</li>\n<li>垃圾回收：堆内存中的对象不再被引用时，垃圾回收机制就会自动进行回收，从而避免了内存泄漏和资源浪费。</li>\n<li>动态分配内存：堆内存允许对象动态的增长和缩小，因此可以根据需要灵活地修改对象的结构和内容，使得 js 对象可以轻松地扩展以适应不同的应用需求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"深拷贝-2\"><a class=\"anchor\" href=\"#深拷贝-2\">#</a> <strong>深拷贝</strong></h2>\n<p>而深拷贝和浅拷贝就是对于复杂数据类型 object 来说的，当拷贝了对象的一层（即堆的引用）时，就称之为浅拷贝，当拷贝了对象的两层（堆中创建新的对象）时，就称之为深拷贝。</p>\n<h2 id=\"实现方案\"><a class=\"anchor\" href=\"#实现方案\">#</a> 实现方案</h2>\n<ol>\n<li>\n<p><code>JSON.parse(JSON.stringify(obj))</code> ，第一种方法是使用 JSON 方法，但是这个方法有一些限制：JSON 序列化时函数会被转为 null，正则表达式会被转为空对象。</p>\n</li>\n<li>\n<p>递归实现：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function deepCopy(obj, parent = null) &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    // 创建一个新对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    let result = &#123;&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    let keys = Object.keys(obj),</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        key = null,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        temp = null,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        _parent = parent;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    // 该字段有父级则需要追溯该字段的父级</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    while (_parent) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        // 如果该字段引用了它的父级则为循环引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        if (_parent.originalParent === obj) &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            // 循环引用直接返回同级的新对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            return _parent.currentParent;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        _parent = _parent.parent;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    for (let i = 0; i &lt; keys.length; i++) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        key = keys[i];</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        temp = obj[key];</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        // 如果字段的值也是一个对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        if (temp &amp;&amp; typeof temp === 'object') &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            // 递归执行深拷贝 将同级的待拷贝对象与新对象传递给 parent 方便追溯循环引用</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            result[key] = DeepCopy(temp, &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                originalParent: obj,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                currentParent: result,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                parent: parent</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        &#125; else &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            result[key] = temp;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    return result;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>MessageChannel 实现深克隆：由于浏览器不能将一个函数正确的复制到另一个线程中，所以不能支持函数的深克隆。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>port1<span class=\"token punctuation\">,</span> port2<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    port2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    port1<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">copy</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 异步的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> copyObj <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copyObj<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copyObj <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>H5 新增 structuredClone<br />\n 结构化克隆解决了该 JSON.stringify () 技术的许多（尽管不是全部）缺点。结构化克隆可以处理循环依赖，支持许多内置数据类型，并且更健壮且速度更快。<br />\n但是，它仍然有一些限制：</p>\n</li>\n</ol>\n<p>原型：如果你使用 structuredClone () 类实例，你将获得一个普通对象作为返回值，因为结构化克隆会丢弃对象的原型链。<br />\n函数：如果你的对象包含函数，它们将被悄悄丢弃。<br />\n不可克隆：有些值不是结构化可克隆的，尤其是 Error、 DOM 节点 和 Function。尝试这样做将引发 DataCloneError 异常。<br />\n属性描述符：setter 和 getter (以及类似元数据的功能) 不会被复制。例如，如果使用属性描述符将对象标记为只读，则复制后的对象中是可读写 (默认配置)。<br />\nRegExp：RegExp 对象的 lastIndex 字段不会保留。</p>\n<h1 id=\"浅拷贝实现方案\"><a class=\"anchor\" href=\"#浅拷贝实现方案\">#</a> 浅拷贝实现方案</h1>\n<ol>\n<li><code>Object.assign(&#123;&#125;,obj)</code> ，第二方法是使用 Object.assign ()</li>\n<li><code>const obj1 = &#123;...obj2&#125;</code> ，使用扩展运算符</li>\n</ol>\n",
            "tags": [
                "面试题",
                "深拷贝,面试题"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/",
            "url": "https://dmqweb.cn/2024/04/29/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/",
            "title": "前端监控",
            "date_published": "2024-04-29T00:36:51.000Z",
            "content_html": "<h1 id=\"前端监控\"><a class=\"anchor\" href=\"#前端监控\">#</a> 前端监控</h1>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p><strong>为什么要进行前端监控：</strong></p>\n<ul>\n<li>页面的访问行为，PV、UV、IP、PV 点击率、UV 点击率、停留时长</li>\n<li>用户的操作行为，模块曝光、</li>\n<li>模块点击</li>\n<li>页面的性能，首屏渲染时间、API 请求时间</li>\n<li>异常的监控，JS Error、API 异常、业务异常</li>\n<li>业务的监控，成交金额、每日消息数</li>\n</ul>\n<p><strong>常见的应用场景：</strong></p>\n<ul>\n<li>流量分析</li>\n</ul>\n<p><strong>常见的前端监控平台：</strong></p>\n<ul>\n<li>百度统计</li>\n<li>阿里云 ARMS</li>\n<li>友盟</li>\n</ul>\n<p><strong>前端监控的数据有什么作用</strong></p>\n<ul>\n<li>流量数据监控，如：PV、UV、点击率、页面停留时长等</li>\n<li>自定义事件监控，如：曝光事件、滑动事件、请求事件等</li>\n<li>交易指标监控，如：成交额、转化率等</li>\n<li>其他综合分析，如：用户画像分析、流量漏斗、销量预测等</li>\n</ul>\n<p><strong>前端监控的三个阶段</strong></p>\n<ul>\n<li>初阶：使用第三方平台，百度、友盟、阿里云 ARMS 等</li>\n<li>中阶：自研前端监控库，缺乏完整的监控体系</li>\n<li>高阶：自研前端监控平台，具备完整的监控体系</li>\n</ul>\n<h1 id=\"百度统计接入\"><a class=\"anchor\" href=\"#百度统计接入\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==\">百度统计接入</span></h1>\n<p><strong>流量分析免费，行为分析需要付费。</strong></p>\n<ol>\n<li>官网创建网站，设置域名和首页</li>\n<li>保证域名公共可读</li>\n<li>复制统计代码，添加到要跟踪的网页中（加入到 head 标签之前）</li>\n</ol>\n<p><strong>阿里云 ARM 和友盟分析方案较全，接入方案大致相同，但是当数据量较大时，有一定的成本，所以考虑自建前端统计系统。</strong></p>\n<p><strong>什么时候需要考虑自建前端监控系统？</strong></p>\n<ol>\n<li>不仅仅需要流量分析，还需要做行为分析</li>\n<li>自建成本小于或等于平台付费</li>\n<li>希望网站监控数据能存到自己数据库中，并且数据隐私化。</li>\n</ol>\n<h1 id=\"监控平台架构\"><a class=\"anchor\" href=\"#监控平台架构\">#</a> 监控平台架构</h1>\n<p><strong>前端监控平台的分层：</strong></p>\n<ul>\n<li>\n<p>前端监控 JSSDK</p>\n<ul>\n<li>采集</li>\n<li>上报\n<ul>\n<li>默认上报：页面 PV、性能等</li>\n<li>手动上报：页面操作行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>前端监控 API 和大数据仓库</p>\n<ul>\n<li>接收上报的数据</li>\n<li>数据仓库：MaxCompute\n<ul>\n<li>数据查询</li>\n<li>数据存储</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>前端监控数据可视化</p>\n<ul>\n<li>日志大数据清洗</li>\n<li>大数据回流 RDS（非结构化数据 =&gt; 结构化数据）</li>\n</ul>\n</li>\n</ul>\n<p><strong>监控平台架构说明：</strong></p>\n<p><img data-src=\"/images/Snipaste_2024-04-29_08-11-46.jpg\" alt=\"监控平台架构\" /></p>\n<h2 id=\"js库的开发\"><a class=\"anchor\" href=\"#js库的开发\">#</a> JS 库的开发</h2>\n<h4 id=\"js-sdk\"><a class=\"anchor\" href=\"#js-sdk\">#</a> JS  SDK</h4>\n<p>monitor.js：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'collect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'upload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>window<span class=\"token punctuation\">.</span>testMonitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    collect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    upload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上传到服务器，在需要监控的页面引入脚本。</p>\n<p><strong>一、直接引入脚本：</strong></p>\n<p>直接使用 script 标签引入在线地址。</p>\n<p><strong>二、异步加载（确保脚本加载完成后再使用 api）：</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://imooc.youbaobao.xyz/imooc-cli-monitor.js'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    body<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span>body<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    script<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMonitorScriptLoad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMonitorScriptLoad'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"pv埋点\"><a class=\"anchor\" href=\"#pv埋点\">#</a> PV 埋点</h4>\n<p><strong>一、分包便于代码书写和维护</strong></p>\n<p>假设将项目分为：index.js、collect.js 和 upload.js 三个 js 文件，分别用于整合、收集和上报。</p>\n<p><strong>二、设置页面基本信息</strong></p>\n<p>在 meta 标签中设置变量，假设为：test-app-id，在 body 标签中设置 test-page-id，此变量用于区分不同的站点。</p>\n<p><strong>三、collect.js</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> upload <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./upload'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 自定义一些钩子函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> beforeCreateParams<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> beforeUpload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> afterUpload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onError</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'收集开始...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 采集信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">customData<span class=\"token punctuation\">,</span>eventType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> appId <span class=\"token punctuation\">,</span> pageId <span class=\"token punctuation\">,</span> timeStamp <span class=\"token punctuation\">,</span> ua<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    beforeCreateParams <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">beforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">const</span> metaList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'meta'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> metaList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> metaList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test-app-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test-app-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            appId <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test-app-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pageId <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test-page-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>appId <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>pageId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    timeStamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ua <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">,</span>pageId<span class=\"token punctuation\">,</span>timeStamp<span class=\"token punctuation\">,</span>ua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">appId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>appId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;pageId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;timeStamp=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>timeStamp<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;ua=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ua<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beforeUpload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token function\">beforeUpload</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许定制数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 日志上报</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//upload (&#123;appId,pageId,timeStamp,ua&#125;)  不常用</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">let</span> url <span class=\"token punctuation\">,</span> uploadData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>customData<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \t<span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>eventType<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        url <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        uploadData <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        afterUpload <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">afterUpload</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>uploadData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 发送 PV 日志</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendPV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'PV'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 上报曝光埋点</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'EXP'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 注册钩子函数</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerBeforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    beforeCreateParams <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerBeforeUpload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    beforeUpload <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerAfterUpload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    afterUpload <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerOnError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    onError <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>四、upload.js</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用 image 标签跨域特性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> eventType <span class=\"token operator\">=</span> <span class=\"token string\">\"PV\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'&amp;eventType='</span> <span class=\"token operator\">+</span> eventType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token string\">'http://dmqtest.com?data='</span> <span class=\"token operator\">+</span> params <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span>src<span class=\"token punctuation\">,</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    img <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意内存释放</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> upload<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>五、index.js</strong></p>\n<pre><code>import &#123; sendPV , registerBeforeCreateParams,registerBeforeUpload,registerAfterUpload &#125; from './collect';\nimport &#123; upload &#125; from './upload';\nwindow.testMonitor = &#123;\n\tupload,\n\tsendPV,\n\tregisterBeforeCreateParams,\n\tregisterBeforeUpload,\n\tregisterAfterUpload,\n\tregisterOnError\n&#125;\n</code></pre>\n<p><strong>六、index.html</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">test-app-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://dmqtest.com/index.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">test-page-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \twindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t\twindow<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeforeCreateParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建之前'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerBrforeUpload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> params <span class=\"token operator\">+</span> <span class=\"token string\">'&amp;custom=1'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加自定义数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            window<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">registerAfterUpload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \t\twindow<span class=\"token punctuation\">.</span>testMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">sendPV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"曝光埋点\"><a class=\"anchor\" href=\"#曝光埋点\">#</a> 曝光埋点</h4>\n<p>曝光埋点记录元素由不可变到可变的过程，需要浏览器 IntersectionObserver 这个 API 的支持。</p>\n<p><strong>浏览器 5 种 Observer：</strong></p>\n<ul>\n<li>MutationObserver（用于监听 DOM 树的变化，一般为属性、子节点的增删改）</li>\n<li>IntersectionObserver（用于监听一个元素和可视区域相交部分的比列，然后在可视比列到达某一阈值的时候触发回调）</li>\n<li>PerformanceObserver（用于检测性能度量事件，在浏览器的性能事件轴记录下一个新的 performance entries 的时候将会被通知）</li>\n<li>ResizeObserver（用于监听 DOM 的变化，一般为节点的出现和隐藏，节点大小的变化）</li>\n<li>ReportingObserver（用于监听过时的 api、浏览器的一些干预行为的预告）</li>\n</ul>\n<p><strong>IntersectionObserver：</strong></p>\n<p><strong>方法：</strong></p>\n<ul>\n<li>\n<p>observe：开始监听一个目标元素</p>\n<p>语法：IntersectionObserver.disconnect ();</p>\n</li>\n<li>\n<p>disconnect：停止监听</p>\n<p>语法：IntersectionObserver.observe (targetElement);</p>\n</li>\n<li>\n<p>takeRecords: 返回所有观察目标的 IntersectionObserverEntry 对象数组。</p>\n<p>语法：intersectionObserverEntries = intersectionObserver.takeRecords ();</p>\n</li>\n<li>\n<p>unobserve: 使 IntersectionObserver 停止监听特定目标元素</p>\n<p>语法：IntersectionObserver.unobserve (targetElement);</p>\n</li>\n</ul>\n<p><strong>配置项：</strong></p>\n<ul>\n<li>targetElement：目标 DOM</li>\n<li>root：指定根目录，也就就是当目标元素显示在这个元素中时会触发监控回调</li>\n<li>rootMargin：类似于 css 的 margin，设定 root 元素的边框区域。</li>\n<li>threhold：阈值，决定了什么时候触发回调函数。</li>\n</ul>\n<p><strong>返回参数：</strong></p>\n<ul>\n<li>tIme: 可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li>\n<li>rootBounds: 是在根元素矩形区域的信息</li>\n<li>intersectionRatio: 目标元素的可见比例</li>\n<li>intersectionRect: 目标元素与根元素交叉区域的信息</li>\n<li>isIntersecting: 判断元素是否符合 options 中的可见条件</li>\n<li>boundingClientRect: 目标元素的矩形区域的信息</li>\n<li>target: 被观察的目标元素</li>\n</ul>\n<p><strong>upload.js 文件中添加：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//.... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报曝光埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'EXP'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 最后在 index.js 中暴露出去。</span></pre></td></tr></table></figure><p><strong>collect.js 文件中添加：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//.... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">collectAppear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> appearEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onAppear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> disappearEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onDisappear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> ob<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>testMonitorObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ob <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>testMonitorObserver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">+</span> <span class=\"token string\">'appear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>appearEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">+</span> <span class=\"token string\">'disappear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>disappearEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">let</span> obList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> appear <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[appear]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>appear<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            ob<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            obList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>appear<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    window<span class=\"token punctuation\">.</span>testMonitorObserver <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存起来防止重复</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    window<span class=\"token punctuation\">.</span>monitorObserverList <span class=\"token operator\">=</span> obList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>index.js 中使用：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//import 引入 collectAppear 函数。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">collectAppear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"点击埋点\"><a class=\"anchor\" href=\"#点击埋点\">#</a> <strong>点击埋点</strong></h4>\n<p><strong>collect.js 中添加：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报点击埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'CLICK'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 暴露出去，index.js 导入该方法并暴露出去。</span></pre></td></tr></table></figure><h4 id=\"自定义埋点\"><a class=\"anchor\" href=\"#自定义埋点\">#</a> 自定义埋点</h4>\n<p><strong>collect.js 中添加：</strong></p>\n<p>自定义埋点行为就直接在内部添加 CUSTOM 对应的处理逻辑，可以使用其他的 Observer 实现更多功能。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//... 省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 上报自定义埋点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendCustom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'CUSTOM'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 暴露出去，index.js 导入该方法并暴露出去。</span></pre></td></tr></table></figure><h2 id=\"大数据平台开发\"><a class=\"anchor\" href=\"#大数据平台开发\">#</a> 大数据平台开发</h2>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vemgvbWF4Y29tcHV0ZS8jOn46dGV4dD0lRTQlQkElOTElRTUlOEUlOUYlRTclOTQlOUYlRTUlQTQlQTclRTYlOTUlQjAlRTYlOEQlQUUlRTglQUUlQTElRTclQUUlOTclRTYlOUMlOEQlRTUlOEElQTEsJTI4TWF4Q29tcHV0ZSUyOSVFNiU5OCVBRiVFNCVCOCU4MCVFNyVBNyU4RCVFNSVCRiVBQiVFOSU4MCU5RiVFMyU4MCU4MSVFNSVBRSU4QyVFNSU4NSVBOCVFNiU4OSU5OCVFNyVBRSVBMSVFNyU5QSU4NFRCJTJGUEIlRTclQkElQTclRTYlOTUlQjAlRTYlOEQlQUUlRTQlQkIlOTMlRTUlQkElOTMlRTglQTclQTMlRTUlODYlQjMlRTYlOTYlQjklRTYlQTElODglRTMlODAlODIlMjBNYXhDb21wdXRlJUU1JTkwJTkxJUU3JTk0JUE4JUU2JTg4JUI3JUU2JThGJTkwJUU0JUJFJTlCJUU0JUJBJTg2JUU1JUFFJThDJUU1JTk2JTg0JUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU1JUFGJUJDJUU1JTg1JUE1JUU2JTk2JUI5JUU2JUExJTg4JUU0JUJCJUE1JUU1JThGJThBJUU1JUE0JTlBJUU3JUE3JThEJUU3JUJCJThGJUU1JTg1JUI4JUU3JTlBJTg0JUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU4JUFFJUExJUU3JUFFJTk3JUU2JUE4JUExJUU1JTlFJThCJUVGJUJDJThDJUU4JTgzJUJEJUU1JUE0JTlGJUU2JTlCJUI0JUU1JUJGJUFCJUU5JTgwJTlGJUU3JTlBJTg0JUU4JUE3JUEzJUU1JTg2JUIzJUU3JTk0JUE4JUU2JTg4JUI3JUU2JUI1JUI3JUU5JTg3JThGJUU2JTk1JUIwJUU2JThEJUFFJUU4JUFFJUExJUU3JUFFJTk3JUU5JTk3JUFFJUU5JUEyJTk4JUVGJUJDJThDJUU2JTlDJTg5JUU2JTk1JTg4JUU5JTk5JThEJUU0JUJEJThFJUU0JUJDJTgxJUU0JUI4JTlBJUU2JTg4JTkwJUU2JTlDJUFDJUVGJUJDJThDJUU1JUI5JUI2JUU0JUJGJTlEJUU5JTlBJTlDJUU2JTk1JUIwJUU2JThEJUFFJUU1JUFFJTg5JUU1JTg1JUE4JUUzJTgwJTgy\">MaxCompute 阿里云原生大数据计算服务</span>：</strong></p>\n<p>MaxCompute 是基于数据分析场景的企业级 SaaS 模式云数据仓库，以 Serverless 架构提供快速、全托管的在线数据仓库服务，消除了传统数据平台在资源扩展性和弹性方面的限制，最小化用户运维投入。</p>\n<p><strong>使用：</strong></p>\n<ol>\n<li>\n<p>使用 MaxCompute 创建数据库，在数据开发页面创建表进行记录前端监控数据</p>\n</li>\n<li>\n<p>使用 py 脚本对接（暂时没有 js 包），需要安装 python 和 pip（包管理工具）</p>\n</li>\n<li>\n<p>安装 pyodps： <code>pip install pyodps</code></p>\n</li>\n<li>\n<p>connect.py 文件中写入示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> odps <span class=\"token keyword\">import</span> ODPS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>odps <span class=\"token operator\">=</span> ODPS<span class=\"token punctuation\">(</span><span class=\"token string\">'LTAI5tBDj3HajwRVhc6me5KR'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DJqWAI1IWUBZnZGE#FKDSFJDEJLet'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'test_monitor'</span><span class=\"token punctuation\">,</span>endpoint<span class=\"token operator\">=</span><span class=\"token string\">'https://service-cn-hangzhou.odps.aliyun-inc.com'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>result <span class=\"token operator\">=</span> odps<span class=\"token punctuation\">.</span>executexecute_sql<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from test_monitor where datetime=\"20240325\"'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">with</span> result<span class=\"token punctuation\">.</span>open_reader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 打印表名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> table <span class=\"token keyword\">in</span> odps<span class=\"token punctuation\">.</span>list_tables<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'appid123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pageid123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ua123'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'20240325'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'202403'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 写入数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>odps<span class=\"token punctuation\">.</span>write_table<span class=\"token punctuation\">(</span><span class=\"token string\">'test_table'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># .... 等等后续操作</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>前端监控平台可视化架构图：</strong></p>\n<p><img data-src=\"/images/Snipaste_2024-04-30_15-14-09.jpg\" alt=\"前端监控流程架构\" /></p>\n",
            "tags": [
                "前端监控",
                "前端监控"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/",
            "url": "https://dmqweb.cn/2024/04/16/%E4%B8%89%E6%96%B9%E5%8C%85/",
            "title": "三方库",
            "date_published": "2024-04-16T08:33:16.000Z",
            "content_html": "<h1 id=\"脚手架开发\"><a class=\"anchor\" href=\"#脚手架开发\">#</a> <strong>脚手架开发</strong></h1>\n<p><strong>常见工具包</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29tbWFuZGVy\">Commander</span></strong></th>\n<th><strong>提供一个连贯的  <code>API</code> ，用于定义  <code>CLI</code>  应用程序的各个方面，如命令、选项、别名和帮助。简化了命令行应用程序的创建。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveWFyZ3M=\">yargs</span></strong></td>\n<td><strong>脚手架开发框架，通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGVybmE=\">lerna</span></strong></td>\n<td><strong>多 package 管理</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW5xdWlyZXI=\">Inquirer</span></strong></td>\n<td><strong>一个易于嵌入且美观的  <code>Node.js</code>  命令行界面。 提供了很棒的查询会话流程。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hhbGs=\">Chalk</span></strong></td>\n<td><strong> <code>Chalk</code>  是一个非常简单的库，创建它的目的很简单 —— 给你的终端字符串添加样式。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29sb3Jz\">colors</span></strong></td>\n<td><strong>打印 <code>不同颜色的log信息</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb3Jh\">ora</span></strong></td>\n<td><strong>命令行 <code>中高级的</code> 、 <code>功能丰富的高可定制化加载动画</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xpLXNwaW5uZXI=\">cli-spinner</span></strong></td>\n<td><strong>命令行中 <code>轻量的符号加载动画</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtbG9n\">npmlog</span></strong></td>\n<td><strong>执行 npm 的日志记录。它支持 <code>自定义级别和彩色输出</code> 。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1wb3J0LWxvY2Fs\">import-local</span></strong></td>\n<td><strong>当与全局冲突的时候，比如全局和本地都有这个脚手架时可以使用， <code>判断使用的是否是本地版本</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmluZHVw\">findup</span></strong></td>\n<td><strong> <code>向上查找指定文件</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGF0aC1leGlzdHM=\">path-exists</span></strong></td>\n<td><strong> <code>判断文件是否存在</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVidWc=\">Debug</span></strong></td>\n<td><strong>一个很小的  <code>JavaScript</code>  调试实用程序。 只需将一个函数的名称传递给模块，它就会返回一个经过修饰的  <code>console.error</code>  版本，以便你将调试语句传递给该模块</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=\">fs-extra</span></strong></td>\n<td><strong>fs 模块的扩展，支持更多文件操作功能</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VtdmVy\">semver</span></strong></td>\n<td><strong> <code>版本比对工具</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmlnbGV0\">figlet</span></strong></td>\n<td><strong>输出一些独特的大型 <code>ASCII文本横幅</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXNlci1ob21l\">user-home</span></strong></td>\n<td><strong>获取 <code>用户主目录</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG90ZW52\">dotenv</span></strong></td>\n<td><strong>获取 <code>环境变量</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcm9vdC1jaGVjaw==\">root-check</span></strong></td>\n<td><strong>检查是否是 <code>管理员权限启动并自动降级</code> ，防止后续因普通权限导致无法使用。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGtnLWRpcg==\">pkg-dir</span></strong></td>\n<td><strong>从某个目录开始向上查找，直到找到存在 <code>package.json</code>  的目录，并返回该目录。如果未找到则返回 null</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWluaW1pc3Q=\">minimist</span></strong></td>\n<td><strong>用来 <code>解析命令行参数和选项的库</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnBtaW5zdGFsbA==\">npminstall</span></strong></td>\n<td><strong> <code>安装npm上的包</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG93bmxvYWQtZ2l0LXJlcG8=\">download-git-repo</span></strong></td>\n<td><strong> <code>安装git仓库中的包</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz\">ejs</span></strong></td>\n<td><strong> <code>xml模板数据动态渲染</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2xvYg==\">glob</span></strong></td>\n<td><strong>根据 <code>文件路径进行遍历和匹配文件</code> ，拿到文件的内容。</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>底层原理包</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>readline（node 内置库）</strong></th>\n<th><strong>命令行的输入输出</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>events（node 内置库）</strong></td>\n<td><strong>事件驱动</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3RyZWFt\">stream</span></strong></td>\n<td><strong>输入输出流</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW5zaS1lc2NhcGVz\">ansi-escapes</span></strong></td>\n<td><strong>自定义 <code>命令行文字样式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvcnhqcw==\">rxjs</span></strong></td>\n<td><strong> <code>处理异步事件流</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYnVzYm95\">busboy</span></strong></td>\n<td><strong> <code>多文件上传底层库</code> ，尤其用于流式文件上传。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=\">styled-components</span></strong></td>\n<td>css-in-js 理论工具，在 <code>js中书写css样式</code></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWpzeA==\">styled-jsx</span></strong></td>\n<td>css-in-js 理论工具，在 <code>js中书写css样式</code> （ts 支持不友好）</td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZW1vdGlvbg==\">emotion</span></strong></td>\n<td>css-in-js 理论工具，在 <code>js中书写css样式</code></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3Qtcm91dGVyLWRvbQ==\">react-router-dom</span></strong></td>\n<td>react 在 dom 环境下的 <code>路由工具</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"vue\"><a class=\"anchor\" href=\"#vue\">#</a> <strong>Vue</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQG53c2VlL2NvcmU=\">https://www.npmjs.com/package/@nwsee/core</span></strong></th>\n<th><strong>vue 项目插件，用于页面性能监控</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"react\"><a class=\"anchor\" href=\"#react\">#</a> <strong>React</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGV4Y2FsaWRyYXcvZXhjYWxpZHJhdw==\">excalidraw</span></strong></th>\n<th><strong> <code>画板、流程图和思维导图</code> 等</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZDM=\">d3</span></strong></td>\n<td><strong> <code>可视化数据图表库</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW1tZXI=\">immer</span></strong></td>\n<td><strong>改变了 react <code>设置state状态的方式</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xhc3NuYW1lcw==\">classnames</span></strong></td>\n<td><strong>有条件地将  <code>classNames 连接</code> 在一起</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWhvb2tz\">ahooks</span></strong></td>\n<td><strong>国内常用的 <code>react-hooks函数集</code> </strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JhY28=\">craco</span></strong></td>\n<td>用于 <code>create-react-app项目中的各种配置和重写</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> <strong>Node.js</strong></h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcw==\">Express</span></strong></th>\n<th style=\"text-align:left\"><strong>轻量级 web 框架</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGhhcGkvaGFwaQ==\">Hapi</span></strong></td>\n<td style=\"text-align:left\"><strong>以最小的开销和完全开箱急用的功能构建强大的、拓展性强的应用程序</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2FpbHM=\">Sails</span></strong></td>\n<td style=\"text-align:left\"><strong>最流行的 Node.js 的 MVC 框架</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua29hanMubmV0Lw==\">Koa</span></strong></td>\n<td style=\"text-align:left\"><strong>下一代 web 开发框架</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnMtZXh0cmE=\">Fs-extra</span></strong></td>\n<td style=\"text-align:left\"><strong>fs -extra <code>包含了</code>  Node.js <code> </code> fs <code>包中没有包含的方法，比如</code>  copy () <code>, </code> remove() <code>, </code> mkdirs()</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1jYWNoZQ==\">Node-cache</span></strong></td>\n<td style=\"text-align:left\"><strong>一个简单的缓存模块，具有设置，获取和删除方法的功能，类似于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZW1jYWNoZWQub3JnLw==\"> memcached</span>。 key 值可以具有一个超时设置（ttl），在此时间之后它们将过期并从缓存中删除。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2hhcnA=\">sharp</span></strong></td>\n<td style=\"text-align:left\"><strong> <code>node图片处理</code> 解决方案</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9hZHRlc3Q=\">Loadtest</span></strong></td>\n<td style=\"text-align:left\"><strong>node.js <code>压力测试工具</code> </strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"vite\"><a class=\"anchor\" href=\"#vite\">#</a> Vite</h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cC1wcm94eQ==\">http-proxy</span></strong></th>\n<th>vite 代理服务器的底层，用于转发 http 请求到响应给客户端</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> <strong>css</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGFpbHdpbmRjc3M=\">Tailwind</span></strong></th>\n<th><strong>原子化 css</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVkLWNvbXBvbmVudHM=\">Styled-components</span></strong></td>\n<td><strong>css-in-js，js 中书写 css</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> <strong>日志</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9yZ2Fu\">Morgan</span></strong></th>\n<th><strong>具体来说，它是一个  <code>HTTP</code>  请求记录器，存储  <code>HTTP</code>  请求，并为你提供有关应用程序如何使用以及可能存在潜在错误的简要信息。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2luc3Rvbg==\">Winston</span></strong></td>\n<td><strong>一个几乎所有内容的日志记录器，支持多种传输方式。它存储的时间比  <code>Morgan</code>  长，它也有一个更大的维护者社区和更多的下载。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> <strong>数据库</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2U=\">Mongoose</span></strong></th>\n<th><strong> <code>Mongoose</code>  是一个  <code>MongoDB</code>  对象建模工具，设计用于在异步环境中工作。 <code>Mongoose</code>  支持  <code>Promise</code>  和回调。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2VxdWVsaXpl\">Sequelize</span></strong></td>\n<td><strong> <code>Sequelize</code>  是一个基于  <code>Promise</code>  的  <code>Node.js</code>   <code>ORM</code>  工具，适用于  <code>Postgres</code> 、MySQL、MariaDB、SQLite 和 Microsoft SQL Server。它具有可靠的事务支持、关系、即时和延迟加载、读取复制等特性。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> <strong>授权</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGFzc3BvcnQ=\">Passport</span></strong></th>\n<th><strong> <code>Passport</code>  的目的是通过一组可扩展的插件 (称为策略) 对请求进行身份验证。向 <code>Passport</code>  提供一个身份验证请求， <code>Passport</code>  提供钩子来控制身份验证成功或失败时发生的操作。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmNyeXB0\">Bcrypt</span></strong></td>\n<td><strong>它是可以帮助你生成哈希密码的库。 <code>Bcrypt</code>  是由  <code>Niels Provos</code>  和  <code>David Mazieres</code>  基于  <code>Blowfish cipher</code>  设计的密码哈希函数，并于 1999 年在 USENIX 上展出。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbndlYnRva2Vu\">JSONWebToken</span></strong></td>\n<td><strong> <code>JSON Web</code>  令牌 (JWT) 是一种开放的、行业标准的  <code>RFC 7519</code>  方法，用于在双方之间安全地表示声明。这个包允许你解码、验证和生成 JWT。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"静态网站生成\"><a class=\"anchor\" href=\"#静态网站生成\">#</a> <strong>静态网站生成</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2F0c2J5\">Gatsby</span></strong></th>\n<th><strong>一个现代的网站生成器，可以创建快速，高质量，动态的  <code>React</code>  应用程序，从博客到电子商务网站再到用户仪表板。具有很棒的插件生态系统和模板。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmV4dA==\">NextJS</span></strong></td>\n<td><strong> <code>NextJS</code>  首先支持服务器渲染以及静态生成的内容。 你还可以将  <code>serverless</code>  功能定义为  <code>API</code>  端点。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbnV4dA==\">NuxtJS</span></strong></td>\n<td><strong>在  <code>Vue</code>  的生态系统中， <code>NuxtJS</code>  基本上是  <code>NextJS</code>  的替代品。 <code>NuxtJS</code>  的目标是让  <code>web</code>  开发功能强大，并且让开发者具有良好的开发意识。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"模板语法\"><a class=\"anchor\" href=\"#模板语法\">#</a> <strong>模板语法</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVzdGFjaGU=\">Mustache</span></strong></th>\n<th><strong> <code>Mustache</code>  是一种无逻辑的模板语法。它可以用于  <code>HTML</code> ，配置文件，源代码等任何东西。它的工作原理是使用 hash 或对象中提供的值在模板中展开标记。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGFuZGxlYmFycw==\">Handlebars</span></strong></td>\n<td><strong>使用模板和输入对象生成  <code>HTML</code>  或其他文本格式。 <code>Handlebars</code>  模板看起来像一个嵌入了把手表达式的正则文本。 <code>Handlebars</code>  很大程度上与  <code>Mustache</code>  模板兼容。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpz\">EJS</span></strong></td>\n<td><strong> <code>EJS</code>  是一种简单的模板语言，可让你使用简单的语法，快速的执行和简单的调试  <code>JavaScript</code>  来生成  <code>HTML</code>  标记。  <code>EJS</code>  拥有大量的活跃用户社区，并且该库正在积极开发中。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"mock数据\"><a class=\"anchor\" href=\"#mock数据\">#</a> <strong>mock 数据</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdXVpZA==\">Uuid</span></strong></th>\n<th><strong>方便而且体积小的包，可以快速、轻松地生成更复杂的通用惟一标识符 (UUIDs)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFrZXI=\">Faker</span></strong></td>\n<td><strong>实用的  <code>npm</code>  包，用于在浏览器和  <code>Node.js</code>  中制造大量假数据。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbi1zZXJ2ZXI=\">jsonServer</span></strong></td>\n<td><strong>mock 开发服务器数据</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmFub2lk\">nanoid</span></strong></td>\n<td><strong> <code>字符串 ID 生成器</code> ，没有其余依赖。</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"表单和邮件\"><a class=\"anchor\" href=\"#表单和邮件\">#</a> <strong>表单和邮件</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdmFsaWRhdG9y\">Validator</span></strong></th>\n<th><strong>便捷的字符串验证器，使程序更加健壮的库。许多有用方法，例如  <code>isEmail()</code> ，  <code>isCreditCard()</code> ， <code>isDate()</code>  和  <code>isURL()</code> 。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybWlr\">Formik</span></strong></td>\n<td><strong> <code>Formik</code>  是  <code>React</code>  和  <code>React Native</code>  的一个流行开源表单库。它具有易于使用、声明性和适应性的特点。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVsdGVy\">Multer</span></strong></td>\n<td><strong> <code>Multer</code>  是用于  <code>multipart/form-data</code>  数据格式的  <code>Node.js</code>  中间件，主要用于上传文件。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1haWxlcg==\">Nodemailer</span></strong></td>\n<td><strong> <code>Nodemailer</code>  是  <code>Node.js</code>  应用程序的一个模块，允许轻松发送电子邮件。这个项目从 2010 年就开始了，现在它是大多数  <code>Node.js</code>  用户默认使用的解决方案。</strong></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> <strong>测试</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvamVzdA==\">Jest</span></strong></th>\n<th><strong> <code>Jest</code>  是一个令人愉快的  <code>JavaScript</code>  测试框架，专注于简洁明快。它允许你使用易于使用、熟悉且功能丰富的  <code>API</code>  编写测试，从而快速获得结果。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9jaGE=\">Mocha</span></strong></td>\n<td><strong> <code>Mocha</code>  是一个  <code>JavaScript</code>  测试框架，使得异步测试简单而有趣。 <code>Mocha</code>  测试是串行运行的，在将未捕获的异常映射到正确的测试用例的同时，允许进行灵活和准确的报告。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"代码规范\"><a class=\"anchor\" href=\"#代码规范\">#</a> <strong>代码规范</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50\">ESLint</span></strong></th>\n<th><strong> <code>ESLint</code>  是用于识别和报告  <code>ECMAScript / JavaScript</code>  代码中的书写方式的工具。  <code>ESLint</code>  是完全插件化的，每个规则都是一个插件，你可以在运行时添加更多内容。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJldHRpZXI=\">Prettier</span></strong></td>\n<td><strong> <code>Prettier</code>  是一种固执己见的代码格式化程序。它通过解析代码并使用自己的规则 (考虑到最大行的长度) 重新打印代码，以及在必要时包装代码，来强制执行一致的样式。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"打包和压缩\"><a class=\"anchor\" href=\"#打包和压缩\">#</a> <strong>打包和压缩</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2VicGFjaw==\">Webpack</span></strong></th>\n<th><strong>一个著名的功能强大的模块打包器。它的主要目的是将  <code>JavaScript</code>  文件打包以便在浏览器中使用，但它也能够转换、捆绑或打包任何资源。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHRtbC1taW5pZmllcg==\">HTML-Minifier</span></strong></td>\n<td><strong>轻巧，高度可配置且经过良好测试的基于  <code>Javascript</code>  的  <code>HTML</code>  压缩器 / 压缩器（支持  <code>Node.js</code> ）。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2xlYW4tY3Nz\">Clean-CSS</span></strong></td>\n<td><strong>适用于  <code>Node.js</code>  平台和任何现代浏览器的快速高效的  <code>CSS</code>  优化器。 具有高度可配置和多种兼容模式。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdWdsaWZ5LWpz\">UglifyJS2</span></strong></td>\n<td><strong> <code>JavaScript</code>  解析器，压缩程序和美化工具包。 它可以使用多个输入文件，并支持许多配置选项。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"进程管理\"><a class=\"anchor\" href=\"#进程管理\">#</a> <strong>进程管理</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZW1vbg==\">Nodemon</span></strong></th>\n<th><strong>在  <code>Node.js</code>  应用程序的开发过程中使用的简单的监控脚本。对于开发非常有用，因为它非常容易重启，并且默认启用了文件监听</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG0y\">PM2</span></strong></td>\n<td><strong>带有内置负载均衡的  <code>Node.JS</code>  应用程序的生产进程管理器。 更全面，更适合生产，给你很多参数以进行调整功能</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29uY3VycmVudGx5\">Concurrently</span></strong></td>\n<td><strong>简单而直接 —— 这是同时运行多个命令的有用工具。</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"桌面端\"><a class=\"anchor\" href=\"#桌面端\">#</a> 桌面端</h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3JlYXRlLXRhdXJpLWFwcA==\">create-tauri-app</span></strong></th>\n<th>创建 <code>桌面端应用程序</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> <strong>其他</strong></h1>\n<table>\n<thead>\n<tr>\n<th><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXhpb3M=\">Axios</span></strong></th>\n<th><strong>基于  <code>Promise</code>  的  <code>HTTP</code>  客户端，用于浏览器和  <code>Node.js</code> 。 与  <code>JS</code>  内置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSQ==\">Fetch API</span> 相比，它易于设置，直观且简化了很多工作。</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><a href=\"https//www.npmjs.com/package/socket.io\">Socket.io</a></strong></td>\n<td><strong> <code>Socket.IO</code>  支持实时，双向和基于事件的通信。 它可以在每个平台，浏览器或其他设备上运行，并同时关注可靠性和速度。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd3M=\">WS</span></strong></td>\n<td><strong>简单易用，快速且经过全面测试的  <code>WebSocket</code>  客户端和服务器实现。 一个很好的，不太抽象的， <code>Socket.io</code>  的替代方案</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGF5anM=\">DayJS</span></strong></td>\n<td><strong> <code>DayJS</code>  是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9tZW50\">MomentJS</span> （自 2020 年 9 月起处于维护模式）的一种快速、轻巧的替代方案。它们的  <code>API</code>  使用类似，如果你使用过 <code>MomentJS</code> ，则已经知道如何使用大多数  <code>DayJS</code> 。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9kYXNo\">Lodash</span></strong></td>\n<td><strong>现代化的  <code>JavaScript</code>  实用程序库，提供模块化，高性能以及其他功能。 公开关于  <code>JavaScript</code>  数组，对象和其他数据结构的许多有用方法。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdW5kZXJzY29yZQ==\">Underscore</span></strong></td>\n<td><strong> <code>Underscore</code>  提供了许多常用的功能工具以及更专业的工具：函数绑定， <code>javascript</code>  模板，创建快速索引，深度相等测试等。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXN5bmM=\">Async</span></strong></td>\n<td><strong> <code>Async</code>  是一个实用模块，它为异步  <code>JavaScript</code>  提供了直接、强大的功能。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWFya2Vk\">Marked</span></strong></td>\n<td><strong>用于解析  <code>markdown</code>  而不需要缓存或长时间阻塞的低级编译器。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmFuZG9tY29sb3I=\">Randomcolor</span></strong></td>\n<td><strong>一个用于生成有吸引力的随机颜色的小脚本。 你可以传递选项对象从而决定其产生的颜色类型。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGx1cmFsaXpl\">Pluralize</span></strong></td>\n<td><strong>该模块使用预先定义的规则列表，按顺序应用这些规则给指定单词单数或复数。 在许多情况下这很有用，例如基于用户输入的任何自动化。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVkZW50\">dedent</span></strong></td>\n<td><strong>从多行字符串中去除缩进（空格）</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXM=\">ms</span></strong></td>\n<td><strong>将易理解的时间转换为毫秒数。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaG90a2V5cy1qcw==\">hotkeys-js</span></strong></td>\n<td><strong> <code>键盘事件</code> 使用库。</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcXM=\">qs</span></strong></td>\n<td><strong> <code>查询字符串解析和字符串化库</code> ，具有一些附加的安全性</strong></td>\n</tr>\n<tr>\n<td><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmFjZS1hcGk=\">face-api</span></strong></td>\n<td>用于 <code>人脸识别</code></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "三方库",
                "三方库"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/12/vue-router/",
            "url": "https://dmqweb.cn/2024/04/12/vue-router/",
            "title": "vue-router",
            "date_published": "2024-04-12T07:01:09.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n<h1 id=\"vue-router源码\"><a class=\"anchor\" href=\"#vue-router源码\">#</a> vue-router 源码</h1>\n<h3 id=\"vue-router路由模式\"><a class=\"anchor\" href=\"#vue-router路由模式\">#</a> vue-router 路由模式</h3>\n<h4 id=\"hash模式\"><a class=\"anchor\" href=\"#hash模式\">#</a> hash 模式（#）</h4>\n<p>SEO 不友好，资源不变，不会刷新。</p>\n<h4 id=\"history模式\"><a class=\"anchor\" href=\"#history模式\">#</a> history 模式（/）</h4>\n<p>SEO 友好，重新请求资源。</p>\n<p><strong>history 模式发布时出现的问题：</strong></p>\n<p>发布到服务器上时，点击路由跳转正常但是刷新后路由跳转 404，出现的原因刷新后跳转的根路径并不是当前项目的 index.html 导致资源路径不匹配单页面应用路由，采取的方法是<strong>每次请求资源都 fallback 到 index.html 文件</strong>，可以使用静态资源服务器的支持。（例如在 nginx 中 location 字段添加：<strong>try_files 字段</strong>）</p>\n<h3 id=\"vue-router内部处理\"><a class=\"anchor\" href=\"#vue-router内部处理\">#</a> vue-router 内部处理</h3>\n<h6 id=\"vue-router主体架构\"><a class=\"anchor\" href=\"#vue-router主体架构\">#</a> vue-router 主体架构：</h6>\n<p>当使用 vue.use (vue-router) 时，会执行 vue-router 导出的实例中的 install 方法，将 app 作为参数传入，内部会用 app.component 注册两个全局组件 RouterLink 和 RouterView，接着在 app.config.globalProperties 上设置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性，通过 app.provide 将 router 和 currentRoute 传递下去。</p>\n<h6 id=\"路由变化但不跳转原理\"><a class=\"anchor\" href=\"#路由变化但不跳转原理\">#</a> 路由变化但不跳转原理：</h6>\n<p>history.pushState 和 history.replaceState 方法，会改变地址栏的但不进行跳转。</p>\n<h6 id=\"history模式实现路由匹配\"><a class=\"anchor\" href=\"#history模式实现路由匹配\">#</a> history 模式实现路由匹配：</h6>\n<p>内部的 mather 函数会将 routes 中的 path 路径转为正则表达式，与当前的路由进行匹配，匹配成功就将对应的组件添加到 router-view 中。</p>\n<h6 id=\"router-view实现路由展示\"><a class=\"anchor\" href=\"#router-view实现路由展示\">#</a> router-view 实现路由展示：</h6>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> from vue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/Home'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 导入默认的全部组件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> routerView <span class=\"token operator\">=</span>  <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"routerView\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> slots <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">//return h ('div',&#123;        // 不使用组件默认的方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">//     class:'routerViewClass',</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//     onClick()&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">//         // 处理点击 逻辑</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">//     &#125;,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// &#125;,slots.default())</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Home<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\">// 处理对应的逻辑</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routerView<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>路由 provide 一个 currentRoute（shallowRef 对象）将当前的路由路径捆绑在一起，传递下去，当 currentRoute 发生变化的时候就会改变相应的 router-view。</p>\n",
            "tags": [
                "vue-router原理",
                "vue-router原理"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/12/%E8%84%9A%E6%89%8B%E6%9E%B6/",
            "url": "https://dmqweb.cn/2024/04/12/%E8%84%9A%E6%89%8B%E6%9E%B6/",
            "title": "脚手架开发",
            "date_published": "2024-04-12T00:36:07.000Z",
            "content_html": "<h1 id=\"需求分析\"><a class=\"anchor\" href=\"#需求分析\">#</a> 需求分析</h1>\n<p><strong>为什么需要优化研发流程？</strong></p>\n<ul>\n<li>项目量级增加：几干行代码 -&gt; 几万行代码</li>\n<li>项目数量扩大：几个项目 -&gt; 几干个项目</li>\n<li>项目复杂度高：Wb 项目 -&gt;H5/PC/ 小程序 / 后端 / 脚手架</li>\n<li>团队人数增长：几个人 -&gt; 几百人</li>\n<li>传统的项目研发流程已经无法满足业务需求</li>\n</ul>\n<p><strong>项目创建流程思考</strong></p>\n<p>当团队较大时，让每一个团队成员开发创建项目体验趋于一致就非常重要。</p>\n<p><strong>项目创建流程</strong></p>\n<ul>\n<li>项目代码</li>\n<li>抽象出项目模板</li>\n<li>存储到数据库</li>\n<li>脚手架读取数据库</li>\n<li>根据脚手架创建新的项目</li>\n</ul>\n<p><strong>提升前端研发效率的手段</strong></p>\n<ul>\n<li>物料和模板</li>\n<li>低代码搭建</li>\n<li>等等</li>\n</ul>\n<p>从使用角度理解什么是脚手架？</p>\n<h1 id=\"脚手架简介\"><a class=\"anchor\" href=\"#脚手架简介\">#</a> 脚手架简介</h1>\n<p>脚手架本质是一个操作系统的客户端，它通过命令行执行，比如：</p>\n<p>vue create vue-test-app</p>\n<p>bash</p>\n<p>上面这条命令由 3 个部分组成：</p>\n<ul>\n<li>主命令：vue</li>\n<li>command:create</li>\n<li>command 的 param:vue-test-app</li>\n</ul>\n<p>它表示创建一个 vue 项目，项目的名称为 vue-test-app, 以上是最一个较为简单的脚手架命令，但实际场易<br />\n往更加复杂，比如：<br />\n当前目录已经有文件了，我们需要覆盖当前目录下的文件，强制进行安装 ue 项目，此时我们就可以输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue create vue-test-app <span class=\"token parameter variable\">--force</span></pre></td></tr></table></figure><p>这里的 - force 叫做 option, 用来辅助脚手架确认在特定场景下用户的选择（可以理解为配置）。还有一种场景<br />\n通过 vue create<br />\n 创建项目时，会自动执行 npm install 帮用户安装依赖，如果我们希望使用淘宝源来安装，<br />\n可以输入命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue create vue-test-app <span class=\"token parameter variable\">--force</span> <span class=\"token parameter variable\">-r</span> https://registry.npm.taobao.org</pre></td></tr></table></figure><p>这里的 - x 也叫做 option, 它与 --force 不同的是它使用 -，并且使用简写，这里的 - x 也可以替换成 --registry, 有的同学可能要问，为什么老师知道这个命令，其实我们输入下面的命令就可以看到 vue create 支持的所有 options:<br />\nvue create  --help</p>\n<p>-r  https:/registry.npm.taobao.org 后面的 https://registry.npm.taobao.org 成为 option 的 param, 其实任 - force 可以理解为：-force true,f 简写为：--force 或 - f</p>\n<h1 id=\"脚手架原理\"><a class=\"anchor\" href=\"#脚手架原理\">#</a> 脚手架原理</h1>\n<p><strong>脚手架的执行原理如下：</strong></p>\n<ul>\n<li>在终端输入 vue create vue-test-app</li>\n<li>终端解析出 vue 命令</li>\n<li>终端在环境变量中找到 ue 命令</li>\n<li>终端根据 vue 命令链接到实际文件 vue.js</li>\n<li>终端利用 node 执行 `ue.js</li>\n<li>vue.js 解析 command/options</li>\n<li>vue.js 执行 command</li>\n<li>执行完毕，退出执行</li>\n</ul>\n<p><strong>从应用的角度看如何开发一个脚手架</strong></p>\n<p>这里以 vue-cli 为例：</p>\n<ul>\n<li>开发 npm 项目，该项目中应包含一个 bin/vue.js 文件，并将这个项目发布到 npm</li>\n<li>将 npm 项目安装到 node 的 lib/node_modules</li>\n<li>在 node 的 bin 目录下配置 vue 软链接指向 lib/node modules/Qvue/cli/bin/vue.js</li>\n<li>这样我们在执行 vue 命令的时候就可以找到 vue.js 进行执行</li>\n</ul>\n<p><strong>还有很多疑问需要解答</strong></p>\n<ul>\n<li>\n<p>为什么全局安装 vue/cli 后会添加的命令为 vue?  （npm install -g @vue/cli）</p>\n</li>\n<li>\n<p>答：vue/cli 项目的 package.json 中的 bin 字段配置的名称为 vue。</p>\n</li>\n<li>\n<p>全局安装 vue/c1i 时发生了什么？</p>\n</li>\n<li>\n<p>答：全局 node_modules 中下载项目文件，并根据项目 package.json 中的 bin 字段配置可执行文件软链接。</p>\n</li>\n<li>\n<p>为什么 vue 指向一个 js 文件，我们却可以直接通过 vue 命令直接去执行它？</p>\n</li>\n<li>\n<p>答：js 文件配置了蛇棒（操作系统的接口），例如：</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hashbang comment\">#!/usr/bin/env node</span></pre></td></tr></table></figure><p>通常使用环境变量中找 node 命令，因为每个电脑上的 node 文件位置不同，但是环境变量中都会有 node 软连接。</p>\n</li>\n</ul>\n<h1 id=\"脚手架的开发流程\"><a class=\"anchor\" href=\"#脚手架的开发流程\">#</a> 脚手架的开发流程</h1>\n<p><strong>脚手架开发流程详解</strong></p>\n<p>开发流程</p>\n<ul>\n<li>创建 npm 项目</li>\n<li>创建脚手架入口文件，最上方添加 #!/usr/bin/env node</li>\n<li>配置 package.json, 添加 bin 属性</li>\n<li>编写脚手架代码</li>\n<li>将脚手架发布到 npm</li>\n</ul>\n<p><strong>使用流程</strong></p>\n<ul>\n<li>\n<p>安装脚手架</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> your-own-cli</pre></td></tr></table></figure></li>\n<li>\n<p>使用脚手架</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>your-own-cli-binName</pre></td></tr></table></figure></li>\n</ul>\n<p><strong>脚手架开发难点解析</strong></p>\n<ul>\n<li>\n<p>分包：将复杂的系统拆分成若干个模块</p>\n</li>\n<li>\n<p>命令注册：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- vue create</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- vue <span class=\"token function\">add</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>- vue invoke</pre></td></tr></table></figure></li>\n<li>\n<p>参数解析：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue <span class=\"token builtin class-name\">command</span> <span class=\"token punctuation\">[</span>options <span class=\"token operator\">&lt;</span>params<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>options: 全称：--version、--help。简写为：-v   -h</p>\n</li>\n<li>\n<p>帮助文档：global help</p>\n</li>\n<li>\n<p>命令行交互</p>\n</li>\n<li>\n<p>日志打印</p>\n</li>\n<li>\n<p>命令行文字变色</p>\n</li>\n<li>\n<p>网络通信</p>\n</li>\n<li>\n<p>文件处理</p>\n</li>\n</ul>\n<h1 id=\"开发细节\"><a class=\"anchor\" href=\"#开发细节\">#</a> 开发细节</h1>\n<p><strong>两种链接本地文件的方式</strong></p>\n<ul>\n<li>\n<p>npm  link 命令会将命令执行的当前文件夹根据 bin 字段软连接到全局的 node_moduls。</p>\n</li>\n<li>\n<p>npm link 包名称 ，这个命令会将全局包添加软连接到当前项目的 node_modules 中。</p>\n</li>\n<li>\n<p>npm unlink 包名称 ，这个命令用于移除全局 node_modules 中指定的软连接。（不过这个命令不好用，建议使用 <code>npm uninstall -g </code> 包名称、或者 <code>npm remove -g </code> 包名称  代替）</p>\n</li>\n<li>\n<p>调试过程中，当本地包相互依赖时，可以使用 File: 路径进行指向。</p>\n<p><strong>两种方式的区别</strong></p>\n</li>\n</ul>\n<p>npm  link 的方式创建的软连接可以实时同步更改的文件，但是项目文件多了就不方便管理、很复杂，File 路径不能实时同步文件修改，需要执行 npm install，但是管理方便。</p>\n<h1 id=\"脚手架发布体系\"><a class=\"anchor\" href=\"#脚手架发布体系\">#</a> 脚手架发布体系</h1>\n<p><strong>利用脚手架统一管理发布阶段</strong></p>\n<p><strong>利用脚手架做发布的优势</strong></p>\n<ul>\n<li>规范：利用统一发布规范，如 commiti 记录、分支名称、代码规范等</li>\n<li>效率：避免大量重复操作，浪费开发时间</li>\n<li>安全：构建和发布全部在云端操作，避免个人发布时带来的安全隐患</li>\n</ul>\n<p><strong>脚手架发布的流程？</strong></p>\n<ul>\n<li>GitF1low 自动化代码提交</li>\n<li>远程代码自动检查</li>\n<li>云端完成构建与发布操作</li>\n</ul>\n<h1 id=\"脚手架发布流程\"><a class=\"anchor\" href=\"#脚手架发布流程\">#</a> 脚手架发布流程</h1>\n<ul>\n<li>检查 package.json 中 name 和 bin 字段，name 字段不能和已存在的线上包名重复，</li>\n<li>检查版本号，是否需要更新</li>\n<li>npm login</li>\n<li>npm publish</li>\n</ul>\n<h1 id=\"npm新特性workspace\"><a class=\"anchor\" href=\"#npm新特性workspace\">#</a> npm 新特性：workspace</h1>\n<p><strong>作用</strong></p>\n<p>本地调试时，需要多次执行 npm  link，node15 版本推出 workspace，workspace 新特性可以帮助我们进行多 package 包管理，可以让多个 npm 包在同一个项目中进行开发和管理：</p>\n<ul>\n<li>将子包中所有的依赖包都提升到根目录进行安装，提升包的安装速度</li>\n<li>初始化 (npm install) 后自动将子包之间的依赖进行关联</li>\n<li>各个子包共享一些流程（eslint、githook、publish flow 等等）</li>\n</ul>\n<h1 id=\"lerna多package管理\"><a class=\"anchor\" href=\"#lerna多package管理\">#</a> Lerna 多 package 管理</h1>\n<h3 id=\"lerna简介\"><a class=\"anchor\" href=\"#lerna简介\">#</a> Lerna 简介</h3>\n<p><strong>原生脚手架开发痛点分析</strong>（Lerna 解决了哪些问题： ）</p>\n<p><strong>痛点一：重复操作</strong></p>\n<ul>\n<li>多 Package 本地 link</li>\n<li>多 Package 依赖安装</li>\n<li>多 Package. 单元测试</li>\n<li>多 Package 代码提交</li>\n<li>多 Package 代码发布</li>\n</ul>\n<p><strong>痛点二：版本一致性</strong></p>\n<ul>\n<li>发布时版本一致性</li>\n<li>发布后相互依赖板本升级</li>\n<li>package 越多，管理复杂度越高</li>\n</ul>\n<p><strong>简介：</strong></p>\n<p>Lerna 是一个优化基于 git+npm 的多 package 项目的管理工具。</p>\n<p><strong>优势：</strong></p>\n<ul>\n<li>大幅减少重复操作</li>\n<li>提升操作的标准化</li>\n</ul>\n<p>Lera 是架构优化的产物，它揭示了一个架构真理：项目复杂度提升后，就需要对项目进行架构优化。优化的主要目标往往都是以效能为核心。</p>\n<h3 id=\"lerna使用\"><a class=\"anchor\" href=\"#lerna使用\">#</a> Lerna 使用</h3>\n<p><strong>Lerna 开发脚手架流程如下：</strong></p>\n<ul>\n<li>\n<p>npm 上创建 group</p>\n</li>\n<li>\n<p>初始化 npm 项目</p>\n</li>\n<li>\n<p>安装 lerna</p>\n</li>\n<li>\n<p>package.json 中配置 workspaces</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"packages/*\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//workspaces 字段允许指定一个或多个目录作为工作区。一、可以在父级目录的 package.json 中管理他们的依赖，从而较少体积。二、工作区每个包之间直接相互引用，有助于提高开发效率。三、工作区所有包共享版本控制历史。</span></pre></td></tr></table></figure></li>\n<li>\n<p>lerna init 初始化项目（创建了 git）</p>\n</li>\n<li>\n<p>配置 gitignore 排除不需要提交的文件</p>\n</li>\n<li>\n<p>--------------------------- 初始化完成</p>\n</li>\n<li>\n<p>lerna create 创建 package</p>\n</li>\n<li>\n<p>lerna add 安装依赖（最新版废弃），使用 npm install &lt;dependency&gt; --workspace  &lt;workspace &gt; 代替。</p>\n</li>\n<li>\n<p>lerna link 链接依赖（最新版废弃），workspace 自动链接。</p>\n</li>\n<li>\n<p>---------------------------- 项目创建完成</p>\n</li>\n<li>\n<p>lerna exec 执行 shell 脚本</p>\n</li>\n<li>\n<p>lerna run 执行 npm 命令</p>\n</li>\n<li>\n<p>lerna clean 清空依赖</p>\n</li>\n<li>\n<p>lerna bootstrap 重装依赖（最新版废弃），使用 npm install 代替</p>\n</li>\n<li>\n<p>---------------------------- 项目开发完成</p>\n</li>\n<li>\n<p>git push 提交到远程仓库</p>\n</li>\n<li>\n<p>lerna version 升级版本号</p>\n</li>\n<li>\n<p>lerna changed 查看上版本以来全部的变更。</p>\n</li>\n<li>\n<p>git add . 添加到 git 工作区</p>\n</li>\n<li>\n<p>lerna diff 查看 diff</p>\n</li>\n<li>\n<p>lerna publish 进行项目发布</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认是私有仓库，需要在 package.json 中进行配置：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"publishConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"access\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"public\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>---------------------------- 项目发布完成</p>\n</li>\n</ul>\n<p>这里注意 npm 最新版 workspace 特性的推广导致 lerna 许多命令在最新版被废弃。</p>\n<h3 id=\"lerna学习收获\"><a class=\"anchor\" href=\"#lerna学习收获\">#</a> Lerna 学习收获</h3>\n<ul>\n<li>熟悉 Yargs 脚手架开发框架</li>\n<li>熟悉多 Package 管理工具 Lerna 的使用方法和实现原理</li>\n<li>深入理解 Node.js 模块路径解析流程</li>\n</ul>\n<h4 id=\"一-yargs\"><a class=\"anchor\" href=\"#一-yargs\">#</a> <strong>一、yargs</strong></h4>\n<p><strong>脚手架构成</strong></p>\n<ul>\n<li>\n<p>bin:package,json 中配置 bin 属性，npm link 本地安装</p>\n</li>\n<li>\n<p>command: 命令</p>\n</li>\n<li>\n<p>options: 参数 (boolean/string/number)</p>\n</li>\n<li>\n<p>文件顶部增加  #！/usr/bin/env node</p>\n</li>\n</ul>\n<p><strong>脚手架初始化流程</strong></p>\n<ul>\n<li>\n<p>构造函数：Yargs (0</p>\n</li>\n<li>\n<p>常用方法：</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>Yargs.options</p>\n</li>\n<li>\n<p>Yargs.option</p>\n</li>\n<li>\n<p>Yargs.group</p>\n</li>\n<li>\n<p>Yargs.demandCommand</p>\n</li>\n<li>\n<p>Yargs.recommendCommands</p>\n</li>\n<li>\n<p>Yargs.strict</p>\n</li>\n<li>\n<p>Yargs.fail</p>\n</li>\n<li>\n<p>Yargs.alias</p>\n</li>\n<li>\n<p>Yargs.wrap</p>\n</li>\n<li>\n<p>Yargs.epilogue</p>\n</li>\n</ol>\n<ul>\n<li>脚手架参数解析</li>\n</ul>\n<ol>\n<li>hideBin(process.argv)/Yargs.argv</li>\n<li>Yargs.parse(argv,options)</li>\n</ol>\n<ul>\n<li>命令注册方法</li>\n</ul>\n<ol>\n<li>Yargs.command(command,describe,builder,handler)</li>\n<li>Yargs.command({command,describe,builder,handler )</li>\n</ol>\n<h4 id=\"二-lerna实现原理\"><a class=\"anchor\" href=\"#二-lerna实现原理\">#</a> <strong>二、Lerna 实现原理</strong></h4>\n<p>Lerna 是基于 git+npm 的多 package 项目管理工具</p>\n<p><strong>实现原理：</strong></p>\n<ul>\n<li>通过 import-local 优先调用本地 lerna 命令</li>\n<li>通过 Yargs 生成脚手架，先注册全局属性，再注册命令，最后通过 parse 方法解析参数</li>\n<li>lerna 命令注册时需要传入 builder 和 handler 两个方法，builder 方法用于注册命令专属的 options</li>\n<li>handler 用来处理命令的业务逻辑</li>\n<li>lerna 通过配置 npm 本地依赖的方式来进行本地开发，具体写法是在 package.json 的依赖中写入：file:your-local--module-path, 在 lerna publish 时会自动将该路径替换</li>\n</ul>\n<h4 id=\"三-nodejs模块路径解析流程\"><a class=\"anchor\" href=\"#三-nodejs模块路径解析流程\">#</a> 三、Node.js 模块路径解析流程</h4>\n<ul>\n<li>\n<p>Node.js 项目模块路径解析是通过 require.resolve 方法来实现的</p>\n</li>\n<li>\n<p>require,resolve 就是通过 Module.reso1 veFileName 方法实现的</p>\n</li>\n<li>\n<p>require,resolve 实现原理：<strong>Module,resolveFileName 方法核心流程有 3 点：</strong></p>\n<ol>\n<li>\n<p>判断是否为内置模块</p>\n</li>\n<li>\n<p>通过 Module,resolveLookupPaths 方法生成 node_modules 可能存在的路径</p>\n</li>\n<li>\n<p>通过 Module,findPath 查询模块的真实路径</p>\n</li>\n</ol>\n<p><strong>Module,findPath 核心流程有 4 点：</strong></p>\n<ol>\n<li>\n<p>查询缓存（将 request 和 paths 通过 \\xoo 合并成 cacheKey)</p>\n</li>\n<li>\n<p>遍历 paths, 将 path 与 request 组成文件路径 basePath</p>\n</li>\n<li>\n<p>如果 basePath 存在则调用 fs,realPathSync 获取文件真实路径</p>\n</li>\n<li>\n<p>将文件真实路径缓存到 Module.pathCache (key 就是前面生成的 cacheKey)</p>\n</li>\n</ol>\n<p><strong>fs.realPathSync 核心流程有 3 点：</strong></p>\n</li>\n</ul>\n<ol>\n<li>\n<p>查询缓存（缓存的 key 为 p, 即 Module.findPath 中生成的文件路径）】</p>\n</li>\n<li>\n<p>从左往右遍历路径字符串，查询到 / 时，拆分路径，判断该路径是否为软链接，如果是软链接则查询真实链接，并生成新路径 P, 然后继续往后遍历，这里有 1 个细节需要特别注意：</p>\n<p>遍历过程中生成的子路径 base 会缓存在 knownHard 和 cache 中，避免重复查询</p>\n</li>\n<li>\n<p>遍历完成得到模块对应的真实路径，此时会将原始路径 original 作为 key, 真实路径作为 value, 保存到缓存中</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>require.resolve,paths 等价于 Module.resolveLookupPaths，, 该方法用于获取所有 node_modules 可能存在的路径</p>\n</li>\n<li>\n<p>require.resolve,paths 实现原理：<br />\n如果路径为 /（根目录），直接返回【'/node modules'】否则，将路径字符串从后往前遍历，查询到 / 时，拆分路径，在后面加上 node_modules, 并传入一个 paths 数组，直至查询不到 / 后返回 paths 数组</p>\n</li>\n</ul>\n<h1 id=\"yargs\"><a class=\"anchor\" href=\"#yargs\">#</a> yargs</h1>\n<p><strong>yargs 使用简要介绍：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hashbang comment\">#! /usr/bin/env node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获得 yargs 构造实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> yargs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yargs/yargs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 参数解析函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> hideBin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yargs/helpers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> arg <span class=\"token operator\">=</span> <span class=\"token function\">hideBin</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> cli <span class=\"token operator\">=</span> <span class=\"token function\">yargs</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 配置命令：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cli</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Usage: $0 [command] &lt;options>'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用说明，$0 表示命令</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">demandCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A command is required,pass --help to see info'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最少一个次命令</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">strict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对于未知的命令行参数进行提示输出。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">recommendCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查找提示近似命令</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'help'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//options 别名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">terminalWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 命令行输出宽度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">epilog</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">welcomn use cli-core</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结语</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注册多个 options 选项</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token literal-property property\">describe</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bootstrap debug mode\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token string\">\"d\"</span> <span class=\"token comment\">// 添加别名</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registry'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 添加单个选项</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token literal-property property\">hidden</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不对外暴露命令</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">describe</span><span class=\"token operator\">:</span><span class=\"token string\">\"define global registry\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span><span class=\"token string\">'r'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Dev Options'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对 Options 选项进行分类</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'registry'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Extra Options\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'init [name]'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'init a project'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">yargs</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注册次命令，制定对应 options</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    yargs</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token literal-property property\">describe</span><span class=\"token operator\">:</span> <span class=\"token string\">'Name of a project'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token string\">'n'</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">argv</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 第二种注册命令的方法（更加精细）</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token literal-property property\">command</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token literal-property property\">aliases</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'la'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ll'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token literal-property property\">describe</span><span class=\"token operator\">:</span> <span class=\"token string\">'List local packages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function-variable function\">builder</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">yargs</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">//.... 操作</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function-variable function\">handler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">argv</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用参数</span></pre></td></tr></table></figure><h1 id=\"commander\"><a class=\"anchor\" href=\"#commander\">#</a> commander</h1>\n<p><strong>commander 简单单例模式</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hashbang comment\">#! /usr/bin/env node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> commander <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'commander'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> pkg <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> program <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> commander<span class=\"token punctuation\">;</span> <span class=\"token comment\">//commander 单例，包含已注册好的基础命令</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>program</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>commander 强大功能</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hashbang comment\">#! /usr/bin/env node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> commander <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'commander'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> pkg <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">commander<span class=\"token punctuation\">.</span>Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动实例化一个 commander 实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>program</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;command> [options]'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用说明</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 版本</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-d,--debug'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'是否开启调试模式'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置 option 选项：选项，帮助信息，默认值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-e,--envName &lt;envName>'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'获取变量名称'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//option 获得传参</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解析参数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 使用 command 注册命令</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clone &lt;source> [destination]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&lt; 必选项 >，[可选项]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>clone</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clone a repository'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-f,--force'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'是否强制克隆'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span>destination<span class=\"token punctuation\">,</span>cmdObj</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do clone'</span><span class=\"token punctuation\">,</span>source<span class=\"token punctuation\">,</span>destination<span class=\"token punctuation\">,</span>cmdObj<span class=\"token punctuation\">.</span>force<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 使用 addCommand 注册子命令</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">commander<span class=\"token punctuation\">.</span>Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'service'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>service</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start [port]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start service at port'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">port</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do service start'</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>service</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop service'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop service'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">addCommand</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 参数解释和自动匹配功能</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>program</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;cmd> [options]'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 强制传入命令</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test command'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 描述</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token literal-property property\">cmd</span><span class=\"token operator\">:</span> <span class=\"token string\">'命令'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token string\">'参数'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cmd<span class=\"token punctuation\">,</span>options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 匹配全部命令</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 默认命令与命令转向功能</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>program</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install [name]'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'install package'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token literal-property property\">executableFile</span><span class=\"token operator\">:</span> <span class=\"token string\">'imooc-cli'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将 install [name] 命令转向 imooc-cli</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token literal-property property\">isDefault</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 设置为默认命令</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token literal-property property\">hidden</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 命令不可见</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 高级定制 1：自定义 help 信息</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">helpInformation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--help'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my help information'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 高级定制 2：监听 debug</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option:debug'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG_LEVEL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'verbose'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG_LEVEL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 高级定制 3：监听未知命令（与默认命令冲突）</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'command:*'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'未知命令:'</span><span class=\"token operator\">+</span> obj<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">const</span> avaliableCommands <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cmd</span><span class=\"token operator\">=></span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'可用命令：'</span><span class=\"token operator\">+</span>avaliableCommands<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">// 最后要进行参数解析！</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 内置属性和方法</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">.</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>program<span class=\"token punctuation\">.</span><span class=\"token function\">outputHelp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内置方法，弹出帮助信息</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">.</span><span class=\"token function\">opts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内置方法，返回 options 信息</span></pre></td></tr></table></figure><h1 id=\"require加载机制\"><a class=\"anchor\" href=\"#require加载机制\">#</a> require 加载机制</h1>\n<p><strong>require 直接加载.js、.json 和.node 文件，其余文件按照 js 语法进行加载</strong></p>\n<ol>\n<li>加载 js 文件，require 加载的 js 文件需要进行导出</li>\n<li>加载 json 文件，通过 JSON.parse 进行文件解析</li>\n<li>加载 node 文件，通过 process.dlopen 方法加载（node 文件是 C++ 语法）</li>\n<li>其余文件，使用 js 语法加载，此时语法错误的会报错。</li>\n</ol>\n<h1 id=\"node多进程\"><a class=\"anchor\" href=\"#node多进程\">#</a> node 多进程</h1>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p><strong>进程是资源分配的最小单位，线程是 CPU 调度的最小单位</strong></p>\n<p>什么是进程</p>\n<p>进程 (Process) 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单</p>\n<p>位，是操作系统结构的基础。</p>\n<p>进程的概念主要有两点：</p>\n<ul>\n<li>第一，进程是一个实体。每一个进程都有它自己的地址空间。</li>\n<li>第二，进程是一个 “执行中的程序”，存在嵌套关系。</li>\n</ul>\n<p>node 多进程官方文档：</p>\n<p>中文版：<span class=\"exturl\" data-url=\"aHR0cDovL25vZGVpcy5jbi9hcGkvY2hpbGRfcHJvY2VzcyxodG1s\">http://nodeis.cn/api/child_process,html</span></p>\n<p><strong>操作系统会使用时会开辟一个 node 进程，每个 node 文件在运行时都会创建一个 child_process 进行，也就是 node.js 的子进程。</strong></p>\n<h3 id=\"child_precess用法\"><a class=\"anchor\" href=\"#child_precess用法\">#</a> child_precess 用法</h3>\n<p><strong>一、执行可执行文件。</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 默认内置库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//exec 方法，可以传执行命令，也可以传文件路径，但不支持给文件传参。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cp<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls -al|grep node_modules'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//execFile 方法，传文件路径，并且支持给文件传参数。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cp<span class=\"token punctuation\">.</span><span class=\"token function\">execFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'-al'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//spawn 方法，传入文件路径，以流式的方式输出，是 exec 和 execFile 的底层原理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'npm'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>install<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">cwd</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/User/dmq/Desktop/test'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>child<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stdout'</span><span class=\"token punctuation\">,</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>child<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stderr'</span><span class=\"token punctuation\">,</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>exec 和 spawn 使用场景：</strong></p>\n<p>当文件操作过程复杂，并且需要频繁输出日志时，使用 spawn 进行流式操作。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'npm'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>install<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">cwd</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/User/dmq/Desktop/test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">stdio</span><span class=\"token operator\">:</span> <span class=\"token string\">'inherit'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将输出传给父进程。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 监听错误事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>child<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">e</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 监听退出事件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>child<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">e</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'命令执行成功'</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>child<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stdout'</span><span class=\"token punctuation\">,</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>child<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stderr'</span><span class=\"token punctuation\">,</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当文件操作过程简单，需要直接输出时，使用 exec 方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'npm install'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">cwd</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/User/dmq/Desktop/test'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">,</span>stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>二、执行指定 JS 文件（不支持回调）</strong></p>\n<p>fork 方法类似于 require 函数，但是区别在于 fork 方法会创建一个 node 子进程执行 JS 文件，使用独立的 v8 引擎去解析代码。</p>\n<p>index.js 文件：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'child.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>child<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello child process!'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    child<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 及时断开连接，防止主进程和子进程长期处于等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>child<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main pid:'</span><span class=\"token punctuation\">,</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>child.js 文件：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child process pid:'</span><span class=\"token punctuation\">,</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>process<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>process<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello main process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"child_process源码\"><a class=\"anchor\" href=\"#child_process源码\">#</a> child_process 源码</h3>\n<p>疑问：</p>\n<ul>\n<li>exec、execFile、spanwn 和 fork 区别：\n<ul>\n<li>exec: 原理是调用 /bin/sh-c 执行我们传入的 shell 脚本，底层调用了 execFile</li>\n<li>execFile: 原理是直接执行我们传入的 file 和 args, 底层调用 spawn 创建和执行子进程，并建立了回调，一次性将所有的 stdout 和 stderr 结果返回</li>\n<li>spawn: 原理是调用了 internal/child_.process, 实例化了 ChildProcess 子进程对象，再调用 child.spawn 创建子进程并执行命令，底层是调用了 child._handle.spawn 执行 process_wrap 中的 spwn 方法，执行过程是异步的，执行完毕后通过 PIPE 进行单向数据通信，通信结束后会子进程发起 onexit 回调，同时 Socket 会执行 close 回调</li>\n<li>fork: 原理是通过 spawn 创建子进程和执行命令，通过 setupchannel 创建 IPC 用于子进程和父进程之</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"eggjsmongodb\"><a class=\"anchor\" href=\"#eggjsmongodb\">#</a> egg.js+mongodb</h1>\n<p><strong>1、egg.js</strong></p>\n<p>用于快速生成后端 api 的框架。</p>\n<p><strong>2、npm init egg 命令</strong></p>\n<p>当执行 <code>npm init egg</code>  命令时，npm 会自动找到 create-egg 这个包（其他包同理，找到 create - 包名），进行执行。<strong>当不想将脚手架安装到本地，而是在线上直接使用时，这个机制就显得十分重要。</strong></p>\n<p><strong>3、mongodb 数据库</strong></p>\n<p>非关系型数据库。</p>\n<ul>\n<li>\n<p><strong>云 mongodb</strong></p>\n<ul>\n<li>\n<p>云 mongodb 开通</p>\n</li>\n<li>\n<p>地址：https:/mongodb.console.aliyun.comL, 创建实例并付款即可</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>本地 mongodb</strong></p>\n<ul>\n<li>\n<p>地址：https:/www.runoob.com/mongodb/mongodb-tutorial.html</p>\n</li>\n<li>\n<p>mongodb 使用方法</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItZGF0YWJhc2VzLWRvY3VtZW50cy1jb2xsZWN0aW9ucy5odG1s\">https://www.runoob.com/mongodb/mongodb-databases-documents-collections.html</span></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>4、egg.js 链接 mongodb 数据库</p>\n<p>utils/mongo.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'npmlog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG_LEVEL</span> <span class=\"token operator\">?</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG_LEVEL</span> <span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logger<span class=\"token punctuation\">.</span>heading <span class=\"token operator\">=</span> <span class=\"token string\">'pick'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自定义头部</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addLevel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">fg</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bold</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自定义 success 日志</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addLevel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notice'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">fg</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bg</span><span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自定义 notice 日志</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> MongoClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MongoClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mongo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> dbName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dbName <span class=\"token operator\">=</span> dbName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      MongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token literal-property property\">useNewUrlParser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token literal-property property\">useUnifiedTopology</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> client</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dbName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> db<span class=\"token punctuation\">,</span> client <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">connectAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">docName<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> db<span class=\"token punctuation\">,</span> client <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span>docName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          logger<span class=\"token punctuation\">.</span><span class=\"token function\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">docName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectAction</span><span class=\"token punctuation\">(</span>docName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">collection<span class=\"token punctuation\">,</span> onSuccess<span class=\"token punctuation\">,</span> onError</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">projection</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> docs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>docs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">docName<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectAction</span><span class=\"token punctuation\">(</span>docName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">collection<span class=\"token punctuation\">,</span> onSuccess<span class=\"token punctuation\">,</span> onError</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      collection<span class=\"token punctuation\">.</span><span class=\"token function\">insertMany</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>          <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">docName<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectAction</span><span class=\"token punctuation\">(</span>docName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">collection<span class=\"token punctuation\">,</span> onSuccess<span class=\"token punctuation\">,</span> onError</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      collection<span class=\"token punctuation\">.</span><span class=\"token function\">deleteOne</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>          <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">//   update(collection, data) &#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">//   &#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">client</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    client <span class=\"token operator\">&amp;&amp;</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Mongo<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>db.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mongo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mongodb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://dmq:dmq0216@127.0.0.1:27017/dbName'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dbName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">mongo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'project'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"inquirer源码\"><a class=\"anchor\" href=\"#inquirer源码\">#</a> inquirer 源码</h1>\n<h2 id=\"学习路径\"><a class=\"anchor\" href=\"#学习路径\">#</a> 学习路径</h2>\n<ul>\n<li>掌握一些库：readline（命令行读取）/events（事件驱动）/stream（输入输出流）/ansi-escapes（命令行文字样式）/rxjs（处理异步事件）</li>\n<li>掌握命令行交互的实现原理，并实现一个可交互的列表</li>\n<li>分析 inquirer 源码掌握其中的关键实现</li>\n</ul>\n<h1 id=\"ejsglob\"><a class=\"anchor\" href=\"#ejsglob\">#</a> ejs+glob</h1>\n<p>ejs 三方库用于 xml 动态模板渲染，glob 三方库用于根据 <code>文件路径进行遍历和匹配文件</code> ，拿到文件的内容。</p>\n<h1 id=\"ejs源码\"><a class=\"anchor\" href=\"#ejs源码\">#</a> ejs 源码</h1>\n<p>省略，详见官网</p>\n<h1 id=\"require源码\"><a class=\"anchor\" href=\"#require源码\">#</a> require 源码</h1>\n<p>省略，详见官网</p>\n<h1 id=\"代码复用实践\"><a class=\"anchor\" href=\"#代码复用实践\">#</a> 代码复用实践</h1>\n<p>** 代码复用目的：** 提高人效，降低开发成本。</p>\n<p><strong>计算公式</strong>为：<strong>节约工时 = 服用代码节约时间  *  代码复用系数  *  复用次数</strong></p>\n<p><strong>背后思考：</strong></p>\n<ul>\n<li>不同开发者、团队之间会产生了大量重复、通用的代码</li>\n<li>这些代码散落在各自团队的项目代码里</li>\n<li>复用的时候大家习惯于直接拷贝这些代码到项目中，因为这样做对个人成本最低（开发者往往更熟悉自己写的代码)，但是这种做法不利于团队之间代码共享，因为每个人开发不同的业务，对不同页面的熟悉程度不一样，而代码复用的宗旨就是要尽可能将团队中的开发着的整体水平拉齐</li>\n<li>所以需要通过工具化的方式降低代码复用的成本</li>\n</ul>\n",
            "tags": [
                "脚手架开发",
                "脚手架开发"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/04/12/%E5%A4%8D%E6%9D%82%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/",
            "url": "https://dmqweb.cn/2024/04/12/%E5%A4%8D%E6%9D%82%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/",
            "title": "复杂业务部署与优化",
            "date_published": "2024-04-12T00:33:58.000Z",
            "content_html": "<h1 id=\"软件生命周期：\"><a href=\"#软件生命周期：\" class=\"headerlink\" title=\"软件生命周期：\"></a>软件生命周期：</h1><p><img data-src=\"/images/Snipaste_2024-04-16_12-54-33.jpg\" alt=\"/images/Snipaste_2024-04-16_12-54-33.jpg\"></p>\n<h1 id=\"架构流程图\"><a href=\"#架构流程图\" class=\"headerlink\" title=\"架构流程图\"></a>架构流程图</h1><p><img data-src=\"/images/Snipaste_2024-04-17_12-16-04.jpg\" alt=\"/images/Snipaste_2024-04-17_12-16-04.jpg\"></p>\n<h1 id=\"复杂项目通用方案\"><a href=\"#复杂项目通用方案\" class=\"headerlink\" title=\"复杂项目通用方案\"></a>复杂项目通用方案</h1><h4 id=\"业务的复杂度\"><a href=\"#业务的复杂度\" class=\"headerlink\" title=\"业务的复杂度\"></a>业务的复杂度</h4><ul>\n<li>交互的复杂性</li>\n<li>数据结构和状态的复杂性</li>\n<li>多项目互相依赖的复杂性</li>\n<li>打包</li>\n<li>性能优化</li>\n<li>第三方库的使用和调研以及二次开发</li>\n</ul>\n<h4 id=\"流程的复杂度\"><a href=\"#流程的复杂度\" class=\"headerlink\" title=\"流程的复杂度\"></a>流程的复杂度</h4><ul>\n<li>git flow</li>\n<li>lint工具</li>\n<li>单元测试</li>\n<li>commit信息</li>\n<li>PR revirew</li>\n<li>CI &#x2F; CD</li>\n</ul>\n<h1 id=\"CI-x2F-CD的概念\"><a href=\"#CI-x2F-CD的概念\" class=\"headerlink\" title=\"CI &#x2F; CD的概念\"></a>CI &#x2F; CD的概念</h1><p>业务组件库的开发和发布是随着一些列任务进化的：</p>\n<ul>\n<li>本地commit钩子函数完成commit验证</li>\n<li>代码push到远端之后</li>\n<li>跑特定的test（不仅仅是本机的unit test，也可能有时间很长的E2E test）</li>\n<li>test通过之后检查是否有新的tag，如果有就自动publish一个新的版本</li>\n<li>甚至还有更多，自动部署文档站点等等。</li>\n</ul>\n<p>这些任务如果手动操作，就费时费力，所以需要自动化进行。</p>\n<h4 id=\"CI（Continuous-integration）持续集成\"><a href=\"#CI（Continuous-integration）持续集成\" class=\"headerlink\" title=\"CI（Continuous integration）持续集成\"></a>CI（Continuous integration）持续集成</h4><p>持续集成是指频繁地将代码集成到主干，一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。</p>\n<p>作用有：</p>\n<ul>\n<li>快速发现错误</li>\n<li>防止分支大幅偏离主干</li>\n</ul>\n<p>持续集成的目的就是让产品可以快速迭代，同时保持高质量。</p>\n<h4 id=\"CD（Continuous-Delivery）持续交付\"><a href=\"#CD（Continuous-Delivery）持续交付\" class=\"headerlink\" title=\"CD（Continuous Delivery）持续交付\"></a>CD（Continuous Delivery）持续交付</h4><p>持续交付是指频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</p>\n<h4 id=\"CD（Continuous-Deployment）持续部署\"><a href=\"#CD（Continuous-Deployment）持续部署\" class=\"headerlink\" title=\"CD（Continuous Deployment）持续部署\"></a>CD（Continuous Deployment）持续部署</h4><p>持续部署是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p>\n<h4 id=\"CI-x2F-CD两大服务：\"><a href=\"#CI-x2F-CD两大服务：\" class=\"headerlink\" title=\"CI &#x2F; CD两大服务：\"></a>CI &#x2F; CD两大服务：</h4><ul>\n<li>github actions</li>\n<li>travis-ci</li>\n</ul>\n<h1 id=\"列表排序解决方案\"><a href=\"#列表排序解决方案\" class=\"headerlink\" title=\"列表排序解决方案\"></a>列表排序解决方案</h1><p>列表排序原理：</p>\n<pre><code class=\"js\">&lt;template&gt;\n    &lt;div&gt;\n      &lt;ul class=&quot;ul&quot; @drop=&quot;onDrop&quot;&gt;\n        &lt;li \n            v-for=&quot;(item,index) in list&quot; \n            :data-index=&quot;index&quot; \n            :key=&quot;item.id&quot; \n            @dragover=&quot;onDragover($event,index)&quot; \n            @dragstartart=&quot;dragstart($event,index)&quot; \n            @dragenter=&quot;dragenter($event,index)&quot; \n            draggable=&quot;true&quot; \n            :class=&quot;[item.id==currentLi?&#39;glost&#39;:&#39;&#39;]&quot;\n        &gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n/*eslint-disable*/\nimport &#123; ref &#125; from &quot;vue&quot;;\nimport &#123;arrayMoveImmutable&#125; from &#39;array-move&#39;;\nlet currentLi = ref(1);\nlet index = ref(1);\nconst list = ref(\n  [\n  &#123;id:1,name:&#39;列表1&#39;&#125;,\n  &#123;id:2,name:&#39;列表2&#39;&#125;,\n  &#123;id:3,name:&#39;列表3&#39;&#125;,\n  &#123;id:4,name:&#39;列表4&#39;&#125;,\n  &#123;id:5,name:&#39;列表5&#39;&#125;,\n]\n)\nconst dragstart = (e,inde)=&gt;&#123;\n  currentLi.value = inde;\n&#125;\nconst dragenter = (e,ind)=&gt;&#123;\n  if(ind != currentLi.value)&#123;\n      list.value = arrayMoveImmutable(list.value,ind,currentLi.value)\n      currentLi.value = ind;\n  &#125;\n&#125;\nconst onDrop = (e)=&gt;&#123;\n  console.log(e.target.dataset.index,&#39;drop&#39;);\n  list.value = arrayMoveImmutable(list.value,index.value,currentLi.value)\n  console.log(list.value);\n&#125;\nconst onDragover = (e,inde)=&gt;&#123;\n  e.preventDefault();\n  index.value = inde;\n&#125;\n&lt;/script&gt;\n\n&lt;style  scoped&gt;\n.ul&gt;li&#123;\n  width: 100%;\n  height: 50px;\n  border: 1px solid red;\n&#125;\n.glost&#123;\n  box-shadow: 10px 10px 3px 3px gray;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>列表排序常用工具包：</p>\n<ul>\n<li>vue-draggable</li>\n<li>sortable.js</li>\n<li>array-move.js</li>\n</ul>\n<h1 id=\"拖动改变位置原理\"><a href=\"#拖动改变位置原理\" class=\"headerlink\" title=\"拖动改变位置原理\"></a>拖动改变位置原理</h1><p>通过监听mousedown和mousemove事件，用element.getBoundingClientRect方法获得x和y，left和top等属性，改变对应元素的top和left属性。</p>\n<h1 id=\"拖动改变大小原理\"><a href=\"#拖动改变大小原理\" class=\"headerlink\" title=\"拖动改变大小原理\"></a>拖动改变大小原理</h1><p> 设置边框元素，边框元素的四个角添加圆点元素，监听mousedown事件和mousemove事件，并将最新的坐标赋值给元素的尺寸大小。</p>\n<h1 id=\"快捷键实现原理\"><a href=\"#快捷键实现原理\" class=\"headerlink\" title=\"快捷键实现原理\"></a>快捷键实现原理</h1><p>好用的快捷键第三方库：Hotkeys.js</p>\n<p>事件原理：keydown事件的监听，通过event.key判断是那个快捷键，从而执行对应的操作。</p>\n<h1 id=\"撤销重做原理\"><a href=\"#撤销重做原理\" class=\"headerlink\" title=\"撤销重做原理\"></a>撤销重做原理</h1><p>维护一个固定长度的histories数组和historyIndex指针，每次修改的时候添加一条记录（标识操作类型和数据）。回滚时改变historyIndex指针。</p>\n<h1 id=\"右键菜单原理\"><a href=\"#右键菜单原理\" class=\"headerlink\" title=\"右键菜单原理\"></a>右键菜单原理</h1><p>在需要显示的区域拦截默认的右键点击事件，判断是否点击在组件元素上（通过event.target），显示一个自定义菜单，其中包括操作项，显示在鼠标的位置（event.clientX和event.clientY），点击完成操作，通过display:none隐藏。</p>\n<h1 id=\"自动保存实现方案\"><a href=\"#自动保存实现方案\" class=\"headerlink\" title=\"自动保存实现方案\"></a>自动保存实现方案</h1><ul>\n<li>定时保存（语雀）</li>\n<li>实时保存（石墨）</li>\n</ul>\n<p>实现原理：添加isDrity字段标记数据是否有修改，当修改时将isDirty设置为true，根据isDIrty的值设置定时器，定时触发保存逻辑。</p>\n<h1 id=\"DOM元素截图实现方案\"><a href=\"#DOM元素截图实现方案\" class=\"headerlink\" title=\"DOM元素截图实现方案\"></a>DOM元素截图实现方案</h1><p>工具包：html2canvas</p>\n<p>实现原理：</p>\n<p>根据DOM元素的styles样式，通过svg的foreignObject元素引入XML命名空间的元素，然后创建一个image标签，将svg通过url.createObjectURL方法创建一个路径赋值给一个image标签的src属性，通过canvas画笔 的drawImage方法将image图片绘制到canvas画布上。</p>\n<p>实现流程：</p>\n<ul>\n<li>style设置DOM样式</li>\n<li>svg引入DOM</li>\n<li>createObjectURL创建url路径</li>\n<li>将url复制到image标签的src</li>\n<li>canvas的drawImage将image图片绘制到canvas画布上</li>\n</ul>\n<pre><code class=\"js\">const data =\n&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39;width=&#39;400px&#39;height=&#39;40\n&quot;&lt;foreignabject width=&#39;100%&#39;height=&#39;100%&#39;&gt;&quot;+\n&quot;&lt;div xmlns=&#39;http://ww.w3.org/1999/xhtml&#39;&gt;&quot;\nelement.innerHTML+\n&quot;&lt;/div&gt;&quot;+\n&quot;&lt;/foreignobject&gt;&quot; +\n&quot;&lt;/svg&gt;&quot;\n\nconst svg = new Blob([data],&#123;type:&quot;image/svg+xml;charset=utf-8&quot;&#125;);\nconst url = URL.createobjectURL(svg)\nconst image = new Image()\nimage.src = url\nimage.addEventListener(&#39;load&#39;,()=&gt;&#123;\n    const ctx =anvas.getContext(&#39;2d&#39;);\n    if (ctx)&#123;\n    ctx.drawImage(image,0,0)\n    &#125;\n&#125;)\n</code></pre>\n<h1 id=\"二维码生成方案\"><a href=\"#二维码生成方案\" class=\"headerlink\" title=\"二维码生成方案\"></a>二维码生成方案</h1><ul>\n<li>工具包：node-qrcode</li>\n<li>ts项目中需要安装额外的定义文件。</li>\n</ul>\n<p>简单原理：将数据变为二进制，然后通过canvas将二进制变为图像。</p>\n<pre><code class=\"html\">&lt;body&gt;\n  &lt;canvas id=&quot;qrcode&quot; width=&quot;128&quot; height=&quot;128&quot;&gt;&lt;/canvas&gt;\n  &lt;script&gt;\n    //将字符串转为二进制形式\n    function toBianary(str)&#123;\n        let res = &#39;&#39;;\n        for(let i=0;i&lt;str.length;i++)&#123;\n            let charCode = str.charCodeAt(i);\n            let binaryCharCode = charCode.toString(2);\n            res += binaryCharCode.padStart(8,&#39;0&#39;);\n        &#125;\n        return res;\n    &#125;\n    //绘制\n    function drawQRCode(text, canvas) &#123;\n      var context = canvas.getContext(&quot;2d&quot;);\n      // 绘制黑白像素点\n      for (var i = 0; i &lt; text.length; i++) &#123;\n        var row = Math.floor(i / canvas.width);\n        var col = i % canvas.width;\n        var color = text.charAt(i) === &quot;1&quot; ? &quot;#000000&quot; : &quot;#FFFFFF&quot;;\n        context.fillStyle = color; \n        context.fillRect(col, row, 1, 1);\n      &#125;\n    &#125;\n    var qrcodeCanvas = document.getElementById(&quot;qrcode&quot;);\n    drawQRCode(toBianary(&#39;https://dmqweb.cn&#39;), qrcodeCanvas); // 示例：绘制一个简单的二维码\n  &lt;/script&gt;\n</code></pre>\n<h1 id=\"复制功能实现原理\"><a href=\"#复制功能实现原理\" class=\"headerlink\" title=\"复制功能实现原理\"></a>复制功能实现原理</h1><ul>\n<li>工具包：clipboard.js</li>\n<li>自带type定义文件</li>\n</ul>\n<p>实现原理：</p>\n<p>方案一：document.execCommand()方法。内置一系列功能，包括复制文本（但<strong>前提是需要选中文本</strong>），可以使用不可见元素迂回。</p>\n<p>方案二：Clipboard API（ navigator.clipboard ），但是对于<strong>浏览器兼容性有待加强。</strong></p>\n<h1 id=\"下载文件原理\"><a href=\"#下载文件原理\" class=\"headerlink\" title=\"下载文件原理\"></a>下载文件原理</h1><ul>\n<li>工具包：FileSaver.js（小文件）</li>\n<li>StreamSaver.js（大文件）</li>\n</ul>\n<p>方案一：超链接a标签添加download属性，属性值为文件名，rel属性设置打开页面的具体实现细节。（但前提是<strong>href属性为当前同源情况下</strong>。）</p>\n<p>方案二：通过axios请求到图片地址，通过URL.createObjectURL创建为一个与document相绑定的地址，赋值给a标签即可。（不要忘记使用URL.revokeObjectURL将创建的地址移除。）</p>\n<p>方案三：通过FileReader.readAsDataURL，创建一个FileReader实例，使用readAsDataURL读取对象返回一段base64格式的字符串，监听reader实例的onload事件，创建a标签将reader.result赋值给a标签的href属性。</p>\n<pre><code class=\"js\">downloadFile:function(data,fileName)&#123;\n   const reader = new FileReader()\n   // 传入被读取的blob对象\n   reader.readAsDataURL(data)\n   // 读取完成的回调事件\n   reader.onload = (e) =&gt; &#123;\n       let a = document.createElement(&#39;a&#39;)\n       a.download = fileName\n       a.style.display = &#39;none&#39;\n       // 生成的base64编码\n       let url = reader.result\n       a.href = url\n       document.body.appendChild(a)\n       a.click()\n       document.body.removeChild(a)\n   &#125;\n&#125;\n</code></pre>\n<p>终极解决方案：由于通过URL.createObjectURL和FileReader都会先将数据保存到内存中，业务中经常需要后端验证token之后才能拿到文件，不能直接使用a标签。因此实际中可以先发送ajax请求验证token，验证之后颁发一个过期时间短的cookie，之后使用a标签进行下载即可。但是同样会受到a标签download属性跨域请求的限制。</p>\n<h1 id=\"应用部署的流程\"><a href=\"#应用部署的流程\" class=\"headerlink\" title=\"应用部署的流程\"></a>应用部署的流程</h1><p><strong>构建</strong><br>Javascript语言本身是不需要编译的。<br>但是现代的前端项目使用的语言和或者的模块系统都无法在浏览器中使用，都需要使用特定的<br>bundler将源代码最终转换为浏览器支持的」avascript代码。<br><strong>不同的环境:</strong><br>开发环境(development) ：本地的测试环境<br>测试环境(test或者staging）：线上的测试环境</p>\n<p>生产环境（production)：线上的生产环境</p>\n<p><strong>生产和开发环境的区别</strong><br>*开发环境<br>*会添加丰富的错误提示<br>可以使用mock server或者本地后端环境<br>添加各种便利的功能-比如hot reload,自动刷新<br>*不太关心静态资源的大小，最好提供最丰富的调试信息(sourcemap)等。</p>\n<p><strong>生产环境</strong><br>稳定是最重要的原则<br>速度是第一要务<br><strong>生产环境和测试环境的区别</strong><br>高度相似<br>使用的后端服务不一样</p>\n<p><strong>环境变量设置（按优先级）</strong></p>\n<ul>\n<li>跨平台设置环境变量工具包：cross-env</li>\n<li>命令中添加环境变量（平台限制）</li>\n<li>环境变量文件中配置</li>\n</ul>\n<p><strong>在项目根目录中放置下列文件来指定环境变量</strong><br>.env                                        #在所有的环境中被载入<br>.env.local                             #在所有的环境中被载入，但会被git忽略<br>env.[mode]                         #只在指定的模式中被载入<br>env.[mode].local             #只在指定的模式中被载入，但会被git忽略</p>\n<h1 id=\"webpack构建优化\"><a href=\"#webpack构建优化\" class=\"headerlink\" title=\"webpack构建优化\"></a>webpack构建优化</h1><h3 id=\"Bundler：\"><a href=\"#Bundler：\" class=\"headerlink\" title=\"Bundler：\"></a>Bundler：</h3><p>将浏览器不支持的模块进行编译，转换，<br>合并最后生成的代码可以在浏览器端良好的运行的工具。</p>\n<h3 id=\"Loaders：\"><a href=\"#Loaders：\" class=\"headerlink\" title=\"Loaders：\"></a><strong>Loaders：</strong></h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvbG9hZGVycy8=\">https://webpack.docschina.org/concepts/loaders/</span><br>loader用于对模块的源代码进行转换。loader可以使你在import或”Ioad(加载)”模块时预处理文件。<br><strong>多个Loader</strong><br>module.rules允许你在webpack配置中指定多个loader。这种方式是展示loader的一种简明方式，并且有助于使代码变得简洁和易于维护。</p>\n<p><strong>webpack中loader配置：</strong></p>\n<pre><code class=\"json\">const path = require(&#39;path&#39;)\nmodule.exports = &#123;\n    entry:&#39;./main.js&#39;,\n    output:&#123;\n        path:path.resolve(dirname,&#39;dist&#39;),\n        filename:bundle.js&#39;,\n    &#125;\n&#125;,\nmodule:&#123;\n    rules:[\n    &#123;\n        test:/八.css$/,\n        use: [\n            loader:&#39;style-loader&#39;&#125;,   //先写的loader后执行。\n            loader:&#39;css-loader&#39;&#125;\n        ]\n    &#125;]\n  &#125;\n&#125;\n</code></pre>\n<h6 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h6><p><strong>webpack中loader原理：</strong></p>\n<p> 在webpack.config.js的module字段的rules数组中进行配置：添加一个对象标识一个独立的匹配项，test字段使用正则表示匹配的文件名，use数组表示对应文件需要执行的loader，webpack在打包时会<strong>将文件内容传入并执行对应的loader</strong>（是一个函数），<strong>执行loader函数后会将函数返回值包装成一个新的函数</strong>，因此webpack中的loader通常需要进行两次module.exports。</p>\n<pre><code class=\"js\">//手写一个md文件的loader\nconst marked = require(&#39;marked&#39;);  //第三方库，用于将md转为html\nconst utils = require(&#39;loader-utils&#39;)  //官方库，用于获取用户配置loader时传入的参数\nconst markdownLoader = (source) =&gt; &#123;\n    const options = utils.getOptions(this);\n    const html = marked(source , options);\n    return  `module.exports = $&#123;JSON.stringify(html)&#125;`;\n&#125;\nmodule.exports = markdownLoader;\n</code></pre>\n<p>配置：</p>\n<pre><code class=\"js\">const path = require(&#39;path&#39;)\nmodule.exports = &#123;\n    entry:&#39;./main.js&#39;,\n    output:&#123;\n        path:path.resolve(dirname,&#39;dist&#39;),\n        filename:bundle.js&#39;,\n    &#125;\n&#125;,\nmodule:&#123;\n    rules:[\n    &#123;\n        test:/\\.css$/,\n        use: [\n            &#123; loader:&#39;style-loader&#39; &#125;,   //先写的loader后执行。\n            &#123; loader:&#39;css-loader&#39; &#125;\n        ]\n    &#125;,\n    &#123;\n        test:/\\.md$/,\n        use: [\n            &#123; loader: &#39;./markdonwn-loader&#39;,options:&#123; headerIds:false &#125; &#125; //其中options是给loader函数传入的第二个参数，loader中可以使用loader-utils官方三方库进行接受\n        ]\n    &#125;]\n  &#125;\n&#125;\n</code></pre>\n<p><strong>多个Loader串联</strong><br>最后的loader最早调用，将会传入原始资源内容。<br>第一个loader最后调用，期望值是传出JavaScript和source map(可选)。<br>中间的loader执行时，会传入前一个loader传出的结果。<br><strong>将markdown转换为html:turndown</strong><br>地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIub20vZG9tY2hyaXN0aWUvdHVybmRvd24=\">https://github.om/domchristie/turndown</span></p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins:\"></a><strong>plugins:</strong></h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvcGx1Z2lucy8=\">https://webpack.docschina.org/concepts/plugins/</span><br>插件是webpack的支柱功能。webpack自身也是构建开你在webpack配置中用到的相同的插件系统之上！插件目的在于解决loader无法实现的其他事。(我自己的理解，loader解决的是各种不同资源的问题，plugins更多解决的是项目整体的事情)</p>\n<pre><code class=\"json\">const path = require(&#39;path&#39;);\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\nmodule.exports = &#123;\n    entry:&#39;./main.js&#39;,\n    output:&#123;\n        path:path.resolve(dirname,&#39;dist&#39;),\n        filename:bundle.js&#39;,\n    &#125;\n&#125;,\nmodule:&#123;\n    rules:[\n    &#123;\n        test:/八.css$/,\n        use: [\n            loader:&#39;style-loader&#39;&#125;,   //先写的loader后执行。\n            loader:&#39;css-loader&#39;&#125;\n        ]\n    &#125;]\n  &#125;,\nplugins:[\n    new BundlesizeWebpackPlugin( &#123; sizeLimit:3 &#125; )  //自己手写的插件（如下）\n    new webpack.ProgressPlugin(), //显示打包过程（webpack内置插件）\n    new HtmlwebpackPlugin(),\n]\n&#125;\n</code></pre>\n<h6 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h6><p><strong>webpack中plugins原理：</strong></p>\n<p>webpack执行时会将plugins字段中的插件实例取出并将webpack实例传入并执行其<strong>apply方法</strong>，通过webpack实例的hooks中的方法我们可以操控对应的钩子函数。</p>\n<p>官方的教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb250cmlidXRlL3dyaXRpbmctYS1wbHVnaW4v\">https://webpack.js.org/contribute/writing-a-plugin/</span><br><strong>插件的格式</strong><br>一个JavaScript函数或JavaScript类<br>在它原型上定义的apply方法，会在安装插件时被调用，并被webpack compiler调用一次<br>指定一个触及到webpack本身的事件钩子，即hooks,用于特定时机处理额外的逻辑<br>Compiler Hooks列表<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmlzLm9yZy9hcGkvY29tcGlsZXItaG9va3Mv\">https://webpack.is.org/api/compiler-hooks/</span></p>\n<pre><code class=\"js\">//手写一个webpack插件，打包文件超出限制时，报错。\nconst &#123; resolve &#125; = require(&#39;path&#39;);\nconst &#123; statSync &#125; = require(&#39;fs&#39;); //fs模块中同步读取文件信息\nclass BundlesizeWebpackPlugin &#123;\n    constructor(options) &#123;\n        this.options = options;\n    &#125;\n    apply(compiler) &#123;\n        //获取到传入的参数\n        const &#123; sizeLimit &#125; = this.options;\n        compiler.hooks.compile.tap(&#39;BundleSizePlugin&#39;,(compilationParams)=&gt;&#123; //编译时钩子,参数是参数\n            console.log(&#39;compile阶段&#39;,compilationParams);\n        &#125;)\n        compiler.hooks.done.tap(&#39;BundleSizePlugin&#39;,(stats)=&gt;&#123; //结束时钩子，参数是打包后的信息。\n            console.log(&#39;done&#39;,stats); \n            //拿到打包后文件的路径和文件名\n            const &#123; path , filename &#125; = stats.compilation.outputOptions;\n            //拼接成文件路径\n            const bundlePath = resolve(path,filename);\n            //获取到文件size\n            const &#123; size &#125; = statSync(bundlePath);\n            const bundleSize = size / 1024;\n            if(bundleSize &lt; sizeLimit) &#123;\n                console.log(&#39;Safe:Bundle-Size&#39;,bundleSize,&#39;\\n Size Limit:&#39;,sizeLimit);\n            &#125;else&#123;\n                console.error(&#39;Unsafe:Bundle-Size&#39;,bundleSize,&#39;\\n Size Limit:&#39;,sizeLimit);\n            &#125;\n        &#125;) \n    &#125;\n&#125;\nmodule.exports = BundlesizeWebpackPlugin;\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>Loaders关注代码中的单个资源，Plugins关注整体流程，可以接触到webpack构建流程中的<br>各个阶段并劫持做一些代码处理。</strong></p>\n<h1 id=\"node后端框架\"><a href=\"#node后端框架\" class=\"headerlink\" title=\"node后端框架\"></a>node后端框架</h1><h2 id=\"Node-js后端框架调研\"><a href=\"#Node-js后端框架调研\" class=\"headerlink\" title=\"Node.js后端框架调研\"></a>Node.js后端框架调研</h2><p><strong>后端框架应该注意的三大问题</strong><br>路由Routes<br>请求Request<br>响应Response</p>\n<h4 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h4><p>官方网址：[https:l&#x2F;expressis.com(https:expressis.com)<br>**安装**<br>官方网址：[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9leHByZXNzaXMuY29tL3poLWNuL3N0YXJ0ZXIvaW5zdGFsbGluZy5odG1sXQ==\">https://expressis.com/zh-cn/starter/installing.html]</span>(https:l&#x2F;expressjs.com&#x2F;zh-<br>cn&#x2F;starter&#x2F;installing.html)<br>使用生成器安装，可以自动生成一系列的脚手架代码：[https:&#x2F;expressjs.com&#x2F;zh<br>cn&#x2F;starter&#x2F;generator.htmll(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9leHByZXNzaXMuY29tL3poLWNuL3N0YXJ0ZXIvZ2VuZXJhdG9yLmh0bWw=\">https://expressis.com/zh-cn/starter/generator.html</span>)</p>\n<p><strong>优点</strong></p>\n<p>快速简单、易上手</p>\n<p><strong>缺点</strong></p>\n<ul>\n<li>路由响应中，很可能有：从外部请求数据的服务，有验证路由的请求参数，返回特定的格式。</li>\n<li>所有逻辑不分青红皂白的写在一起！很容易产生冗长的难以维护的代码。</li>\n<li>一些大型必备的模块，如第三方服务初始化，安全，日志都没有明确的标准。</li>\n</ul>\n<p><strong>Express中间件：</strong></p>\n<p>Express是一个基于中间件的框架，其余任务都会在中间件中执行，中间件是一个队列结构，先写入的任务先执行,中间件的写法是：app.use()，当调用中间件时，会向传入的函数中传入req,res和next函数。</p>\n<p><strong>中间件可以完成的任务</strong></p>\n<ul>\n<li>执行任何代码。</li>\n<li>对请求和响应对象进行更改。</li>\n<li>结束请求&#x2F;响应循环。</li>\n<li>调用堆栈中的下一个中间件。</li>\n</ul>\n<h4 id=\"Koa2\"><a href=\"#Koa2\" class=\"headerlink\" title=\"Koa2\"></a>Koa2</h4><p><strong>官网地址</strong>：[https:I&#x2F;koajs.com(https:&#x2F;koajs.com)</p>\n<p><strong>Koa2和Express的区别</strong></p>\n<ul>\n<li>使用Promise(async,await)代替callback (node&gt;v7.6.0)</li>\n<li>使用ctx(上下文对象)封装req(Request)和res(Response),以及一些常用的功能。</li>\n<li><strong>完全不同的中间件机制</strong></li>\n<li><strong>更轻量级，没有捆绑任何中间件</strong></li>\n<li>官方文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL2tvYS9ibG9iL21hc3Rlci9kb2NzL2tvYS12cy1leHByZXNzLm1k\">https://github.com/koajs/koa/blob/naster/docs/koa-vs-express.md</span></li>\n</ul>\n<p><strong>Koa2中间件：</strong></p>\n<ol>\n<li>Koa2中间件，由Express的队列模型（同步）转变为洋葱模型，当程序运行到<code>await next()</code>的时候就会暂停当前程序，进入下一个中间件，处理完之后才会仔回过头来继续处理。</li>\n<li>Koa2洋葱模型解决的问题就是一个中间件可以调用其他中间件执行后，再继续自己的操作，Express框架中next()执行后就直接到下一个中间件操作，无法退回。</li>\n</ol>\n<p><img data-src=\"/images/Snipaste_2024-04-22_14-30-49.jpg\" alt=\"Koa2中间件\"></p>\n<p><strong>代码示例：</strong></p>\n<pre><code class=\"js\">const Koa = require(&#39;koa&#39;);\nconst app = new Koa();\nconst PORT = 3000;\napp.use(async (ctx, next)=&gt;&#123;\n    console.log(1)\n    await next();\n    console.log(1)\n&#125;);\napp.use(async (ctx, next) =&gt; &#123;\n    console.log(2)\n    await next();\n    console.log(2)\n&#125;)\napp.use(async (ctx, next) =&gt; &#123;\n    console.log(3)\n&#125;)\napp.listen(PORT);\nconsole.log(`http://localhost:$&#123;PORT&#125;`);\n</code></pre>\n<p><strong>Koa2特点：</strong></p>\n<ul>\n<li>响应机制的不同</li>\n<li>Express:我们直接操作的是res对象，直接res.send之后就立即响应了。</li>\n<li>Koa2:数据的响应是通过ctx.body进行设置，注意这里仅是设置并没有立即响应，而是在所有的中间件结束之后做了响应。</li>\n</ul>\n<p><strong>缺点：</strong>Koa2在使用上有一定的缺点，因为太过于轻量使得在使用时需要手动处理很多操作，可以使用基于Koa2的上层框架（如：egg.js）</p>\n<h4 id=\"egg-js\"><a href=\"#egg-js\" class=\"headerlink\" title=\"egg.js\"></a>egg.js</h4><p><strong>Express和Koa2的不足</strong></p>\n<ul>\n<li>简单而且扩展性强，适合个人的比较小的项目</li>\n<li>没有约定，对于统一维护和开发非常不利</li>\n</ul>\n<p><strong>对于后端框架的需求</strong></p>\n<ul>\n<li>需要有一套优秀的统一的约定或者架构进行开发</li>\n<li>有丰富的扩展机制和可定制性</li>\n<li>Typescript支持</li>\n</ul>\n<p><strong>egg.js</strong></p>\n<ul>\n<li>地址：[https:l&#x2F;eggis.org&#x2F;zh-cnI(https:l&#x2F;eggjs.org&#x2F;zh-cn) （基于Koa2）</li>\n<li>阿里大厂出品，维护有保障。国内开发者开发，中文文档质量有保证。</li>\n<li><strong>约定优于配置，按照一套统一的约定进行应用开发。</strong></li>\n<li>一个插件只做一件事，高度可扩展的插件机制</li>\n<li>支持Typescript</li>\n</ul>\n<pre><code class=\"bash\">//nodejs版本10以上\nnpm init egg --type=ts\nnpm install\nnpm run dev\n</code></pre>\n<p><strong>egg.js概念：</strong></p>\n<ul>\n<li><p>Application-全局应用对象，只有一个实例。</p>\n</li>\n<li><p>Context-上下文对象，每次请求生成一个实例。</p>\n</li>\n<li><p>Request-请求对象，来自Koa。</p>\n</li>\n<li><p>Response-响应对象，来自Koa的一个新的对象。</p>\n</li>\n<li><p>Helper-用来提供一些实用的utility函数。框架内置了几个简单的Helper函数。</p>\n</li>\n</ul>\n<h4 id=\"Nest-js\"><a href=\"#Nest-js\" class=\"headerlink\" title=\"Nest.js\"></a>Nest.js</h4><ul>\n<li>地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm5lc3Rqcy5jbi8=\">https:&#x2F;docs.nestjs.com</span></li>\n<li>内置并且完全支持Typescript</li>\n<li>开箱即用的应用程序架构</li>\n<li>可扩展，松散耦合</li>\n<li>大量采用了装饰器的写法 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm5lc3Rqcy5jbi8xMC9vcGVuYXBpP2lkPSVFOCVBMyU4NSVFOSVBNSVCMCVFNSU5OSVBOA==\">Nest.js装饰器</span></li>\n</ul>\n<h1 id=\"vue-config-js\"><a href=\"#vue-config-js\" class=\"headerlink\" title=\"vue.config.js\"></a>vue.config.js</h1><p><strong>个性化构建结果-vue.config,js</strong><br>在基础的配置上，自定义构建的结果-可以使用vue.config.js<br>文档地址：https:l&#x2F;cli.vuejs.org&#x2F;zh&#x2F;config#vue-config-js<br>简介两个字段<br>*<strong>PublicPath</strong>-部署应用包时的基本URL,这个配置对应的是webpack的PublicPath属性<br>★<br>默认值为’&#x2F;‘，Vue CLI会假设你的应用是被部署在一个域名的根路径上<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYmMuY29tLw==\">https://abc.com/</span><br>★<br>可以设置为子路径-如果你的应用被部署在https:abc,com&#x2F;sub&#x2F;那么就设置为’&#x2F;sub’<br>*可以设置为CDN路径-在我们的应用中，最后静态资源是要全部上传到CDN的，（脚手<br>架自动完成)，所以这里可以设置为一个cDN域名-‘https:l&#x2F;oss.imooc-Iego.com&#x2F;editor’<br>*还可以设置为绝对路径(‘’或者’.&#x2F;‘)，这样所有的资源都会被链接为相对路径</p>\n<p><strong>css.loaderOptions</strong>属性<br>*向CSS相关的loader传递选项<br>*Ant-design-vue的样式变量：https:lww,antd,com docs&#x2F;vue&#x2F;customize-theme-cn<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZUNvbXBvbmVudC9hbnQtZGVzaWduLQ==\">https://github.com/vueComponent/ant-design-</span><br>yue&#x2F;blob&#x2F;master&#x2F;components&#x2F;style&#x2F;themes&#x2F;default.less<br>*添加更多的CSS预处理器：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2Nzcy5odG1sIyVFOSVBMiU4NCVFNSVBNCU4NCVFNyU5MCU4NiVFNSU5OSVBOA==\">https://cli.vuejs.org/zh/guide/css.html#%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8</span><br>*特别注意less和Iess-loader的版本问题。不要装最新的，建议选用：</p>\n<pre><code class=\"js\">//vue.config.js配置：\nconst isstaging = !process.env.VUE_APP_STAGINE\nconst isProduction = process.env.NODE_ENV &#39;production&#39;\nmodule.exports = &#123;\n    /生产环境要使用0SS地址\n    /其他环境都使用绝对路径\n    publicPath:(isProduction 6 !isStaging)&#39;https://oss.imooc-lego.com/\n    css:&#123;\n        loaderOptions:&#123;\n        less:&#123;\n            lessoptions:&#123;\n                modifyVars:&#123;\n                   &#39;primary-color&#39;:&#39;#3E7FFF&#39;,\n                &#125;，\n                javascriptEnabled:true\n            &#125;\n        &#125;,\n    configureWebpack: config =&gt; &#123;\n        config.plugins.push(\n            new webpack.IgnorePlugin(&#123;        //打包时忽略对应的文件\n                resourceRegExp: /^\\.\\/locale$/,\n                contextRegExp: /moment$/,\n            &#125;)\n        )\n        if(isAnalyzeMode)&#123;\n            config.plugins.push(\n                new BundleAnalyzerPlugin(&#123;    //添加打包后的文件分析工具（BundleAnalyzerPlugin）\n                    analyzerMode : &#39;static&#39;,\n                &#125;)\n            )\n        &#125;\n    &#125;\n    &#125;\n</code></pre>\n<h1 id=\"项目构建优化\"><a href=\"#项目构建优化\" class=\"headerlink\" title=\"项目构建优化\"></a>项目构建优化</h1><p><strong>好用的webpack插件:webpack-bundle-analyzer</strong></p>\n<p>可视化webpack打包后的工具包大小，便于分析依赖和进行项目优化。如上vue.config.js中配置。</p>\n<p><strong>根据图表的优化步骤</strong></p>\n<p>一、看看有没有什么重复的模块，或者没有用的模块被打包到了最终的代码中<br>二、看看package.json,对比一下是否有应该在devDeps的模块，被错误的放置到了deps当中<br>三、检查是否有重复加载的模块，或者是功能大体相同的模块。<br>比如：使用<strong>es</strong>版本的第三方库，享受tree-shaking的红利。<br>四、检查是否有没有用的模块是否打包到了最终的文件中，通过如下插件忽略对应的文件，从而tree-shaking掉忽略的文件（如国际化需要的各种语言包）,详细配置如上vue.config.js中。</p>\n<p>*webpack ignore plugin <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZ2xwbHVnaW5zL2lnbm9yZS1wbHVnaW4vI3Jvb3Q=\">https://webpack.js.orglplugins/ignore-plugin/#root</span></p>\n<p><strong>将三方库中全部导入更换为按需导入</strong></p>\n<pre><code class=\"js\">import &#123;Input,Dropdown,Slider,Select&#125; from &#39;Antd-vue&#39;;\nconst components = [Input,Dropdown,Slider,Select];\nconst install = (app) =&gt; &#123;\n    components.forEach(item=&gt;&#123;\n        app.component(item.name,item);\n    &#125;)\n&#125;\nexport default&#123; install &#125;;\n// 在main.js中导入，然后app.use\n</code></pre>\n<p><strong>浏览器缓存优化</strong></p>\n<p>一、项目即使是上线之后也会在后续追加或修改代码，如果分包较少重新上线后就不能使用浏览器缓存的文件，当分包数量较多时，就可以充分利用浏览器缓存。</p>\n<p>二、分包较多时可以使用浏览器支持平行加载多个文件的特性。（HTTP1对同一域名并行请求的个数进行了限制，HTTP2完全突破了这个限制）</p>\n<p><strong>手动分割第三方库为多个文件</strong></p>\n<p>webpack的config.optimization中自带一些优化的配置项：</p>\n<ul>\n<li>minimize：压缩</li>\n<li>splitChunks：分包（可以配置minSize等）</li>\n<li>等等</li>\n</ul>\n<pre><code class=\"js\">//vue.config.js配置：\nmodule.exports = &#123;\n    // ....省略\n    configureWebpack: config =&gt; &#123;\n        config.optimization.splitChunks = &#123;\n            maxInitialRequests: Infinity,\n            minSize: 300 * 1024,\n            chunks: &#39;all&#39;,\n            cacheGroups: &#123;\n                antVendor: &#123;\n                    name: &#39;ant-design-vue&#39;,\n                    test: /[\\\\/]node_modules[\\\\/](ant-design-vue)[\\\\/]/,\n                &#125;,\n                canvasVendor: &#123;\n                    name: &#39;html2canvas,\n                    test: /[\\\\/]node_modules[\\\\/](html2canvas)[\\\\/]/,\n                &#125;,\n                vendor: &#123;\n                    name: &#39;vendor&#39;,\n                    test: /[\\\\/]node_modules[\\\\/](!html2canvas)(!ant-design-vue)[\\\\/]/\n                &#125;,\n                all &#123;\n                    test: /[\\\\/]node_modules[\\\\/]/, //匹配全部的node_modules中的文件\n                    name (module) &#123; const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/)\n                    return `npm.$&#123;packageName.replace(&#39;@&#39;,&#39;&#39;)&#125;`\n                &#125;,\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"项目运行优化\"><a href=\"#项目运行优化\" class=\"headerlink\" title=\"项目运行优化\"></a>项目运行优化</h1><p><strong>路由懒加载</strong></p>\n<p>使用import函数动态加载，配合魔法注释可以和webpack中的bundler相配合使用，例如：</p>\n<pre><code class=\"js\">import(/* webpackChunkName: &quot;my-lodash&quot; */ &#39;lodash&#39;).then(lodash=&gt;&#123;\n     // ....\n&#125;)\n</code></pre>\n<p><strong>改变HTML标题，增强SEO</strong></p>\n<p>项目中动态添加标题的原理：使用HtmlWebpackPlugin插件，插入动态js语句进行占位，然后通过项目中package.json中的name进行替换。</p>\n<pre><code class=\"js\">//vue.config.js配置：\nmodule.exports = &#123;\n    // ....省略\n   chainWebpack: config =&gt; &#123;\n       config.plugin(&#39;html&#39;).tap(args=&gt;&#123;\n           args[0].title = &#39;网站标题&#39;,\n           args[0].desc = &#39;网站详情描述&#39;\n           return args;\n       &#125;)\n   &#125;\n&#125;\n//记得添加 &lt;meta name=&quot;viewport&quot; content=&quot;&lt;%= htmlWebpackPlugin.options.desc %&gt;&quot;&gt;\n</code></pre>\n<p><strong>同构渲染方式</strong><br>服务端渲染和客户端渲染的区别就在于在哪里完成html完整文件的拼接：</p>\n<h3 id=\"客户端渲染\"><a href=\"#客户端渲染\" class=\"headerlink\" title=\"客户端渲染\"></a>客户端渲染</h3><p>客户端渲染由客户端完成html文件的拼接，服务端只负责提供数据。<br>优势：首屏加载快<br>劣势：不利于SEO</p>\n<h3 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h3><p>服务端渲染由服务端完成html文件的凭借，客户端直接渲染即可<br>优势：利于SEO，<br>劣势：白屏问题（获取html文件较慢）,服务端压力大，占用CPU资源。</p>\n<h3 id=\"同构渲染\"><a href=\"#同构渲染\" class=\"headerlink\" title=\"同构渲染\"></a>同构渲染</h3><p>服务端先通过服务端渲染，生成html以及初始化数据，客户端拿到代码和初始化数据，在客户端进行激活渲染。<br>优势：兼容了前端渲染的大部分优点（节省服务端资源、多终端适配渲染、局部刷新等），同时也具有服务端渲染首屏加载快，SEO支持好的特点。<br>劣势：服务端必须是要js支持的语言，增加了整个系统的复杂度和维护成本。</p>\n<h3 id=\"SSG预渲染\"><a href=\"#SSG预渲染\" class=\"headerlink\" title=\"SSG预渲染\"></a>SSG预渲染</h3><p><strong>静态站点生成</strong> (Static-Site Generation，缩写为 SSG)，也被称为预渲染，是另一种流行的构建快速网站的技术。如果用服务端渲染一个页面所需的数据对每个用户来说都是相同的，那就可以只渲染一次，提前在构建过程中完成，而不是每次请求进来都重新渲染页面。预渲染的页面生成后作为静态 HTML 文件被服务器托管。</p>\n<p>SSG 保留了和 SSR 应用相同的性能表现：它带来了优秀的首屏加载性能。同时，它比 SSR 应用的花销更小，也更容易部署，因为它输出的是静态 HTML 和资源文件。这里的关键词是<strong>静态</strong>：SSG 仅可以用于消费静态数据的页面，即数据在构建期间就是已知的，并且在多次部署期间不会改变。每当数据变化时，都需要重新部署。</p>\n<p>如果你调研 SSR 只是为了优化为数不多的营销页面的 SEO (例如 &#x2F;、&#x2F;about 和 &#x2F;contact 等)，那么你可能需要 SSG 而不是 SSR。SSG 也非常适合构建基于内容的网站，比如文档站点或者博客。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vdml0ZXByZXNzLmRldi8=\">VitePress</span> 就是一个由 Vite 和 Vue 驱动的静态站点生成器。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS1wbHVnaW4tdnVlL2Jsb2IvbWFpbi9wbGF5Z3JvdW5kL3Nzci12dWUvcHJlcmVuZGVyLmpz\">Vite脚手架渲染SSG代码示例</span>。</p>\n<h1 id=\"部署与HTTP优化\"><a href=\"#部署与HTTP优化\" class=\"headerlink\" title=\"部署与HTTP优化\"></a>部署与HTTP优化</h1><h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a><strong>部署</strong></h3><p><strong>前端部署：https:llci,uejs,org&#x2F;zh&#x2F;guide&#x2F;deployment.html</strong></p>\n<p>原理就是：将构建生成的产物直接烤贝到任何的静态文件服务器当中。</p>\n<p><strong>后端部署：https:&#x2F;eggis.org&#x2F;zh-cn&#x2F;core&#x2F;deployment.html</strong></p>\n<p>几乎没有构建过程：除非你用了typescript等需要编译的语言。</p>\n<p>方案一：直接将本地的源代码打个压缩包拷贝到目标服务器，然后启动服务器。</p>\n<p>方案二：在服务器中直接pu川源代码，install,.然后启动服务器。</p>\n<h3 id=\"Nginx-反向代理\"><a href=\"#Nginx-反向代理\" class=\"headerlink\" title=\"Nginx:反向代理\"></a><strong>Nginx:反向代理</strong></h3><p><strong>Nginx</strong>作为服务器软件，它的优点：</p>\n<ul>\n<li>特别适合前后端分离的项目</li>\n<li>保证安全</li>\n<li>非常快</li>\n<li>支持负载均衡</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>安装nginx</li>\n<li>nginx    命令启动服务器</li>\n<li>nginx -s stop    命令关闭服务器</li>\n<li>nginx -v      命令查看配置信息</li>\n<li>nginx -s reload      命令重启服务</li>\n<li>配置nginx.conf文件</li>\n</ul>\n<h3 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a><strong>HTTP缓存</strong></h3><p>（若服务器使用nginx，则在nginx.conf中配置）</p>\n<p>Expires <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0V4cGlyZXM=\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires</span><br><strong>Expires响应头包含日期&#x2F;时间，即在此时候之后，响应过期</strong><br>使用nginx添加对应的响应头：expires指令<br>文档地址：http:l&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx http headers module.html</p>\n<p>但是由于客户端时间和用户端时间并不总是相同的，于是有了Cache-Control：</p>\n<p><strong>Cache-Control</strong>:通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。<br>文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIv\">https://developer</span> mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&#x2F;Cache-Control</p>\n<p>*<strong>Etag</strong>:ETagHTTP响应头是资源的特定版本的标识符。这可以让缓存更高效，并节省带宽<br>因为如果内容没有改变，Wb服务器不需要发送完整的响应，直接返回304表示可以使用缓存文件。<br>*文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0VUYWc=\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag</span><br><strong>Last-Modified</strong>:是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。<br>文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0xhc3QtTW9kaWZpZWQ=\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified</span><br>nginx Etag:<span class=\"exturl\" data-url=\"aHR0cDovL25naW54Lm9yZy9lbi9kb2NzL2h0dHAvbmd4X2h0dHBfY29yZV9tb2R1bGUuaHRtbCNldGFn\">http://nginx.org/en/docs/http/ngx_http_core_module.html#etag</span><br>304 Not Modified <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSElUUC9TdGF0dXMvMzA0\">https://developer.mozilla.org/zh-CN/docs/Web/HITP/Status/304</span></p>\n<p>浏览器使用缓存：</p>\n<p><img data-src=\"/images/image.png\" alt=\"/images/image.png\"></p>\n<h3 id=\"压缩算法\"><a href=\"#压缩算法\" class=\"headerlink\" title=\"压缩算法\"></a>压缩算法</h3><p>压缩比对照表<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWl4ZGIuZ2l0aHViLmlvL3NxdWFzaC1iZW5jaG1hcmsvI3JhdGlvLXZzLWNvbXByZXNzaW9u\">https://quixdb.github.io/squash-benchmark/#ratio-vs-compression</span></p>\n<h4 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h4><p><strong>一、动态压缩（服务器在返回静态文件之前，由服务器对每个请求压缩后再进行输出）</strong></p>\n<p>nginx中启用gzip：在nginx.conf中配置：</p>\n<ul>\n<li>gzip  on;        开启gzip</li>\n<li>gzip_types     text&#x2F;plain  application&#x2F;javascript              设置那些文件需要压缩</li>\n<li>gzip_min_length   1k;         小于设置值不会压缩</li>\n<li>gzip_comp_level     1;          压缩级别</li>\n<li>等等</li>\n</ul>\n<p><strong>二、静态压缩（服务器直接使用压缩文件进行输出）</strong></p>\n<p>两个步骤</p>\n<ul>\n<li>生成压缩文件（gzip命令或使用webpack插件 compression-webpack-plugin）</li>\n<li>在ngin×开启支持静态压缩的模块（例如gzip_static  :  on）</li>\n</ul>\n<h4 id=\"Brotli\"><a href=\"#Brotli\" class=\"headerlink\" title=\"Brotli\"></a>Brotli</h4><p><strong>一、动态压缩（服务器在返回静态文件之前，由服务器对每个请求压缩后再进行输出）</strong></p>\n<p><strong>使用前提</strong><br>浏览器支持：https:caniuse.com&#x2F;brotli<br><strong>HTTPS协议</strong><br>NGINX对应的模块：https:&#x2F;github.com&#x2F;google&#x2F;nginx&#x2F;brotli</p>\n<p>nginx中启用Brotli：在nginx.conf中配置：</p>\n<ul>\n<li>brotli  on;        开启Brotli</li>\n<li>brotli_types     text&#x2F;plain  application&#x2F;javascript              设置那些文件需要压缩</li>\n<li>等等</li>\n</ul>\n<p><strong>二、静态压缩（服务器直接使用压缩文件进行输出 ,如上。）</strong></p>\n<h3 id=\"HTTP优化\"><a href=\"#HTTP优化\" class=\"headerlink\" title=\"HTTP优化\"></a>HTTP优化</h3><p>HTTP是建立在TCP协议之上，所以<strong>HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性</strong>，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的延迟时间。所以减少这些重新握手和至关重要。</p>\n<h4 id=\"keepAlive属性\"><a href=\"#keepAlive属性\" class=\"headerlink\" title=\"keepAlive属性\"></a>keepAlive属性</h4><p>keepAlive属性可以保持服务器端和客户端建立的会话连接，开启之后除首次建立连接外的其他请求不会进行<strong>DNS Lookup</strong>（NDS域名解析）和<strong>Initial connection</strong>（三报文握手建立连接），可以在服务端文件中进行配置。</p>\n<p><strong>KeepAlive的优点</strong></p>\n<ul>\n<li>TCP连接更少，I这样就会节约TCP连接在建立、释放过程中，主机和路由器上的CPU和内存开销。</li>\n<li>网络拥塞也减少了，拿到响应的延时也减少了</li>\n</ul>\n<h4 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h4><p><strong>使用HTTP&#x2F;2提升性能</strong></p>\n<ul>\n<li>2010年SPDY <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TUERZJUU2JUJDJTk0JUU1JThDJTk2JUU1JTg4JUIw\">https://baike.baidu.com/item/SPDY演化到</span></li>\n<li>2015 HTTP&#x2F;2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9IVFRQXzI=\">https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP_2</span></li>\n</ul>\n<p><strong>兼容性</strong></p>\n<p>需要浏览器支持-https:&#x2F;caniuse.com&#x2F;http2</p>\n<p>需要HTTPS协议支持</p>\n<p><strong>主要特性</strong></p>\n<p>一、二进制协议：</p>\n<p>HTTP2由原来的文本请求（报文）转变为二进制请求帧，加快传输</p>\n<p>二、多路复用：</p>\n<p><strong>HTTP2多路复用解决了浏览器同一域名并行请求数量的限制。</strong></p>\n<p>在HTTP&#x2F;2中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟开一个TCP连接都需要慢慢提升传输速度。</p>\n<p><strong>同个域名只需要占用一个TCP连接</strong>，使用一个连接并行发送多个请求和响应，<strong>消除了因多个TCP连接而带来的延时和内存消耗</strong>。</p>\n<p>三、Header压缩复用</p>\n<p>TTP&#x2F;2在客户端和服务器端使用“<strong>首部表</strong>”来跟踪和存储之前发送的键一值对，对于相同的数据，不再通过每次请求和响应发送。</p>\n<p><strong>配置HTTP2：</strong></p>\n<p>依nginx为例：在server字段的listen字段添加：listen   443   ssl   http2; </p>\n<h1 id=\"Mongodb数据库\"><a href=\"#Mongodb数据库\" class=\"headerlink\" title=\"Mongodb数据库\"></a>Mongodb数据库</h1><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a><strong>基本操作</strong></h3><pre><code class=\"js\">// 导入Mongodb客户端构造函数\nimport &#123; MongoClient,ObjectId, &#125; from &quot;mongodb&quot;;\n// 创建mongo实例(传入url)\nconst client = new MongoClient(&#39;mongodb://localhost:27017/&#39;);\n// 执行函数，连接mongodb数据库\nasync function run() &#123;\n  try &#123;\n    await client.connect(); //等待实例连接\n    const db = client.db(&#39;hello&#39;); //创建数据库\n    const res = await db.command(&#123; ping: 1 &#125;); //ping命令\n    console.log(&#39;connected&#39;, res);\n    const userCollection = db.collection(&#39;user&#39;);//创建集合表\n// 数据的插入\n    // const result = await userCollection.insertOne(&#123;name:&quot;张三&quot;,age:18&#125;)\n    // const results = await userCollection.insertMany([&#123;name:&quot;李四&quot;,age:12&#125;,&#123;name:&quot;王五&quot;,age:13&#125;]);\n    // console.log(result,results); //返回影响的信息，id等\n//数据的查找\n    const result = await userCollection.findOne(&#123;name:&#39;张三&#39;&#125;);\n    console.log(result);\n    const resultCursor =  userCollection.find(); //find返回的是指针对象，不是结果\n    //将游标变为数组结果\n    const results = await userCollection.find().toArray();\n    // console.log(results);\n//比较操作符 $lt小于 $gt大于\n    const results2 = await userCollection.find(&#123;age:&#123;$lt:16&#125;&#125;).toArray();\n    // console.log(results2);\n//逻辑操作符 $or\n    const results3 = await userCollection.find(&#123;$or:[&#123;age:&#123;$gt:12&#125;&#125;,&#123;name:&quot;王五&quot;&#125;]&#125;).toArray();\n    // console.log(results3);\n//元素操作符  $exists存在与否  $type指定类型\n    const results4 = await userCollection.find(&#123;age:&#123;$type:&#39;number&#39;&#125;&#125;).toArray();\n    // console.log(results4);\n//limit  第二个参数传入options配置（projection表示包含字段哪些字段）\n    const result5 = await userCollection.find(&#123;age:&#123;$type:&#39;number&#39;&#125;&#125;,&#123;limit:2,skip:3,sort:&#123;age:-1&#125;,projection:&#123;name:0&#125;&#125;).toArray();\n    // console.log(result5);\n//更新替换数据   update更新数据  replaceOne替换数据 ,修改操作要传具体更新操作符：\n//普通更新操作符： $set设置值 $inc增加 $rename重命名 $unset删除 \n//数组更新操作符： $push数组字段添加 $pop删除 $all包含 $regex正则  .属性符 .$属性占位符\n    const result6 = await userCollection.replaceOne(&#123;name:&quot;张三&quot;&#125;,&#123;name:&quot;Lebrown&quot;&#125;);\n    const result7 = await userCollection.updateOne(&#123;_id:new ObjectId(&#39;6628b9876bac632e95ead1bb&#39;)&#125;,&#123;$set:&#123;name:&quot;updateOne&quot;&#125;,$inc:&#123;age:10&#125;&#125;);\n    const result8 = await userCollection.updateOne(&#123;_id: new ObjectId(&#39;6628b9876bac632e95ead1bb&#39;)&#125;,&#123;$set:&#123;&quot;hobbies.0&quot;:&quot;golf&quot;&#125;&#125;)\n    const result9 = await userCollection.updateOne(&#123;_id: new ObjectId(&#39;6628b9876bac632e95ead1bb&#39;),hobbies:&#39;glof&#39;&#125;,&#123;$set:&#123;&quot;hobbies.$&quot;:&quot;golf-new&quot;&#125;&#125;)\n    // console.log(result8);//返回影响信息\n//删除数据：deleteOne(filter) 和deleteMany\n  &#125; catch (e) &#123;\n    console.error(e);\n  &#125; finally &#123;\n    await client.close();\n  &#125;\n&#125;\nrun();\n</code></pre>\n<h3 id=\"mongodb高级\"><a href=\"#mongodb高级\" class=\"headerlink\" title=\"mongodb高级\"></a><strong>mongodb高级</strong></h3><h5 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h5><p><strong>MongoDB索引</strong></p>\n<ul>\n<li>索引(Index)<strong>为了提高查询效率</strong></li>\n<li>MongoDB的文件类型：<strong>BSON</strong>,Binary JSON,主要被用作MongoDB数据库中的数据存储和网络传输格式。</li>\n<li>假如没有索引，必须扫描这个巨大BSON对象集合中的每个文档并选取那些符合查询条件的记录，这样是低效的。</li>\n<li>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中。</li>\n<li>为某个字段创建索引之后查找速度非常快，ObjectId是自带的索引（ _ id _ ）。</li>\n</ul>\n<p><strong>创建索引</strong></p>\n<p>创建索引可以直接用Navicate等工具，也可以代码中使用：</p>\n<pre><code class=\"js\">//......省略\n//给name字段创建索引之前耗时很大，创建之后耗时很小\nconst indexResult = await userCollection.find(&#123;name:&quot;James&quot;&#125;).explain();\nconsole.log(indexResult);\n//创建索引，属性表示字段，值表示升序降序\nconst result = await userCollection.createIndex(&#123;name:1&#125;) //1表示升序\n//取消索引\nconst result1 = await userCollection.dropIndex(&quot;name_1&quot;)\n</code></pre>\n<h5 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h5><p>聚合操作将来自多个文档的值组合在一起，并且可以对分组数据执行各种操作以返回相应的结果。<br><strong>linux常用的管道写法：</strong></p>\n<pre><code class=\"bash\">ps aux | grep mongo\n</code></pre>\n<p><strong>聚合常用的操作符：</strong></p>\n<ul>\n<li>$group将collection中的document:分组，可用于统计结果</li>\n<li>$natch过滤数据，只输出符合结果的文档</li>\n<li>$project修改输入文档的结构（例如重命名，增加、删除字段，创建结算结果等）</li>\n<li>$sot将结果进行排序后输出</li>\n<li>$imit限制管道输出的结果个数</li>\n<li>$skp跳过制定数量的结果，并且返回剩下的结果</li>\n</ul>\n<p><strong>表达式操作符：</strong></p>\n<ul>\n<li>$sum计算总和，{$sum:1}表示返回总和×1的值（即总和的数量），使用{$sum:’$制定字段’}也能直接获取制定字段的值的总和</li>\n<li>$avg求平均值</li>\n<li>$min求min值</li>\n<li>$max求max值</li>\n<li>$push将结果文档中插入值到一个数组中</li>\n<li>$frst根据文档的排序获取第一个文档数据</li>\n<li>$last同理，获取最后一个数据</li>\n</ul>\n<pre><code class=\"js\">//.....\nconst pipeLine = [\n    &#123; $match : &#123; age : &#123; $gt : 30 &#125;&#125;&#125;,\n    &#123; $group : &#123; _id : &quot;$steam&quot; , total : &#123; $sum : &quot;$age&quot; &#125; , count : &#123; $sum : 1 &#125;&#125;&#125;,\n    &#123; $sort : &#123; total : 1 &#125;&#125;\n]\ncosnt result = await userCollection.aggregate(pipeLine).toArray();\n//....\n</code></pre>\n<h5 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h5><p><strong>普通方式使用多表联查需要两次查询</strong></p>\n<pre><code class=\"js\">// 导入Mongodb客户端构造函数\nimport &#123; MongoClient,ObjectId, &#125; from &quot;mongodb&quot;;\n// 创建mongo实例(传入url)\nconst client = new MongoClient(&#39;mongodb://localhost:27017/&#39;);\n// 执行函数，连接mongodb数据库\nasync function run() &#123;\n  try &#123;\n    await client.connect(); //等待实例连接\n    const db = client.db(&#39;hello&#39;); //创建数据库\n    const res = await db.command(&#123; ping: 1 &#125;); //ping命令\n    console.log(&#39;connected&#39;, res);\n//获取表\n     const teamCollection = db.collection(&#39;team&#39;);\n     const playerCollection = db.collection(&#39;player&#39;);\n     const netsTeam = await teamCollection.findOne(&#123;team:&quot;NETS&quot;&#125;);\n     const netsPlayers = await playerCollection.find(&#123;team:netsTeam._id&#125;).toArray();\n  &#125; catch (e) &#123;\n    console.error(e);\n  &#125; finally &#123;\n    await client.close();\n  &#125;\n&#125;\nrun();\n</code></pre>\n<p><strong>使用聚合中$lookup进行多表联查只需要一次查询：</strong></p>\n<pre><code class=\"js\">//...\nconst pipeLine2 = [\n    &#123;\n        $match : &#123; team : &#123; $exists : true &#125; &#125;\n    &#125;,\n    &#123;\n        $lookup : &#123;\n            from : &quot;team&quot;,\n            localField : &quot;team&quot;,\n            foreignField : &quot;_id&quot;,\n            as : &quot;team&quot;\n        &#125;\n    &#125;\n] \nconst playerWithTeam = await playerCollection.aggregate(pipeLine2).toArray();\nconsole.log(playerWithTeam);\n//...\n</code></pre>\n<h3 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h3><p><em>MongoDB最佳设计实践：</em>[https:l<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tb25nb2RiLmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS9tb25nb2RiLXNjaGVtYS1kZXNpZ24tYmVzdC1wcmFjdGljZXMvXQ==\">www.mongodb.Com/developer/article/mongodb-schema-design-best-practices/]</span>(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZGV2ZWxvcGVyL2FydGljbGUvbW9uZ29kYi0=\">https://www.mongodb.com/developer/article/mongodb-</span><br>schema-design-best-practices&#x2F;)</p>\n<p>  关键问题：数据产生关系的时候，选择内嵌还是引用？</p>\n<p><strong>内嵌模式：</strong></p>\n<p>优势：</p>\n<ul>\n<li>只需要一次查询就可以查询所有的信息。</li>\n<li>避免多集合查询。</li>\n<li>只需要一个操作就可以更新多个信息。</li>\n</ul>\n<p>劣势：</p>\n<ul>\n<li>单个文档太大，查询可能更耗时，获得的无关信息概率增大。</li>\n<li>针对每个文档，MongoDB有一个16M的最大限制，内嵌太多，可能超过这个限制。</li>\n</ul>\n<p><strong>引用模式：</strong></p>\n<p>优势：</p>\n<ul>\n<li>将数据分散到不同文档，数据量会变小。</li>\n<li>不太会超过16M最大限制。</li>\n<li>每次查询取得不必要数据的慨率降低。</li>\n</ul>\n<p>劣势：需要多次查询才能获得最终数据</p>\n<p><strong>最佳设计实践：</strong></p>\n<ul>\n<li><p>一对几个：推荐使用内嵌形式</p>\n</li>\n<li><p>一对很多：推荐使用引用形式</p>\n<ul>\n<li>子集合中使用一个字段保存父集合的_id   ； 或者：</li>\n<li>父集合中使用一个数组保存子集合的_id</li>\n</ul>\n</li>\n<li><p>一对亿万：只能子集合中使用一个字段保存父集合的_id</p>\n</li>\n</ul>\n<h3 id=\"访问权限管理\"><a href=\"#访问权限管理\" class=\"headerlink\" title=\"访问权限管理\"></a><strong>访问权限管理</strong></h3><p><strong>授权文档</strong>：https:&#x2F;docs.mongodb.com&#x2F;manual&#x2F;core&#x2F;authentication&#x2F;<br><strong>内置的Roles</strong>：https:&#x2F;docs.mongodb.com&#x2F;manual&#x2F;reference&#x2F;built-in-roles&#x2F;</p>\n<p><strong>在mongo命令行中输入：</strong></p>\n<pre><code class=\"cmd\">show dbs\nuse admin\n# mongodb基于RBAC进行权限管理，设置roles可以设置相应的全选，见上。\ndb.createUser(&#123; user : &#39;root&#39; , pwd : &#39;123456&#39; , roles : [&#39;root&#39;] &#125;) \ndb.auth(&#39;root&#39;,&#39;123456&#39;)\n# --auth 开启数据库的权限验证，也可以直接在mongo.conf中配置（先终止运行mongod）\nmongod --config /usr/local/etc/mongo.conf --auth\n# 操作配置了权限管理的数据库\nmongo -u &quot;root&quot; -p &quot;123456&quot; --authenticationDatabase &quot;admin&quot;\n</code></pre>\n<p><strong>初始化一个新数据库以后期望的步骤</strong></p>\n<ul>\n<li>创建admin级谜别的root用户&#x2F;roles:root</li>\n<li>创建对应的数据库lego</li>\n<li>创建该数据库的管理员dmq&#x2F;roles:readWrite</li>\n<li>代码中，使用管理员dmq的用户名密码链接数据库并且完成操作。</li>\n</ul>\n<p>步骤如下：</p>\n<pre><code>show dbs\nuse lego\ndb.createUser(&#123; user : &quot;dmq&quot; , pwd : &#39;123456&#39; , roles : [&#123; role : &quot;readWrite&quot; , db : &quot;lego&quot; &#125;]&#125;)\n# 重启服务：mongod --config /usr/local/etc/mongo.conf --auth\n# 这样在mongodb的配置文件中设置用户信息，就保证只能读取数据库信息，保证了数据库的安全。（如果用户信息来自admin数据库就需要配置authSource:&#39;admin&#39;。）\n</code></pre>\n<h1 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h1><p><strong>出现的原因：</strong></p>\n<p>使用原生的mongoDB nodejs driver数据结构及其操作过于灵活，类似于ORM：</p>\n<p><strong>mongoose：</strong>（mongoose之于mongodb类似于ts之于js，都是在原有的基础之上加一层抽象层，进行类型定义等操作）</p>\n<p>mongoose：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb25nb29zZWlzLmNvbS8=\">https://mongooseis.com/</span></p>\n<ul>\n<li>建立在native mongoDB nodejs driver之上</li>\n<li>提出Modl,数据模型的概念，用来约束集合中的数据结构</li>\n<li>非常多扩展的内容</li>\n<li>它是一个ODM(Object Document Mapping)工具。</li>\n</ul>\n<h3 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h3><p>ORM指的是<strong>Object Relational Mapping对象关系映射</strong>，针对于关系型数据库。</p>\n<p><strong>简单说，ORM就是通过实例对象的语法，完成关系型数据库的操作的技术。</strong></p>\n<p><strong>ORM优点</strong></p>\n<ul>\n<li>不需要再去写晦涩的SQL语句。</li>\n<li>使用面向对象的方式操作数据，代码量少，语义性好，容易理解。</li>\n<li>Classes类-Tables</li>\n<li>Objects实例-Records(表中的一行数据)</li>\n<li>Attributes属性-Records</li>\n<li>内置很多功能，数据验证，清洗，预处理等等操作。</li>\n</ul>\n<h3 id=\"ODM\"><a href=\"#ODM\" class=\"headerlink\" title=\"ODM\"></a>ODM</h3><p>ODM指的是<strong>Object Document Mapping对象文档映射</strong>。ODM针对于noSql数据库，关注文档模型，mongoose是ODM的一种实现，可以用于约束数据类型。</p>\n<pre><code class=\"javascript\">const User = mongoose.model(&quot;User&quot;,&#123;\n    username:&#123; type : string &#125;,\n    password:&#123; type : String &#125;\n&#125;)\n//user object\nconst newUser new User(&#123;\n    username:&quot;john-doe&quot;,\n    password:&quot;helloworld&quot;,\n&#125;)\nawait newUser.save()\n</code></pre>\n<h1 id=\"egg-mongoose\"><a href=\"#egg-mongoose\" class=\"headerlink\" title=\"egg-mongoose\"></a>egg-mongoose</h1><p>详见源码，此处省略。</p>\n<h1 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h1><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Stream的官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbA==\">https://nodejs.org/api/stream.html</span><br><strong>流是Node.js中最好，也是最容易误解的慨念</strong><br>流就是数据的合集，数据可以是字符串也可以是数组，流的数据不是一次性全部获得的。</p>\n<p>大文件输出方式：</p>\n<ul>\n<li><p>直接读取</p>\n<p>输入的文件————读取到内存—————-输出文件内容</p>\n</li>\n<li><p>流式读取</p>\n<p>输入的文件————通过可读流读取到管道—————–通过可写流输出文件内容</p>\n</li>\n</ul>\n<p><strong>Node.js支持流的内置模块：</strong></p>\n<p><strong>Readable Streams:</strong></p>\n<ul>\n<li>HTTP responses,on the client</li>\n<li>HTTP requests,on the server</li>\n<li>fs read streams</li>\n<li>zlib streams</li>\n<li>crypto streams</li>\n<li>TCP sockets</li>\n<li>child process stdout and stderr</li>\n<li>process.stdin</li>\n</ul>\n<p><strong>Writable  Streams:</strong></p>\n<ul>\n<li>HTTP requests,on the client</li>\n<li>HTTP responses,on the server</li>\n<li>fs write streams</li>\n<li>zlib streams</li>\n<li>crypto streams</li>\n<li>TCP sockets</li>\n<li>child process stdin</li>\n<li>process.stdout,process.stderr</li>\n</ul>\n<p><strong>流的类型：</strong></p>\n<ul>\n<li>Readable-可读操作。</li>\n<li>Vritable-可写操作。</li>\n<li>Duplex-可读可写操作. </li>\n<li>Transform-操作被写入数据，然后读出结果。</li>\n</ul>\n<h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h3><p><strong>流的流动：</strong></p>\n<p>可读流Readable（数据源input）———————-pipe管道—————————————-可写流Writable（输出output）</p>\n<pre><code class=\"js\">import &#123; createReadStream, createWriteStream &#125; from &#39;fs&#39;;\nconst readStream = createReadStream(&#39;./a.txt&#39;);\nreadStream.pipe(process.stdout);\n</code></pre>\n<p>可读流Readable（数据源input）————-pipe管道—————转换流Transform—————-pipe管道———–可写流Writable（输出output）</p>\n<pre><code class=\"js\">import &#123; createReadStream, createWriteStream, write &#125; from &#39;fs&#39;;\nconst readStream = createReadStream(&#39;./a.txt&#39;);\nconst writeStream = createWriteStream(&#39;./b.txt&#39;);\nreadStream.pipe(writeStream);\n</code></pre>\n<h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><strong>流是基于EventEmitter（事件），pipe方法是基于事件封装的的语法糖，常见的事件有：</strong></p>\n<p><strong>Readable  Streams：可读流事件和函数</strong></p>\n<ul>\n<li>Events<ul>\n<li>data–当没有数据时触发</li>\n<li>end–没有更多的数据可读时触发</li>\n<li>error–在接受和写入过程中发生错误时触发</li>\n<li>finish–所有数据已被写入到底层系统时触发</li>\n<li>close</li>\n<li>readable</li>\n</ul>\n</li>\n<li>Functions<ul>\n<li>pipe() , unpipe()</li>\n<li>read() , unshift() , resume()</li>\n<li>pause() , isPaused()</li>\n<li>setEncoding()</li>\n</ul>\n</li>\n</ul>\n<p><strong>Writable  Streams：写入流事件和函数</strong></p>\n<ul>\n<li>Events<ul>\n<li>drain</li>\n<li>finish</li>\n<li>error</li>\n<li>close</li>\n<li>pipe&#x2F;unpipe</li>\n</ul>\n</li>\n<li>Functions<ul>\n<li>write()</li>\n<li>end()</li>\n<li>cork() , uncork()</li>\n<li>setDefaultEncoding()</li>\n</ul>\n</li>\n</ul>\n<p><strong>pipe方法原理：</strong></p>\n<pre><code class=\"js\">import &#123; createReadStream , createWriteStream &#125; from &#39;fs&#39;;\nconst readStream = createReadStream(&#39;./a.txt&#39;);\nconst writeStream = createWriteStream(&#39;./b.txt&#39;);\nreadStream.on(&#39;data&#39; , chunk=&gt;&#123;\n    writeStream.write(chunk);\n&#125;)\nreadStream.on(&#39;end&#39;,()=&gt;&#123;\n    writeStream.end();\n&#125;)\n</code></pre>\n<p>压缩：</p>\n<pre><code class=\"js\">import &#123; createReadStream , createWriteStream &#125; from &#39;fs&#39;;\nimport &#123; createGzip &#125; from &#39;zlib&#39;;\nconst readStream = createReadStream(&#39;./a.txt&#39;);\nconst writeStream = createWriteStream(&#39;./b.txt&#39;);\nreadStream.pipe(createGzip()).pipe(writeStream);\n</code></pre>\n<p>封装：</p>\n<pre><code class=\"js\">cosnt savePromise = (readStream , writeStream = stdout)&#123;\n    return new Promise(resolve,reject)&#123;\n        readStream\n            .pipe(writeStream)\n            .on(&#39;finish&#39;,resolve)\n            .on(&#39;error&#39;,reject)\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h3><p><strong>使用pipe方法有时会存在一个问题：</strong></p>\n<pre><code class=\"js\">//....\ncreateReadStream(&#39;./a.txt&#39;)\n    .pipe(stdout)\n    .on(&#39;finish&#39;,finishFn)\n    .on(&#39;error&#39;,errFn);  //这里监听的是pipe后的错误，对于createReadStream的错误则会卡死\n</code></pre>\n<p><strong>于是推出了pipeline方法：</strong></p>\n<pre><code class=\"js\">//...\npipeLine(fs.createReadStream(&#39;./a.txt&#39;),zlib.createGzip(),fs.createWriteStream(&#39;./b.txt&#39;),(err)=&gt;&#123;\n    if (err) &#123; console.error(&#39;pipeline failed&#39;,error) &#125;;\n    else &#123; console.log(&#39;successed&#39;) &#125;\n&#125;)\n</code></pre>\n<h1 id=\"对象存储服务\"><a href=\"#对象存储服务\" class=\"headerlink\" title=\"对象存储服务\"></a>对象存储服务</h1><p><strong>自己完成静态文件存储的问题</strong></p>\n<ul>\n<li>Nod.js不擅长处理静态文件的存储和展示，没有未静态文件做特殊的优化</li>\n<li>如果将图片生成多种处理格式要耗费大量的资源和空间</li>\n</ul>\n<p><strong>各三方比对</strong></p>\n<h3 id=\"阿里云OSS\"><a href=\"#阿里云OSS\" class=\"headerlink\" title=\"阿里云OSS\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0Li9vc3M=\">阿里云OSS</span></h3><p><strong>特点</strong></p>\n<ul>\n<li>支持丰富的图片处理<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnQuX2RldGFpbC80NDY4Ni5odG1s\">https://help.aliyun.com/document._detail/44686.html</span></li>\n<li>egg.js有对应的插件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1vc3M=\">https://github.com/eggjs/egg-oss</span></li>\n</ul>\n<p><strong>价格</strong></p>\n<ul>\n<li>下行流量100GB一年352元<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tb24tYnV5LmFsaXl1bi5jb20vP3NwbT01MTc2Ljc5MzM2OTEuSl81MjUzNzg1MTYwLjEuMmUzOTRjNTlxM0ZJc0EmY29tbW9kaXR5Q29kZT1vc3NiYWcjL2J1eQ==\">https://common-buy.aliyun.com/?spm=5176.7933691.J_5253785160.1.2e394c59q3FIsA&amp;commodityCode=ossbag#/buy</span></li>\n<li>基本图片处理：每月0-10TB:免费&gt;10TB:0.025元&#x2F;GB</li>\n</ul>\n<h3 id=\"七牛云KODO\"><a href=\"#七牛云KODO\" class=\"headerlink\" title=\"七牛云KODO\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWluaXUuY29tL3ByaWNlcy9rb2Rv\">七牛云KODO</span></h3><p><strong>特点：</strong></p>\n<ul>\n<li>多媒体处理功能非常丰富<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2luaXUuY29tL3Byb2R1Y3RzL2RvcmE=\">https://www.giniu.com/products/dora</span></li>\n<li>图片视频处理</li>\n<li>审核</li>\n<li>人工智能分析</li>\n</ul>\n<p><strong>价格：</strong></p>\n<ul>\n<li>外网流出100GB-年278.4元<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xbWFsbC5xaW5pdS5jb20vdGVtcGxhdGUuL01URXk/c3BlY19jb21ibz1NekUwTlE=\">https://qmall.qiniu.com/template./MTEy?spec_combo=MzE0NQ</span></li>\n<li>基本图片处理：每月0-20TB:免费20TB以上：0.025元&#x2F;GB https:&#x2F;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5xaW5pdS5jb20vcHJpY2VzL2RvcmE=\">www.qiniu.com/prices/dora</span></li>\n</ul>\n<h3 id=\"腾讯云COS\"><a href=\"#腾讯云COS\" class=\"headerlink\" title=\"腾讯云COS\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQzNg==\">腾讯云COS</span></h3><p><strong>特点：</strong></p>\n<p>图像处理有一些新的亮点，比如自研的TPG压缩等</p>\n<p><strong>价格：</strong></p>\n<ul>\n<li>外网流出100GB一年396元<span class=\"exturl\" data-url=\"aHR0cHM6Ly9idXkuY2xvdWQudGVuY2VudC4uY29tL3ByaWNlL2NvcyN0YWIwLWxpc3Qx\">https://buy.cloud.tencent..com/price/cos#tab0-list1</span></li>\n<li>基本图片处理：每月0-20TB:免费20TB以上：0.025元&#x2F;GB</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzEyNDYvNDUyNzQ=\">https://cloud.tencent.com/document/product/1246/45274</span></li>\n<li>图片压缩：1元&#x2F;千次</li>\n</ul>\n<h1 id=\"SSR服务端渲染\"><a href=\"#SSR服务端渲染\" class=\"headerlink\" title=\"SSR服务端渲染\"></a>SSR服务端渲染</h1><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>SSR-Server Side Rendering</strong></p>\n<p>Vue关于SSR的介绍：https:&#x2F;sSr.uejs.org&#x2F;zh</p>\n<p><strong>SSR的优点</strong></p>\n<ul>\n<li>更好的SEO</li>\n<li>更快的渲染时间(Time to content)，</li>\n</ul>\n<p><strong>SSR的缺点</strong></p>\n<ul>\n<li><p>开发的限制，浏览器相关的操作只能在特定的钩子函数中使用</p>\n</li>\n<li><p>SPA应用完全静态化，而SSR app需要Node.js Server才能运行</p>\n</li>\n<li><p>服务端负荷更高</p>\n</li>\n</ul>\n<p><strong>SSR的实现：</strong></p>\n<ul>\n<li><p>基本原理：@vue&#x2F;server-renderer https:lv3.uejs.org&#x2F;guide&#x2F;ssr&#x2F;getting-started.html#installation</p>\n</li>\n<li><p>使用createSSRApp,renderToString以及renderToStream方法</p>\n</li>\n</ul>\n<p><strong>成熟的，大而全的SSR通用开发框架：</strong></p>\n<ul>\n<li>Nuxt.js <span class=\"exturl\" data-url=\"aHR0cHM6Ly9udXh0anMub3JnLw==\">https://nuxtjs.org/</span>  （Vue）</li>\n<li>React类似的Next.js https:&#x2F;nextjs.orgl （React）</li>\n</ul>\n<h3 id=\"SSR\"><a href=\"#SSR\" class=\"headerlink\" title=\"SSR\"></a>SSR</h3><p>express等框架的res.render方法可以渲染html模板，使用的是nunjucks库进行数据填充。</p>\n<p>index.html</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html class=&quot;no-js&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;description&quot; content=&quot;&#123;&#123; desc &#125;&#125;&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=&quot;&#123;&#123; bodyStyle &#125;&#125;&quot;&gt;  //根据传入的props动态添加style样式\n    &#123;&#123; html | safe &#125;&#125;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>index.js  (依据express框架为例：)</p>\n<pre><code>//...res是响应参数\nres.render(&#39;index&#39;,function(err,html)&#123;\n    res.send(html);\n&#125;)\n</code></pre>\n<h3 id=\"vue中SSR\"><a href=\"#vue中SSR\" class=\"headerlink\" title=\"vue中SSR\"></a>vue中SSR</h3><p>1、vue3有包：@vue&#x2F;server-renderer，在3.2.13版本以上内置了，低于此版本需要自行安装。</p>\n<p>2、使用：</p>\n<pre><code class=\"js\">//.......... res是服务端返回\nimport &#123; pipeline &#125; from &#39;stream/promises&#39;;\nimport &#123; createSSRApp &#125; from &#39;vue&#39;;\nimport &#123; renderToString , renderToNodeStream &#125; from &#39;@vue/server-renderer&#39;\nconst vueApp = createSSRApp(&#123;\n    data:()=&gt;&#123; msg:&#39;hello world&#39; &#125;,\n    template: &#39;&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;&#39;\n&#125;)\nconst appContent = await renderToString(vueApp);\nres.type = &#39;text/html&#39;;\nres.body = appContent;\n// 或者使用流式输出：\nconst stream = renderToNodeStream(vueApp);\nres.statys = 200;\nawait pipeline(stream,res);\n</code></pre>\n<h1 id=\"RBAC权限验证\"><a href=\"#RBAC权限验证\" class=\"headerlink\" title=\"RBAC权限验证\"></a>RBAC权限验证</h1><h3 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>权限验证的场景以及需求：</strong></p>\n<ul>\n<li>特定的角色的用户才能操作特定的资源</li>\n<li>不同的用户能操作同类资源的特定实体</li>\n<li>不同的用户操作特定资源的不同属性</li>\n</ul>\n<p><strong>谁(User)拥有什么权限(Authority）去操作(Operation)哪些资源(Resource)</strong><br>根据角色完成权限的控制-RBAC(role based access control)，其实就是在原本用户——-权限的对应关系之上加一层中间层角色：用户——角色—–权限。好处是使得用户和权限的对应关系更加清晰和易于掌控。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Node.js实现RBAC的库：</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29udXJ5L2FjY2Vzc2NvbnRyb2w=\">AccessControl.js（不推荐，不维护了）</span></p>\n<ul>\n<li>1.6k Star</li>\n<li>3年没有更新，很多issue没人处理</li>\n<li>不支持ts</li>\n</ul>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Nhc2Jpbi9ub2RlLWNhc2Jpbg==\">Casbin</span></p>\n<ul>\n<li>1.7k Star</li>\n<li>ts编写，支持多种编程语言</li>\n<li>概念比较复杂，使用略繁琐</li>\n</ul>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0YWxuaXkvY2FzbA==\">Casl</span></p>\n<ul>\n<li><p>3.4k Star</p>\n</li>\n<li><p>ts编写</p>\n</li>\n<li><p>简单易用，可读性良好</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Casl使用\"><a href=\"#Casl使用\" class=\"headerlink\" title=\"Casl使用\"></a><strong>Casl使用</strong></h3><pre><code class=\"js\">import &#123; AbilityBuilder , Ability &#125; from &#39;@casl/ability&#39;;\nclass Work &#123;\n    constructor(attrs)&#123;\n        Object.assign(this,attrs);\n    &#125;\n&#125;\nconst templateWork = new Work(&#123; id : 1 , isTemplate : true &#125;);\nconst notWork = new Work(&#123; id : 2 , isTemplate : false &#125;);\nfunction defineRules()&#123;\n    const &#123; can , cannot ,build &#125; = new AbilityBuilder(Ability);\n    can(&#39;read&#39;,&#39;Work&#39;);\n    cannot(&#39;delete&#39;,&#39;Work&#39;);\n    can(&#39;update&#39;,&#39;Work&#39;,&#123;isTemplate:false&#125;);\n    return build();\n&#125;\nconsole.log(templateWork.constructor.name)\nconst rules defineRules()\nconsole.log(rules.can(&#39;read&#39;,&#39;Work&#39;))\nconsole.log(rules.can(&#39;delete&#39;,&#39;Work&#39;))\nconsole.log(rules.can(&#39;update&#39;,templateWork))\nconsole.log(rules.can(&#39;update&#39;,notWork))\n</code></pre>\n<h1 id=\"部署-1\"><a href=\"#部署-1\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h3 id=\"传统模式\"><a href=\"#传统模式\" class=\"headerlink\" title=\"传统模式\"></a>传统模式</h3><p><strong>本地开发</strong><br>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1iaW4=\">egg-bin</span>，提供了便捷的方式在本地进行开发、调试、单元测试，它可以自动的监控文件的修改，然后重新运行对应的命令。<br>采用的配置文件是：config.default.ts<br>启动开发环境命令为<code>egg-bin dev</code><br><strong>生产环境运行程序</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbTIua2V5bWV0cmljcy5pby8=\">pm2-process manager</span></p>\n<p><code>node script.js pm2 start script.js</code></p>\n<p><strong>PM2的优势：</strong></p>\n<ul>\n<li>cluster模式运行</li>\n<li>自动重启auto reload</li>\n<li>热替换hot reload</li>\n<li>性能监控Monitoring</li>\n</ul>\n<p><strong>egg.js中有对应于PM2的内置方法：</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1zY3JpcHRz\">egg-scripts</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VnZ2pzL2VnZy1jbHVzdGVy\">egg-cluster</span></li>\n</ul>\n<p><strong>egg.js生产环境启动和关闭</strong><br><code>egg-scripts start egg-scripts stop</code></p>\n<p><strong>配置文件</strong><br>config.prod.ts config.default.ts<br><strong>编译过程</strong><br>需要手动将ts转换为js,借助<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3doeGF4ZXMvZWdnLXRzLWhlbHBlcg==\">ets</span><br><code>特别注意将项目中的typscript版本升级到4.4.3 </code></p>\n<p><code>npm run tsc</code></p>\n<h2 id=\"Cluster模型\"><a href=\"#Cluster模型\" class=\"headerlink\" title=\"Cluster模型\"></a>Cluster模型</h2><p><strong>Egg.js Cluster模型的原理</strong><br>Egg.js关于这部分内容的文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lZ2dqcy5vcmcvemgtY24vY29yZS9jbHVzdGVyLWFuZC1pcGMuaHRtbA==\">https://eggjs.org/zh-cn/core/cluster-and-ipc.html</span><br><strong>为什么要采用Cluster模式</strong><br>JavaScript代码是运行在单线程上的，那么如果用Node.js来做Web Server,就无法享受到多核运算的好处。<br><strong>什么是Cluster模式</strong><br>文档：http:l&#x2F;nodejs.cn&#x2F;api&#x2F;cluster.html</p>\n<p>Node.jS的单个实例在单个线程中运行。为了利用多核系统，用户有时会想<br>要启动Node.js进程的集群来处理负载。</p>\n<ul>\n<li>在服务器上同时启动多个进程</li>\n<li>每个进程里都跑的是同一份源代码（将一个进程的工作分给多个进程去做）</li>\n<li>这些进程可以同时监听一个端口</li>\n</ul>\n<p><strong>Cluster的运行模式：</strong></p>\n<p>Request————-master_process主进程———————workers进程（多个）</p>\n<p><strong>进程间通信（IPC）：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUExJThDJUU3JUE4JThCJUU5JTk2JTkzJUU5JTgwJTlBJUU4JUE4JThB\">IPC Inter-Process Communication</span></p>\n<p>IPC指的是至少两个进程或线程间传送数据或信号的一些技术或者方法，Node.js将其封装为基于事件的形式便于使用。</p>\n<p><strong>Cluster使用：</strong></p>\n<pre><code class=\"js\">import http from &#39;http&#39;;\nimport cluster from &#39;cluster&#39;;\nimport &#123; cpus &#125; from &#39;os&#39;;\nimport process from &#39;process&#39;;\nif(cluster.isPrimary)&#123;\n    console.log(`master $&#123;process.pid&#125; running`);\n    const cpuLength = cpus().length;\n    for(let i = 0 ; i &lt; cpuLength ; i++)&#123;\n        cluster.fork();\n    &#125;\n    cluster.on(&#39;exit&#39;,(worker)=&gt;&#123;\n        console.log(`worker $&#123;worker.process.pid&#125; exited`);\n    &#125;)\n&#125;else&#123;\n    http.createServer((req,res)=&gt;&#123;\n        res.writeHead(200);\n        res.end(&quot;hello world&quot;);\n    &#125;).listen(8000);\n    console.log(`worker $&#123;process.pid&#125; started`);\n    console.log(cluster.workers); //获得子进程，可以通过process.send和on(&#39;message&#39;)事件进行进程间通信。\n&#125;\n</code></pre>\n<p><strong>egg.js中对于Cluster的二次封装：</strong></p>\n<ul>\n<li>使用egg-scripts启动master process</li>\n<li>使用egg-cluster启动和CPU核数相等的app_worker process</li>\n<li>使用egg-cluster启动的一个独特的agent_.worker process</li>\n</ul>\n<p><strong>进程守护</strong><br>考虑到生产环境的健壮性，必须保证进程异常的情况下怎样处理。<br><strong>当代码抛出异常并没有被捕获的时候，worker使用process.on(‘uncaughtException’,handler)来捕获对应的错误，这时进程处于不确定的状态，需要优雅退出。</strong></p>\n<p><strong>系统异常</strong><br>而当一个进程出现异常导致crash或者被系统杀死时，不像未捕获异常发生时我们还有机会让进程继续执行，Master立刻fork一个新的Worker。<br><strong>Agent机制</strong><br>有一些特殊性质的工作，不能多个worker一起合作，容易造成混乱。对于这种工作egg.js提供了一个新的agent进程来完成。</p>\n<p><strong>Egg.js三种进程的总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>进程数量</th>\n<th>作用</th>\n<th>稳定性</th>\n<th>是否运行业务代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Master进程</td>\n<td>1</td>\n<td>进程管理，进程间消息转发</td>\n<td>非常高</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Agent进程</td>\n<td>1</td>\n<td>后台运行工作</td>\n<td>高</td>\n<td>少量</td>\n</tr>\n<tr>\n<td>Workers进程</td>\n<td>CPU核数</td>\n<td>执行业务代码</td>\n<td>一般</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p><strong>Cluster模型和Node多进程的区别：</strong></p>\n<ul>\n<li>Cluster模块可以将一个node进程分裂成多个子进程，每个子进程独立运行在cpu内核上，以提升应用程序的并发能力和性能，通过主进程和子进程之间的通信来实现负载均衡，处理并发请求。</li>\n<li>node多进程使用child_process模块，其不具备负载均衡和通信机制，需要自行实现进程间通信和负载均衡逻辑。可用于处理长时操作，返回结果给主进程。</li>\n</ul>\n<p><strong>Node.js压力测试工具：</strong></p>\n<p>模拟高并发场景：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9hZHRlc3Q=\">Loadtest</span></p>\n<pre><code class=\"bash\"># n                   总过发送多少个请求\n# c concurrency       同时有几个客户端在发送请求\n# rps request per seconds   每秒发送多少个请求\nloadtest -n 400 -c 10 --rps 200 http://mysite.com/ \n</code></pre>\n<h1 id=\"云服务器\"><a href=\"#云服务器\" class=\"headerlink\" title=\"云服务器\"></a>云服务器</h1><h4 id=\"购买\"><a href=\"#购买\" class=\"headerlink\" title=\"购买\"></a>购买</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L2Vjcw==\">阿里云ECS</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2N2bQ==\">腾讯云CVM</span></p>\n<p>价格（学生优惠）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9hY3QvY2FtcHVzP2Zyb209MTQ1OTk=\">https://cloud.tencent.com/act/campus?from=14599</span> 12G 38</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tL3Byb2R1Y3QvZWNzLmh0bWw=\">华为云ECS</span></p>\n<h4 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h4><p><strong>为什么使用root登录时一个不好的实践</strong></p>\n<ul>\n<li>有非常多的bot会尝试使用root+pwd的ssh方式暴力登录机器，当尝试成功以后，黑客就会控制整个系统。</li>\n<li><em>假如使用特定用户名+pwd,bot需要先猜测用户名(N次)，然后是密码(M次)，这样复杂度提升到N</em>M</li>\n<li>root可以造成更大的危害，影响整个系统，而某个特定用户只能影响它的文件系统</li>\n</ul>\n<p><strong>创建一个用户账号进行登录</strong></p>\n<pre><code class=\"bash\"># 远程登录\nssh root@xxx.xx.xx.xx\n# 添加用户以及设置密码\nadduser dmq\n</code></pre>\n<p><strong>设置该用户拥有sudo权限，给予它在登录以后切换到root的能力</strong></p>\n<pre><code class=\"bash\"># 修改权限，u表示所有者，w表示写权限+表示添加\nchmod u+w /etc/sudoers\n# 编辑文件\nvim /etc/sudoers\n# 找到  `root ALL=(ALL)  ALL`\n# 再加一行  `dmq ALL=(ALL)  ALL`\n</code></pre>\n<p><strong>使用新用户登录并且测试权限</strong></p>\n<pre><code class=\"bash\">ssh dmq@xxx.xx.xx.xx\n# 可以使用 su 直接切换为root用户\n# 也可以使用sudo快捷的使用root权限进行操作\n</code></pre>\n<p><strong>禁止使用root远程登录ssh</strong></p>\n<pre><code class=\"bash\"># 修改ssh配置\nvim /etc/ssh/sshd_config I\n# 修改yes为no\nPermitRootLogin no\n# 重启sshd服务\nservice sshd restart\n</code></pre>\n<p><strong>可选：不使用密码登录</strong><br>为什么使用密码登录有时候是一个不好的实践？<br><strong>非常简单：用户经常使用非常错误（简单的）用户密码，全球最常用的密码是123456以及bc123,而且用户会在多个账户大量重复使用，所以黑客从别的地方盗取的密码很可能在其他账户也可以使用</strong></p>\n<p><strong>使用SSH kev讲行登录</strong><br>SSH key采角了经典的非对称加密技术，可以使用工具创建一个公钥和私钥，你可以将公钥放置在任何的服务器当中，在本地保留私钥。在ssh登录的时候，SSH验证公钥和私钥的合法性，当合法的时候，就可以免密码登录了。证书由1024Bits到4096Bits（128到512字符)的随机字符组成，<br>要比你自己的密码安全的多。</p>\n<pre><code class=\"bash\">#创建ssh key pair\nssh-keygen -t rsa -b 4096 -C &quot;your email@example.com&quot;\nwindows可以使用putty或者git scma软件生成，备注网址：\nhttps://www.jianshu.com/p/95262f5eba7a\n# 本地ssh证书的位置\n-/.ssh/id rsa\n-/.ssh/id rsa.pub\n# 登录远程机器\nssh viking@xxx.xx.xx.xx\n# 创建受信任的登录密钥\n# 这个文件当中的公钥会被当前的主机设置为信任方\ntouch -/.ssh/authorized keys\n# 将id rsa.pub的文本内容黏贴进来\n</code></pre>\n<p><strong>可选，关闭密码登录服务器的功能</strong></p>\n<pre><code class=\"bash#修改ssh配置\">vim /etc/ssh/sshd config\n#修改为no\nPasswordAuthentication no\n#重启服务\nservice sshd i restart\n</code></pre>\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p><strong>准备云服务器必备软件</strong></p>\n<ul>\n<li>nodejs (16)</li>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>Git</li>\n</ul>\n<p><strong>Linux发行版的两大家族</strong></p>\n<ul>\n<li>Debian(完全免费的Linux发行版)-Ubuntu(基于Debian,更加容易上手)-apt包管理系统-软件格式为deb包大</li>\n<li>Red Hat(商用Linux发行版)-CentOS(Red Hat减去收费软件)-yum包管理系统-软件格式为rpm</li>\n</ul>\n<p><strong>软件安装</strong><br><strong>安装Node.js</strong><br>1安装nvm管理node版本<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=\">https://github.com/nvm-sh/nvm</span><br>2使用包管理器安装node最新版本<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucy9ibG9iL21hc3Rlci9SRUFETUUubWQjZGVi\">https://github.com/nodesource/distributions/blob/master/README.md#deb</span></p>\n<p><strong>安装MongoDB</strong><br>1从源代码下载安装，回顾之前的内容<br>2使用包管理器安装<br>Ubuntu:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC90dXRvcmlhbC9pbnN0YWxsLW1vbmdvZGItb24tdWJ1bnR1Lw==\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</span><br>Centos:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC90dXRvcmlhbC9pbnN0YWxsLW1vbmdvZGItb24tcmVkLWhhdC8=\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</span></p>\n<p><strong>安装Redis</strong><br>*1从源代码下载安装，回顾之前的基础知识<br>*2使用包管理器安装<br>CentOS:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLXNlY3VyZS1yZWRpcy1jZW50b3MtNw==\">https://www.digitalocean.com/community/tutorials/how-to-install-secure-redis-centos-7</span><br>Ubuntu:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLWFuZC1zZWN1cmUtcmVkaXMtb24tdWJ1bnR1LTE4LTA0\">https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04</span></p>\n<h4 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h4><p><strong>使用service或者systemctl管理服务</strong></p>\n<pre><code class=\"bash\"># systemd 模块 - https://en.wikipedia.org/wiki/Systemd\nservice  服务名称(mongod)  操作指令(status/start/stop/restart)\nsystemctl  操作指令(start/stop/status/restart/reload)  服务名称service\n</code></pre>\n<h1 id=\"普通部署\"><a href=\"#普通部署\" class=\"headerlink\" title=\"普通部署\"></a>普通部署</h1><p><strong>在服务器上部署并运行</strong></p>\n<ul>\n<li><p>1登录远程机器，使用普通用户。</p>\n</li>\n<li><p>2在自己的目录下面，clone代码</p>\n</li>\n<li><p>3安装对应的依赖</p>\n<ul>\n<li><p>可以使用sharp淘宝mirror来安装比较大的二进制文件。</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFycC5waXhlbHBsdW1iaW5nLmNvbS9pbnN0YWxsI2NoaW5lc2UtbWlycm9y\">https://sharp.pixelplumbing.com/install#chinese-mirror</span></p>\n</li>\n</ul>\n</li>\n<li><p>4创建并且设置.env文件</p>\n</li>\n<li><p>5开启云服务对应的端口(7001)访问。</p>\n<ul>\n<li><p>阿里云：左侧导航“本实例安全组”，“配置规则”，“手动添加”端口</p>\n</li>\n<li><p>其他云平台请自行查看。</p>\n</li>\n</ul>\n</li>\n<li><p>6启动服务器</p>\n<ul>\n<li><p>确认mongo,redis在运行状态</p>\n</li>\n<li><p>npm run tsc</p>\n</li>\n<li><p>npm run start</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>于此可以完成基本的项目部署，但是这种部署方式启动和更新时过于复杂，存在如下问题：</p>\n<p>三个问题</p>\n<ul>\n<li>前置软件的安装，它们在不同操作系统中安装的方式，启动的脚本，预设初始的方式有可能都不相同，这就给我们造成一个很大的困扰，假如你在多台机器上部署的话，可能会遇到各种各样的问题。</li>\n<li>项目需要运行一系列对应的命令才能启动</li>\n<li>项目更新的问题，需要一系列手动的步骤，这是一个非常繁琐，而且容易出错的步骤。有没有更方便的方式可以完成这个过程呢？<ul>\n<li>完成对应的pull代码，更新依赖，启动应用的过程</li>\n<li>是在特定的提交自动触发这个过程</li>\n</ul>\n</li>\n</ul>\n<p>想要更加方便的进行部署可以使用如下工具：</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcA==\">Docker</span></h2><h3 id=\"介绍-3\"><a href=\"#介绍-3\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>问题</strong><br>我们希望有一个工具可以帮我们一键智能部署，假如你要部署在多台不同的机器上，可以不用在担心不同系统，不同版本的差异，以及运行之前需要安装不同软件的痛苦。<br><strong>解决</strong><br>当红的虚拟化软件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbWwv\">Docker</span><br>Docker的进化</p>\n<p><img data-src=\"/images/Snipaste_2024-04-26_20-27-53.jpg\" alt=\"Docker的进化\"></p>\n<ul>\n<li>传统虚拟机，虚拟硬件以后，需要在上面安装一个完整的操作系统。</li>\n<li>Docker:推出了容器的概念，每个容器不需要安装完成的操作系统，里面的进程直接运行在Docker创造的宿主内核中，不需要虚拟硬件。</li>\n</ul>\n<p><strong>Docker的优点</strong></p>\n<ul>\n<li>更快速的启动速度</li>\n<li>更少的资源占用</li>\n<li>一致的运行环境，使用户不关注操作系统而只关心应用程序。</li>\n<li>微服务架构，docker天生适配微服务架构（Docker 有助于将一个复杂系统分解成一系列可组合的部分，这让用户可以用更离散的方式来思考其服务。用户可以在不影响全局的前提下重组软件，使其各部分更易于管理和可插拔。）</li>\n<li>用户可以更准确地控制构建环境的状态，Docker 构建比传统软件构建方法更具有可重现性和可复制性。使持续交付的实现变得更容易。</li>\n</ul>\n<h3 id=\"Docker-images\"><a href=\"#Docker-images\" class=\"headerlink\" title=\"Docker  images\"></a><strong>Docker  images</strong></h3><p>可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9zZWFyY2g/Zz0mdHlwZT1pbWFnZSVFNCVCOCVBRCVFOCU4RSVCNyVFNSU4RiU5NiVFNSU5MCU4NCVFNyVBNyU4RCVFNSVBRSU5OCVFNiU5NiVCOSVFNyU5QSU4NCVFOSU5NSU5QyVFNSU4MyU4RiVFRiVCQyU4QyVFNSVCOSVCNiVFNCVCOCU5NCVFNSU4RiVBRiVFNCVCQiVBNSVFNCVCOCU4QSVFNCVCQyVBMCVFNCVCRCVBMCVFOCU4NyVBQSVFNSVCNyVCMSVFNyU5QSU4NCVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFOSU5NSU5QyVFNSU4MyU4Rg==\">https://hub.docker.com/search?g=&amp;type=image中获取各种官方的镜像，并且可以上传你自己的自定义镜像</span><br>Docker镜像仓库获取镜像的命令是docker pull</p>\n<pre><code class=\"bash\"># 下载镜像\ndocker pull &lt;image-name&gt;:&lt;tag&gt;\n# 查看以及下载的镜像\ndocker images\n# 删除镜像\ndocker rmi &lt;image-id&gt;\n# 上传\ndocker push &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;\n</code></pre>\n<p><strong>使用镜像代理：</strong></p>\n<pre><code class=\"json\">&quot;registry-mirrors&quot;: [\n    &quot;https://docker.mirrors.ustc.edu.cn/&quot;,\n    &quot;https://reg-mirror.qiniu.com&quot;\n]\n</code></pre>\n<h3 id=\"Docker-Container\"><a href=\"#Docker-Container\" class=\"headerlink\" title=\"Docker Container\"></a><strong>Docker Container</strong></h3><p><strong>启动Docker容器</strong></p>\n<pre><code class=\"bash\">docker run -d -p 主机端口:镜像端口 --name 容器名称 镜像名称\n# 例如：（--name 容器名称省略）\ndocker run -d -p 81:80 nginx\n# -d  后台运行\n# -p  端口映射，81为主机的端口，80为镜像端口\n# --name 自定义容器名称\n# 镜像名称，假如本地没有，会自动pull一次镜像进行下载。\n</code></pre>\n<p><strong>其他命令</strong></p>\n<pre><code class=\"bash\"># 查看所有容器\ndocker  ps\n# 停止容器\ndocker stop container-id\n# 删除容器\ndocker rm container-id\n# 启动已终止容器\ndocker container start container-id\n</code></pre>\n<p><strong>进入容器内部</strong></p>\n<pre><code class=\"bash\">docker exec -it &lt;container-id&gt; command\n-i : 即使没有附加也保持STDIN 打开\n-t : 分配一个伪终端\n</code></pre>\n<h3 id=\"持久化容器数据\"><a href=\"#持久化容器数据\" class=\"headerlink\" title=\"持久化容器数据\"></a><strong>持久化容器数据</strong></h3><p>使用-v参数，可以设定一个数据的映射关系，将本地的文件映射到容器中对应的文件中去。</p>\n<pre><code class=\"bash\">docker run -d -p 81:80 -v host:container image-name\n#例如：将本地数据卷映射到容器中\ndocker run -d -v /data/db:/data/db mongo\n</code></pre>\n<p><strong>创建对应的数据卷volumn</strong></p>\n<pre><code class=\"bash\"># 创建数据卷\ndocker volume create &lt;volumn-name&gt;\n#例如：docker volume create mongo\n# 使用volumn数据卷\ndocker run -d -v &lt;volumn-name&gt;:/data/db mongo\n# 例如：docker run -d -v mongo:/data/db mongo\n# 检查数据卷\ndocker volume inspect &lt;volumn-name&gt;\n# 删除数据卷\ndocker volume remove mongo\n</code></pre>\n<h3 id=\"Dockerfile自定义镜像\"><a href=\"#Dockerfile自定义镜像\" class=\"headerlink\" title=\"Dockerfile自定义镜像\"></a>Dockerfile自定义镜像</h3><p>Docker image中的镜像虽然非常多，但是不能完全符合自己项目的全部需求，可以自定义构建一个自己的镜像。</p>\n<p>Dockerfile是一个特殊的文本文件，其中包括一系列指令，用于构建对应的镜像。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNmcm9t\">指令</span></strong></p>\n<p> <strong>Dockerfile示例：</strong></p>\n<pre><code class=\"dockerfile\"># 指定基础镜像，从node14开始构建\nFROM node:14\n\n# 创建对应的文件夹，作为项目运行的位置\nRUN mkdir -p /usr/src/app\n\n# 指定工作区，后面的运行任何命令都是在这个工作区中完成的\nWORKDIR /usr/sec/app\n\n# 从本地拷贝对应的文件 到 工作区\nCOPY server.js /usr/src/app\n\n# 执行安装命令\nRUN npm install --registry=https://registry.npm.taobao.org\nRUN npm run tsc\n\n#告知当前Docker image暴露的是3000端☐\nEXPOSE 3000\n\n#执行启动命令，一个Dockerfile只能有一个\nCMD node server.js\n</code></pre>\n<p><strong>构建：</strong></p>\n<pre><code class=\"bash\"># 这里特别注意上下文的概念，不要在根目录使用Dockerfi1e\ndocker build [选项] &lt;上下文路径/URL/-&gt;\n# 例如：(在项目文件夹中运行)\ndocker build -t test-node .\n</code></pre>\n<p><strong>.dockerignore文件用于忽略docker中需要打包进镜像的文件</strong></p>\n<p><strong>.dockerignore示例：</strong></p>\n<pre><code class=\"dockerfile\"># Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n# Optional REPL history\n.node_repl_history\n# Output of &#39;npm pack&#39;\n*.tgz\n# Yarn Integrity file\n.yarn-integrity\n</code></pre>\n<p> <strong>多个容器相互通信：</strong></p>\n<p>要点：Docker中每一个container应该只完成一个工作，并且将它做好。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>解耦，这样不同的服务和后端代砀都可以完全分离开来，方便管理以及未来的扩展。</li>\n<li>服务的更新以及升级都是完全独立的。</li>\n<li>在一个container中，启动多个不同的进程，需要一个进程管理器</li>\n</ul>\n<p><strong>通信过程：</strong></p>\n<p>docker容器之间不能直接进行访问，而是应该通过docker网络进行访问。</p>\n<pre><code class=\"bash\"># 创建docker网络\ndocker network create test\n# 在创建的docker网络中启动服务\ndocker run -d --network test --name mongo -p 27017:27017 mongo\n# 将原来项目中的的ip地址替换为docker的name名称\n# 例如原来为：mongodb://localhost:27017/api  的地址要替换为： mongodb://mongo:27017/api\n# 只有在同一个docker网络中启动的项目间才能进行访问。\ndocker run -d --network test --name use -p 80:3000 use\n</code></pre>\n<p>如果每个容器都要这样操作一遍就会显得非常麻烦，这时就需要使用Docer compose工具（配置docker-compose.yml文件）</p>\n<p>Docker compose工具</p>\n<p>Docker compose是Docker官方推出的工具，用来管理和共享多个容器的应用，Mac系统和Windows系统安装客户端时自带。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==\">Linux需要单独安装</span>。</p>\n<pre><code class=\"bash\">docker-compose version\n</code></pre>\n<p><strong>配置：</strong></p>\n<ul>\n<li>docker compose通过一个特殊的yml文件，进行配置，这个文件必须命名为<strong>docker-compose.yml</strong></li>\n<li>docker-compose所有的字段参考文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvY29tcG9zZS1maWxlLXYzLw==\">https://docs.docker.com/compose/compose-file/compose-file-v3/</span></li>\n</ul>\n<p><strong>docker-compose.yml文件配置示例：</strong></p>\n<pre><code class=\"yaml\">version: &#39;3&#39; # docker指令版本\nservices: # 要启动的服务\n  test-mongo: # 服务名称，这里的服务名称对应着容器通信时的前缀！\n    image: mongo # 使用的镜像名称\n    container_name: test-mongo # 容器名称\n    volumes:  # 使用的数据卷映射\n      - &#39;.docker-volumes/mongo/data:/data/db&#39;\n    ports:  # 端口映射\n      - 27017:27017\n    environment: # 设置环境变量\n      - MONGO_INITDB_ROOT_USERNAME=admin  # 内置的环境变量，可以初始化添加一个User\n      - MONGO_INITDB_ROOT_PASSWORD=pass\n    env_file: # 设置环境变量文件，将敏感信息放置到环境变量文件中\n      - .env\n  test-use: # 第二个项目，注意对齐关系\n    depends_on: # 配置所依赖的服务\n      - test-mongo\n    build: # 设置构建配置\n      context: . # 操作上下文为当前目录\n      dockerfile: Dockerfile # 基于Dockerfile进行构建\n    image: test-use-image\n    container_name: test-use\n    ports:\n      - 7001:7001\n</code></pre>\n<p><strong>启动以及关闭：</strong></p>\n<pre><code class=\"bash\"># 启动\ndocker-compose up -d\n# 关闭\ndocker-compose down\n</code></pre>\n<h3 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h3><p><strong>数据库准备工作</strong></p>\n<ul>\n<li>数据库配置，初始化工作，比如插入一些特定的数据</li>\n<li>避免使用root用户去启动服务，从而提高安全性（配置数据库访问权限）</li>\n</ul>\n<p><strong>特殊的初始化数据库的位置：&#x2F;docker-entrypoint-initdb.d（这个文件夹中的脚本会在容器启动前自动执行）</strong></p>\n<ul>\n<li><p>可以创建js文件或者sh文件（shell）进行执行。</p>\n</li>\n<li><p>mongoDB：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fbW9uZ28=\">https://hub.docker.com/_mongo</span></p>\n</li>\n<li><p>Postgres:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fbHBvc3RncmVz\">https://hub.docker.com/_lpostgres</span></p>\n</li>\n<li><p>特别注意，只有在数据库没有被创建的情况下，也就是<strong>数据库的文件夹是空的情况下</strong>，脚本才会被执行。</p>\n</li>\n</ul>\n<p><strong>docker-compose.yml文件中配置env_file为当前文件夹下的.env文件。</strong></p>\n<p>可以使用js文件或者sh文件，但是由于此文件在其余文件之前运行，此时js文件中通过process.env获取不到所需要的环境变量，可以选用sh文件。</p>\n<p><strong>Shell中EOF&lt;&lt;的用法</strong><br>在Shell中我们通常将EOF与&lt;结合使用，表示，二债的输入作为子命令或子Shell的输入，直到遇到EOF为止，再返回到主调Shell。.</p>\n<pre><code class=\"shell\">#!/bin/bash\nmongo &lt;&lt;EOF\nuse admin\ndb.auth(&#39;root&#39;,&#39;123456&#39;)\nuse lego\ndb.createUser(&#123;\n    user: &#39;$MONGO_DB_USERNAME&#39;,\n    pwd: &#39;$MONGO_DB_PASSWORD&#39;,\n    roles: [&#123;\n        role: &#39;readWrite&#39;,\n        db: &#39;lego&#39;\n    &#125;]\n&#125;)\ndb.createCollection(&#39;works&#39;)\ndb.works.insertMany([\n    &#123;\n          id:19,\n          title:&#39;测试标题&#39;,\n          name:&#39;张三&#39;\n    &#125;\n])\nEOF\n</code></pre>\n<h3 id=\"优化镜像大小\"><a href=\"#优化镜像大小\" class=\"headerlink\" title=\"优化镜像大小\"></a>优化镜像大小</h3><p> <strong>Docker镜像构建优化：使用alpine版本的镜像</strong></p>\n<p>优化镜像大小  ：   什么是Alpine Linux:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbHBpbmVsaW51eC5vcmcv\">https://alpinelinux.org</span></p>\n<p><strong>Alpine的优点</strong></p>\n<ul>\n<li><p>Small小</p>\n<ul>\n<li><p>默认软件包，alpine选择busybox</p>\n</li>\n<li><p>C运行库，一般会用glibc,alpine选择musl</p>\n</li>\n</ul>\n</li>\n<li><p>最简依赖，Simple</p>\n<ul>\n<li><p>很多内置软件的插件都去掉。</p>\n</li>\n<li><p>国际化内容都被删除</p>\n</li>\n</ul>\n</li>\n<li><p>Secure安全</p>\n</li>\n</ul>\n<p><strong>使用alpine版本的镜像可以大大减小镜像的体积。</strong></p>\n<p><strong>DockerBuild构建提速</strong></p>\n<p>docker中运行命令是基于一层一层的，当修改文件之后，COPY后的缓存全部失效，这时就会重新执行后续命令，使用不了缓存，导致构建速度很慢。此时可以将原来COPY文件夹，改为COPY具体的文件（进行拆分），以更好地使用缓存。</p>\n<h3 id=\"部署-2\"><a href=\"#部署-2\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p><strong>安装Docker（有的云服务可以自定义安装）</strong></p>\n<p>Ubuntu：（需要使用root账户进行安装）</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kb2NrZXIvdWJ1bnR1LWRvY2tlci1pbnN0YWxsLmh0bWw=\">https://www.runoob.com/docker/ubuntu-docker-install.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\">https://docs.docker.com/engine/install/ubuntu/</span></li>\n</ul>\n<p><strong>配置用户组</strong><br>因为是root安装，普通用户执行对应的命令的时候有可能会报错：<br><code>Can&#39;t connect to docker daemonGot permission denied while trying to connect to the Docker daemonsocket at unix:///var/run/docker.sock</code></p>\n<p><strong>需要将对应的用户添加到docker的用户组中。</strong></p>\n<pre><code class=\"bash\">#usermod命令修改用户账户\n#a--append添加-G--groups\n组的名称\nsudo usermod-aG docker 你的用户名\n#如果组不存在，添加对应的docker组\nsudo groupadd docker\n#查看一个用户所属的组\ngroups\n</code></pre>\n<p><strong>添加下载镜像：</strong></p>\n<pre><code class=\"bash\"># root\nvim /etc/docker/daemon.json\n&#123;\n&quot;registry-mirrors&quot;:\n&quot;https://docker.mirrors.ustc.edu.cn/&quot;,\n&quot;https://reg-mirror.qiniu.com&quot;\n]\n</code></pre>\n<p><strong>运行：</strong></p>\n<pre><code class=\"bash\"># 拉最新的代码\ngit pull\n# 先查看目前端口是否被占用\n# 如果被占用，释放端口\n# 或者改变docker-compose,yml的映射端口\ndocker-compose up -d\n</code></pre>\n<h1 id=\"YAML语言\"><a href=\"#YAML语言\" class=\"headerlink\" title=\"YAML语言\"></a>YAML语言</h1><p>YAML<br>(YAML Ain’t a Markup Language)是一种标记语言，它使用空格作为缩进，看起来非常的简洁，可读性非常的好，非常适合一些内容大纲和配置文件。他最终是通过工具转化为JSON文件的，但是YAML的可读性比JSON强很多，因此复杂的配置文件一般使用YAML。</p>\n<p><strong>例如：</strong></p>\n<pre><code class=\"yaml\"># 字符串不用加引号\nkey: value\nnumber: 100\nboolean: true\n# 字符串不用加引号，但是加上也不会报错\nquote_string: &#39;quote String&#39;\n# 多行字符串使用 literal block语法：也就是竖线\nmutiple_string: |\n  line one\n  line two\n  line three\n# collection types 集合类型\n# 使用缩进表示层级关系，最好使用两个空格，不是两个空格也没关系，对齐就行\nperson:\n  name: dmq\n  age: 18\n  address:\n    city: 上海\n\n# sequences 数组或者列表\nhobbies:\n  - Item 1\n  - Item 2\n  - name: weson\n    value: xyz\n    address:\n      city: 北京\n</code></pre>\n<h1 id=\"Github-Action\"><a href=\"#Github-Action\" class=\"headerlink\" title=\"Github Action\"></a>Github Action</h1><p>Github官方的CI&#x2F;CD工具，作为github的亲儿子，和github几乎是完美的无缝衔接的，功能非常强大。</p>\n<p>CI   CD常用工具：</p>\n<ul>\n<li>Github actions <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucw==\">https://docs.github.com/en/actions</span></li>\n<li>Travis <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJhdmlzLWNpLmNvbS8=\">https://www.travis-ci.com/</span></li>\n<li>CircleCl <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaXJjbGVjaS5jb20v\">https://circleci.com/</span></li>\n<li>Jenkins <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVua2lucy5pby8=\">https://www.jenkins.io/</span></li>\n<li>优势讨论：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMwNjE5NTAzMy9hbnN3ZXIvMTg3MDMyMjExOA==\">https://www.zhihu.com/question/306195033/answer/1870322118</span></li>\n</ul>\n<p><img data-src=\"/images/Snipaste_2024-04-27_18-37-04.jpg\" alt=\"/images/Snipaste_2024-04-16_12-54-33.jpg\"></p>\n<p><strong>Workflow</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy91bmRlcnN0YW5kaW5nLWdpdGh1Yi1hY3Rpb25zI3dvcmtmbG93cw==\">https://docs.github.com/cn/actions/learn-github-actions/understanding-github-actions#workflows</span><br>Workflow是一个可配置的自动化流程，可以包含多个jobs,通过一个在repo当中的yml文件来定义对应的流程，一个repo可以包含多个workflow。<br><strong>Events</strong><br>Event是触发workflow的特殊事件，比如pull request,push或者issue,也可以完全自定义，完整列表请看：https:&#x2F;docs.github.com&#x2F;cn&#x2F;actions&#x2F;learn-github-actions&#x2F;events-that-trigger-workflows</p>\n<p><strong>Jobs</strong></p>\n<p>Job是Workflow当中一系列的可执行步骤，每个Job是在同一个runner中进行的（(Runner是指处于github的一台特殊的虚拟机，支持各种操作系统)，每个步骤或者是一个shell脚本，抑或是一个可执行的action,每个步骤是按顺序执行，并且互相依赖的。</p>\n<p><img data-src=\"/images/Snipaste_2024-04-27_19-54-06.jpg\" alt=\"/images/Snipaste_2024-04-16_12-54-33.jpg\"></p>\n<p><strong>Actions</strong></p>\n<p>Action是github actions中的一个自定义应用，它可以运行一系列复杂的并且常用的任务，使用action可以帮我们减少在workflow中写重复代码，Github提供了非常多常用的action,可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlP3R5cGU9YWN0aW9ucw==\">这里查阅</span>，同时我们也可以写自己的action。</p>\n<p><strong>github secrets</strong></p>\n<p>项目中有的私密信息不希望公开暴露，通常的做法是将私密信息写道env文件中，使用gitingore将其忽略掉，这里还有一个做法就是github secrets，在github官网设置github secret，然后在文件中直接书写变量。</p>\n<p><strong>例如：.github文件夹下workflow文件夹下创建一个yml文件，写入：</strong></p>\n<pre><code class=\"yaml\">name: Github Actions Demo\non: [push]\njobs:\n  Check-Github-actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo &quot;triggered by a $&#123;&#123; github.event_name &#125;&#125; event&quot;\n      - run: echo &quot;running on a $&#123;&#123; runner.os &#125;&#125; server hosted by github&quot;\n      - name: check out repo code\n        uses: actions/checkout@v2 # 在工作流程中检出代码仓库的内容、确保工作流程始终使用一致的代码版本\n      - run: echo &quot;the $&#123;&#123; github.reopsitory &#125;&#125; has been cloned&quot;\n      - name: List files in the repo\n        run: |\n          ls $&#123;&#123; github.workspace &#125;&#125;\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        width:\n          repository: &#39;vikingmute/lego-bricks&#39;\n      - name: List files in the repo\n        run: |\n          ls $&#123;&#123; github.workspace &#125;&#125;\n      - uses: actions/setup-node@v2\n        with:\n          node-version: &#39;16&#39;\n      - run: node -v\n      - run: npm install -g typescript\n      - run: tsc -v\n  jobs:\n    SECRET-SSH-ACTIONS:\n      runs-on: ubuntu-latest\n      steps:\n      #使用ssh-action完成远程登陆：文档地址：https://github.com/appleboy/ssh-action\n        - uses: appleboy/ssh-action@master \n          with:\n            host: $&#123;&#123; secrets.HOST &#125;&#125;\n            username: $&#123;&#123; secrets.SSH_USER &#125;&#125;\n            password: $&#123;&#123; secrets.SSH_PWD &#125;&#125;\n            script_stop: true\n            script: |\n              pwd\n              ls -l\n              touch secret.txt\n              echo $&#123;&#123; secrets.MY_SECRET &#125;&#125; &gt;&gt; secret.txt\n</code></pre>\n<h1 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h1><h2 id=\"推送远程镜像仓库\"><a href=\"#推送远程镜像仓库\" class=\"headerlink\" title=\"推送远程镜像仓库\"></a>推送远程镜像仓库</h2><p><strong>普通线上更新流程：</strong></p>\n<pre><code class=\"bash\"># 每次代码更新以后，登录到ssh服务器\n# 关闭服务\ndocker-compose down\n# 更新代码\ngit pull\n# 假如有.env，的更新需要重新设置，env文件\n# 重新build应用镜像\ndocker-compose build lego-backend\n# 重启服务\ndocker-compose up -d\n</code></pre>\n<p><strong>弊端：</strong></p>\n<ul>\n<li><p>初次上线和更新属于两步</p>\n</li>\n<li><p>初次上线需要特别的操作，就是之前手动部署上线的运行的过程</p>\n<ul>\n<li><p>clone代码</p>\n</li>\n<li><p>设置环境变量.env</p>\n</li>\n<li><p>docker-compose up -d</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>追求的成果：</strong></p>\n<p><strong>每次提交，可以自动一次性的部署到任何服务器，实现初次启动或者更新的效果，这才是一个完美的devops的流程</strong></p>\n<p><strong>解决方案：</strong></p>\n<p>将上面本地的镜像存在于docker hub服务器中，这样每次就不用重新build，而是直接拉取。</p>\n<pre><code class=\"yaml\">services:\n  lego-redis:\n    image:redis:6\n  lego-mongo:\n    image:mongo:latest\n  lego-backend:\n    image:lego-backend\n#我们需要每次手动的build镜像，也就说镜像只存在于本地\n  build:\n    ......context:.\n    dockerfile:Dockerfile\n</code></pre>\n<p><strong>改为：</strong></p>\n<pre><code class=\"yaml\"># 更好的方案\n# 不需要任何代码库中的文件，只需要一个docker-compose.yml文件\n# 就可以轻松的在任何服务器运行\nservices:\n  lego-redis:\n    image:redis:6\n  lego-mongo\n    image:mongo:latest\n  lego-backend:\n# 不需要build,而是存在于docker hub服务器中，可以每次直接拉取\n    image:lego-backend:1.0.1\n</code></pre>\n<p><strong>docker hub免费版有限制，推荐使用阿里云容器镜像服务：</strong></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sd3d3LmFsaXl1bi5jb20vcHJvZHVjdC9hY3I=\">阿里云容器镜像服务ACR</span></strong><br>个人版完全免费</p>\n<p>创建镜像仓库之后，需要将本地镜像推送到ACR仓库中：</p>\n<pre><code class=\"bash\"># 来到镜像仓库的基本信息页面\n# 登录\ndocker login --username=用户名 registry.cn-hangzhou.aliyuncs.com\n# tag两种方式：\n# 1:使用tag bui1d\ndocker build--tag &quot;registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]&quot;\n# 2:给 build 好的打 tag\ndocker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]\n# 查看镜像是否 build 完成\ndocker images\n# 推送镜像\ndocker push registry.cn-hangzhou.aliyuncs.com/dmq00/test:[镜像版本号]\n# 在阿里云ACR界面检查看是否已经存在\n</code></pre>\n<h2 id=\"Github-Actions自动部署\"><a href=\"#Github-Actions自动部署\" class=\"headerlink\" title=\"Github Actions自动部署\"></a>Github Actions自动部署</h2><p><strong>使用github actions加成自动化部署：当推送代码到github仓库时，让我们的代码自动提交镜像到镜像仓库。</strong></p>\n<p><strong>大体分为两步</strong></p>\n<ul>\n<li><h6 id=\"在github服务器上build-image并且push\"><a href=\"#在github服务器上build-image并且push\" class=\"headerlink\" title=\"在github服务器上build image并且push\"></a>在github服务器上build image并且push</h6></li>\n<li><p><strong>使用docker-compose-online文件在服务器上运行应用</strong></p>\n</li>\n</ul>\n<p><strong>第一步详细流程分析，在github runner上运行</strong></p>\n<ul>\n<li><p>checkout代码（在github服务器上）</p>\n</li>\n<li><p>创建.env文件，并且添加两个环境变量( upload to OSS需要两个对应的信息 )</p>\n</li>\n<li><p>使用阿里云ACR完成docker login</p>\n</li>\n<li><p>使用正确的阿里云tag进行docker build</p>\n<ul>\n<li>怎样每次push生成特殊的tag？是一个后续的问题</li>\n</ul>\n</li>\n<li><p>docker push</p>\n</li>\n</ul>\n<p>例如：【1】在项目文件夹.github&#x2F;workflow下创建yml文件，写入：</p>\n<pre><code>name: build image,push to ACR\non: [push]\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      # checkout 代码\n      - uses: actions/checkout@v2\n      # 创建env文件\n      - run: touch .env\n      # 使用“ &gt;&gt; ”添加信息\n      - run: echo ALC_ACCESS_KEY=$&#123;&#123; secrets.ALC_ACCESS_KEY &#125;&#125; &gt;&gt; .env\n      - run: echo ALC_SECRET_KEY=$&#123;&#123; secrets.ALC_SECRET_KEY &#125;&#125; &gt;&gt; .env\n      # 使用阿里云ACR 完成 docker login\n      - name: Login to Aliyun ACR\n        uses: aliyun/acr-login@v1 # 使用专属的镜像\n        with:\n          login-server: https://registry.cn-hangzhou.aliyuncs.com\n          region-id: cn-hangzhou # 查看官网自己仓库的信息\n          username: &quot;$&#123;&#123; secrets.ACR_USERNAME &#125;&#125;&quot;\n          password: &quot;$&#123;&#123; secrets.ACR_PASSWORD &#125;&#125;&quot;\n        # 使用正确的阿里云 tag 进行 docker build\n        - name: Build image for Docker\n          run: docker build --tag &quot;registry.cn-hangzhou.aliyuncs.com/dmq00/test:0.0.2&quot;\n        - name: Push Image to ACR\n          run: docker push registry.cn-hangzhou.aliyuncs.com/dmq00/test:0.0.2\n</code></pre>\n<p>这样就能保证代码push到github上之后自动将镜像推送到docker镜像仓库，结合dockerfile文件就能保证使用docker镜像时自动执行命令，安装对应依赖并执行项目。</p>\n<p><strong>第二步详细流程分析，在服务器上部署对应的代码并且运行</strong></p>\n<ul>\n<li><p>checkout代码</p>\n</li>\n<li><p>创建.env文件，添加多个环境变量。(应用所有需要的环境变量)，github  secrets中添加。</p>\n</li>\n<li><p>创建文件夹，拷贝如下文件到文件夹内</p>\n<ul>\n<li>.env</li>\n<li>docker-compose-online.yml</li>\n<li>mongo-entrypoint文件夹</li>\n</ul>\n</li>\n<li><p>将新建的文件夹拷贝到服务器(SCP)当中</p>\n<ul>\n<li>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwcGxlYm95L3NjcC1hY3Rpb24=\">https://github.com/appleboy/scp-action</span></li>\n</ul>\n</li>\n<li><p>SSH到服务器中</p>\n<ul>\n<li>进入拷贝的文件夹内</li>\n<li>登录阿里云ACR</li>\n<li>停止服务docker-compose down （第一次的话，没有启动也不会报错）</li>\n<li>启动服务docker-compose up</li>\n<li>清理工作可选，保证安全（删除.env文件，登出docker账户）</li>\n</ul>\n</li>\n</ul>\n<p><strong>后续过程需要完成：</strong></p>\n<ul>\n<li><p>在push tags的时候才触发对应的job</p>\n<p>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy9ldmVudHMtdGhhdC10cmlnZ2VyLXdvcmtmbG93cw==\">https://docs.github.com/cn/actions/learn-github-actions/events-that-trigger-workflows</span></p>\n</li>\n<li><p>怎样获取对应的每次提交相关的特殊信息</p>\n<p>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy9jb250ZXh0cw==\">https://docs.github.com/en/actions/learn-github-actions/contexts</span></p>\n</li>\n<li><p>使用这个特殊信息，在对应的docker-compose-online.yml中进行替换，将要启动的版本替换为将要构建的版本。</p>\n</li>\n</ul>\n",
            "tags": [
                "复杂业务部署与优化",
                "复杂业务部署与优化"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/03/30/jest/",
            "url": "https://dmqweb.cn/2024/03/30/jest/",
            "title": "jest",
            "date_published": "2024-03-30T12:33:01.000Z",
            "content_html": "<h1 id=\"jest测试\"><a class=\"anchor\" href=\"#jest测试\">#</a> jest 测试</h1>\n<p>市面上有很多测试框架，例如：mocha 、jasmine、vue test utils、vitest、react testing library 和 testing frameworks for jacascript 等，但语法和思想大致相同，现在依 jest 框架进行简单的使用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * jest 简单的语法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * expect  toBe 语法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tow plus to 4'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * toEqual 语法，递归检查对象或数组的每个字段</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'object assignment'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * expect  not  toBe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adding is not 0'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * 检查指定空类型（null,undefined,defined，true 和 false）</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toBe null'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toBe defined'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeDefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toBe Undefined'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">let</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeUndefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toBe Truthy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toBe falsy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> * jest 对 0 进行精确测试的结果</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zero'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非 null</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeDefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//defined</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeUndefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非 true</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> * jest 测试数字</pre></td></tr><tr><td data-num=\"64\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two and two'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeGreaterThanOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeLessThanOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeLessThanOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre> * toBeCloseTo 检查浮点数相等</pre></td></tr><tr><td data-num=\"76\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test float number'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//expect (value).toBe (0.3)  报错，因为计算机精度的原因</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCloseTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"83\"></td><td><pre> * toMatch 根据正则表达式检查字符串</pre></td></tr><tr><td data-num=\"84\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test reg'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'team'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">I</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Christoph'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">stop</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lo w'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"91\"></td><td><pre> * toContain 测试数组和可迭代对象</pre></td></tr><tr><td data-num=\"92\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list to be'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"99\"></td><td><pre> * 测试异步代码</pre></td></tr><tr><td data-num=\"100\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">const</span> testPromise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">//1 使用 return</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'return异步代码'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">return</span> testPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">//2 使用 async 和 await 语法</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fetchMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async and await'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\">//expect.assertions 验证是否调用了一定数量的断言，确保兑现的承若通过测试</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">//catch 捕捉（确保 Promise 不会被兑现）</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">// test('catch fails with errors',()=>&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">//     return fetchData2().catch(e=>expect(e).toMatch('error'))</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 3 使用回调函数 done</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done to async'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    testPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">// 4 .resolves 匹配器等待 Promise 解析（reject 则失败）</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.resolves匹配器'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolves<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"138\"></td><td><pre> * beforeEach 和 afterEach 钩子函数</pre></td></tr><tr><td data-num=\"139\"></td><td><pre> * 当每一个测试之前或之后都需要调用相同的方法就可以使用这两个钩子函数</pre></td></tr><tr><td data-num=\"140\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"143\"></td><td><pre> * describe 块</pre></td></tr><tr><td data-num=\"144\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"147\"></td><td><pre> * test.only 只运行一个测试</pre></td></tr><tr><td data-num=\"148\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>test<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test only'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test only'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t o'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "TDD",
                "jest"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/03/30/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/",
            "url": "https://dmqweb.cn/2024/03/30/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/",
            "title": "本地文件链接",
            "date_published": "2024-03-30T11:31:00.000Z",
            "content_html": "<h1 id=\"链接本地文件的方式\"><a class=\"anchor\" href=\"#链接本地文件的方式\">#</a> 链接本地文件的方式</h1>\n<h3 id=\"npm-link\"><a class=\"anchor\" href=\"#npm-link\">#</a> npm link</h3>\n<p>1、带有 package.json 文件的文件夹内运行：npm link ，即可在用户全局中创建该文件夹的全局链接。</p>\n<p>2、在需要使用文件的地方执行：npm link  文件名，注意文件名是 package.json 中的 name 字段值。</p>\n<h3 id=\"file路径\"><a class=\"anchor\" href=\"#file路径\">#</a> file 路径</h3>\n<p>在需要使用的 package.json 的 dependence 中添加：文件名：&quot;file:  ....&quot;，添加上 file 路径指向本地文件。</p>\n<h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别：</h3>\n<p>两种方式的区别在于如果项目较为简单，使用 file: 路径即可解决，但如果项目较为复杂，且文件包括文件地址需要不断移动时，使用 npm  link 的方式更好。</p>\n",
            "tags": [
                "脚手架开发",
                "脚手架 cli"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/03/29/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "url": "https://dmqweb.cn/2024/03/29/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "title": "前端模块化",
            "date_published": "2024-03-29T14:34:14.000Z",
            "content_html": "<h1 id=\"modules模块化\"><a class=\"anchor\" href=\"#modules模块化\">#</a> modules 模块化</h1>\n<h3 id=\"模块化的优点\"><a class=\"anchor\" href=\"#模块化的优点\">#</a> 模块化的优点：</h3>\n<p>可维护性、可复用性。</p>\n<h4 id=\"模块化的发展\"><a class=\"anchor\" href=\"#模块化的发展\">#</a> 模块化的发展</h4>\n<p>1、ES6 之前没有模块化时，浏览器环境需要使用 script 进行引入 js 文件<br />\n 2、后来使用全局变量 + 命名空间（namespace）处理，就是使用 IIFE 自动执行函数创建一个函数作用域，赋值给一个全局变量。<br />\n这样做的缺点是：依赖于全局变量，污染全局变量，不安全。<br />\n依赖于约定命名空间来避免冲突，可靠性不高。<br />\n需要手动管理依赖并控制执行顺序，容易出错。<br />\n需要在最终上线前手动合并所有用到的模块。<br />\n3、node 端模块系统：Common.js，缺点是浏览器端无法使用<br />\n 4、AMD (Asynchronous module definition) 异步加载模块定义，CMD (模块标准)<br />\n 采用异步方式加载，需要全局环境定义 require 和 define，不需要引入其他的变量。<br />\n5、ES6 modules、引入和暴露方式更加多样，支持复杂的静态分析和静态、动态导入。</p>\n<h1 id=\"bundler打包工具\"><a class=\"anchor\" href=\"#bundler打包工具\">#</a> Bundler 打包工具</h1>\n<h3 id=\"诞生原因\"><a class=\"anchor\" href=\"#诞生原因\">#</a> 诞生原因：</h3>\n<p>使用 import export 这种异步加载方式在大多数浏览器中无法使用。</p>\n<h3 id=\"常见工具\"><a class=\"anchor\" href=\"#常见工具\">#</a> 常见工具</h3>\n<p>一、<strong>Webpack</strong>（单 JS 文件入口），Webpack 采用代码分割、异步加载等技术，可以将多个模块打包成一个或者多个 bundle,，构建的产物是一个函数。Webpack 主要用于构建复杂的前端项目，如 Web 应用、SPA 单页面应用等，支持模块化开发、代码分割、资源优化和静态文件处理等功能。。</p>\n<p>二、<strong>rollup</strong> 用静态的方式分析代码，对未使用的代码更加彻底的进行树摇优化，输出的 bundle 更加的精简。</p>\n<p>三、<strong>snowpack</strong>（使用于新版浏览器）<br />\n1、出现的原因（其他 Bundler 的问题）：<br />\n当资源越来越多时，打包的速度会越来越慢，大中型项目中，启动时间可能达到好几分钟。（vite 的理念来源于 snowpack，充分使用了新版浏览器支持 es modules 的特性。）<br />\n2、优势：<br />\nsnowpack 利用新版浏览器支持 es modules 的特性，开发模式不会被打包，每个文件编译一次，永久被缓存，当一个文件修改的时候就只需要重新 build 那一个文件。（适用于新版浏览器）<br />\n四、<strong>vite</strong><br />\nvite 基于 snowpack 的理念（利用新版浏览器支持 es modules 的特性），基于 es-modules，采用 rollup 进行构建 ，开发模式不会打包，每个文件当使用时才会去加载，修改时只需要重新 build 那一个文件。<br />\n五、<strong>vue-cli</strong><br />\nvue-cli 底层基于 webpack，webpack 通过导入导出的语句分析整个项目，将目标代码转化成兼容浏览器的 js 代码，只有打包后的几个文件，这个过程需要耗费一些时间。</p>\n<h1 id=\"webpack配置支持es-module\"><a class=\"anchor\" href=\"#webpack配置支持es-module\">#</a> webpack 配置支持 ES Module</h1>\n<p>webpack 默认只支持 CommonJS 规范，配置支持 ES Module 规范，需要进行如下配置：<br />\n一：将 ES Module 语法的 js 文件通过 webpack 进行打包即可。<br />\n二：webpack 默认 target 为 web，在使用 node 内置库时会报错，可以修改 target 属性。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./bin/core.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'core.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 改变打包模式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'node'</span> <span class=\"token comment\">// 进入 node 环境，默认是 web</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>三、webpack 配置 babel-loader，兼容低版本 node<br />\n 方案一：安装 babel-loader、@babel/core、@babel/preset-env（有时需要 @babel/plugin-transform-runtime 插件）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./bin/core.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'core.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 改变打包模式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 进入 node 环境，默认是 web</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 使用 babel-loader</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                            <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                <span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                    <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                    <span class=\"token literal-property property\">regenerator</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                    <span class=\"token literal-property property\">useESModules</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                    <span class=\"token literal-property property\">helpers</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方案二：node.js 实验功能<br />\n将 js 后缀更改为 mjs 后缀，即可（需要 node 版本为 14 以上）, 小于 14 版本的时候，node 执行时需要加上 --experimental-modules 参数，例如：<br />\n <code>node --experimental-modules index.js</code></p>\n",
            "tags": [
                "前端工程化",
                "ESModules"
            ]
        },
        {
            "id": "https://dmqweb.cn/2024/03/29/TDD/",
            "url": "https://dmqweb.cn/2024/03/29/TDD/",
            "title": "TDD测试驱动开发",
            "date_published": "2024-03-29T13:47:28.000Z",
            "content_html": "<h1 id=\"tddtest-drive-development测试驱动开发\"><a class=\"anchor\" href=\"#tddtest-drive-development测试驱动开发\">#</a> TDD (test drive development) 测试驱动开发</h1>\n<h3 id=\"测试驱动开发的口号\"><a class=\"anchor\" href=\"#测试驱动开发的口号\">#</a> 测试驱动开发的口号：</h3>\n<p>测试先行</p>\n<h3 id=\"测试驱动开发的目标\"><a class=\"anchor\" href=\"#测试驱动开发的目标\">#</a> 测试驱动开发的目标：</h3>\n<p>保证代码的简洁可用</p>\n<h3 id=\"tdd-的规则\"><a class=\"anchor\" href=\"#tdd-的规则\">#</a> TDD 的规则</h3>\n<p>在 TDD 的过程中，需要遵循两条简单的规则：</p>\n<p>仅在自动测试失败时才编写新代码。<br />\n消除重复设计（去除不必要的依赖关系），优化设计结构（逐渐使代码一般化）。</p>\n<p>第一条规则的言下之意是每次只编写刚刚好使测试通过的代码，并且只在测试运行失败的时候才编写新的代码，因为每次增加的代码少，即使有问题定位起来也非常快，确保我们可以遵循小步快跑的节奏；第二条规则就是让小步快跑更加踏实，在自动化测试的支撑下，通过重构环节消除代码的坏味道来避免代码日渐腐烂，为接下来编码打造一个舒适的环境。<br />\n关注点分离是这两条规则隐含的另一个非常重要的原则。其表达的含义指在编码阶段先达到代码 “可用” 的目标，在重构阶段再追求 “简洁” 目标，每次只关注一件事</p>\n<h3 id=\"采用-tdd-的动机\"><a class=\"anchor\" href=\"#采用-tdd-的动机\">#</a> 采用 TDD 的动机</h3>\n<p>控制编程过程中的忧虑感。</p>\n<p>有一个有趣的想象，当我感觉压力越大，自身就越不想去做足够多的测试。当知道自己做的测试不够时，就会增加自身的压力，因为我担心自己写的代码有 BUG，对自己编写的代码不够自信，这是一种心态上的变化。此时测试是开发人员的试金石，可以将对压力的恐惧变为平日的琐事，采用自动化测试，就有机会选择恐惧的程度。</p>\n<p>把控编程过程中的反馈与决策之间的差距。</p>\n<p>如果我做了一周的规划，并且量化成一个个可操作的任务写到 to-do list，然后使用测试驱动编码，把完成的任务像这样划掉，那么我的工作目标将变得非常清晰，因为我明确工期，明确待办事项，明确难点，可以在持续细微的反馈中有意识地做一些适当的调整，比如添加新的任务，删除冗余的测试；还有一点更加让人振奋，我可以知道我大概什么时候可以完工。项目经理对软件开发进度可以更精确的把握。</p>\n<p>标注：本文摘抄自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzgwOTcwOTIxOTkx\">https://juejin.cn/post/6844903780970921991</span><br />\n 感兴趣可自行进行查看</p>\n",
            "tags": [
                "开发模式",
                "开发模式"
            ]
        }
    ]
}